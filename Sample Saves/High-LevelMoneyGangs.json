{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":11088,\"hp\":10,\"max_hp\":10,\"strength\":4,\"defense\":3,\"dexterity\":6,\"agility\":3,\"charisma\":2,\"intelligence\":0,\"hacking_chance_mult\":5.150810616487218,\"hacking_speed_mult\":4.939482053673567,\"hacking_money_mult\":23.52852305013459,\"hacking_grow_mult\":5.35520806399352,\"hacking_exp\":1983082670.4484742,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":22.86071873642847,\"strength_mult\":4.345430031446902,\"defense_mult\":3.7786348099538283,\"dexterity_mult\":6.083602044025663,\"agility_mult\":3.7786348099538283,\"charisma_mult\":2.677432665338712,\"hacking_exp_mult\":17.50233434832848,\"strength_exp_mult\":2.879364708932555,\"defense_exp_mult\":2.879364708932555,\"dexterity_exp_mult\":2.879364708932555,\"agility_exp_mult\":2.879364708932555,\"charisma_exp_mult\":2.879364708932555,\"company_rep_mult\":9.041483385537006,\"faction_rep_mult\":1.8064901869204806,\"money\":35013773138003.664,\"city\":\"Sector-12\",\"location\":\"Alpha Enterprises\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"home\",\"purchasedServers\":[],\"hacknetNodes\":[],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Slum Snakes\",\"Sector-12\"],\"factionInvitations\":[\"Daedalus\"],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Embedded Netburner Module Core V3 Upgrade\"},{\"level\":1,\"name\":\"Unstable Circadian Modulator\"}],\"augmentations\":[{\"level\":1,\"name\":\"Neuregen Gene Modification\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Power Recirculation Core\"},{\"level\":1,\"name\":\"Neurotrainer III\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":11,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"BitRunners Neurolink\"},{\"level\":1,\"name\":\"OmniTek InfoLoad\"},{\"level\":1,\"name\":\"nextSENS Gene Modification\"},{\"level\":1,\"name\":\"Xanipher\"},{\"level\":1,\"name\":\"ECorp HVMind Implant\"},{\"level\":1,\"name\":\"SPTN-97 Gene Modification\"},{\"level\":1,\"name\":\"HyperSight Corneal Implant\"},{\"level\":1,\"name\":\"PC Direct-Neural Interface\"},{\"level\":1,\"name\":\"PC Direct-Neural Interface Optimization Submodule\"},{\"level\":1,\"name\":\"FocusWire\"},{\"level\":1,\"name\":\"Neuronal Densification\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"QLink\"},{\"level\":1,\"name\":\"PC Direct-Neural Interface NeuroNet Injector\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"Neural Accelerator\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Embedded Netburner Module Analyze Engine\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core V2 Upgrade\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"Artificial Bio-neural Network Implant\"}],\"sourceFiles\":[{\"lvl\":3,\"n\":1},{\"lvl\":2,\"n\":4},{\"lvl\":1,\"n\":2}],\"numPeopleKilled\":0,\"karma\":-54004.85,\"crime_money_mult\":1.7707887998271905,\"crime_success_mult\":1.7707887998271905,\"isWorking\":false,\"focus\":false,\"workType\":\"\",\"workCostMult\":20,\"workExpMult\":10,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":100,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":3000,\"work_money_mult\":1.885033238525719,\"hacknet_node_money_mult\":1.4280554837316053,\"hacknet_node_purchase_cost_mult\":0.6446435430662757,\"hacknet_node_ram_cost_mult\":0.6446435430662757,\"hacknet_node_core_cost_mult\":0.6446435430662757,\"hacknet_node_level_cost_mult\":0.6446435430662757,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":{\"ctor\":\"Gang\",\"data\":{\"facName\":\"Slum Snakes\",\"members\":[{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Train Combat\",\"earnedRespect\":0,\"hack\":28,\"str\":1431620,\"def\":487180,\"dex\":34239,\"agi\":113839,\"cha\":17,\"hack_exp\":0,\"str_exp\":1936971280.32851,\"def_exp\":760344278.0524757,\"dex_exp\":121011765.80644529,\"agi_exp\":229591286.20561072,\"cha_exp\":0,\"hack_mult\":2.2723515045000005,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797638,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010882,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":320914.3784938454,\"str_asc_points\":20487835.734266132,\"def_asc_points\":9550869.771857586,\"dex_asc_points\":3040327.225238817,\"agi_asc_points\":2820796.7665027473,\"cha_asc_points\":276905.4748287401,\"upgrades\":[\"Baseball Bat\",\"Bulletproof Vest\",\"Ford Flex V20\",\"Full Body Armor\",\"NUKE Rootkit\",\"ATX1070 Superbike\",\"Katana\",\"Mercedes-Benz S9001\",\"Glock 18C\",\"Liquid Body Armor\",\"Soulstealer Rootkit\",\"White Ferrari\",\"Graphene Plating Armor\",\"Hmap Node\",\"P90C\",\"Steyr AUG\",\"Demon Rootkit\",\"Jack the Ripper\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\"],\"augmentations\":[\"Bionic Arms\",\"Bionic Legs\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\",\"BitWire\",\"DataJack\",\"Neuralstimulator\"],\"name\":\"Instagram\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Train Combat\",\"earnedRespect\":0,\"hack\":28,\"str\":1207387,\"def\":414023,\"dex\":31829,\"agi\":100995,\"cha\":16,\"hack_exp\":0,\"str_exp\":1656397910.504817,\"def_exp\":655278578.2051249,\"dex_exp\":113475958.91345856,\"agi_exp\":206107020.76852694,\"cha_exp\":0,\"hack_mult\":2.2723515045000005,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797638,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010882,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":314332.6329305742,\"str_asc_points\":14878578.063926827,\"def_asc_points\":7044613.9238865115,\"dex_asc_points\":2654983.869044382,\"agi_asc_points\":2257520.2552341465,\"cha_asc_points\":247026.96811950457,\"upgrades\":[\"Baseball Bat\",\"Bulletproof Vest\",\"Ford Flex V20\",\"Full Body Armor\",\"NUKE Rootkit\",\"ATX1070 Superbike\",\"Katana\",\"Mercedes-Benz S9001\",\"Glock 18C\",\"Liquid Body Armor\",\"Soulstealer Rootkit\",\"White Ferrari\",\"Graphene Plating Armor\",\"Hmap Node\",\"P90C\",\"Steyr AUG\",\"Demon Rootkit\",\"Jack the Ripper\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\"],\"augmentations\":[\"Bionic Arms\",\"Bionic Legs\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\",\"BitWire\",\"DataJack\",\"Neuralstimulator\"],\"name\":\"Netflix\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Train Combat\",\"earnedRespect\":0,\"hack\":41,\"str\":1086039,\"def\":382996,\"dex\":37716,\"agi\":100776,\"cha\":23,\"hack_exp\":0,\"str_exp\":1501473759.8449864,\"def_exp\":609977248.9175873,\"dex_exp\":132908043.70893882,\"agi_exp\":205910007.4923743,\"cha_exp\":0,\"hack_mult\":2.2723515045000005,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797638,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010882,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":671920.8008511475,\"str_asc_points\":12197545.882960904,\"def_asc_points\":6090282.857340512,\"dex_asc_points\":3633809.6025175513,\"agi_asc_points\":2248050.7938884655,\"cha_asc_points\":534381.8457768863,\"upgrades\":[\"Baseball Bat\",\"Bulletproof Vest\",\"Ford Flex V20\",\"Full Body Armor\",\"NUKE Rootkit\",\"ATX1070 Superbike\",\"Katana\",\"Mercedes-Benz S9001\",\"Glock 18C\",\"Liquid Body Armor\",\"Soulstealer Rootkit\",\"White Ferrari\",\"Graphene Plating Armor\",\"Hmap Node\",\"P90C\",\"Steyr AUG\",\"Demon Rootkit\",\"Jack the Ripper\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\"],\"augmentations\":[\"Bionic Arms\",\"Bionic Legs\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\",\"BitWire\",\"DataJack\",\"Neuralstimulator\"],\"name\":\"Facebook\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Train Combat\",\"earnedRespect\":9970103.831738777,\"hack\":7308,\"str\":984084,\"def\":364443,\"dex\":40092,\"agi\":88825,\"cha\":4080,\"hack_exp\":39170.833900549915,\"str_exp\":1359799740.4122279,\"def_exp\":578430395.5060053,\"dex_exp\":139686844.40514436,\"agi_exp\":181887561.08769044,\"cha_exp\":28411.54570033384,\"hack_mult\":2.2723515045000005,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797638,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010882,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":1073119.9101301858,\"str_asc_points\":10149652.926364996,\"def_asc_points\":5556664.565738611,\"dex_asc_points\":4073398.3829213283,\"agi_asc_points\":1780560.6844634023,\"cha_asc_points\":943340.60906956,\"upgrades\":[\"Baseball Bat\",\"Bulletproof Vest\",\"Ford Flex V20\",\"Full Body Armor\",\"NUKE Rootkit\",\"ATX1070 Superbike\",\"Katana\",\"Mercedes-Benz S9001\",\"Glock 18C\",\"Liquid Body Armor\",\"Soulstealer Rootkit\",\"White Ferrari\",\"Graphene Plating Armor\",\"Hmap Node\",\"P90C\",\"Steyr AUG\",\"Demon Rootkit\",\"Jack the Ripper\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\"],\"augmentations\":[\"Bionic Arms\",\"Bionic Legs\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\",\"BitWire\",\"DataJack\",\"Neuralstimulator\"],\"name\":\"Imgur\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Train Combat\",\"earnedRespect\":0,\"hack\":47,\"str\":1584027,\"def\":544755,\"dex\":47628,\"agi\":140743,\"cha\":27,\"hack_exp\":0,\"str_exp\":2122878262.9665775,\"def_exp\":841258143.2847817,\"dex_exp\":163740886.85527366,\"agi_exp\":278709061.1894886,\"cha_exp\":0,\"hack_mult\":2.2723515045000005,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797638,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010882,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":877253.3342167287,\"str_asc_points\":24781170.252025668,\"def_asc_points\":11773421.349506281,\"dex_asc_points\":5605308.400983533,\"agi_asc_points\":4185856.5720625664,\"cha_asc_points\":729132.2771196788,\"upgrades\":[\"Baseball Bat\",\"Bulletproof Vest\",\"Ford Flex V20\",\"Full Body Armor\",\"NUKE Rootkit\",\"ATX1070 Superbike\",\"Katana\",\"Mercedes-Benz S9001\",\"Glock 18C\",\"Liquid Body Armor\",\"Soulstealer Rootkit\",\"White Ferrari\",\"Graphene Plating Armor\",\"Hmap Node\",\"P90C\",\"Steyr AUG\",\"Demon Rootkit\",\"Jack the Ripper\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\"],\"augmentations\":[\"Bionic Arms\",\"Bionic Legs\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\",\"BitWire\",\"DataJack\",\"Neuralstimulator\"],\"name\":\"Apple\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Train Combat\",\"earnedRespect\":0,\"hack\":16,\"str\":498712,\"def\":156319,\"dex\":27161,\"agi\":53261,\"cha\":12,\"hack_exp\":0,\"str_exp\":875098200.7488099,\"def_exp\":365571631.49879676,\"dex_exp\":122114078.84597057,\"agi_exp\":162459865.12817034,\"cha_exp\":0,\"hack_mult\":1.3282500000000002,\"str_mult\":8.325954,\"def_mult\":4.2697199999999995,\"dex_mult\":1.4949999999999999,\"agi_mult\":2.76,\"cha_mult\":1,\"hack_asc_points\":322071.03210392327,\"str_asc_points\":34077910.442396134,\"def_asc_points\":14435059.16670239,\"dex_asc_points\":4212898.982236186,\"agi_asc_points\":4541048.832375206,\"cha_asc_points\":295469.51003585325,\"upgrades\":[],\"augmentations\":[\"Bionic Arms\",\"Bionic Legs\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\",\"BitWire\",\"DataJack\",\"Neuralstimulator\"],\"name\":\"Microsoft\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Train Combat\",\"earnedRespect\":0,\"hack\":30,\"str\":1810608,\"def\":604275,\"dex\":44535,\"agi\":151176,\"cha\":19,\"hack_exp\":0,\"str_exp\":2409336017.244559,\"def_exp\":927899971.2172209,\"dex_exp\":154030392.6781934,\"agi_exp\":298191759.03702,\"cha_exp\":0,\"hack_mult\":2.2723515045000005,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797638,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010882,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":367049.74299840996,\"str_asc_points\":31845985.649009876,\"def_asc_points\":14290085.057886291,\"dex_asc_points\":4948653.02728833,\"agi_asc_points\":4780375.435042398,\"cha_asc_points\":359473.7516979037,\"upgrades\":[\"Baseball Bat\",\"Bulletproof Vest\",\"Ford Flex V20\",\"Full Body Armor\",\"NUKE Rootkit\",\"ATX1070 Superbike\",\"Katana\",\"Mercedes-Benz S9001\",\"Glock 18C\",\"Liquid Body Armor\",\"Soulstealer Rootkit\",\"White Ferrari\",\"Graphene Plating Armor\",\"Hmap Node\",\"P90C\",\"Steyr AUG\",\"Demon Rootkit\",\"Jack the Ripper\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\"],\"augmentations\":[\"Bionic Arms\",\"Bionic Legs\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\",\"BitWire\",\"DataJack\",\"Neuralstimulator\"],\"name\":\"GitHub\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Train Combat\",\"earnedRespect\":0,\"hack\":21,\"str\":1805597,\"def\":603638,\"dex\":40237,\"agi\":146521,\"cha\":14,\"hack_exp\":0,\"str_exp\":2408302852.4999437,\"def_exp\":928993719.847334,\"dex_exp\":140512234.42316163,\"agi_exp\":290268020.7225986,\"cha_exp\":0,\"hack_mult\":2.2723515045000005,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797638,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010882,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":172912.0605997579,\"str_asc_points\":31671739.791325256,\"def_asc_points\":14257648.890919985,\"dex_asc_points\":4099146.236726854,\"agi_asc_points\":4508783.4591384195,\"cha_asc_points\":199817.33865190836,\"upgrades\":[\"Baseball Bat\",\"Bulletproof Vest\",\"Ford Flex V20\",\"Full Body Armor\",\"NUKE Rootkit\",\"ATX1070 Superbike\",\"Katana\",\"Mercedes-Benz S9001\",\"Glock 18C\",\"Liquid Body Armor\",\"Soulstealer Rootkit\",\"White Ferrari\",\"Graphene Plating Armor\",\"Hmap Node\",\"P90C\",\"Steyr AUG\",\"Demon Rootkit\",\"Jack the Ripper\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\"],\"augmentations\":[\"Bionic Arms\",\"Bionic Legs\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\",\"BitWire\",\"DataJack\",\"Neuralstimulator\"],\"name\":\"DropBox\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Train Combat\",\"earnedRespect\":0,\"hack\":13,\"str\":1960172,\"def\":607239,\"dex\":31578,\"agi\":142574,\"cha\":9,\"hack_exp\":0,\"str_exp\":2592909201.3300176,\"def_exp\":931136864.8647349,\"dex_exp\":111924153.39474118,\"agi_exp\":282076392.797747,\"cha_exp\":0,\"hack_mult\":2.2723515045000005,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797638,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010882,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":65143.08315514612,\"str_asc_points\":36970016.0562709,\"def_asc_points\":14423642.583794095,\"dex_asc_points\":2619034.1924666543,\"agi_asc_points\":4287666.97663194,\"cha_asc_points\":82299.26558192995,\"upgrades\":[\"Baseball Bat\",\"Bulletproof Vest\",\"Ford Flex V20\",\"Full Body Armor\",\"NUKE Rootkit\",\"ATX1070 Superbike\",\"Katana\",\"Mercedes-Benz S9001\",\"Glock 18C\",\"Liquid Body Armor\",\"Soulstealer Rootkit\",\"White Ferrari\",\"Graphene Plating Armor\",\"Hmap Node\",\"P90C\",\"Steyr AUG\",\"Demon Rootkit\",\"Jack the Ripper\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\"],\"augmentations\":[\"Bionic Arms\",\"Bionic Legs\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\",\"BitWire\",\"DataJack\",\"Neuralstimulator\"],\"name\":\"Oomnitza\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Train Combat\",\"earnedRespect\":0,\"hack\":12,\"str\":1851064,\"def\":579839,\"dex\":31353,\"agi\":139675,\"cha\":9,\"hack_exp\":0,\"str_exp\":2465188350.8172565,\"def_exp\":894699937.899661,\"dex_exp\":111543674.62672003,\"agi_exp\":277637207.89287627,\"cha_exp\":0,\"hack_mult\":2.2723515045000005,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797638,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010882,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":61415.94429053229,\"str_asc_points\":33185878.0334353,\"def_asc_points\":13224551.300006924,\"dex_asc_points\":2583231.304359681,\"agi_asc_points\":4124978.698591266,\"cha_asc_points\":78417.59590324275,\"upgrades\":[\"Baseball Bat\",\"Bulletproof Vest\",\"Ford Flex V20\",\"Full Body Armor\",\"NUKE Rootkit\",\"ATX1070 Superbike\",\"Katana\",\"Mercedes-Benz S9001\",\"Glock 18C\",\"Liquid Body Armor\",\"Soulstealer Rootkit\",\"White Ferrari\",\"Graphene Plating Armor\",\"Hmap Node\",\"P90C\",\"Steyr AUG\",\"Demon Rootkit\",\"Jack the Ripper\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\"],\"augmentations\":[\"Bionic Arms\",\"Bionic Legs\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\",\"BitWire\",\"DataJack\",\"Neuralstimulator\"],\"name\":\"Google\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Train Combat\",\"earnedRespect\":0,\"hack\":6,\"str\":2255038,\"def\":703984,\"dex\":34802,\"agi\":177234,\"cha\":4,\"hack_exp\":0,\"str_exp\":2957717386.19349,\"def_exp\":1069219610.6572684,\"dex_exp\":122455637.43569559,\"agi_exp\":345357278.8115731,\"cha_exp\":0,\"hack_mult\":2.2723515045000005,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797638,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010882,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":13981.830232927194,\"str_asc_points\":48104795.183790945,\"def_asc_points\":19018739.974723734,\"dex_asc_points\":3135097.8411347345,\"agi_asc_points\":6427244.055836546,\"cha_asc_points\":16767.446639205355,\"upgrades\":[\"Baseball Bat\",\"Bulletproof Vest\",\"Ford Flex V20\",\"Full Body Armor\",\"NUKE Rootkit\",\"ATX1070 Superbike\",\"Katana\",\"Mercedes-Benz S9001\",\"Glock 18C\",\"Liquid Body Armor\",\"Soulstealer Rootkit\",\"White Ferrari\",\"Graphene Plating Armor\",\"Hmap Node\",\"P90C\",\"Steyr AUG\",\"Demon Rootkit\",\"Jack the Ripper\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\"],\"augmentations\":[\"Bionic Arms\",\"Bionic Legs\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\",\"BitWire\",\"DataJack\",\"Neuralstimulator\"],\"name\":\"WhatsApp\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Train Combat\",\"earnedRespect\":0,\"hack\":2,\"str\":2394533,\"def\":752844,\"dex\":19131,\"agi\":200738,\"cha\":1,\"hack_exp\":0,\"str_exp\":3129335218.89888,\"def_exp\":1138511234.891432,\"dex_exp\":70464118.72541672,\"agi_exp\":387805054.6906277,\"cha_exp\":0,\"hack_mult\":2.2723515045000005,\"str_mult\":29.206517322318344,\"def_mult\":15.515548794797638,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010882,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":0,\"str_asc_points\":53849192.750214115,\"def_asc_points\":21563663.73598667,\"dex_asc_points\":1038077.0309070369,\"agi_asc_points\":8104281.07075189,\"cha_asc_points\":0,\"upgrades\":[\"Baseball Bat\",\"Bulletproof Vest\",\"Ford Flex V20\",\"Full Body Armor\",\"NUKE Rootkit\",\"ATX1070 Superbike\",\"Katana\",\"Mercedes-Benz S9001\",\"Glock 18C\",\"Liquid Body Armor\",\"Soulstealer Rootkit\",\"White Ferrari\",\"Graphene Plating Armor\",\"Hmap Node\",\"P90C\",\"Steyr AUG\",\"Demon Rootkit\",\"Jack the Ripper\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\"],\"augmentations\":[\"Bionic Arms\",\"Bionic Legs\",\"Nanofiber Weave\",\"Bionic Spine\",\"Synfibril Muscle\",\"BrachiBlades\",\"Synthetic Heart\",\"Graphene Bone Lacings\",\"BitWire\",\"DataJack\",\"Neuralstimulator\"],\"name\":\"Salesforce\"}}],\"wanted\":1,\"respect\":9921737.570834639,\"isHackingGang\":false,\"respectGainRate\":0,\"wantedGainRate\":0,\"moneyGainRate\":0,\"storedCycles\":420284,\"storedTerritoryAndPowerCycles\":78,\"territoryClashChance\":0,\"territoryWarfareEngaged\":false,\"notifyMemberDeath\":true}},\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":4,\"lastUpdate\":1644442852161,\"totalPlaytime\":4291869600,\"playtimeSinceLastAug\":543168200,\"playtimeSinceLastBitnode\":688328000,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":17689356461505.473,\"hacking\":17346724375498.188,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":35013773137003.664,\"work\":0,\"servers\":0,\"other\":-5307700000,\"augmentations\":-17000000000}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-1536000,\"codingcontract\":225000000,\"corporation\":0,\"crime\":274182451.20009637,\"gang\":65975911709619.28,\"hacking\":17357485462268.041,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":36308822252641.27,\"work\":0,\"servers\":-1950120915525.607,\"other\":-11243800000,\"augmentations\":-45063707850171.266}},\"scriptProdSinceLastAug\":15105604400666.361,\"exploits\":[],\"achievements\":[{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1641776360683},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1641776360705},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1641776360713},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1641776360717},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1641776360722},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1641776360727},{\"ID\":\"SF1.1\",\"unlockedOn\":1641776360733},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1641776360738},{\"ID\":\"NS2\",\"unlockedOn\":1641776360743},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1641776360749},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1641776360754},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1641776360758},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1641776360762},{\"ID\":\"TRAVEL\",\"unlockedOn\":1641776360765},{\"ID\":\"TOR\",\"unlockedOn\":1641776360769},{\"ID\":\"4S\",\"unlockedOn\":1641776360773},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1641776960709},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1641828623180},{\"ID\":\"FROZE\",\"unlockedOn\":1641832652219},{\"ID\":\"DONATION\",\"unlockedOn\":1641850134958},{\"ID\":\"NITESEC\",\"unlockedOn\":1641850494972},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1641850494977},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1641850554968},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1641850554973},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1642090596493},{\"ID\":\"WORKOUT\",\"unlockedOn\":1642788923297},{\"ID\":\"SF4.1\",\"unlockedOn\":1643385845617},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1643385845623},{\"ID\":\"GANG\",\"unlockedOn\":1643388305625},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1643388965617},{\"ID\":\"FULL_GANG\",\"unlockedOn\":1643428925823},{\"ID\":\"GANG_MEMBER_POWER\",\"unlockedOn\":1643447105810},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1643467325817},{\"ID\":\"GANG_TERRITORY\",\"unlockedOn\":1643471645822},{\"ID\":\"FAST_BN\",\"unlockedOn\":1643524758928},{\"ID\":\"SF2.1\",\"unlockedOn\":1643525898928}],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":4,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"88.9.0.9\",\"isConnectedTo\":true,\"maxRam\":65536,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"BruteSSH.exe\",\"AutoLink.exe\",\"HTTPWorm.exe\",\"ServerProfiler.exe\",\"DeepscanV1.exe\",\"DeepscanV2.exe\",\"SQLInject.exe\",\"Formulas.exe\",\"fl1ght.exe\"],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// How much RAM each purchased server will have. In this case, it'll\\n// be 8GB.\\nvar ram = 8;\\n\\n// Iterator we'll use for our loop\\nvar i = 0;\\n\\n// Continuously try to purchase servers until we've reached the maximum\\n// amount of servers\\nwhile (i < getPurchasedServerLimit()) {\\n    // Check if we have enough money to purchase a server\\n    if (getServerMoneyAvailable(\\\"home\\\") > getPurchasedServerCost(ram)) {\\n        // If we have enough money, then:\\n        //  1. Purchase the server\\n        //  2. Copy our hacking script onto the newly-purchased server\\n        //  3. Run our hacking script on the newly-purchased server with 3 threads\\n        //  4. Increment our iterator to indicate that we've bought a new server\\n        var hostname = purchaseServer(\\\"pserv-\\\" + i, ram);\\n        scp(\\\"early-hack-template.script\\\", hostname);\\n        exec(\\\"early-hack-template.script\\\", hostname, 3);\\n        ++i;\\n    }\\n}\",\"filename\":\"/UNUSED/purchase-server-8gb.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.15,\"server\":\"home\",\"moduleSequenceNumber\":376,\"_hash\":\"1aa960f0d835f49f36658f8f4ed4b51d72dceee24c688d40bb62bf1b1c452ec7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var scriptname = args[0];\\nvar n = args[1];\\nvar destination_prefix = args[2];\\nfor (i = 0; i < n; i = i + 1) {\\n\\tscp(scriptname, destination_prefix + '-' + i);\\n\\texec(scriptname, destination_prefix + '-' + i, 3);\\n}\",\"filename\":\"/UNUSED/copyrun.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.5,\"server\":\"home\",\"moduleSequenceNumber\":377,\"_hash\":\"c91f6cffaa2201e6f883531587281a23088dc6674989718c373d5c14a787ad0d\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//if no arguments provided tell the user how to use script.\\n\\tif (ns.args.length === 0) {\\n\\t\\tns.alert(\\\"Please include one or more arguments as server names to hack. The script will propogate across all servers and grow, weaken and hack the specified targets. As you get new hacking tools, kill all scripts and rerun from home.\\\");\\n\\t\\treturn;\\n\\t}\\n\\tvar ogArgs = ns.args;\\n\\tns.toast('Running worm on ' + ns.getHostname());\\n\\tvar hostservers = ns.scan(ns.getHostname());                                                             //get all servers you can connect to\\n\\tvar scriptram = ns.getScriptRam('worm.ns', 'home');                                                      //get ram for this script\\n\\tvar hackscriptram = ns.getScriptRam('hackservers.ns', 'home');                                           //get ram for hack script\\n\\tvar avsram = ns.getServerMaxRam(ns.getHostname()) - ns.getServerUsedRam(ns.getHostname()) + scriptram;   //get available server ram for this server\\n\\tvar hsthreads = Math.floor(avsram / hackscriptram);                                                      //calculate usethreads for hack script for this server\\n\\n\\n\\tawait attackAll(hostservers, ns.getHostname());\\n\\n\\tif (hsthreads) {                                                                                          //if usethreads exists for this script, build args array of parameters based on this scripts args\\n\\t\\tvar hsargs = [];\\n\\t\\tfor (const argument of ns.args) {\\n\\t\\t\\thsargs.push(argument);\\n\\t\\t\\thsargs.push(ns.getServerMinSecurityLevel(argument));\\n\\t\\t\\thsargs.push(ns.getServerMaxMoney(argument));\\n\\t\\t\\thsargs.push(ns.getServerRequiredHackingLevel(argument));\\n\\t\\t}\\n\\t\\tif (ns.getHostname() != 'home') {                                                                       //copy hack script to this server and spawn script with threads and arguments as a single string\\n\\t\\t\\tawait ns.scp('hackservers.ns', 'home', ns.getHostname());\\n\\t\\t}\\n\\t\\tns.spawn('hackservers.ns', hsthreads, hsargs.toString());\\n\\t}\\n\\n\\n\\tasync function attack(server) {\\n\\t\\tvar hacktoolnum = 0;                                                                                   //count and use hack tools owned if you don't have root\\n\\t\\tif (!ns.hasRootAccess(server)) {\\n\\t\\t\\tns.toast('Opening ports on ' + server);\\n\\t\\t\\tif (ns.fileExists('BruteSSH.exe', 'home')) {\\n\\t\\t\\t\\tns.brutessh(server);\\n\\t\\t\\t\\thacktoolnum++;\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists('FTPCrack.exe', 'home')) {\\n\\t\\t\\t\\tns.ftpcrack(server);\\n\\t\\t\\t\\thacktoolnum++;\\n\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists('relaySMTP.exe', 'home')) {\\n\\t\\t\\t\\tns.relaysmtp(server);\\n\\t\\t\\t\\thacktoolnum++;\\n\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists('HTTPWorm.exe', 'home')) {\\n\\t\\t\\t\\tns.httpworm(server);\\n\\t\\t\\t\\thacktoolnum++;\\n\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists('SQLInject.exe', 'home')) {\\n\\t\\t\\t\\tns.sqlinject(server);\\n\\t\\t\\t\\thacktoolnum++;\\n\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif (ns.getServerNumPortsRequired(server) <= hacktoolnum && !ns.hasRootAccess(server)) {\\n\\t\\t\\tns.toast(\\\"nuking \\\" + server);\\n\\t\\t\\tns.nuke(server);\\n\\t\\t}\\n\\t\\tif (!ns.hasRootAccess(server)) {\\n\\t\\t\\tns.toast(\\\"unable to gain root to \\\" + server, \\\"error\\\");\\n\\t\\t}\\n\\t}\\n\\n\\tasync function worm(server) {\\n\\t\\t//copy WORM script to server and run\\n\\t\\tif (!ns.fileExists('worm.ns', server)) {\\n\\t\\t\\tns.print('worm.ns being copied to ' + server);\\n\\t\\t\\tawait ns.scp('worm.ns', 'home', server);\\n\\t\\t}\\n\\t\\t//if you don't see either script running on target server, run worm on it.\\n\\t\\tif (!ns.scriptRunning('worm.ns', server) && !ns.scriptRunning('hackservers.ns', server)) {\\n\\t\\t\\tns.print('running worm on ' + server);\\n\\t\\t\\tawait ns.sleep(11000);\\n\\t\\t\\tawait ns.scp('worm.ns', 'home', server);\\n\\t\\t\\tns.exec('worm.ns', server, 1, ...ogArgs);\\n\\t\\t}\\n\\t}\\n\\n\\tasync function attackAll(servers, host) {\\n\\t\\tfor (const server of servers) {\\n\\t\\t\\tawait attack(server);\\n\\t\\t\\tif (ns.getServerMaxRam(server) >= ns.getServerUsedRam(server) + scriptram) {                           //if the server has enough ram to run the worm script\\n\\t\\t\\t\\tawait worm(server);\\n\\t\\t\\t} else {                                                                                               //if server can't run script, look at servers it can connect to, gain root, and run script there\\n\\t\\t\\t\\tvar moreservs = ns.scan(server);\\n\\t\\t\\t\\tmoreservs.splice(moreservs.indexOf(host), 1);\\n\\t\\t\\t\\tawait attackAll(moreservs, server);\\n\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n}\",\"filename\":\"/UNUSED/worm.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"worm.ns\",\"url\":\"blob:file:///fd632e20-64d4-488e-8ad2-6e929a5e34be\"}],\"dependents\":[],\"ramUsage\":7.8,\"server\":\"home\",\"moduleSequenceNumber\":378,\"_hash\":\"7f8a66a3fb4bc77f0cd3372df659dba630ebf3406ba72260dc5c6d661eea071b\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n   //split single argument into multiple and instantiate arrays\\n   var myargs = ns.args[0].split(',');\\n   var servers = [];\\n   var minSecLevs = [];\\n   var maxMoneys = [];\\n   var reqHackLev = [];\\n   var counter = 0;\\n   //for each pair of 4 (1 server and its parameters)\\n   for (let i = 0; (myargs.length / 4) > i; i++) {\\n      //calculate and push to appropriate array\\n      servers.push(myargs[4 * i]);\\n      minSecLevs.push(Number(myargs[(3 * counter) + (i + 1)]));\\n      maxMoneys.push(Number(myargs[(3 * counter) + (i + 2)]));\\n      reqHackLev.push(Number(myargs[(3 * counter) + (i + 3)]));\\n      counter++;\\n   }\\n   while (true) {\\n      var count = 0;\\n      //begin hack analyze\\n      for (const server of servers) {\\n         var security = minSecLevs[count] + 5;\\n         var money = maxMoneys[count] * .75;\\n         //weaken if server is too strong\\n         ns.print(security);\\n         if (reqHackLev[count] <= ns.getHackingLevel()) {\\n            if (ns.getServerSecurityLevel(server) > security) {\\n               ns.print(\\\"weakening...\\\");\\n               await ns.weaken(server)\\n            }\\n            //grow money if not enough money\\n            else if (ns.getServerMoneyAvailable(server) < money) {\\n               ns.print(\\\"growing...\\\");\\n               await ns.grow(server);\\n            }\\n            else {\\n               //hack it\\n               ns.print(\\\"hacking...\\\");\\n               await ns.hack(server);\\n            }\\n         }\\n         count++;\\n      }\\n      await ns.sleep(1000);\\n   }\\n}\",\"filename\":\"/UNUSED/hackservers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hackservers.js\",\"url\":\"blob:file:///c3385f02-797c-4823-a9e0-67482fab8286\"}],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"home\",\"moduleSequenceNumber\":379,\"_hash\":\"8cb3e761f73a770c577cbebdaaef810873156dd2955004c13d1f31faa07e8ba5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet seenList = [];\\n\\tScanServer(ns, \\\"home\\\", seenList, 1);\\n}\\n\\nfunction ScanServer(ns, serverName, seenList, indent){\\n\\tif(seenList.includes(serverName)) return;\\n\\tseenList.push(serverName);\\n\\tvar serverList = ns.scan(serverName);\\n\\tfor(var i = 0; i < serverList.length; i++){\\n\\t\\tvar newServer = serverList[i];\\n\\t\\tif(seenList.includes(newServer)) continue;\\n\\t\\tPrintServerInfo(ns, newServer, indent)\\n\\t\\tScanServer(ns, newServer, seenList, indent + 1);\\n\\t}\\n}\\n\\nfunction PrintServerInfo(ns, serverName, indent){\\n\\tvar indentString = \\\"\\\";\\n\\tif(ns.hasRootAccess(serverName)){\\n\\t\\tindentString = \\\"▄▄▄▄\\\".repeat(indent);\\n\\t}else{\\n\\t\\tindentString = \\\"_ _ \\\".repeat(indent);\\n\\t}\\n\\tvar serverHackingLevel = ns.getServerRequiredHackingLevel(serverName);\\n\\tvar canHackIndicator = \\\"\\\";\\n\\n\\tif(ns.getHackingLevel() >= serverHackingLevel && !ns.hasRootAccess(serverName))\\n\\t\\tcanHackIndicator = \\\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\\\";\\n\\tns.tprint (indentString + serverName + \\\" (\\\" + serverHackingLevel + \\\")\\\" + canHackIndicator);\\n}\",\"filename\":\"map.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"map.js\",\"url\":\"blob:file:///d860d5e8-591d-4e12-9d7d-d1e79ed794d7\",\"moduleSequenceNumber\":314403}],\"dependents\":[],\"ramUsage\":2,\"server\":\"home\",\"moduleSequenceNumber\":380,\"_hash\":\"f3aa989500a6647fb41f7d9982307ed84363e5dc0b726613dd96ae72352a6758\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// hyperBatcher Hack script (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner\\n// Not intended for direct use; run hyperBatcher.js instead.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"/batch/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batch/weaken.js\",\"url\":\"blob:file:///7317a820-a307-4a9b-a01a-9aa36894f102\",\"moduleSequenceNumber\":361639}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":381,\"_hash\":\"990ca4f09c50c1c3abd4d19fd2d41ba6c62757e5d793e85898483b0caef3bf83\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// hyperBatcher Hack script (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner\\n// Not intended for direct use; run hyperBatcher.js instead.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let affectStocks = ns.args[2] ? ns.args[2] : false;\\n\\n    await ns.grow(ns.args[0], { stock: affectStocks });\\n}\",\"filename\":\"/batch/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batch/grow.js\",\"url\":\"blob:file:///427812bf-6161-4a66-9a3f-87f6da49f85f\",\"moduleSequenceNumber\":361640}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":382,\"_hash\":\"3c031fa2f501c8a47fa799fca3b018be09a00b47e51d15f1f4f8c198ad891079\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Finds the optimal server to hack and hacks it from all possible servers except home.\\n * Only run from home server\\n * @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar allServers = await findAllServers(ns);  // finds all servers and clones grow hack and weaken files\\n\\tvar multiarray = await findHackable(ns, allServers);    // finds and nukes optimal, hackable, and rootale servers.\\n\\tvar optimalServer = multiarray[2];\\n\\n\\tns.tprint('[STARTED] @ ' + optimalServer);\\n}\\n\\n/**\\n* Copies files in file list to all servers and returns an array of all servers\\n*/\\nasync function findAllServers(ns) {\\n\\tvar q = [];\\n\\tvar serverDiscovered = [];\\n\\n\\tq.push(\\\"home\\\");\\n\\tserverDiscovered[\\\"home\\\"] = true;\\n\\n\\twhile (q.length) {\\n\\t\\tlet v = q.shift();\\n\\n\\t\\tlet edges = ns.scan(v);\\n\\n\\t\\tfor (let i = 0; i < edges.length; i++) {\\n\\t\\t\\tif (!serverDiscovered[edges[i]]) {\\n\\t\\t\\t\\tserverDiscovered[edges[i]] = true;\\n\\t\\t\\t\\tq.push(edges[i]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Object.keys(serverDiscovered);\\n}\\n\\n/**\\n* Finds list of all hackable and all rootable servers. Also finds optimal server to hack.\\n* A hackable server is one which you can hack, grow, and weaken.\\n* A rootable server is one which you can nuke.\\n* Returns a 2d array with list of hackable, rootable, and the optimal server to hack\\n*/\\nasync function findHackable(ns, allServers) {\\n\\tvar hackableServers = [];\\n\\tvar rootableServers = [];\\n\\tvar numPortsPossible = 0;\\n\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\tnumPortsPossible += 1;\\n\\t}\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\tnumPortsPossible += 1;\\n\\t}\\n\\tif (ns.fileExists(\\\"RelaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\tnumPortsPossible += 1;\\n\\t}\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\tnumPortsPossible += 1;\\n\\t}\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\tnumPortsPossible += 1;\\n\\t}\\n\\n\\n\\tfor (let i = 0; i < allServers.length; i++) {\\n\\t\\t//if your hacking level is high enough and you can open enough ports, add it to hackable servers list\\n\\t\\tif (ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(allServers[i]) && numPortsPossible >= ns.getServerNumPortsRequired(allServers[i])) {\\n\\t\\t\\thackableServers.push(allServers[i]);\\n\\t\\t}\\n\\t\\t//if it isn't home(this makes sure that you don't kill this script) and you either \\n\\t\\t//already have root access(this is useful for servers bought by the player as you have access to those even if the security is higher than you can nuke)\\n\\t\\t//  or you can open enough ports\\n\\t\\tif (allServers[i] != \\\"home\\\" && (ns.hasRootAccess(allServers[i]) || (numPortsPossible >= ns.getServerNumPortsRequired(allServers[i])))) {\\n\\t\\t\\trootableServers.push(allServers[i]);\\n\\t\\t\\t//if you don't have root access, open ports and nuke it\\n\\t\\t\\tif (!ns.hasRootAccess(allServers[i])) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(allServers[i]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(allServers[i]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"RelaySMTP.exe\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(allServers[i]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(allServers[i]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(allServers[i]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.nuke(allServers[i]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t//finds optimal server to hack\\n\\tlet optimalServer = await findOptimal(ns, hackableServers);\\n\\n\\treturn [hackableServers, rootableServers, optimalServer];\\n}\\n\\n/** \\n * Finds the best server to hack.\\n * The algorithm works by assigning a value to each server and returning the max value server.\\n * The value is the serverMaxMoney divided by the sum of the server's weaken time, grow time, and hack time.\\n * You can easily change this function to choose a server based on whatever optimizing algorithm you want,\\n *  just return the server name to hack.\\n*/\\nasync function findOptimal(ns, hackableServers) {\\n\\tlet optimalServer = \\\"n00dles\\\";\\n\\tlet optimalVal = 0;\\n\\tlet currVal;\\n\\tlet currTime;\\n\\n\\tfor (let i = 0; i < hackableServers.length; i++) {\\n\\t\\tcurrVal = ns.getServerMaxMoney(hackableServers[i]);\\n\\t\\tcurrTime = ns.getWeakenTime(hackableServers[i]) + ns.getGrowTime(hackableServers[i]) + ns.getHackTime(hackableServers[i]);\\n\\t\\tcurrVal /= currTime;\\n\\t\\tif (currVal >= optimalVal) {\\n\\t\\t\\toptimalVal = currVal;\\n\\t\\t\\toptimalServer = hackableServers[i];\\n\\t\\t}\\n\\t}\\n\\n\\treturn optimalServer;\\n}\",\"filename\":\"locateOptimal.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"locateOptimal.js\",\"url\":\"blob:file:///29b21670-2ad3-46a7-8fbd-4e6de0eeaf8f\",\"moduleSequenceNumber\":205153}],\"dependents\":[],\"ramUsage\":2.75,\"server\":\"home\",\"moduleSequenceNumber\":383,\"_hash\":\"f4295d2294e1b8370b2d356f5f6558a1aed09145a3d172aa223152a407b74311\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"let functions = { buyNode, upgradeNodes, buyNodes, help };\\nlet maxNodeCost;\\n/*\\n * Time to get some Hacknet Nodes!\\n * You can call this script with the options\\n * buyNode - purchase and upgrade one new node\\n * upgradeNodes - upgrade your existing network to max\\n * buyNodes - buy as many nodes as you can afford\\n * help - help with the command\\n */\\nexport async function main(ns) {\\n\\tlet result;\\n\\tif (!Object.keys(functions).includes(ns.args[0])) {\\n\\t\\tresult = 'Not Found';\\n\\t\\thelp(ns);\\n\\t} else {\\n\\t\\tresult = functions[ns.args[0]](ns);\\n\\t}\\n\\tresponse(ns, ns.args[0], result);\\n}\\n\\nfunction help(ns) {\\n\\tns.tprint(\\\"This script helps you manage your Hacknet Nodes. \\\" +\\n\\t\\t\\\"You can purchase new nodes by running `run buyHacknet.js buyNode` \\\" +\\n\\t\\t\\\"or `run buyHacknet.js buyNodes`. It will purchase as many nodes as you can afford. \\\" +\\n\\t\\t\\\"You can automatically upgrade your existing hacknet nodes by running \\\" +\\n\\t\\t\\\"`run buyHacknet.js upgradeNodes`\\\");\\n\\treturn '';\\n}\\n\\nfunction response(ns, func, result) {\\n\\tswitch (func) {\\n\\t\\tcase 'buyNode':\\n\\t\\t\\tns.tprint(result ? '✔️Purchased one node' : 'You cannot afford a node.😢');\\n\\t\\t\\tbreak;\\n\\t\\tcase 'buyNodes':\\n\\t\\t\\tns.tprint(result > 0 ? `✔️Purchased ${result} nodes.` : 'You cannot afford a node.😢');\\n\\t\\t\\tbreak;\\n\\t\\tcase 'upgradeNodes':\\n\\t\\t\\tns.tprint(result ? '✔️Nodes Upgraded' : '⭐You are already upgraded as much as you can afford.');\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tif (result === 'Not Found') { ns.tprint(`${func} is not a valid option`); }\\n\\t}\\n}\\n\\nfunction buyNode(ns) {\\n\\tlet index = ns.hacknet.purchaseNode();\\n\\tif (index < 0) {\\n\\t\\treturn false;\\n\\t}\\n\\tmaxNodeCost = maxNodeCost || getMaxNodeCost(ns, index);\\n\\n\\tif (ns.getServerMoneyAvailable('home') >= maxNodeCost) {\\n\\t\\tns.hacknet.upgradeLevel(index, 200);\\n\\t\\tns.hacknet.upgradeRam(index, 6);\\n\\t\\tns.hacknet.upgradeCore(index, 16);\\n\\t} else {\\n\\t\\tupgradeNode(ns, index);\\n\\t}\\n\\treturn true;\\n}\\n\\nfunction buyNodes(ns) {\\n\\tlet purchaseNodes = true;\\n\\tlet i = 0;\\n\\twhile (purchaseNodes) {\\n\\t\\tpurchaseNodes = buyNode(ns);\\n\\t\\tif (purchaseNodes) { i++; }\\n\\t}\\n\\treturn i;\\n}\\n\\nfunction getMaxNodeCost(ns, index) {\\n\\tns.tprint('Fetching cost');\\n\\treturn ns.hacknet.getLevelUpgradeCost(index, 200) +\\n\\t\\tns.hacknet.getRamUpgradeCost(index, 6) +\\n\\t\\tns.hacknet.getCoreUpgradeCost(index, 16);\\n}\\n\\nfunction upgradeNodes(ns) {\\n\\tlet upgrade = false;\\n\\tlet nodes = ns.hacknet.numNodes();\\n\\tfor (let i = 0; i < nodes; i++) {\\n\\t\\tupgrade = upgradeNode(ns, i) || upgrade;\\n\\t}\\n\\treturn upgrade;\\n}\\n\\nfunction upgradeNode(ns, index) {\\n\\tlet level = upgradeNodePart(ns, index, 'Level', 10);\\n\\tlet node = upgradeNodePart(ns, index, 'Ram', 2);\\n\\tlet core = upgradeNodePart(ns, index, 'Core', 1);\\n\\treturn level || node || core;\\n}\\n\\nfunction upgradeNodePart(ns, nodeIndex, upgradePart, increment) {\\n\\tlet upgrade = false;\\n\\tlet costFunction = `get${upgradePart}UpgradeCost`;\\n\\tlet upgradeFunction = `upgrade${upgradePart}`;\\n\\tlet cost = ns.hacknet[costFunction](nodeIndex, increment);\\n\\twhile (isFinite(cost) && ns.getServerMoneyAvailable('home') >= cost) {\\n\\t\\tns.hacknet[upgradeFunction](nodeIndex, increment);\\n\\t\\tcost = ns.hacknet[costFunction](nodeIndex, increment);\\n\\t\\tupgrade = true;\\n\\t}\\n\\treturn upgrade;\\n}\",\"filename\":\"buyHacknet.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"buyHacknet.js\",\"url\":\"blob:file:///8d277bd6-6589-45a5-82a4-f7290c8de451\",\"moduleSequenceNumber\":933}],\"dependents\":[],\"ramUsage\":5.7,\"server\":\"home\",\"moduleSequenceNumber\":384,\"_hash\":\"a85ee026ea2f2f618c0bff63699f0770b6d8d55e7d2d12c57e213a3b5870c02a\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"let maxServers;\\nlet servers;\\n\\n/*\\n * Purchases the best server available with the\\n * user's current money. If the server limit is\\n * reached, replaces the worst server. Repeatable.\\n */\\nexport async function main(ns) {\\n\\t// Default Values\\n\\tmaxServers = ns.getPurchasedServerLimit();\\n\\tservers = ns.getPurchasedServers(true);\\n\\tserverInfo(ns);\\n\\tawait buyServers(ns);\\n}\\n\\nfunction serverInfo(ns) {\\n\\tns.tprint(`You have ${servers.length}/${maxServers} servers`);\\n\\tObject.entries(groupServers(ns)).map((ramServers) => {\\n\\t\\tns.tprint(`${ramServers[0]}GB: ${ramServers[1]}`);\\n\\t});\\n}\\n\\nfunction groupServers(ns) {\\n\\tlet groupedServers = {};\\n\\tservers.forEach((server) => {\\n\\t\\tlet ram = ns.getServerRam(server)[0];\\n\\t\\tgroupedServers[ram] = groupedServers[ram] || [];\\n\\t\\tgroupedServers[ram].push(server);\\n\\t});\\n\\treturn groupedServers;\\n}\\n\\nasync function buyServers(ns) {\\n\\tlet ram = ns.getPurchasedServerMaxRam();\\n\\tlet shopServer = true;\\n\\twhile (shopServer) {\\n\\t\\tlet myMoney = ns.getServerMoneyAvailable('home');\\n\\t\\tlet serverCost = ns.getPurchasedServerCost(ram);\\n\\t\\twhile (serverCost > myMoney && ram > 2) {\\n\\t\\t\\tram = ram / 2;\\n\\t\\t\\tserverCost = ns.getPurchasedServerCost(ram);\\n\\t\\t}\\n\\t\\tshopServer = await ns.prompt(`Would you like to buy a ${ram}GB server for ${ns.nFormat(serverCost, \\\"$0.00a\\\")}`);\\n\\t\\tif (shopServer) { shopServer = buyServer(ns, ram); }\\n\\t}\\n}\\n\\nfunction buyServer(ns, ram) {\\n\\tif (servers.length == maxServers) {\\n\\t\\tlet success = removeWeakestServer(ns, ram);\\n\\t\\tif (!success) { return false; }\\n\\t}\\n\\tlet server = ns.purchaseServer(`pserv-${ram}GB`, ram);\\n\\tservers.push(server);\\n\\tns.tprint(`Purchased ${server}: ${ram}GB`);\\n\\treturn true;\\n}\\n\\nfunction removeWeakestServer(ns, newRam) {\\n\\tlet groupedServers = groupServers(ns);\\n\\tlet min = Math.min(...Object.keys(groupedServers));\\n\\tif (min >= newRam) {\\n\\t\\tns.tprint(`Your smallest server has ${min}GB RAM and you wanted to purchase ${newRam}GB server`);\\n\\t\\treturn false;\\n\\t}\\n\\tlet smallest_server = groupedServers[min][0];\\n\\tns.killall(smallest_server);\\n\\tlet result = ns.deleteServer(smallest_server);\\n\\tservers = ns.getPurchasedServers(true);\\n\\treturn true;\\n}\",\"filename\":\"purchase-servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"purchase-servers.js\",\"url\":\"blob:file:///6ff1468c-5e79-440e-b10a-206095179cf6\",\"moduleSequenceNumber\":460238}],\"dependents\":[],\"ramUsage\":9.4,\"server\":\"home\",\"moduleSequenceNumber\":385,\"_hash\":\"fce836c9326ad63843c1b0b06dac8bf71182e84c221b95e1eff103239186ad6d\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//*********PARAMS FOR SCRIPT ************//\\n\\tvar maxSharePer = 0.45                  // maximum percent of a symbol's total stock to buy\\n\\tvar stockBuyPer = 0.6                  //  percent probablity to buy symbol\\n\\tvar stockVolPer = .03                 //   percent stock will move to buy\\n\\tvar moneyKeep = 1000000000           //    min money to keep on hand\\n\\tvar minSharePer = 5                 //     min shares to buy\\n\\tvar orderMax = 1000000000000           //      max money to spend on a single order\\n\\tvar profPer = 0.05                //       min profit percentage to sell\\n\\tvar panicPer = 0.15              //        percentage loss to panic sell at\\n\\t//******************************//\\n\\twhile (true) {\\n\\t\\tns.disableLog('disableLog');\\n\\t\\tns.disableLog('sleep');\\n\\t\\tns.disableLog('getServerMoneyAvailable')\\n\\t\\tvar stocks = ns.stock.getSymbols();\\n\\t\\tfor (const stock of stocks) {\\n\\t\\t\\tvar position = ns.stock.getPosition(stock)\\n\\t\\t\\tvar forecast = ns.stock.getForecast(stock);\\n\\t\\t\\tif (position[0]) {\\n\\t\\t\\t\\tns.print('Position: ' + stock + \\\", \\\" + position[0] + \\\" Profit: \\\" + ns.nFormat(Math.round(ns.stock.getSaleGain(stock, position[0], \\\"Long\\\") - (position[0] * position[1])), '0,0', \\\"Long\\\") + ' % ' + ns.nFormat(ns.stock.getSaleGain(stock, position[0], \\\"Long\\\") / (position[0] * position[1]), \\\"0%\\\"));\\n\\t\\t\\t\\tsellPositions(stock);\\n\\t\\t\\t}\\n\\t\\t\\tbuyPositions(stock);\\n\\n\\t\\t}\\n\\t\\tawait ns.sleep(6000);\\n\\t}\\n\\tfunction sellPositions(stock) {\\n\\t\\t//sell if only 40% chance increase\\n\\t\\tif (ns.stock.getForecast(stock) < 0.4) {\\n\\t\\t\\t//sell stock\\n\\t\\t\\tns.toast(\\\"SOLD STOCK \\\" + stock + \\\" for \\\" + ns.nFormat(Math.round(ns.stock.getSaleGain(stock, position[0], \\\"Long\\\") - (position[0] * position[1])), '0,0') + \\\" profit!\\\");\\n\\t\\t\\tns.stock.sell(stock, position[0]);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction buyPositions(stock) {\\n\\t\\tvar maxShares = (ns.stock.getMaxShares(stock) * maxSharePer) - position[0];\\n\\t\\tvar askPrice = ns.stock.getAskPrice(stock);\\n\\t\\tvar forecast = ns.stock.getForecast(stock);\\n\\t\\tvar volPer = ns.stock.getVolatility(stock);\\n\\t\\tvar minBuy = 10000000;\\n\\t\\tvar playerMoney = ns.getServerMoneyAvailable('home');\\n\\t\\t//if the stock will move positive by stockbuyper or more and it will grow stockvolper or more\\n\\t\\tif (forecast >= stockBuyPer && volPer <= stockVolPer) {\\n\\t\\t\\t//check money for one share\\n\\t\\t\\tif (playerMoney - moneyKeep > ns.stock.getPurchaseCost(stock, minSharePer, \\\"Long\\\")) {\\n\\t\\t\\t\\tvar shares = Math.min((playerMoney - moneyKeep - 100000) / askPrice, orderMax / askPrice);\\n\\t\\t\\t\\tif (shares * askPrice > minBuy) {\\n\\t\\t\\t\\t\\tns.stock.buy(stock, Math.min(shares, maxShares));\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n}\",\"filename\":\"stocks.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"stocks.js\",\"url\":\"blob:file:///d95c970e-19c8-4447-846b-b3680b6cd504\",\"moduleSequenceNumber\":440506}],\"dependents\":[],\"ramUsage\":23.7,\"server\":\"home\",\"moduleSequenceNumber\":386,\"_hash\":\"f3f5d99d7d20dd900da97f58d1de206c9cdfab0c192d8adfa6e7a17620f22125\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getSaleGain\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getVolatility\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stock.getPurchaseCost\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar q = [];\\n\\tvar serverDiscovered = [];\\n\\tvar codingContracts = new Map();\\n\\tvar file_list = [];\\n\\n\\tq.push(\\\"home\\\");\\n\\tserverDiscovered[\\\"home\\\"] = true;\\n\\n\\twhile (q.length) {\\n\\t\\tlet v = q.shift();\\n\\n\\t\\tlet edges = ns.scan(v);\\n\\n\\t\\tfor (let i = 0; i < edges.length; i++) {\\n\\t\\t\\tif (!serverDiscovered[edges[i]]) {\\n\\t\\t\\t\\tserverDiscovered[edges[i]] = true;\\n\\t\\t\\t\\t// q.push(edges[i]);\\n\\t\\t\\t\\t// await ns.scp(fileList, \\\"home\\\", edges[i]);\\n\\t\\t\\t\\tfile_list = ns.ls(edges[i], \\\"cct\\\")\\n\\t\\t\\t\\tif (file_list.length > 0) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"Found \\\" + file_list + \\\" on \\\" + edges[i]);\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n}\",\"filename\":\"/UNUSED/look_for_contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"look-for-contracts.ns\",\"url\":\"blob:file:///6c5ea00f-f458-4160-8f3b-76620f619255\",\"moduleSequenceNumber\":554335}],\"dependents\":[],\"ramUsage\":2,\"server\":\"home\",\"moduleSequenceNumber\":387,\"_hash\":\"9230e63dd20dfd7083696926f7ca087c2201364db9b2a2d30635607b661c7b3b\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { locateServer, crackServer } from \\\"utils/networkmap.js\\\";\\n\\n\\nconst factionMap = {\\n\\t\\\"CyberSec\\\": \\\"CSEC\\\",\\n\\t\\\"NiteSec\\\": \\\"avmnite-02h\\\",\\n\\t\\\"The Black Hand\\\": \\\"I.I.I.I\\\",\\n\\t\\\"BitRunners\\\": \\\"run4theh111z\\\",\\n\\t\\\"Fulcrum Secret Technologies\\\": \\\"fulcrumassets\\\",\\n}\\n\\n/**\\n * Finds the faction servers and hacks them\\n * Only run from home server\\n * @param {NS} ns \\n**/\\nexport async function main(ns) {\\n\\tif (ns.getHostname() != 'home') {\\n\\t\\tns.tprint(\\\"This script can only be run from home.\\\");\\n\\t\\treturn\\n\\t}\\n\\n\\tlet player = ns.getPlayer()\\n\\tlet my_factions = player.factions;\\n\\tns.tprint(\\\"Current factions: \\\" + my_factions.join(\\\", \\\"));\\n\\tlet my_level = player.hacking\\n\\n\\tfor (const [faction, server] of Object.entries(factionMap)) {\\n\\t\\t// Skip ones we've already joined\\n\\t\\tif (my_factions.includes(faction)) { continue }\\n\\t\\tns.tprint(\\\"Considering \\\" + faction);\\n\\t\\t//this_server is a server object\\n\\t\\t//server is a string of the current target server's name\\n\\t\\tlet this_server = ns.getServer(server);\\n\\t\\tlet req_hacking = ns.getServerRequiredHackingLevel(server);\\n\\t\\tif (my_level <= req_hacking) {\\n\\t\\t\\tns.tprint(`Oh noez, we're ${my_level} but need ${req_hacking}`);\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\t\\tlet nuked = crackServer(ns, server);\\n\\t\\tif (!nuked) {\\n\\t\\t\\tns.tprint(`Still need to open ports on ${server}!`);\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\t\\tlet map_to_server = await locateServer(ns, server);  // this will be a reverse-ordered list from home to target\\n\\t\\tns.tprint(map_to_server.join(\\\" -> \\\"));\\n\\t\\tif (!this_server.backdoorInstalled) {\\n\\t\\t\\tfor (const step of map_to_server) {\\n\\t\\t\\t\\t// ns.tprint(\\\"Connecting to: \\\" + step)\\n\\t\\t\\t\\tns.connect(step);\\n\\t\\t\\t}\\n\\t\\t\\tns.tprint(`Installing backdoor on ${server}`);\\n\\t\\t\\tawait ns.installBackdoor();\\n\\t\\t}\\n\\t}\\n\\tns.connect('home');\\n\\t// Check our faction invites\\n\\tlet invited_factions = ns.checkFactionInvitations();\\n\\tfor (const faction of invited_factions) {\\n\\t\\tif (factionMap.has(faction)) {\\n\\t\\t\\tlet did_join = ns.joinFaction(faction);\\n\\t\\t\\tif (did_join) ns.tprint(\\\"Joined \\\" + faction)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"joinFactions.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/networkmap.js\",\"url\":\"blob:file:///87cc182f-4b03-4ced-a860-d63143a0345c\",\"moduleSequenceNumber\":537358},{\"filename\":\"joinFactions.js\",\"url\":\"blob:file:///c5fa0dee-5cb1-4d84-8810-e2c569e460de\",\"moduleSequenceNumber\":537359}],\"dependents\":[],\"ramUsage\":18.05,\"server\":\"home\",\"moduleSequenceNumber\":388,\"_hash\":\"cd27b9d4b9391d5ac98862d39e83c768d55eac3aa88edb7cd6e1f4993643bb0e\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"checkFactionInvitations\",\"cost\":3},{\"type\":\"fn\",\"name\":\"joinFaction\",\"cost\":3},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\nusage: run repNeededForFavor.js Faction\\n    returns how much reputation you need in total with a faction or company to reach 150 favor.\\n\\nformula adapted from Faction.js/getFavorGain(), Company.js/getFavorGain() and Constants.js:\\n    https://github.com/danielyxie/bitburner/blob/master/src/Faction.js\\n    \\n    Originally inspired by:\\n     also available as netscript 1.0 script (running in Firefox)\\n     https://github.com/sschmidTU/BitBurnerScripts/\\n     @author sschmidTU\\n*/\\n\\nconst FAVOR_TO_DONATE = 150;\\n\\nfunction repNeededForFavor(targetFavor) {\\n\\n    let favorGain = 0;\\n    let rep = 0;\\n\\n    let ReputationToFavorBase = 500;\\n    let ReputationToFavorMult = 1.02;\\n\\n    let reqdRep = ReputationToFavorBase;\\n    while (favorGain < targetFavor) {\\n        rep += reqdRep;\\n        ++favorGain;\\n        reqdRep *= ReputationToFavorMult;\\n    }\\n\\n    return rep;\\n}\\n\\n/**\\n * Run standalone\\n * @param {NS} ns \\n**/\\nexport async function main(ns) {\\n    // let faction = ns.args[0];\\n    // ns.tprint('You need ' + calculateRepNeededForFavor(ns, faction).toLocaleString() + ' total reputation with faction ' + faction\\n    //     + ' to get to 150 favor.');\\n    let repreq = ns.args[0];\\n    ns.tprint(donationAmountForRep(ns, 'Daedalus', 2500000));\\n}\\n\\n/**\\n * Return the rep needed for 150 favor for a given faction\\n * @param {NS} ns \\n * @param {string} faction The faction you want 150 favor in \\n**/\\nexport function calculateRepNeededForFavor(ns, faction) {\\n    let startingFavor = ns.getFactionFavor(faction);\\n    if (startingFavor >= 150) {\\n        ns.tprint(\\\"Current favor is already \\\" + startingFavor);\\n        return 0\\n    }\\n    const repToFavour = (rep) => Math.ceil(25500 * 1.02 ** (rep - 1) - 25000);\\n    return Math.max(0, repNeededForFavor(FAVOR_TO_DONATE) - repToFavour(startingFavor));\\n}\\n\\n/**\\n * Work for a faction until you have enough rep to get 150 favor\\n * @param {NS} ns \\n * @param {string} faction The faction you want 150 favor in \\n * @param {boolean} donate If True, do the donation at the end\\n**/\\nexport async function workUntilDonate(ns, faction) {\\n    let started_working = false;\\n    // If we're already at 150, we're done\\n    if (ns.getFactionFavor(faction) >= FAVOR_TO_DONATE) return\\n    let rep_needed = calculateRepNeededForFavor(ns, faction)\\n    while (ns.getFactionRep(faction) < rep_needed) {\\n        //TODO: Calculate how long this will take\\n        // This intentionally stops working after a time and re-starts to update the rep\\n        started_working = ns.workForFaction(faction, \\\"Hacking Contracts\\\");\\n        await ns.sleep(60000);\\n    }\\n    // We have enough rep to buy now, stop working\\n    if (started_working) {\\n        ns.stopAction();\\n        started_working = false;\\n    }\\n}\\n\\n/**\\n * Return the amount of money needed to donate to hit a specific rep amount\\n * @param {NS} ns \\n * @param {string} faction Name of faction to calculate \\n * @param {number} repreq Amount of rep we want to reach \\n */\\nexport function donationAmountForRep(ns, faction, repreq) {\\n    // Assuming we already have 150 favor for donation\\n    let current_rep = ns.getFactionRep(faction);\\n    let faction_rep_mult = ns.getPlayer().faction_rep_mult;\\n    return Math.ceil(1e6 * (Math.max(0, repreq - current_rep) / faction_rep_mult));\\n}\",\"filename\":\"/utils/repNeededForFavor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/repNeededForFavor.js\",\"url\":\"blob:file:///5fa7d4e1-32d7-44d3-9a84-bf43ec27a54e\",\"moduleSequenceNumber\":583099}],\"dependents\":[],\"ramUsage\":8.1,\"server\":\"home\",\"moduleSequenceNumber\":389,\"_hash\":\"42bc08c7a8d43df440cc38547af8727cf8ac77ed6c55dbd835637e656c5ded1d\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getFactionFavor\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getFactionRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"workForFaction\",\"cost\":3},{\"type\":\"fn\",\"name\":\"stopAction\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { readNetworkMap } from \\\"utils/networkmap.js\\\";\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    let network_map = await readNetworkMap(ns);\\n    let contractList = [];\\n    let contracts = [];\\n    for (const server of Object.keys(network_map)) {\\n        // ns.tprint(`Server: ${server}`)\\n        contracts = ns.ls(server, \\\".cct\\\");\\n        for (const contract of contracts) {\\n            contractList.push(contract);\\n            // ns.tprint(`Contract: ${server}`)\\n            const type = ns.codingcontract.getContractType(contract, server);\\n            const data = ns.codingcontract.getData(contract, server);\\n            const didSolve = solve(type, data, server, contract, ns);\\n            ns.tprint(`${server} - ${contract} - ${type} - ${didSolve || \\\"FAILED!\\\"}`);\\n        }\\n    }\\n    ns.tprint(`Found ${contractList.length} contracts`);\\n    contracts.forEach((contract) => void ns.tprint(contract));\\n}\\n\\nfunction solve(type, data, server, contract, ns) {\\n    let solution = \\\"\\\";\\n    // ns.tprint(type);\\n    switch (type) {\\n        case \\\"Algorithmic Stock Trader I\\\":\\n            solution = maxProfit([1, data]);\\n            break;\\n        case \\\"Algorithmic Stock Trader II\\\":\\n            solution = maxProfit([Math.ceil(data.length / 2), data]);\\n            break;\\n        case \\\"Algorithmic Stock Trader III\\\":\\n            solution = maxProfit([2, data]);\\n            break;\\n        case \\\"Algorithmic Stock Trader IV\\\":\\n            solution = maxProfit(data);\\n            break;\\n        case \\\"Minimum Path Sum in a Triangle\\\":\\n            solution = solveTriangleSum(data, ns);\\n            break;\\n        case \\\"Unique Paths in a Grid I\\\":\\n            solution = uniquePathsI(data);\\n            break;\\n        case \\\"Unique Paths in a Grid II\\\":\\n            solution = uniquePathsII(data);\\n            break;\\n        case \\\"Generate IP Addresses\\\":\\n            solution = generateIps(data);\\n            break;\\n        case \\\"Find Largest Prime Factor\\\":\\n            solution = factor(data);\\n            break;\\n        case \\\"Spiralize Matrix\\\":\\n            solution = spiral(data);\\n            break;\\n        case \\\"Merge Overlapping Intervals\\\":\\n            solution = mergeOverlap(data);\\n            break;\\n        case \\\"Total Ways to Sum\\\":\\n            solution = solverWaysToSum(data);\\n            break;\\n        default:\\n            // If we can't solve it, delete it\\n            ns.tprint(`Deleting ${type} from ${server}`)\\n            ns.rm(contract, server)\\n    }\\n    return (solution != \\\"\\\") ? ns.codingcontract.attempt(solution, contract, server, [true]) : \\\"\\\";\\n}\\n\\n//ALGORITHMIC STOCK TRADER\\n\\nfunction maxProfit(arrayData) {\\n    let i, j, k;\\n\\n    let maxTrades = arrayData[0];\\n    let stockPrices = arrayData[1];\\n\\n    // WHY?\\n    let tempStr = \\\"[0\\\";\\n    for (i = 0; i < stockPrices.length; i++) {\\n        tempStr += \\\",0\\\";\\n    }\\n    tempStr += \\\"]\\\";\\n    let tempArr = \\\"[\\\" + tempStr;\\n    for (i = 0; i < maxTrades - 1; i++) {\\n        tempArr += \\\",\\\" + tempStr;\\n    }\\n    tempArr += \\\"]\\\";\\n\\n    let highestProfit = JSON.parse(tempArr);\\n\\n    for (i = 0; i < maxTrades; i++) {\\n        for (j = 0; j < stockPrices.length; j++) { // Buy / Start\\n            for (k = j; k < stockPrices.length; k++) { // Sell / End\\n                if (i > 0 && j > 0 && k > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i][k - 1], highestProfit[i - 1][j - 1] + stockPrices[k] - stockPrices[j]);\\n                } else if (i > 0 && j > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i - 1][j - 1] + stockPrices[k] - stockPrices[j]);\\n                } else if (i > 0 && k > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i][k - 1], stockPrices[k] - stockPrices[j]);\\n                } else if (j > 0 && k > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i][k - 1], stockPrices[k] - stockPrices[j]);\\n                } else {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], stockPrices[k] - stockPrices[j]);\\n                }\\n            }\\n        }\\n    }\\n    return highestProfit[maxTrades - 1][stockPrices.length - 1];\\n}\\n\\n//SMALLEST TRIANGLE SUM\\n\\nfunction solveTriangleSum(arrayData, ns) {\\n    let triangle = arrayData;\\n    let nextArray;\\n    let previousArray = triangle[0];\\n\\n    for (let i = 1; i < triangle.length; i++) {\\n        nextArray = [];\\n        for (let j = 0; j < triangle[i].length; j++) {\\n            if (j == 0) {\\n                nextArray.push(previousArray[j] + triangle[i][j]);\\n            } else if (j == triangle[i].length - 1) {\\n                nextArray.push(previousArray[j - 1] + triangle[i][j]);\\n            } else {\\n                nextArray.push(Math.min(previousArray[j], previousArray[j - 1]) + triangle[i][j]);\\n            }\\n\\n        }\\n\\n        previousArray = nextArray;\\n    }\\n\\n    return Math.min.apply(null, nextArray);\\n}\\n\\n//UNIQUE PATHS IN A GRID\\n\\nfunction uniquePathsI(grid) {\\n    const rightMoves = grid[0] - 1;\\n    const downMoves = grid[1] - 1;\\n\\n    return Math.round(factorialDivision(rightMoves + downMoves, rightMoves) / (factorial(downMoves)));\\n}\\n\\nfunction factorial(n) {\\n    return factorialDivision(n, 1);\\n}\\n\\nfunction factorialDivision(n, d) {\\n    if (n == 0 || n == 1 || n == d)\\n        return 1;\\n    return factorialDivision(n - 1, d) * n;\\n}\\n\\nfunction uniquePathsII(grid, ignoreFirst = false, ignoreLast = false) {\\n    const rightMoves = grid[0].length - 1;\\n    const downMoves = grid.length - 1;\\n\\n    let totalPossiblePaths = Math.round(factorialDivision(rightMoves + downMoves, rightMoves) / (factorial(downMoves)));\\n\\n    for (let i = 0; i < grid.length; i++) {\\n        for (let j = 0; j < grid[i].length; j++) {\\n\\n            if (grid[i][j] == 1 && (!ignoreFirst || (i != 0 || j != 0)) && (!ignoreLast || (i != grid.length - 1 || j != grid[i].length - 1))) {\\n                const newArray = [];\\n                for (let k = i; k < grid.length; k++) {\\n                    newArray.push(grid[k].slice(j, grid[i].length));\\n                }\\n\\n                let removedPaths = uniquePathsII(newArray, true, ignoreLast);\\n                removedPaths *= uniquePathsI([i + 1, j + 1]);\\n\\n                totalPossiblePaths -= removedPaths;\\n            }\\n        }\\n\\n    }\\n\\n    return totalPossiblePaths;\\n}\\n\\n//GENERATE IP ADDRESSES\\n\\nfunction generateIps(num) {\\n    num = num.toString();\\n\\n    const length = num.length;\\n\\n    const ips = [];\\n\\n    for (let i = 1; i < length - 2; i++) {\\n        for (let j = i + 1; j < length - 1; j++) {\\n            for (let k = j + 1; k < length; k++) {\\n                const ip = [\\n                    num.slice(0, i),\\n                    num.slice(i, j),\\n                    num.slice(j, k),\\n                    num.slice(k, num.length)\\n                ];\\n                let isValid = true;\\n\\n                ip.forEach(seg => {\\n                    isValid = isValid && isValidIpSegment(seg);\\n                });\\n\\n                if (isValid) ips.push(ip.join(\\\".\\\"));\\n\\n            }\\n\\n        }\\n    }\\n\\n    return ips;\\n\\n}\\n\\nfunction isValidIpSegment(segment) {\\n    if (segment[0] == \\\"0\\\" && segment != \\\"0\\\") return false;\\n    segment = Number(segment);\\n    if (segment < 0 || segment > 255) return false;\\n    return true;\\n}\\n\\n//GREATEST FACTOR\\n\\nfunction factor(num) {\\n    for (let div = 2; div <= Math.sqrt(num); div++) {\\n        if (num % div != 0) {\\n            continue;\\n        }\\n        num = num / div;\\n        div = 2;\\n    }\\n    return num;\\n}\\n\\n//SPIRALIZE Matrix\\n\\nfunction spiral(arr, accum = []) {\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat(arr.shift());\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat(column(arr, arr[0].length - 1));\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat(arr.pop().reverse());\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat(column(arr, 0).reverse());\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    return spiral(arr, accum);\\n}\\n\\nfunction column(arr, index) {\\n    const res = [];\\n    for (let i = 0; i < arr.length; i++) {\\n        const elm = arr[i].splice(index, 1)[0];\\n        if (elm) {\\n            res.push(elm);\\n        }\\n    }\\n    return res;\\n}\\n\\n// Merge Overlapping Intervals\\n\\nfunction mergeOverlap(intervals) {\\n    intervals.sort(([minA], [minB]) => minA - minB);\\n    for (let i = 0; i < intervals.length; i++) {\\n        for (let j = i + 1; j < intervals.length; j++) {\\n            const [min, max] = intervals[i];\\n            const [laterMin, laterMax] = intervals[j];\\n            if (laterMin <= max) {\\n                const newMax = laterMax > max ? laterMax : max;\\n                const newInterval = [min, newMax];\\n                intervals[i] = newInterval;\\n                intervals.splice(j, 1);\\n                j = i;\\n            }\\n        }\\n    }\\n    return intervals;\\n}\\n\\n// Total Ways To Sum\\nfunction solverWaysToSum(arrayData) {\\n    var ways = [];\\n    ways[0] = 1;\\n\\n    for (var a = 1; a <= arrayData; a++) {\\n        ways[a] = 0;\\n    }\\n\\n    for (var i = 1; i <= arrayData - 1; i++) {\\n        for (var j = i; j <= arrayData; j++) {\\n            ways[j] += ways[j - i];\\n        }\\n    }\\n\\n    return ways[arrayData];\\n}\",\"filename\":\"contractSolver.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/networkmap.js\",\"url\":\"blob:file:///58198a9a-8ce1-48ec-b39f-479547669c10\",\"moduleSequenceNumber\":537358},{\"filename\":\"contractSolver.js\",\"url\":\"blob:file:///6fb2f425-89c3-4629-b884-af4a080d7d82\",\"moduleSequenceNumber\":539246}],\"dependents\":[],\"ramUsage\":23.5,\"server\":\"home\",\"moduleSequenceNumber\":390,\"_hash\":\"666ae3291e6968d107c3581524f1f1b999dfa626f405dcc3d275d7c6dc3f6747\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"let crimes = [\\n\\t\\\"heist\\\",\\n\\t\\\"assassination\\\",\\n\\t\\\"kidnap\\\",\\n\\t\\\"grand theft auto\\\",\\n\\t\\\"homicide\\\",\\n\\t\\\"larceny\\\",\\n\\t\\\"mug someone\\\",\\n\\t\\\"rob store\\\",\\n\\t\\\"shoplift\\\",\\n];\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst flagdata = ns.flags([\\n\\t\\t[\\\"murder\\\", false],\\n\\t\\t[\\\"help\\\", false],\\n\\t])\\n\\tif (flagdata.help) {\\n\\t\\tns.tprint(\\n\\t\\t\\t`Pass in --murder to only do homicides to earn the -54k karma to start a gang.`\\n\\t\\t);\\n\\t\\treturn\\n\\t}\\n\\tif (flagdata.murder) {\\n\\t\\t// Only commit homicide for people\\n\\t\\tcrimes = [\\\"homicide\\\"];\\n\\t}\\n\\t// First, work out a bit to build up stats\\n\\tconst MIN_STAT = 30;\\n\\tconst STATS = [\\n\\t\\t\\\"strength\\\",\\n\\t\\t\\\"defense\\\",\\n\\t\\t\\\"dexterity\\\",\\n\\t\\t\\\"agility\\\",\\n\\t]\\n\\tlet me = ns.getPlayer();\\n    for (let stat of STATS) {\\n        while (me[stat] < MIN_STAT) {\\n            if (!ns.isBusy()) {\\n\\t\\t\\t\\tns.toast(\\\"Training \\\" + stat);\\n                ns.gymWorkout('Powerhouse Gym', stat, false)\\n            }\\n            await ns.sleep(100)\\n            me = ns.getPlayer()\\n        }\\n        ns.stopAction()\\n    }\\n\\t// Disable the log\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\tns.tail(); // Open a window to view the status of the script\\n\\tlet timeout = 250; // In ms - too low of a time will result in a lockout/hang\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(timeout); // Wait it out first\\n\\t\\tif (ns.isBusy()) continue;\\n\\t\\t/** Calculate the risk value of all crimes */\\n\\t\\tlet choices = crimes.map((crime) => {\\n\\t\\t\\tlet crimeStats = ns.getCrimeStats(crime); // Let us look at the important bits\\n\\t\\t\\tlet crimeChance = ns.getCrimeChance(crime); // We need to calculate if its worth it\\n\\t\\t\\t/** Using probabilty(odds) to calculate the \\\"risk\\\" to get the best reward\\n\\t\\t\\t * Risk Value = Money Earned * Odds of Success(P(A) / ~P(A)) / Time taken\\n\\t\\t\\t *\\n\\t\\t\\t * Larger risk values indicate a better choice\\n\\t\\t\\t */\\n\\t\\t\\tlet crimeRiskValue =\\n\\t\\t\\t\\t(crimeStats.money * Math.log10(crimeChance / (1 - crimeChance + Number.EPSILON))) /\\n\\t\\t\\t\\tcrimeStats.time;\\n\\t\\t\\treturn [crime, crimeRiskValue];\\n\\t\\t});\\n\\n\\t\\tlet bestCrime = choices.reduce((prev, current) => {\\n\\t\\t\\treturn prev[1] > current[1] ? prev : current;\\n\\t\\t});\\n\\n\\t\\tns.commitCrime(bestCrime[0]);\\n\\t\\tns.print(\\n\\t\\t\\t`Crime: ${bestCrime[0]} Risk Value: ${bestCrime[1].toPrecision(3)} Cash to Earn: \\\\$${ns\\n\\t\\t\\t\\t.getCrimeStats(bestCrime[0])\\n\\t\\t\\t\\t.money.toPrecision(4)}; Current karma: ${ns.heart.break()}`\\n\\t\\t);\\n\\t}\\n}\",\"filename\":\"crimeSpree.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"crimeSpree.js\",\"url\":\"blob:file:///08c12b8d-9b28-4266-b54b-f1001bfe946a\",\"moduleSequenceNumber\":610560}],\"dependents\":[],\"ramUsage\":20.6,\"server\":\"home\",\"moduleSequenceNumber\":391,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"gymWorkout\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stopAction\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getCrimeStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getCrimeChance\",\"cost\":5},{\"type\":\"fn\",\"name\":\"commitCrime\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tobtainPrograms(ns);\\n}\\n\\n/** @param {NS} ns **/\\nexport function obtainPrograms(ns) {\\n\\tconst programs = [\\n\\t\\t\\\"BruteSSH.exe\\\",\\n\\t\\t\\\"AutoLink.exe\\\",\\n\\t\\t\\\"FTPCrack.exe\\\",\\n\\t\\t\\\"relaySMTP.exe\\\",\\n\\t\\t\\\"HTTPWorm.exe\\\",\\n\\t\\t\\\"ServerProfiler.exe\\\",\\n\\t\\t\\\"DeepscanV1.exe\\\",\\n\\t\\t\\\"DeepscanV2.exe\\\",\\n\\t\\t\\\"SQLInject.exe\\\",\\n\\t\\t\\\"Formulas.exe\\\",\\n\\t];\\n\\t// First, get TOR\\n\\tns.tprint(\\\"Checking for TOR...\\\")\\n\\tlet gotTor = ns.purchaseTor();\\n\\tif (gotTor) {\\n\\t\\tns.tprint(\\\"Purchased TOR access\\\");\\n\\t}\\n\\t// Go buy shit\\n\\tfor (let program of programs) {\\n\\t\\tif (ns.ls('home', program).length > 0) continue\\n\\t\\tns.tprint(\\\"Considering \\\" + program);\\n\\t\\tlet purchased = ns.purchaseProgram(program);\\n\\t\\tif (purchased) {\\n\\t\\t\\tns.tprint(\\\"Purchased \\\" + program);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"obtainPrograms.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"obtainPrograms.js\",\"url\":\"blob:file:///31ec1f0d-86b6-4b73-9950-5a8c912cc42a\",\"moduleSequenceNumber\":367288}],\"dependents\":[],\"ramUsage\":5.8,\"server\":\"home\",\"moduleSequenceNumber\":2638,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///7617a842-57c9-457f-a4ac-99cc1ccfb93c\",\"moduleSequenceNumber\":509123}],\"dependents\":[],\"ramUsage\":4,\"server\":\"home\",\"moduleSequenceNumber\":393,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// https://github.com/InfinityBMX/bitburner-scripts/blob/master/utils.js\\n/** @param {NS} ns **/\\nconst specialHostnames = ['CSEC', 'I.I.I.I', 'avmnite-02h', 'run4theh111z'];\\nconst homeCores = 5;\\n\\nexport function output(ns) {\\n\\tns.tprint('Export called');\\n}\\n\\nexport function getHostnames(ns, findSpecial = false) {\\n\\tlet serverChecked = [];\\n\\tlet checkList = [];\\n\\tcheckList.push(\\\"home\\\");\\n\\tserverChecked[\\\"home\\\"] = true;\\n\\n\\twhile (checkList.length) {\\n\\t\\tlet server = checkList.shift();\\n\\t\\tlet edges = ns.scan(server);\\n\\t\\tif (findSpecial && specialHostnames.includes(server)) {\\n\\t\\t\\tns.tprint(`${server} found!`);\\n\\t\\t}\\n\\n\\t\\tfor (let i = 0; i < edges.length; i++) {\\n\\t\\t\\tif (!serverChecked[edges[i]]) {\\n\\t\\t\\t\\tserverChecked[edges[i]] = true;\\n\\t\\t\\t\\tcheckList.push(edges[i]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Object.keys(serverChecked);\\n}\\n\\nexport function getHostnamesWithDetails(ns) {\\n\\tconst hostnames = getHostnames(ns);\\n\\tlet servers = [];\\n\\tfor (const hostname of hostnames) {\\n\\t\\tif (hostname !== 'home' && !hostname.startsWith('pserv')) {\\n\\t\\t\\tservers.push({\\n\\t\\t\\t\\thostname,\\n\\t\\t\\t\\tsecRequired: ns.getServerRequiredHackingLevel(hostname),\\n\\t\\t\\t\\thacked: ns.hasRootAccess(hostname),\\n\\t\\t\\t\\tmaxMoney: ns.getServerMaxMoney(hostname)\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\treturn servers;\\n}\\n\\nexport function calculateGrowthThreads(ns, target, start, end) {\\n\\tif (end <= start) {\\n\\t\\treturn 0;\\n\\t}\\n\\n\\tvar threads = 1;\\n\\tvar needed = 1;\\n\\tif (start > 0)\\n\\t\\tneeded = 1 + ((end - start) / start);\\n\\telse // Probably doesn't work\\n\\t\\tneeded = 1 + ((end) / 0.01);\\n\\n\\t//    console.log(start, end, needed, threads);\\n\\twhile (ns.growthAnalyze(target, needed, ns.getServer().cpuCores) > threads) {\\n\\t\\tthreads++;\\n\\t}\\n\\treturn threads;\\n}\\n\\nexport function calculateWeakenThreads(ns, secLevel, minSecLevel) {\\n\\tif (secLevel <= minSecLevel) {\\n\\t\\treturn 0;\\n\\t}\\n\\n\\tvar threads = 1\\n\\tvar needed = secLevel - minSecLevel;\\n\\t//    console.log('calcWeaken: ', secLevel, minSecLevel, needed);\\n\\twhile (ns.weakenAnalyze(threads, ns.getServer().cpuCores) < needed) { threads++; }\\n\\treturn threads;\\n}\\n\\nexport function calculateHackThreads(ns, hostname, percent) {\\n\\t//console.log('Percent: ', percent );\\n\\tconst perThread = ns.hackAnalyze(hostname);\\n\\t//console.log('Per thread: ', perThread, ' Total: ', Math.floor(percent/perThread));\\n\\treturn Math.floor(percent / perThread);\\n}\\n\\nexport function getUsefulServerInfo(ns, hostname) {\\n\\tconst maxMoney = ns.getServerMaxMoney(hostname);\\n\\tconst currentMoney = ns.getServerMoneyAvailable(hostname);\\n\\tconst minSecurity = ns.getServerMinSecurityLevel(hostname);\\n\\tconst currentSecurity = ns.getServerSecurityLevel(hostname);\\n\\treturn {\\n\\t\\tmaxMoney,\\n\\t\\tcurrentMoney,\\n\\t\\tminSecurity,\\n\\t\\tcurrentSecurity\\n\\t};\\n}\\n\\nexport function getTimingsForHostname(ns, hostname) {\\n\\tconst hackTime = Math.ceil(ns.getHackTime(hostname));\\n\\tconst weakTime = Math.ceil(ns.getWeakenTime(hostname));\\n\\tconst growTime = Math.ceil(ns.getGrowTime(hostname));\\n\\tconst timing = Math.max(Math.ceil(hackTime / 5000) * 5000, Math.ceil(weakTime / 5000) * 5000, Math.ceil(growTime / 5000) * 5000) + 2000;\\n\\t//ns.tprint(`Timing for ${hostname} is ${timing} based on ${hackTime} hack, ${weakTime} weak and ${growTime} grow.`);\\n\\treturn {\\n\\t\\ttiming,\\n\\t\\thackTime,\\n\\t\\tgrowTime,\\n\\t\\tweakTime\\n\\t};\\n}\\n\\nexport async function backdoorServer(ns, hostname) {\\n\\tlet serverChecked = {};\\n\\tlet checkList = [];\\n\\tlet found = false;\\n\\tcheckList.push(\\\"home\\\");\\n\\tserverChecked[\\\"home\\\"] = { parent: null };\\n\\n\\n\\twhile (checkList.length && !found) {\\n\\t\\tconst server = checkList.shift();\\n\\t\\t// Build the tree from home while looking for the target\\n\\t\\t// Once found, move to backdooring\\n\\t\\tif (hostname === server) {\\n\\t\\t\\tfound = true;\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\t// Scan server and add all edges\\n\\t\\tlet edges = ns.scan(server);\\n\\t\\tfor (let i = 0; i < edges.length; i++) {\\n\\t\\t\\tif (!serverChecked[edges[i]]) {\\n\\t\\t\\t\\tserverChecked[edges[i]] = { parent: server };\\n\\t\\t\\t\\tcheckList.push(edges[i]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tif (found) {\\n\\t\\tlet path = [];\\n\\t\\tpath.push(hostname);\\n\\t\\tlet next = serverChecked[hostname].parent;\\n\\t\\twhile (next) {\\n\\t\\t\\tpath.push(next);\\n\\t\\t\\tnext = serverChecked[next].parent;\\n\\t\\t}\\n\\t\\tpath.reverse();\\n\\t\\tfor (const server of path) {\\n\\t\\t\\tns.connect(server);\\n\\t\\t\\tif (server === hostname) {\\n\\t\\t\\t\\tawait ns.installBackdoor();\\n\\t\\t\\t\\tns.tprint(`Backdoor installed on ${hostname}`);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Get back home\\n\\t\\tpath.reverse();\\n\\t\\tfor (const server of path) {\\n\\t\\t\\tns.connect(server);\\n\\t\\t}\\n\\t} else { // If we ran out of edges without finding the server, we're done\\n\\t\\tns.tprint(`Path to ${hostname} not found.`);\\n\\t}\\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":11.5,\"server\":\"home\",\"moduleSequenceNumber\":394,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, getNsDataThroughFile, getActiveSourceFiles, runCommand, tryGetBitNodeMultipliers } from './helpers.js'\\n\\n// Global constants\\nconst updateInterval = 200;\\nconst maxSpendPerTickTransientEquipment = 0.01;\\nconst maxSpendPerTickPermanentEquipment = 0.5; // Spend up to this percent of non-reserved cash on permanent member upgrades\\nconst wantedPenaltyThreshold = 0.0001; // Don't let the wanted penalty get worse than this\\n\\n// Territory-related variables\\nconst gangsByPower = [\\\"Speakers for the Dead\\\", \\\"The Dark Army\\\", \\\"The Syndicate\\\", \\\"Slum Snakes\\\", /* Hack gangs don't scale as far */ \\\"The Black Hand\\\", /* \\\"NiteSec\\\" Been there, not fun. */]\\nconst territoryEngageThreshold = 0.70; // Minimum average win chance (of gangs with territory) before we engage other clans\\nlet territoryTickDetected = false;\\nlet territoryTickTime = 20000; // Est. milliseconds until territory *ticks*. Can vary if processing offline time\\nlet territoryNextTick = null; // The next time territory will tick\\nlet isReadyForNextTerritoryTick = false;\\nlet warfareFinished = false;\\nlet lastTerritoryPower = 0;\\nlet lastOtherGangInfo = null;\\n\\n// Crime activity-related variables TODO all tasks list to evaluate\\nconst crimes = [\\\"Mug People\\\", \\\"Deal Drugs\\\", \\\"Strongarm Civilians\\\", \\\"Run a Con\\\", \\\"Armed Robbery\\\", \\\"Traffick Illegal Arms\\\", \\\"Threaten & Blackmail\\\", \\\"Human Trafficking\\\", \\\"Terrorism\\\",\\n    \\\"Ransomware\\\", \\\"Phishing\\\", \\\"Identity Theft\\\", \\\"DDoS Attacks\\\", \\\"Plant Virus\\\", \\\"Fraud & Counterfeiting\\\", \\\"Money Laundering\\\", \\\"Cyberterrorism\\\"];\\nlet pctTraining = 0.20;\\nlet multGangSoftcap;\\nlet allTaskNames;\\nlet allTaskStats;\\nlet assignedTasks = {}; // Each member will independently attempt to scale up the crime they perform until they are ineffective or we start generating wanted levels\\nlet lastMemberReset = {}; // Tracks when each member last ascended\\n\\n// Global state\\nlet ownedSourceFiles;\\nlet myGangFaction = \\\"\\\";\\nlet isHackGang = false;\\nlet requiredRep = 0;\\nlet myGangMembers = [];\\nlet equipments = [];\\nlet importantStats = [];\\n\\nlet options;\\nconst argsSchema = [\\n    ['training-percentage', 0.20], // Spend this percent of time training gang members versus doing crime\\n    ['no-training', false], // Don't train unless all other tasks generate no gains\\n    ['no-auto-ascending', false], // Don't ascend members\\n    ['ascend-multi-threshold', 1.05], // Ascend member #12 if a primary stat multi would increase by more than this amount\\n    ['ascend-multi-threshold-spacing', 0.05], // Members will space their acention multis by this amount to ensure they are ascending at different rates \\n    // Note: given the above two defaults, members would ascend at multis [1.6, 1.55, 1.50, ..., 1.1, 1.05] once you have 12 members.\\n    ['min-training-ticks', 20], // Require this many ticks of training after ascending or recruiting\\n];\\n\\nexport function autocomplete(data, _) {\\n    data.flags(argsSchema);\\n    return [];\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ownedSourceFiles = await getActiveSourceFiles(ns);\\n    const sf2Level = ownedSourceFiles[2] || 0;\\n    if (sf2Level == 0)\\n        return log(ns, \\\"ERROR: You have no yet unlocked gangs. Script should not be run...\\\");\\n\\n    await initialize(ns);\\n    log(ns, \\\"Starting main loop...\\\");\\n    while (true) {\\n        try { await mainLoop(ns); }\\n        catch (err) { log(ns, `ERROR: Caught an unhandled error in the main loop: ${String(err)}`, 'error', true); }\\n        await ns.sleep(updateInterval);\\n    }\\n}\\n\\n/** @param {NS} ns \\n * One-time setup actions. **/\\nasync function initialize(ns) {\\n    ns.disableLog('ALL');\\n    options = ns.flags(argsSchema);\\n    pctTraining = options['no-training'] ? 0 : options['training-percentage'];\\n\\n    let loggedWaiting = false;\\n    while (!(await getNsDataThroughFile(ns, 'ns.gang.inGang()', '/Temp/player-gang-joined.txt'))) {\\n        if (!loggedWaiting) {\\n            log(ns, `Waiting to be in a gang. Will create the highest faction gang as soon as it is available...`);\\n            loggedWaiting = true;\\n        }\\n        await runCommand(ns, `${JSON.stringify(gangsByPower)}.forEach(g => ns.gang.createGang(g))`, '/Temp/gang-createGang.js');\\n        await ns.sleep(1000); // Wait for our human to join a gang\\n    }\\n    log(ns, \\\"Collecting gang information...\\\");\\n    const myGangInfo = ns.gang.getGangInformation(); //await getNsDataThroughFile(ns, 'ns.gang.getGangInformation()', '/Temp/gang-info.txt');\\n    myGangFaction = myGangInfo.faction;\\n    if (loggedWaiting) log(ns, `SUCCESS: Created gang ${myGangFaction}`, 'success', true);\\n    isHackGang = myGangInfo.isHacking;\\n    importantStats = isHackGang ? [\\\"hack\\\"] : [\\\"str\\\", \\\"def\\\", \\\"dex\\\", \\\"agi\\\"];\\n    lastTerritoryPower = myGangInfo.power;\\n    territoryNextTick = Date.now() + territoryTickTime; // Expect to miss be \\\"caught unaware\\\" by the first territory tick\\n    territoryTickDetected = isReadyForNextTerritoryTick = warfareFinished = false;\\n    lastOtherGangInfo = null;\\n\\n    // If possible, determine how much rep we would need to get the most expensive unowned augmentation\\n    const sf4Level = ownedSourceFiles[4] || 0;\\n    requiredRep = -1;\\n    if (sf4Level == 0)\\n        log(ns, `INFO: SF4 required to get gang augmentation info. Defaulting to assuming ~2.5 million rep is desired.`);\\n    else {\\n        try {\\n            if (sf4Level < 3)\\n                log(ns, `WARNING: This script makes heavy use of singularity functions, which are quite expensive before you have SF4.3. ` +\\n                    `Unless you have a lot of free RAM for temporary scripts, you may get runtime errors.`);\\n            const augmentationNames = await getNsDataThroughFile(ns, `ns.getAugmentationsFromFaction('${myGangFaction}')`, '/Temp/gang-augs.txt');\\n            const ownedAugmentations = await getNsDataThroughFile(ns, `ns.getOwnedAugmentations(true)`, '/Temp/player-augs-purchased.txt');\\n            const dictAugRepReqs = await getDict(ns, augmentationNames, 'getAugmentationRepReq', '/Temp/aug-repreqs.txt');\\n            // Due to a bug, gangs appear to provide \\\"The Red Pill\\\" even when it's unavailable (outside of BN2), so ignore this one.\\n            requiredRep = augmentationNames.filter(aug => !ownedAugmentations.includes(aug) && aug != \\\"The Red Pill\\\").reduce((max, aug) => Math.max(max, dictAugRepReqs[aug]), -1);\\n            log(ns, `Highest augmentation reputation cost is ${formatNumberShort(requiredRep)}`);\\n        } catch {\\n            log(ns, `WARNING: Failed to get augmentation info despite having SF4.${sf4Level}. This may be due to you having insufficient RAM to launch the temporary scripts. ` +\\n                `Proceeding with the default assumption that ~2.5 million rep is desired.`);\\n        }\\n    }\\n    if (requiredRep == -1)\\n        requiredRep = 2.5e6\\n\\n    // Initialize equipment information\\n    const equipmentNames = await getNsDataThroughFile(ns, 'ns.gang.getEquipmentNames()', '/Temp/gang-equipment-names.txt');\\n    const dictEquipmentTypes = await getGangInfoDict(ns, equipmentNames, 'getEquipmentType');\\n    const dictEquipmentCosts = await getGangInfoDict(ns, equipmentNames, 'getEquipmentCost');\\n    const dictEquipmentStats = await getGangInfoDict(ns, equipmentNames, 'getEquipmentStats');\\n    equipments = equipmentNames.map((equipmentName) => ({\\n        name: equipmentName,\\n        type: dictEquipmentTypes[equipmentName],\\n        cost: dictEquipmentCosts[equipmentName],\\n        stats: dictEquipmentStats[equipmentName],\\n    })).sort((a, b) => a.cost - b.cost);\\n    //log(ns, JSON.stringify(equipments));\\n    // Initialize information about gang members and crimes\\n    allTaskNames = await getNsDataThroughFile(ns, 'ns.gang.getTaskNames()', '/Temp/gang-task-names.txt')\\n    allTaskStats = await getGangInfoDict(ns, allTaskNames, 'getTaskStats');\\n    multGangSoftcap = (await tryGetBitNodeMultipliers(ns))?.GangSoftcap || 1;\\n    myGangMembers = await getNsDataThroughFile(ns, 'ns.gang.getMemberNames()', '/Temp/gang-member-names.txt');\\n    const dictMembers = await getGangInfoDict(ns, myGangMembers, 'getMemberInformation');\\n    for (const member of Object.values(dictMembers)) // Initialize the current activity of each member\\n        assignedTasks[member.name] = (member.task && member.task !== \\\"Unassigned\\\") ? member.task : (\\\"Train \\\" + (isHackGang ? \\\"Hacking\\\" : \\\"Combat\\\"));\\n    while (myGangMembers.length < 3) await doRecruitMember(ns); // We should be able to recruit our first three members immediately (for free)\\n    await optimizeGangCrime(ns, myGangInfo);\\n}\\n\\n/** @param {NS} ns \\n * Executed every `interval` **/\\nasync function mainLoop(ns) {\\n    // Update gang information (specifically monitoring gang power to see when territory ticks)\\n    const myGangInfo = ns.gang.getGangInformation(); //await getNsDataThroughFile(ns, 'ns.gang.getGangInformation()', '/Temp/gang-info.txt');\\n    // If territory is about to tick, quick - set everyone to do \\\"territory warfare\\\"!\\n    if (!isReadyForNextTerritoryTick && territoryTickDetected && (Date.now() + updateInterval >= territoryNextTick)) {\\n        isReadyForNextTerritoryTick = true;\\n        await updateMemberActivities(ns, null, \\\"Territory Warfare\\\");\\n    } else if (!territoryTickDetected) { // Detect the first territory tick by watching for other gang's territory power to update.\\n        const otherGangInfo = await getNsDataThroughFile(ns, 'ns.gang.getOtherGangInformation()', '/Temp/gang-other-gang-info.txt'); // Returns dict of { [gangName]: { \\\"power\\\": Number, \\\"territory\\\": Number } }\\n        if (lastOtherGangInfo != null && Object.keys(otherGangInfo).some(g => otherGangInfo[g].power != lastOtherGangInfo[g].power)) {\\n            territoryNextTick = Date.now() - updateInterval;\\n            territoryTickDetected = true;\\n        }\\n        lastOtherGangInfo = otherGangInfo;\\n    }\\n    // Detect if territory power has been updated in the last tick (or if we have no power, assume it has ticked and we just haven't generated power yet)\\n    if ((isReadyForNextTerritoryTick && myGangInfo.power != lastTerritoryPower) || (Date.now() > territoryNextTick + 5 * updateInterval)) {\\n        await onTerritoryTick(ns, myGangInfo); //Do most things only once per territory tick\\n        lastTerritoryPower = myGangInfo.power;\\n    }\\n}\\n\\n/** @param {NS} ns \\n * Do some things only once per territory tick **/\\nasync function onTerritoryTick(ns, myGangInfo) {\\n    territoryNextTick = Date.now() - updateInterval + territoryTickTime; // Reset the time the next tick will occur\\n    if (lastTerritoryPower != myGangInfo.power)\\n        log(ns, `Territory power updated from ${formatNumberShort(lastTerritoryPower)} to ${formatNumberShort(myGangInfo.power)}.`)\\n    if (!isReadyForNextTerritoryTick) log(ns, `WARNING: Territory tick happend before we were ready!`, 'warning');\\n    if (!warfareFinished) // Once we hit 100% territory, there's no need to keep swapping members to warfare\\n        isReadyForNextTerritoryTick = false;\\n\\n    // Update gang members in case someone died in a clash\\n    myGangMembers = await getNsDataThroughFile(ns, 'ns.gang.getMemberNames()', '/Temp/gang-member-names.txt');\\n    const nextMemberCost = Math.pow(5, myGangMembers.length - (3 /*numFreeMembers*/ - 1));\\n    if (myGangMembers.length < 12 /* Game Max */ && myGangInfo.respect * 0.75 > nextMemberCost) // Don't spend more than 75% of our respect on new members.\\n        await doRecruitMember(ns) // Recruit new members if available\\n    const dictMembers = await getGangInfoDict(ns, myGangMembers, 'getMemberInformation');\\n    if (!options['no-auto-ascending']) await tryAscendMembers(ns); // Ascend members if we deem it a good time\\n    await tryUpgradeMembers(ns, dictMembers); // Upgrade members if possible\\n    await enableOrDisableWarfare(ns, myGangInfo); // Update whether we should be participating in gang warfare\\n    // There's a chance we do training instead of work for this next tick. If training, we primarily train our main stat, with a small chance to train less-important stats\\n    const task = Math.random() >= pctTraining ? null : \\\"Train \\\" + (Math.random() < 0.1 ? \\\"Charisma\\\" : Math.random() < (isHackGang ? 0.1 : 0.9) ? \\\"Combat\\\" : \\\"Hacking\\\")\\n    await updateMemberActivities(ns, dictMembers, task); // Set everyone working on the next activity\\n    if (!task) await optimizeGangCrime(ns, await waitForGameUpdate(ns, myGangInfo));  // Finally, see if we can improve rep gain rates by micro-optimizing individual member crimes\\n}\\n\\n/** @param {NS} ns \\n * Consolidated logic for telling members what to do **/\\nasync function updateMemberActivities(ns, dictMemberInfo = null, forceTask = null) {\\n    const dictMembers = dictMemberInfo || (await getGangInfoDict(ns, myGangMembers, 'getMemberInformation'));\\n    const workOrders = [];\\n    for (const member of Object.values(dictMembers)) { // Set the desired activity of each member\\n        let task = forceTask ? forceTask : assignedTasks[member.name];\\n        if (member.task != task) workOrders.push({ name: member.name, task }); // Only bother with the API call if this isn't their current task\\n    }\\n    if (workOrders.length == 0) return;\\n    // Set the activities in bulk using a ram-dodging script\\n    if (await getNsDataThroughFile(ns, `${JSON.stringify(workOrders)}.reduce((success, m) => success && ns.gang.setMemberTask(m.name, m.task), true)`, '/Temp/gang-set-member-tasks.txt'))\\n        log(ns, `INFO: Assigned ${workOrders.length} gang member tasks! (${workOrders.map(o => o.task).filter((v, i, self) => self.indexOf(v) === i).join(\\\", \\\")})`)\\n    else\\n        log(ns, `ERROR: Failed to set member task of one or more members: ` + JSON.stringify(workOrders), 'error');\\n}\\n\\n/** @param {NS} ns \\n * Logic to assign tasks that maximize rep gain rate without wanted gain getting out of control **/\\nasync function optimizeGangCrime(ns, myGangInfo) {\\n    const dictMembers = await getGangInfoDict(ns, myGangMembers, 'getMemberInformation');\\n    // Tolerate our wanted level increasing, as long as reputation increases several orders of magnitude faster and we do not currently have a penalty more than -0.01%\\n    let currentWantedPenalty = getWantedPenalty(myGangInfo) - 1;\\n    // Note, until we have ~200 respect, the best way to recover from wanted penalty is to focus on gaining respect, rather than doing vigilante work.\\n    let wantedGainTolerance = currentWantedPenalty < -1.1 * wantedPenaltyThreshold && myGangInfo.wantedLevel >= (1.1 + myGangInfo.respect / 1000) &&\\n        myGangInfo.respect > 200 ? -0.01 * myGangInfo.wantedLevel /* Recover from wanted penalty */ :\\n        currentWantedPenalty < -0.9 * wantedPenaltyThreshold && myGangInfo.wantedLevel >= (1.1 + myGangInfo.respect / 10000) ? 0 /* Sustain */ :\\n            Math.max(myGangInfo.respectGainRate / 1000, myGangInfo.wantedLevel / 10) /* Allow wanted to increase at a manageable rate */;\\n    const playerData = await getNsDataThroughFile(ns, 'ns.getPlayer()', '/Temp/player-info.txt');\\n    // Find out how much reputation we need, without SF4, we estimate gang faction rep based on current gang rep\\n    let factionRep = -1;\\n    if (ownedSourceFiles[4] > 0) {\\n        try { factionRep = await getNsDataThroughFile(ns, `ns.getFactionRep('${myGangFaction}')`, `/Temp/gang-faction-rep.txt`); }\\n        catch { log(ns, 'INFO: Error suppressed. Falling back to estimating current gang faction rep.'); }\\n    }\\n    if (factionRep == -1) // Estimate current gang rep based on respect. Game gives 1/75 rep / respect. This is an underestimate, because it doesn't take into account spent/lost respect on ascend/recruit/death. \\n        factionRep = myGangInfo.respect / 75;\\n    const optStat = factionRep > requiredRep ? \\\"money\\\" : (playerData.money > 1E11 || myGangInfo.respect) < 9000 ? \\\"respect\\\" : \\\"both money and respect\\\"; // Change priority based on achieved rep/money\\n    // Pre-compute how every gang member will perform at every task\\n    const memberTaskRates = Object.fromEntries(Object.values(dictMembers).map(m => [m.name, allTaskNames.map(taskName => ({\\n        name: taskName,\\n        respect: computeRepGains(myGangInfo, taskName, m),\\n        money: calculateMoneyGains(myGangInfo, taskName, m),\\n        wanted: computeWantedGains(myGangInfo, taskName, m),\\n    })).filter(task => task.wanted <= 0 || task.money > 0 || task.respect > 0)])); // Completely remove tasks that offer no gains, but would generate wanted levels\\n    // Sort tasks by best gain rate\\n    if (optStat == \\\"both money and respect\\\") {\\n        Object.values(memberTaskRates).flat().forEach(v => v[optStat] = v.money / 1000 + v.respect); // Hack to support a \\\"optimized total\\\" stat when trying to balance both money and wanted\\n        Object.values(memberTaskRates).forEach((tasks, idx) => tasks.sort((a, b) => idx % 2 == 0 ? b.respect - a.respect : b.money - a.money)); // Hack: Even members prioritize respect, odd money\\n    } else {\\n        Object.values(memberTaskRates).forEach(tasks => tasks.sort((a, b) => b[optStat] - a[optStat]));\\n    }\\n    //ns.print(memberTaskRates);\\n\\n    // Run \\\"the algorithm\\\"\\n    const start = Date.now(); // Time the algorithms\\n    let bestTaskAssignments = null, bestWanted = 0;\\n    let bestTotalGain = myGangInfo.wantedLevelGainRate > wantedGainTolerance ? 0 : // Forget our past achievements, we're gaining wanted levels too fast right now\\n        optStat == \\\"respect\\\" ? myGangInfo.respectGainRate : myGangInfo.moneyGainRate; // Must do better than the current gain rate if it's within our wanted threshold\\n    for (let shuffle = 0; shuffle < 1000; shuffle++) { // We can discover more optimal results by greedy-optimizing gang members in a different order. Try a few.\\n        let proposedTasks = {}, totalWanted = 0, totalGain = 0;\\n        shuffleArray(myGangMembers.slice()).forEach((member, index) => {\\n            const taskRates = memberTaskRates[member];\\n            // \\\"Greedy\\\" optimize one member at a time, but as we near the end of the list, we can no longer expect future members to make for wanted increases\\n            const sustainableTasks = (index < myGangMembers.length - 2) ? taskRates : taskRates.filter(c => (totalWanted + c.wanted) <= wantedGainTolerance);\\n            // Find the crime with the best gain (If we can't generate value for any tasks, then we should only be training)\\n            const bestTask = taskRates[0][optStat] == 0 || (Date.now() - (lastMemberReset[member] || 0) < options['min-training-ticks'] * territoryTickTime) ?\\n                taskRates.find(t => t.name === (\\\"Train \\\" + (isHackGang ? \\\"Hacking\\\" : \\\"Combat\\\"))) :\\n                (totalWanted > wantedGainTolerance || sustainableTasks.length == 0) ? taskRates.find(t => t.name === \\\"Vigilante Justice\\\") : sustainableTasks[0];\\n            [proposedTasks[member], totalWanted, totalGain] = [bestTask, totalWanted + bestTask.wanted, totalGain + bestTask[optStat]];\\n        });\\n        // Following the above attempted optimization, if we're above our wanted gain threshold, downgrade the task of the greatest generators of wanted until within our limit\\n        let infiniteLoop = 9999;\\n        while (totalWanted > wantedGainTolerance && Object.values(proposedTasks).some(t => t.name !== \\\"Vigilante Justice\\\")) {\\n            const mostWanted = Object.keys(proposedTasks).reduce((t, c) => proposedTasks[c].name !== \\\"Vigilante Justice\\\" && (t == null || proposedTasks[t].wanted < proposedTasks[c].wanted) ? c : t, null);\\n            const nextBestTask = memberTaskRates[mostWanted].filter(c => c.wanted < proposedTasks[mostWanted].wanted)[0] ?? memberTaskRates[mostWanted].find(t => t.name === \\\"Vigilante Justice\\\");\\n            [proposedTasks[mostWanted], totalWanted, totalGain] = [nextBestTask, totalWanted + nextBestTask.wanted - proposedTasks[mostWanted].wanted, totalGain + nextBestTask[optStat] - proposedTasks[mostWanted][optStat]];\\n            if (infiniteLoop-- <= 0) throw \\\"Infinite Loop!\\\";\\n        }\\n        //log(ns, `Optimal task assignments:. Wanted: ${totalWanted.toPrecision(3)}, Gain: ${formatNumberShort(totalGain)}`);\\n        // Save the new new task assignments only if it's the best gain result we've seen for the value we're trying to optimize, or the closest we've come to meeting our wanted tolerance\\n        if (totalWanted <= wantedGainTolerance && totalGain > bestTotalGain || totalWanted > wantedGainTolerance && totalWanted < bestWanted)\\n            [bestTaskAssignments, bestTotalGain, bestWanted] = [proposedTasks, totalGain, totalWanted];\\n    }\\n    const elapsed = Date.now() - start;\\n    // Determine whether any changes need to be made\\n    if (bestTaskAssignments != null && myGangMembers.some(m => assignedTasks[m] !== bestTaskAssignments[m].name)) {\\n        myGangMembers.forEach(m => assignedTasks[m] = bestTaskAssignments[m].name); // Update work orders for all members\\n        const oldGangInfo = myGangInfo;\\n        await updateMemberActivities(ns, dictMembers);\\n        const [optWanted, optRespect, optMoney] = myGangMembers.map(m => assignedTasks[m]).reduce(([w, r, m], t) => [w + t.wanted, r + t.respect, m + t.money], [0, 0, 0]);\\n        if (optWanted != oldGangInfo.wantedLevelGainRate || optRespect != oldGangInfo.respectGainRate || optMoney != oldGangInfo.moneyGainRate)\\n            myGangInfo = await waitForGameUpdate(ns, oldGangInfo);\\n        log(ns, `SUCCESS: Optimized gang member crimes for ${optStat} with wanted gain tolerance ${wantedGainTolerance.toPrecision(2)} (${elapsed} ms). ` +\\n            `Wanted: ${oldGangInfo.wantedLevelGainRate.toPrecision(3)} -> ${myGangInfo.wantedLevelGainRate.toPrecision(3)}, ` +\\n            `Rep: ${formatNumberShort(oldGangInfo.respectGainRate)} -> ${formatNumberShort(myGangInfo.respectGainRate)}, Money: ${formatMoney(oldGangInfo.moneyGainRate)} -> ${formatMoney(myGangInfo.moneyGainRate)}`);\\n        // Sanity check that our calculations (which we stole from game source code) are about right\\n        if ((Math.abs(myGangInfo.wantedLevelGainRate - optWanted) / optWanted > 0.01) || (Math.abs(myGangInfo.respectGainRate - optRespect) / optRespect > 0.01) || (Math.abs(myGangInfo.moneyGainRate - optMoney) / optMoney > 0.01))\\n            log(ns, `WARNING: Calculated new rates would be Rep:${formatNumberShort(optRespect)} Wanted: ${optWanted.toPrecision(3)} Money: ${formatMoney(optMoney)}` +\\n                `but they are Rep:${formatNumberShort(myGangInfo.respectGainRate)} Wanted: ${myGangInfo.wantedLevelGainRate.toPrecision(3)} Money: ${formatMoney(myGangInfo.moneyGainRate)}`, 'warning');\\n    } else\\n        log(ns, `INFO: Determined all gang member assignments are already optimal for ${optStat} with wanted gain tolerance ${wantedGainTolerance.toPrecision(2)} (${elapsed} ms).`);\\n    // Fail-safe: If we somehow over-shot and are generating wanted levels, start randomly assigning members to vigilante to fix it\\n    if (myGangInfo.wantedLevelGainRate > wantedGainTolerance) await fixWantedGainRate(ns, myGangInfo, wantedGainTolerance);\\n}\\n\\n/** @param {NS} ns \\n * Logic to reduce crime tiers when we're generating a wanted level **/\\nasync function fixWantedGainRate(ns, myGangInfo, wantedGainTolerance = 0) {\\n    // TODO: steal actual wanted level calcs and strategically pick the member(s) who can bridge the gap while losing the least rep/sec\\n    let lastWantedLevelGainRate = myGangInfo.wantedLevelGainRate;\\n    log(ns, `WARNING: Generating wanted levels (${lastWantedLevelGainRate.toPrecision(3)}/sec > ${wantedGainTolerance.toPrecision(3)}/sec), temporarily assigning random members to Vigilante Justice...`, 'warning');\\n    for (const member of shuffleArray(myGangMembers.slice())) {\\n        if (!crimes.includes(assignedTasks[member])) continue; // This member isn't doing crime, so they aren't contributing to wanted\\n        assignedTasks[member] = \\\"Vigilante Justice\\\";\\n        await updateMemberActivities(ns);\\n        const wantedLevelGainRate = (myGangInfo = await waitForGameUpdate(ns, myGangInfo)).wantedLevelGainRate;\\n        if (wantedLevelGainRate < wantedGainTolerance) return;\\n        if (lastWantedLevelGainRate == wantedLevelGainRate)\\n            log(ns, `Warning: Attempt to rollback crime of ${member} to ${assignedTasks[member]} resulted in no change in wanted level gain rate ` +\\n                `(${lastWantedLevelGainRate.toPrecision(3)})`, 'warning');\\n    }\\n}\\n\\n/** @param {NS} ns \\n * Recruit new members if available **/\\nasync function doRecruitMember(ns) {\\n    let i = 0, newMemberName;\\n    // do { newMemberName = `Thug ${++i}`; } while (myGangMembers.includes(newMemberName) || myGangMembers.includes(newMemberName + \\\" Understudy\\\"));\\n    // do { newMemberName = getRandomName(ns); } while (myGangMembers.includes(newMemberName) || myGangMembers.includes(newMemberName + \\\" Understudy\\\"));\\n    newMemberName = getRandomName(ns); // already has built in protection against duplicates\\n    // if (i < myGangMembers.length) newMemberName += \\\" Understudy\\\"; // Pay our respects to the deceased\\n    if (await getNsDataThroughFile(ns, `ns.gang.canRecruitMember() && ns.gang.recruitMember('${newMemberName}')`, '/Temp/gang-recruit-member.txt')) {\\n        myGangMembers.push(newMemberName);\\n        assignedTasks[newMemberName] = \\\"Train \\\" + (isHackGang ? \\\"Hacking\\\" : \\\"Combat\\\");\\n        lastMemberReset[newMemberName] = Date.now();\\n        log(ns, `SUCCESS: Recruited a new gang member \\\"${newMemberName}\\\"!`, 'success');\\n    } else {\\n        log(ns, `ERROR: Failed to recruit a new gang member \\\"${newMemberName}\\\"!`, 'error');\\n    }\\n}\\n\\n/** @param {NS} ns \\n * Check if any members are deemed worth ascending to increase a stat multiplier **/\\nasync function tryAscendMembers(ns) {\\n    const dictAscensionResults = await getGangInfoDict(ns, myGangMembers, 'getAscensionResult');\\n    for (let i = 0; i < myGangMembers.length; i++) {\\n        const member = myGangMembers[i];\\n        // First members are given the largest threshold, so that early on when they are our only members, they are more stable\\n        const ascMultiThreshold = options['ascend-multi-threshold'] + (11 - i) * options['ascend-multi-threshold-spacing'];\\n        const ascResult = dictAscensionResults[member];\\n        if (!ascResult || !importantStats.some(stat => ascResult[stat] >= ascMultiThreshold))\\n            continue;\\n        if (undefined !== (await getNsDataThroughFile(ns, `ns.gang.ascendMember('${member}')`, '/Temp/gang-ascend-member.txt'))) {\\n            log(ns, `SUCCESS: Ascended member ${member} to increase multis by ${importantStats.map(s => `${s} -> ${ascResult[s].toFixed(2)}x`).join(\\\", \\\")}`, 'success');\\n            lastMemberReset[member] = Date.now();\\n        }\\n        else\\n            log(ns, `ERROR: Attempt to ascended member ${member} failed. Go investigate!`, 'error');\\n    }\\n}\\n\\n/** @param {NS} ns \\n * Upgrade any missing equipment / augmentations of members if we have the budget for it **/\\nasync function tryUpgradeMembers(ns, dictMembers) {\\n    // Update equipment costs to take into account discounts\\n    const dictEquipmentCosts = await getGangInfoDict(ns, equipments.map(e => e.name), 'getEquipmentCost');\\n    equipments.forEach(e => e.cost = dictEquipmentCosts[e.name])\\n    // Upgrade members, spending no more than x% of our money per tick (and respecting the global reseve)\\n    const purchaseOrder = [];\\n    const playerData = await getNsDataThroughFile(ns, 'ns.getPlayer()', '/Temp/player-info.txt');\\n    const homeMoney = playerData.money - (Number.parseFloat(ns.read(\\\"reserve.txt\\\")) || 0);\\n    let budget = maxSpendPerTickTransientEquipment * homeMoney;\\n    let augBudget = maxSpendPerTickPermanentEquipment * homeMoney;\\n    // Hack: Budget is cut by 1/100 if we don't yet own the Stockmarket 4S API (main source of income early BN)\\n    if (!playerData.has4SDataTixApi) budget /= 100, augBudget /= 100;\\n    if (budget <= 0) return;\\n    // Find out what outstanding equipment can be bought within our budget\\n    for (const equip of equipments) {\\n        for (const member of Object.values(dictMembers)) { // Get this equip for each member before considering the next most expensive equip\\n            // Bit of a hack: Inflate the \\\"cost\\\" of equipment that doesn't contribute to our main stats so that we don't purchase them unless we have ample cash\\n            let percievedCost = equip.cost * (Object.keys(equip.stats).some(stat => importantStats.some(i => stat.includes(i))) ? 1 : 50);\\n            if (percievedCost > augBudget) continue;\\n            if (equip.type != \\\"Augmentation\\\" && percievedCost > budget) continue;\\n            if (!member.upgrades.includes(equip.name) && !member.augmentations.includes(equip.name)) {\\n                purchaseOrder.push({ member: member.name, type: equip.type, equipmentName: equip.name, cost: equip.cost });\\n                budget -= equip.cost;\\n                augBudget -= equip.cost;\\n            }\\n        }\\n    }\\n    await doUpgradePurchases(ns, purchaseOrder);\\n}\\n\\n/** @param {NS} ns \\n * Spawn a temporary taask to upgrade members. **/\\nasync function doUpgradePurchases(ns, purchaseOrder) {\\n    if (purchaseOrder.length == 0) return;\\n    const orderSummary = purchaseOrder.map(o => `${o.member} ${o.type}: \\\"${o.equipmentName}\\\"`).join(\\\", \\\");\\n    if (await getNsDataThroughFile(ns, `${JSON.stringify(purchaseOrder)}.reduce((success, o) => success && ns.gang.purchaseEquipment(o.member, o.equipmentName), true)`, '/Temp/gang-upgrade-members.txt'))\\n        log(ns, `SUCCESS: Purchased ${purchaseOrder.length} gang member upgrades for ${formatMoney(purchaseOrder.reduce((t, e) => t + e.cost, 0))}. (${orderSummary})`, 'success')\\n    else\\n        log(ns, `ERROR: Failed to purchase one or more gang member upgrades. (${orderSummary})`, 'error');\\n}\\n\\n/** @param {NS} ns \\n * Helper to wait for the game to update stats (typically 2 seconds per cycle) **/\\nasync function waitForGameUpdate(ns, oldGangInfo) {\\n    if (!myGangMembers.some(member => !assignedTasks[member].includes(\\\"Train\\\")))\\n        return oldGangInfo; // Ganginfo will never change if all members are training, so don't wait for an update\\n    const maxWaitTime = 2500;\\n    const waitInterval = 100;\\n    const start = Date.now()\\n    while (Date.now() < start + maxWaitTime) {\\n        var latestGangInfo = ns.gang.getGangInformation();\\n        if (JSON.stringify(latestGangInfo) != JSON.stringify(oldGangInfo))\\n            return latestGangInfo;\\n        await ns.sleep(Math.min(waitInterval, start + maxWaitTime - Date.now()));\\n    }\\n    log(ns, `WARNING: Max wait time ${maxWaitTime} exceeded while waiting for old gang info to update.\\\\n${JSON.stringify(oldGangInfo)}\\\\n===\\\\n${JSON.stringify(latestGangInfo)}`, 'warning');\\n    territoryTickDetected = false;\\n    return latestGangInfo;\\n}\\n\\n/** @param {NS} ns \\n * Checks whether we should be engaging in warfare based on our gang power and that of other gangs. **/\\nasync function enableOrDisableWarfare(ns, myGangInfo) {\\n    warfareFinished = Math.round(myGangInfo.territory * 2 ** 20) / 2 ** 20 /* Handle API imprecision */ >= 1;\\n    if (warfareFinished && !myGangInfo.territoryWarfareEngaged) return; // No need to engage once we hit 100%\\n    const otherGangs = await getNsDataThroughFile(ns, 'ns.gang.getOtherGangInformation()', '/Temp/gang-other-gang-info.txt'); // Returns dict of { [gangName]: { \\\"power\\\": Number, \\\"territory\\\": Number } }\\n    let lowestWinChance = 1, totalWinChance = 0, totalActiveGangs = 0;\\n    let lowestWinChanceGang = \\\"\\\";\\n    for (const otherGang in otherGangs) {\\n        if (otherGangs[otherGang].territory == 0 || otherGang == myGangFaction) continue; // *New* Don't have to worry about battling a gang if it has 0 territory\\n        const winChance = myGangInfo.power / (myGangInfo.power + otherGangs[otherGang].power)\\n        if (winChance <= lowestWinChance) lowestWinChanceGang = otherGang;\\n        totalActiveGangs++, totalWinChance += winChance, lowestWinChance = Math.min(lowestWinChance, winChance);\\n    }\\n    // Turn on territory warfare only if we have a better than <territoryEngageThreshold>% chance of beating our random opponent\\n    const averageWinChance = totalWinChance / totalActiveGangs;\\n    const shouldEngage = !warfareFinished && territoryEngageThreshold <= averageWinChance;\\n    if (shouldEngage != myGangInfo.territoryWarfareEngaged) {\\n        log(ns, (warfareFinished ? 'SUCCESS' : 'INFO') + `: Toggling participation in territory warfare to ${shouldEngage}. Our power: ${formatNumberShort(myGangInfo.power)}. ` +\\n            (!warfareFinished ? `Lowest win chance is ${(100 * lowestWinChance).toFixed(2)}% with ${lowestWinChanceGang} (power ${formatNumberShort(otherGangs[lowestWinChanceGang]?.power)}). ` +\\n                `Average win chance ${(100 * averageWinChance).toFixed(2)}% across ${totalActiveGangs} active gangs.` :\\n                'We have destroyed all other gangs and earned 100% territory'), warfareFinished ? 'info' : 'success');\\n        await runCommand(ns, `ns.gang.setTerritoryWarfare(${shouldEngage})`, '/Temp/gang-set-warfare.js');\\n    }\\n}\\n\\n// Ram-dodging helper to get gang information for each item in a list\\nconst getGangInfoDict = async (ns, elements, gangFunction) => await getDict(ns, elements, `gang.${gangFunction}`, `/Temp/gang-${gangFunction}.txt`);\\nconst getDict = async (ns, elements, nsFunction, fileName) => await getNsDataThroughFile(ns, `Object.fromEntries(${JSON.stringify(elements)}.map(e => [e, ns.${nsFunction}(e)]))`, fileName);\\n\\n/** Gang calcs shamefully stolen from https://github.com/danielyxie/bitburner/blob/dev/src/Gang/GangMember.ts **/\\nlet getStatWeight = (task, memberInfo) =>\\n    (task.hackWeight / 100) * memberInfo[\\\"hack\\\"] + // Need to quote to avoid paying RAM for ns.hack -_-\\n    (task.strWeight / 100) * memberInfo.str +\\n    (task.defWeight / 100) * memberInfo.def +\\n    (task.dexWeight / 100) * memberInfo.dex +\\n    (task.agiWeight / 100) * memberInfo.agi +\\n    (task.chaWeight / 100) * memberInfo.cha;\\n\\nlet getWantedPenalty = myGangInfo => myGangInfo.respect / (myGangInfo.respect + myGangInfo.wantedLevel);\\nlet getTerritoryPenalty = myGangInfo => (0.2 * myGangInfo.territory + 0.8) * multGangSoftcap;\\n\\nfunction computeRepGains(myGangInfo, currentTask, memberInfo) {\\n    const task = allTaskStats[currentTask];\\n    const statWeight = getStatWeight(task, memberInfo) - 4 * task.difficulty;\\n    if (task.baseRespect === 0 || statWeight <= 0) return 0;\\n    const territoryMult = Math.max(0.005, Math.pow(myGangInfo.territory * 100, task.territory.respect) / 100);\\n    if (isNaN(territoryMult) || territoryMult <= 0) return 0;\\n    const respectMult = getWantedPenalty(myGangInfo);\\n    const territoryPenalty = getTerritoryPenalty(myGangInfo);\\n    //console.log(`statWeight: ${statWeight} task.difficulty: ${task.difficulty} territoryMult: ${territoryMult} territoryPenalty: ${territoryPenalty} myGangInfo.respect ${myGangInfo.respect} myGangInfo.wanted ${myGangInfo.wanted} respectMult: ${respectMult}`);\\n    return Math.pow(11 * task.baseRespect * statWeight * territoryMult * respectMult, territoryPenalty);\\n}\\n\\nfunction computeWantedGains(myGangInfo, currentTask, memberInfo) {\\n    const task = allTaskStats[currentTask];\\n    const statWeight = getStatWeight(task, memberInfo) - 3.5 * task.difficulty;\\n    if (task.baseWanted === 0 || statWeight <= 0) return 0;\\n    const territoryMult = Math.max(0.005, Math.pow(myGangInfo.territory * 100, task.territory.wanted) / 100);\\n    if (isNaN(territoryMult) || territoryMult <= 0) return 0;\\n    return (task.baseWanted < 0) ? 0.4 * task.baseWanted * statWeight * territoryMult :\\n        Math.min(100, (7 * task.baseWanted) / Math.pow(3 * statWeight * territoryMult, 0.8));\\n}\\n\\nfunction calculateMoneyGains(myGangInfo, currentTask, memberInfo) {\\n    const task = allTaskStats[currentTask];\\n    const statWeight = getStatWeight(task, memberInfo) - 3.2 * task.difficulty;\\n    if (task.baseMoney === 0 || statWeight <= 0) return 0;\\n    const territoryMult = Math.max(0.005, Math.pow(myGangInfo.territory * 100, task.territory.money) / 100);\\n    if (isNaN(territoryMult) || territoryMult <= 0) return 0;\\n    const respectMult = getWantedPenalty(myGangInfo);\\n    const territoryPenalty = getTerritoryPenalty(myGangInfo);\\n    return Math.pow(5 * task.baseMoney * statWeight * territoryMult * respectMult, territoryPenalty);\\n}\\n\\n/** @param {NS} ns **/\\nfunction log(ns, message, toastStyle, terminal = undefined) {\\n    ns.print(message);\\n    if (terminal === true || (terminal === undefined && toastStyle === 'error')) ns.tprint(message);\\n    if (toastStyle) ns.toast(message, toastStyle);\\n}\\n\\n/** Helps us not get caught in cycles by reducing gang member crime tiers in a random order */\\nfunction shuffleArray(array) {\\n    for (let i = array.length - 1; i > 0; i--) {\\n        const j = Math.floor(Math.random() * (i + 1));\\n        [array[i], array[j]] = [array[j], array[i]];\\n    }\\n    return array;\\n}\\n\\n/** Pick a random name for the Thugs \\n * @param {NS} ns\\n*/\\nfunction getRandomName(ns) {\\n    const possible_names = [\\n        \\\"nVidia\\\",\\n        \\\"Apple\\\",\\n        \\\"Oculus\\\",\\n        \\\"Instagram\\\",\\n        \\\"Facebook\\\",\\n        \\\"WhatsApp\\\",\\n        \\\"Oomnitza\\\",\\n        \\\"Imgur\\\",\\n        \\\"Reddit\\\",\\n        \\\"Uber\\\",\\n        \\\"Salesforce\\\",\\n        \\\"Slack\\\",\\n        \\\"LinkedIn\\\",\\n        \\\"GitHub\\\",\\n        \\\"IBM\\\",\\n        \\\"Google\\\",\\n        \\\"Netflix\\\",\\n        \\\"DropBox\\\",\\n        \\\"Microsoft\\\",\\n        \\\"Valve\\\",\\n    ]\\n    let existing_names = ns.gang.getMemberNames();\\n    let name = \\\"\\\";\\n    do {\\n        name = possible_names[Math.floor(Math.random() * possible_names.length)];\\n    } while (existing_names.includes(name))\\n    return name\\n}\",\"filename\":\"gangs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///4a40c894-cfd6-4ed0-958d-8912e4d866ff\",\"moduleSequenceNumber\":328},{\"filename\":\"gangs.js\",\"url\":\"blob:file:///dd3f35e6-999c-4826-9c8d-f6eff0f91bbc\",\"moduleSequenceNumber\":605}],\"dependents\":[],\"ramUsage\":5.7,\"server\":\"home\",\"moduleSequenceNumber\":395,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Return a formatted representation of the monetary amount using scale sympols (e.g. $6.50M)\\n * @param {number} num - The number to format\\n * @param {number=} maxSignificantFigures - (default: 6) The maximum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} maxDecimalPlaces - (default: 3) The maximum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatMoney(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {\\n    let numberShort = formatNumberShort(num, maxSignificantFigures, maxDecimalPlaces);\\n    return num >= 0 ? \\\"$\\\" + numberShort : numberShort.replace(\\\"-\\\", \\\"-$\\\");\\n}\\n\\nconst symbols = [\\\"\\\", \\\"k\\\", \\\"m\\\", \\\"b\\\", \\\"t\\\", \\\"q\\\", \\\"Q\\\", \\\"s\\\", \\\"S\\\", \\\"o\\\", \\\"n\\\", \\\"e33\\\", \\\"e36\\\", \\\"e39\\\"];\\n\\n/**\\n * Return a formatted representation of the monetary amount using scale sympols (e.g. 6.50M) \\n * @param {number} num - The number to format\\n * @param {number=} maxSignificantFigures - (default: 6) The maximum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} maxDecimalPlaces - (default: 3) The maximum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatNumberShort(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {\\n    for (var i = 0, sign = Math.sign(num), num = Math.abs(num); num >= 1000 && i < symbols.length; i++) num /= 1000;\\n    // TODO: A number like 9.999 once rounted to show 3 sig figs, will become 10.00, which is now 4 sig figs.\\n    return ((sign < 0) ? \\\"-\\\" : \\\"\\\") + num.toFixed(Math.max(0, Math.min(maxDecimalPlaces, maxSignificantFigures - Math.floor(1 + Math.log10(num))))) + symbols[i];\\n}\\n\\n/** Convert a shortened number back into a value */\\nexport function parseShortNumber(text = \\\"0\\\") {\\n    let parsed = Number(text);\\n    if (!isNaN(parsed)) return parsed;\\n    for (const sym of symbols.slice(1))\\n        if (text.toLowerCase().endsWith(sym))\\n            return Number.parseFloat(text.slice(0, text.length - sym.length)) * Math.pow(10, 3 * symbols.indexOf(sym));\\n    return Number.NaN;\\n}\\n\\n/**\\n * Return a number formatted with the specified number of significatnt figures or decimal places, whichever is more limiting.\\n * @param {number} num - The number to format\\n * @param {number=} minSignificantFigures - (default: 6) The minimum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} minDecimalPlaces - (default: 3) The minimum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatNumber(num, minSignificantFigures = 3, minDecimalPlaces = 1) {\\n    return num == 0.0 ? num : num.toFixed(Math.max(minDecimalPlaces, Math.max(0, minSignificantFigures - Math.ceil(Math.log10(num)))));\\n}\\n\\n/** Formats some RAM amount as a round number of GB with thousands separators e.g. `1,028 GB` */\\nexport function formatRam(num) { return `${Math.round(num).toLocaleString()} GB`; }\\n\\n/** Return a datatime in ISO format */\\nexport function formatDateTime(datetime) { return datetime.toISOString(); }\\n\\n/** Format a duration (in milliseconds) as e.g. '1h 21m 6s' for big durations or e.g '12.5s' / '23ms' for small durations */\\nexport function formatDuration(duration) {\\n    if (duration < 1000) return `${duration.toFixed(0)}ms`\\n    const portions = [];\\n    const msInHour = 1000 * 60 * 60;\\n    const hours = Math.trunc(duration / msInHour);\\n    if (hours > 0) {\\n        portions.push(hours + 'h');\\n        duration -= (hours * msInHour);\\n    }\\n    const msInMinute = 1000 * 60;\\n    const minutes = Math.trunc(duration / msInMinute);\\n    if (minutes > 0) {\\n        portions.push(minutes + 'm');\\n        duration -= (minutes * msInMinute);\\n    }\\n    let seconds = (duration / 1000.0)\\n    // Include millisecond precision if we're on the order of seconds\\n    seconds = (hours == 0 && minutes == 0) ? seconds.toPrecision(3) : seconds.toFixed(0);\\n    if (seconds > 0) {\\n        portions.push(seconds + 's');\\n        duration -= (minutes * 1000);\\n    }\\n    return portions.join(' ');\\n}\\n\\n/** Generate a hashCode for a string that is pretty unique most of the time */\\nexport function hashCode(s) { return s.split(\\\"\\\").reduce(function (a, b) { a = ((a << 5) - a) + b.charCodeAt(0); return a & a }, 0); }\\n\\n/** @param {NS} ns **/\\nexport function disableLogs(ns, listOfLogs) { ['disableLog'].concat(...listOfLogs).forEach(log => checkNsInstance(ns, '\\\"disableLogs\\\"').disableLog(log)); }\\n\\n/** Joins all arguments as components in a path, e.g. pathJoin(\\\"foo\\\", \\\"bar\\\", \\\"/baz\\\") = \\\"foo/bar/baz\\\" **/\\nexport function pathJoin(...args) {\\n    return args.filter(s => !!s).join('/').replace(/\\\\/\\\\/+/g, '/');\\n}\\n\\n/** Gets the path for the given local file, taking into account optional subfolder relocation via git-pull.js **/\\nexport function getFilePath(file) {\\n    const subfolder = '';  // git-pull.js optionally modifies this when downloading\\n    return pathJoin(subfolder, file);\\n}\\n\\n// FUNCTIONS THAT PROVIDE ALTERNATIVE IMPLEMENTATIONS TO EXPENSIVE NS FUNCTIONS\\n// VARIATIONS ON NS.RUN\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.run in your script **/\\nexport function getFnRunViaNsRun(ns) { return checkNsInstance(ns, '\\\"getFnRunViaNsRun\\\"').run; }\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.exec in your script **/\\nexport function getFnRunViaNsExec(ns, host = \\\"home\\\") {\\n    checkNsInstance(ns, '\\\"getFnRunViaNsExec\\\"');\\n    return function (scriptPath, ...args) { return ns.exec(scriptPath, host, ...args); }\\n}\\n// VARIATIONS ON NS.ISRUNNING\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.run in your script  */\\nexport function getFnIsAliveViaNsIsRunning(ns) { return checkNsInstance(ns, '\\\"getFnIsAliveViaNsIsRunning\\\"').isRunning; }\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.exec in your script  */\\nexport function getFnIsAliveViaNsPs(ns) {\\n    checkNsInstance(ns, '\\\"getFnIsAliveViaNsPs\\\"');\\n    return function (pid, host) { return ns.ps(host).some(process => process.pid === pid); }\\n}\\n\\n/**\\n * Retrieve the result of an ns command by executing it in a temporary .js script, writing the result to a file, then shuting it down\\n * Importing incurs a maximum of 1.1 GB RAM (0 GB for ns.read, 1 GB for ns.run, 0.1 GB for ns.isRunning).\\n * Has the capacity to retry if there is a failure (e.g. due to lack of RAM available). Not recommended for performance-critical code.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fName - (default \\\"/Temp/{commandhash}-data.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {bool=} verbose - (default false) If set to true, pid and result of command are logged.\\n **/\\nexport async function getNsDataThroughFile(ns, command, fName, verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"getNsDataThroughFile\\\"');\\n    if (!verbose) disableLogs(ns, ['run', 'isRunning']);\\n    return await getNsDataThroughFile_Custom(ns, ns.run, ns.isRunning, command, fName, verbose, maxRetries, retryDelayMs);\\n}\\n\\n/**\\n * An advanced version of getNsDataThroughFile that lets you pass your own \\\"fnRun\\\" and \\\"fnIsAlive\\\" implementations to reduce RAM requirements\\n * Importing incurs no RAM (now that ns.read is free) plus whatever fnRun / fnIsAlive you provide it\\n * Has the capacity to retry if there is a failure (e.g. due to lack of RAM available). Not recommended for performance-critical code.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {function} fnRun - A single-argument function used to start the new sript, e.g. `ns.run` or `(f,...args) => ns.exec(f, \\\"home\\\", ...args)`\\n * @param {function} fnIsAlive - A single-argument function used to start the new sript, e.g. `ns.isRunning` or `pid => ns.ps(\\\"home\\\").some(process => process.pid === pid)`\\n **/\\nexport async function getNsDataThroughFile_Custom(ns, fnRun, fnIsAlive, command, fName, verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"getNsDataThroughFile_Custom\\\"');\\n    if (!verbose) disableLogs(ns, ['read']);\\n    const commandHash = hashCode(command);\\n    fName = fName || `/Temp/${commandHash}-data.txt`;\\n    const fNameCommand = (fName || `/Temp/${commandHash}-command`) + '.js'\\n    // Prepare a command that will write out a new file containing the results of the command\\n    // unless it already exists with the same contents (saves time/ram to check first)\\n    // If an error occurs, it will write an empty file to avoid old results being misread.\\n    const commandToFile = `let result = \\\"\\\"; try { result = JSON.stringify(${command}); } catch { }\\n        if (ns.read(\\\"${fName}\\\") != result) await ns.write(\\\"${fName}\\\", result, 'w')`;\\n    // Run the command with auto-retries if it fails\\n    const pid = await runCommand_Custom(ns, fnRun, commandToFile, fNameCommand, false, maxRetries, retryDelayMs);\\n    // Wait for the process to complete\\n    await waitForProcessToComplete_Custom(ns, fnIsAlive, pid, verbose);\\n    if (verbose) ns.print(`Process ${pid} is done. Reading the contents of ${fName}...`);\\n    // Read the file, with auto-retries if it fails\\n    const fileData = await autoRetry(ns, () => ns.read(fName), f => f !== undefined && f !== \\\"\\\",\\n        () => `ns.read('${fName}') somehow returned undefined or an empty string`,\\n        maxRetries, retryDelayMs, undefined, verbose);\\n    if (verbose) ns.print(`Read the following data for command ${command}:\\\\n${fileData}`);\\n    return JSON.parse(fileData); // Deserialize it back into an object/array and return\\n}\\n\\n/** Evaluate an arbitrary ns command by writing it to a new script and then running or executing it.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fileName - (default \\\"/Temp/{commandhash}-data.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {bool=} verbose - (default false) If set to true, the evaluation result of the command is printed to the terminal\\n * @param {...args} args - args to be passed in as arguments to command being run as a new script.\\n */\\nexport async function runCommand(ns, command, fileName, verbose = false, maxRetries = 5, retryDelayMs = 50, ...args) {\\n    checkNsInstance(ns, '\\\"runCommand\\\"');\\n    if (!verbose) disableLogs(ns, ['run', 'sleep']);\\n    return await runCommand_Custom(ns, ns.run, command, fileName, verbose, maxRetries, retryDelayMs, ...args);\\n}\\n\\n/**\\n * An advanced version of runCommand that lets you pass your own \\\"isAlive\\\" test to reduce RAM requirements (e.g. to avoid referencing ns.isRunning)\\n * Importing incurs 0 GB RAM (assuming fnRun, fnWrite are implemented using another ns function you already reference elsewhere like ns.exec)\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {function} fnRun - A single-argument function used to start the new sript, e.g. `ns.run` or `(f,...args) => ns.exec(f, \\\"home\\\", ...args)`\\n **/\\nexport async function runCommand_Custom(ns, fnRun, command, fileName, verbose = false, maxRetries = 5, retryDelayMs = 50, ...args) {\\n    checkNsInstance(ns, '\\\"runCommand_Custom\\\"');\\n    let script = `import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } fr` + `om '${getFilePath('helpers.js')}'\\\\n` +\\n        `export async function main(ns) { try { ` +\\n        (verbose ? `let output = ${command}; ns.tprint(output)` : command) +\\n        `; } catch(err) { ns.tprint(String(err)); throw(err); } }`;\\n    fileName = fileName || `/Temp/${hashCode(command)}-command.js`;\\n    // To improve performance and save on garbage collection, we can skip writing this exact same script was previously written (common for repeatedly-queried data)\\n    if (ns.read(fileName) != script) await ns.write(fileName, script, \\\"w\\\");\\n    return await autoRetry(ns, () => fnRun(fileName, ...args), temp_pid => temp_pid !== 0,\\n        () => `Run command returned no pid. Destination: ${fileName} Command: ${command}\\\\nEnsure you have sufficient free RAM to run this temporary script.`,\\n        maxRetries, retryDelayMs, undefined, verbose);\\n}\\n\\n/**\\n * Wait for a process id to complete running\\n * Importing incurs a maximum of 0.1 GB RAM (for ns.isRunning) \\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {int} pid - The process id to monitor\\n * @param {bool=} verbose - (default false) If set to true, pid and result of command are logged.\\n **/\\nexport async function waitForProcessToComplete(ns, pid, verbose) {\\n    checkNsInstance(ns, '\\\"waitForProcessToComplete\\\"');\\n    if (!verbose) disableLogs(ns, ['isRunning']);\\n    return await waitForProcessToComplete_Custom(ns, ns.isRunning, pid, verbose);\\n}\\n/**\\n * An advanced version of waitForProcessToComplete that lets you pass your own \\\"isAlive\\\" test to reduce RAM requirements (e.g. to avoid referencing ns.isRunning)\\n * Importing incurs 0 GB RAM (assuming fnIsAlive is implemented using another ns function you already reference elsewhere like ns.ps) \\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {function} fnIsAlive - A single-argument function used to start the new sript, e.g. `ns.isRunning` or `pid => ns.ps(\\\"home\\\").some(process => process.pid === pid)`\\n **/\\nexport async function waitForProcessToComplete_Custom(ns, fnIsAlive, pid, verbose) {\\n    checkNsInstance(ns, '\\\"waitForProcessToComplete_Custom\\\"');\\n    if (!verbose) disableLogs(ns, ['sleep']);\\n    // Wait for the PID to stop running (cheaper than e.g. deleting (rm) a possibly pre-existing file and waiting for it to be recreated)\\n    for (var retries = 0; retries < 1000; retries++) {\\n        if (!fnIsAlive(pid)) break; // Script is done running\\n        if (verbose && retries % 100 === 0) ns.print(`Waiting for pid ${pid} to complete... (${retries})`);\\n        await ns.sleep(10);\\n    }\\n    // Make sure that the process has shut down and we haven't just stopped retrying\\n    if (fnIsAlive(pid)) {\\n        let errorMessage = `run-command pid ${pid} is running much longer than expected. Max retries exceeded.`;\\n        ns.print(errorMessage);\\n        throw errorMessage;\\n    }\\n}\\n\\n/** Helper to retry something that failed temporarily (can happen when e.g. we temporarily don't have enough RAM to run)\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport async function autoRetry(ns, fnFunctionThatMayFail, fnSuccessCondition, errorContext = \\\"Success condition not met\\\",\\n    maxRetries = 5, initialRetryDelayMs = 50, backoffRate = 3, verbose = false) {\\n    checkNsInstance(ns, '\\\"autoRetry\\\"');\\n    let retryDelayMs = initialRetryDelayMs;\\n    while (maxRetries-- > 0) {\\n        try {\\n            const result = await fnFunctionThatMayFail()\\n            if (!fnSuccessCondition(result)) throw typeof errorContext === 'string' ? errorContext : errorContext();\\n            return result;\\n        }\\n        catch (error) {\\n            const fatal = maxRetries === 0;\\n            const errorLog = `${fatal ? 'FAIL' : 'WARN'}: (${maxRetries} retries remaining): ${String(error)}`\\n            log(ns, errorLog, fatal, !verbose ? undefined : (fatal ? 'error' : 'warning'))\\n            if (fatal) throw error;\\n            await ns.sleep(retryDelayMs);\\n            retryDelayMs *= backoffRate;\\n        }\\n    }\\n}\\n\\n/** Helper to log a message, and optionally also tprint it and toast it\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport function log(ns, message = \\\"\\\", alsoPrintToTerminal = false, toastStyle = \\\"\\\", maxToastLength = 100) {\\n    checkNsInstance(ns, '\\\"log\\\"');\\n    ns.print(message);\\n    if (alsoPrintToTerminal) ns.tprint(message);\\n    if (toastStyle) ns.toast(message.length <= maxToastLength ? message : message.substring(0, maxToastLength - 3) + \\\"...\\\", toastStyle);\\n    return message;\\n}\\n\\n/** Helper to get a list of all hostnames on the network\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport function scanAllServers(ns) {\\n    checkNsInstance(ns, '\\\"scanAllServers\\\"');\\n    let discoveredHosts = []; // Hosts (a.k.a. servers) we have scanned\\n    let hostsToScan = [\\\"home\\\"]; // Hosts we know about, but have no yet scanned\\n    let infiniteLoopProtection = 9999; // In case you mess with this code, this should save you from getting stuck\\n    while (hostsToScan.length > 0 && infiniteLoopProtection-- > 0) { // Loop until the list of hosts to scan is empty\\n        let hostName = hostsToScan.pop(); // Get the next host to be scanned\\n        for (const connectedHost of ns.scan(hostName)) // \\\"scan\\\" (list all hosts connected to this one)\\n            if (!discoveredHosts.includes(connectedHost)) // If we haven't already scanned this host\\n                hostsToScan.push(connectedHost); // Add it to the queue of hosts to be scanned\\n        discoveredHosts.push(hostName); // Mark this host as \\\"scanned\\\"\\n    }\\n    return discoveredHosts; // The list of scanned hosts should now be the set of all hosts in the game!\\n}\\n\\n/** @param {NS} ns \\n * Get a dictionary of active source files, taking into account the current active bitnode as well. **/\\nexport async function getActiveSourceFiles(ns) {\\n    return await getActiveSourceFiles_Custom(ns, getNsDataThroughFile);\\n}\\n\\n/** @param {NS} ns \\n * getActiveSourceFiles Helper that allows the user to pass in their chosen implementation of getNsDataThroughFile to minimize RAM usage **/\\nexport async function getActiveSourceFiles_Custom(ns, fnGetNsDataThroughFile) {\\n    checkNsInstance(ns, '\\\"getActiveSourceFiles\\\"');\\n    let tempFile = '/Temp/owned-source-files.txt';\\n    // Find out what source files the user has unlocked\\n    let dictSourceFiles;\\n    try { await fnGetNsDataThroughFile(ns, `Object.fromEntries(ns.getOwnedSourceFiles().map(sf => [sf.n, sf.lvl]))`, tempFile); } catch { }\\n    if (!dictSourceFiles) { // Bit of a hack, but if RAM is so low that this fails, we can fallback to using an older version of this file, and even assuming we have no source files.\\n        dictSourceFiles = ns.read(tempFile)\\n        dictSourceFiles = dictSourceFiles ? JSON.parse(dictSourceFiles) : {};\\n    }\\n    // If the user is currently in a given bitnode, they will have its features unlocked\\n    dictSourceFiles[(await fnGetNsDataThroughFile(ns, 'ns.getPlayer()', '/Temp/player-info.txt')).bitNodeN] = 3;\\n    return dictSourceFiles;\\n}\\n\\n/** @param {NS} ns \\n * Return bitnode multiplers, or null if they cannot be accessed. **/\\nexport async function tryGetBitNodeMultipliers(ns) {\\n    return await tryGetBitNodeMultipliers_Custom(ns, getNsDataThroughFile);\\n}\\n\\n/** @param {NS} ns\\n * tryGetBitNodeMultipliers Helper that allows the user to pass in their chosen implementation of getNsDataThroughFile to minimize RAM usage **/\\nexport async function tryGetBitNodeMultipliers_Custom(ns, fnGetNsDataThroughFile) {\\n    checkNsInstance(ns, '\\\"tryGetBitNodeMultipliers\\\"');\\n    let canGetBitNodeMultipliers = false;\\n    try { canGetBitNodeMultipliers = 5 in (await getActiveSourceFiles_Custom(ns, fnGetNsDataThroughFile)); } catch { }\\n    if (!canGetBitNodeMultipliers) return null;\\n    try { return await fnGetNsDataThroughFile(ns, 'ns.getBitNodeMultipliers()', '/Temp/bitnode-multipliers.txt'); } catch { }\\n    return null;\\n}\\n\\n/** @param {NS} ns \\n * Returns a helpful error message if we forgot to pass the ns instance to a function */\\nexport function checkNsInstance(ns, fnName = \\\"this function\\\") { if (!ns.print) throw `The first argument to ${fnName} should be a 'ns' instance.`; return ns; }\",\"filename\":\"helpers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.4,\"server\":\"home\",\"moduleSequenceNumber\":396,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries(ns.getOwnedSourceFiles().map(sf => [sf.n, sf.lvl]))); } catch { }\\n        if (ns.read(\\\"/Temp/owned-source-files.txt\\\") != result) await ns.write(\\\"/Temp/owned-source-files.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/owned-source-files.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///930b13f9-bf48-4f4e-aab6-598f69f033ce\",\"moduleSequenceNumber\":328},{\"filename\":\"/Temp/owned-source-files.txt.js\",\"url\":\"blob:file:///94631b7a-8fb9-4993-b55f-ea635c10182f\",\"moduleSequenceNumber\":656}],\"dependents\":[],\"ramUsage\":6.6,\"server\":\"home\",\"moduleSequenceNumber\":397,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.getPlayer()); } catch { }\\n        if (ns.read(\\\"/Temp/player-info.txt\\\") != result) await ns.write(\\\"/Temp/player-info.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/player-info.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///c89df588-bb45-475d-a706-2f48906ffe21\",\"moduleSequenceNumber\":328},{\"filename\":\"/Temp/player-info.txt.js\",\"url\":\"blob:file:///740759d7-7425-4564-ae72-1015ba4e5d03\",\"moduleSequenceNumber\":657}],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"home\",\"moduleSequenceNumber\":398,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.gang.inGang()); } catch { }\\n        if (ns.read(\\\"/Temp/player-gang-joined.txt\\\") != result) await ns.write(\\\"/Temp/player-gang-joined.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/player-gang-joined.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///81499054-2f6c-48d1-8f37-523f72ac7798\",\"moduleSequenceNumber\":328},{\"filename\":\"/Temp/player-gang-joined.txt.js\",\"url\":\"blob:file:///2ceb445c-4255-4e56-98f1-4645a0b00826\",\"moduleSequenceNumber\":658}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":399,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.inGang\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.getAugmentationsFromFaction('Slum Snakes')); } catch { }\\n        if (ns.read(\\\"/Temp/gang-augs.txt\\\") != result) await ns.write(\\\"/Temp/gang-augs.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-augs.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///e6eaf3e0-ce1a-4ac3-b1fb-2c31e7bc125e\",\"moduleSequenceNumber\":328},{\"filename\":\"/Temp/gang-augs.txt.js\",\"url\":\"blob:file:///a8a14353-ee5b-407a-88a5-cfe6800ca094\",\"moduleSequenceNumber\":659}],\"dependents\":[],\"ramUsage\":6.6,\"server\":\"home\",\"moduleSequenceNumber\":400,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getAugmentationsFromFaction\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.gang.getEquipmentNames()); } catch { }\\n        if (ns.read(\\\"/Temp/gang-equipment-names.txt\\\") != result) await ns.write(\\\"/Temp/gang-equipment-names.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-equipment-names.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///2fd47969-2f60-46c1-ac1e-c1825f4e612b\",\"moduleSequenceNumber\":328},{\"filename\":\"/Temp/gang-equipment-names.txt.js\",\"url\":\"blob:file:///f6217fc1-a499-4041-8ad7-732bcc9784b5\",\"moduleSequenceNumber\":662}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":401,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([\\\"Baseball Bat\\\",\\\"Katana\\\",\\\"Glock 18C\\\",\\\"P90C\\\",\\\"Steyr AUG\\\",\\\"AK-47\\\",\\\"M15A10 Assault Rifle\\\",\\\"AWM Sniper Rifle\\\",\\\"Bulletproof Vest\\\",\\\"Full Body Armor\\\",\\\"Liquid Body Armor\\\",\\\"Graphene Plating Armor\\\",\\\"Ford Flex V20\\\",\\\"ATX1070 Superbike\\\",\\\"Mercedes-Benz S9001\\\",\\\"White Ferrari\\\",\\\"NUKE Rootkit\\\",\\\"Soulstealer Rootkit\\\",\\\"Demon Rootkit\\\",\\\"Hmap Node\\\",\\\"Jack the Ripper\\\",\\\"Bionic Arms\\\",\\\"Bionic Legs\\\",\\\"Bionic Spine\\\",\\\"BrachiBlades\\\",\\\"Nanofiber Weave\\\",\\\"Synthetic Heart\\\",\\\"Synfibril Muscle\\\",\\\"BitWire\\\",\\\"Neuralstimulator\\\",\\\"DataJack\\\",\\\"Graphene Bone Lacings\\\"].map(e => [e, ns.gang.getEquipmentType(e)]))); } catch { }\\n        if (ns.read(\\\"/Temp/gang-getEquipmentType.txt\\\") != result) await ns.write(\\\"/Temp/gang-getEquipmentType.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-getEquipmentType.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///2f8a2549-5021-457e-9dd1-19edafce0d48\",\"moduleSequenceNumber\":328},{\"filename\":\"/Temp/gang-getEquipmentType.txt.js\",\"url\":\"blob:file:///7a9dba0b-8cbe-4525-8148-66cbe81330df\",\"moduleSequenceNumber\":663}],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":402,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getEquipmentType\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([\\\"Baseball Bat\\\",\\\"Bulletproof Vest\\\",\\\"Ford Flex V20\\\",\\\"Full Body Armor\\\",\\\"NUKE Rootkit\\\",\\\"ATX1070 Superbike\\\",\\\"Katana\\\",\\\"Mercedes-Benz S9001\\\",\\\"Glock 18C\\\",\\\"Liquid Body Armor\\\",\\\"Soulstealer Rootkit\\\",\\\"White Ferrari\\\",\\\"Graphene Plating Armor\\\",\\\"Hmap Node\\\",\\\"P90C\\\",\\\"Steyr AUG\\\",\\\"Demon Rootkit\\\",\\\"Jack the Ripper\\\",\\\"AK-47\\\",\\\"M15A10 Assault Rifle\\\",\\\"AWM Sniper Rifle\\\",\\\"BitWire\\\",\\\"DataJack\\\",\\\"Bionic Arms\\\",\\\"Bionic Legs\\\",\\\"Neuralstimulator\\\",\\\"Nanofiber Weave\\\",\\\"Bionic Spine\\\",\\\"Synfibril Muscle\\\",\\\"BrachiBlades\\\",\\\"Synthetic Heart\\\",\\\"Graphene Bone Lacings\\\"].map(e => [e, ns.gang.getEquipmentCost(e)]))); } catch { }\\n        if (ns.read(\\\"/Temp/gang-getEquipmentCost.txt\\\") != result) await ns.write(\\\"/Temp/gang-getEquipmentCost.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-getEquipmentCost.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///4a70c4b6-e0f4-44e4-838c-0baf4a49e800\",\"moduleSequenceNumber\":328},{\"filename\":\"/Temp/gang-getEquipmentCost.txt.js\",\"url\":\"blob:file:///4c45549a-f694-4d57-8cbd-463af1e7a1ce\",\"moduleSequenceNumber\":678}],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":403,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getEquipmentCost\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([\\\"Baseball Bat\\\",\\\"Katana\\\",\\\"Glock 18C\\\",\\\"P90C\\\",\\\"Steyr AUG\\\",\\\"AK-47\\\",\\\"M15A10 Assault Rifle\\\",\\\"AWM Sniper Rifle\\\",\\\"Bulletproof Vest\\\",\\\"Full Body Armor\\\",\\\"Liquid Body Armor\\\",\\\"Graphene Plating Armor\\\",\\\"Ford Flex V20\\\",\\\"ATX1070 Superbike\\\",\\\"Mercedes-Benz S9001\\\",\\\"White Ferrari\\\",\\\"NUKE Rootkit\\\",\\\"Soulstealer Rootkit\\\",\\\"Demon Rootkit\\\",\\\"Hmap Node\\\",\\\"Jack the Ripper\\\",\\\"Bionic Arms\\\",\\\"Bionic Legs\\\",\\\"Bionic Spine\\\",\\\"BrachiBlades\\\",\\\"Nanofiber Weave\\\",\\\"Synthetic Heart\\\",\\\"Synfibril Muscle\\\",\\\"BitWire\\\",\\\"Neuralstimulator\\\",\\\"DataJack\\\",\\\"Graphene Bone Lacings\\\"].map(e => [e, ns.gang.getEquipmentStats(e)]))); } catch { }\\n        if (ns.read(\\\"/Temp/gang-getEquipmentStats.txt\\\") != result) await ns.write(\\\"/Temp/gang-getEquipmentStats.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-getEquipmentStats.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///f891d01f-c798-4cd8-a6fa-afbc94677374\",\"moduleSequenceNumber\":328},{\"filename\":\"/Temp/gang-getEquipmentStats.txt.js\",\"url\":\"blob:file:///9531af5d-efce-430e-8099-44b40cfe7aad\",\"moduleSequenceNumber\":666}],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":404,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getEquipmentStats\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.gang.getTaskNames()); } catch { }\\n        if (ns.read(\\\"/Temp/gang-task-names.txt\\\") != result) await ns.write(\\\"/Temp/gang-task-names.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-task-names.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///012d14a8-1f00-49d6-a305-55ac645e87e8\",\"moduleSequenceNumber\":328},{\"filename\":\"/Temp/gang-task-names.txt.js\",\"url\":\"blob:file:///6b311a12-ae3a-4c57-bb4f-b12cd21b08e4\",\"moduleSequenceNumber\":667}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":405,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getTaskNames\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([\\\"Unassigned\\\",\\\"Mug People\\\",\\\"Deal Drugs\\\",\\\"Strongarm Civilians\\\",\\\"Run a Con\\\",\\\"Armed Robbery\\\",\\\"Traffick Illegal Arms\\\",\\\"Threaten & Blackmail\\\",\\\"Human Trafficking\\\",\\\"Terrorism\\\",\\\"Vigilante Justice\\\",\\\"Train Combat\\\",\\\"Train Hacking\\\",\\\"Train Charisma\\\",\\\"Territory Warfare\\\"].map(e => [e, ns.gang.getTaskStats(e)]))); } catch { }\\n        if (ns.read(\\\"/Temp/gang-getTaskStats.txt\\\") != result) await ns.write(\\\"/Temp/gang-getTaskStats.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-getTaskStats.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///1800f13d-5f10-4124-b44f-d027df18abe1\",\"moduleSequenceNumber\":328},{\"filename\":\"/Temp/gang-getTaskStats.txt.js\",\"url\":\"blob:file:///a8aad262-04e1-4556-8e56-f2b21e57a98b\",\"moduleSequenceNumber\":668}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":406,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getTaskStats\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.gang.getMemberNames()); } catch { }\\n        if (ns.read(\\\"/Temp/gang-member-names.txt\\\") != result) await ns.write(\\\"/Temp/gang-member-names.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-member-names.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///baf2dd45-7c8f-47d4-93a0-655114194227\",\"moduleSequenceNumber\":328},{\"filename\":\"/Temp/gang-member-names.txt.js\",\"url\":\"blob:file:///b9719ffa-a350-490b-9d1a-4770a92ad98d\",\"moduleSequenceNumber\":669}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":407,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([\\\"Instagram\\\",\\\"Netflix\\\",\\\"Facebook\\\",\\\"Imgur\\\",\\\"Apple\\\",\\\"Microsoft\\\",\\\"GitHub\\\",\\\"DropBox\\\",\\\"Oomnitza\\\",\\\"Google\\\",\\\"WhatsApp\\\",\\\"Salesforce\\\"].map(e => [e, ns.gang.getMemberInformation(e)]))); } catch { }\\n        if (ns.read(\\\"/Temp/gang-getMemberInformation.txt\\\") != result) await ns.write(\\\"/Temp/gang-getMemberInformation.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-getMemberInformation.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///190ebcf1-262c-49aa-ac4f-5d8212020b28\",\"moduleSequenceNumber\":328},{\"filename\":\"/Temp/gang-getMemberInformation.txt.js\",\"url\":\"blob:file:///e165bf03-4dd5-4e83-b644-ef0e87fafe61\",\"moduleSequenceNumber\":670}],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":408,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberInformation\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.getFactionRep('Slum Snakes')); } catch { }\\n        if (ns.read(\\\"/Temp/gang-faction-rep.txt\\\") != result) await ns.write(\\\"/Temp/gang-faction-rep.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-faction-rep.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///47b0ac6a-cbcf-42a9-8192-fd2f96d1eeaa\",\"moduleSequenceNumber\":328},{\"filename\":\"/Temp/gang-faction-rep.txt.js\",\"url\":\"blob:file:///575db34b-ba47-45ba-87c7-470b1a3c71a3\",\"moduleSequenceNumber\":671}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":409,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getFactionRep\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify([{\\\"name\\\":\\\"Imgur\\\",\\\"task\\\":\\\"Train Combat\\\"}].reduce((success, m) => success && ns.gang.setMemberTask(m.name, m.task), true)); } catch { }\\n        if (ns.read(\\\"/Temp/gang-set-member-tasks.txt\\\") != result) await ns.write(\\\"/Temp/gang-set-member-tasks.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-set-member-tasks.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///d43faac9-4a3c-4588-b84f-1f5a2be4b917\",\"moduleSequenceNumber\":328},{\"filename\":\"/Temp/gang-set-member-tasks.txt.js\",\"url\":\"blob:file:///27fa55e9-2cdf-4f09-9d96-cf47cff1f933\",\"moduleSequenceNumber\":3295}],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":410,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.gang.getOtherGangInformation()); } catch { }\\n        if (ns.read(\\\"/Temp/gang-other-gang-info.txt\\\") != result) await ns.write(\\\"/Temp/gang-other-gang-info.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-other-gang-info.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///9c062f9b-5a9b-4c4c-a3ea-e7b762e48b94\",\"moduleSequenceNumber\":328},{\"filename\":\"/Temp/gang-other-gang-info.txt.js\",\"url\":\"blob:file:///a60c8015-7088-42f4-b4f8-64da800f0afa\",\"moduleSequenceNumber\":672}],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":411,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getOtherGangInformation\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.gang.canRecruitMember() && ns.gang.recruitMember('Salesforce')); } catch { }\\n        if (ns.read(\\\"/Temp/gang-recruit-member.txt\\\") != result) await ns.write(\\\"/Temp/gang-recruit-member.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-recruit-member.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///0c52da91-3629-4fea-b1d9-e36d00c37d45\",\"moduleSequenceNumber\":520271},{\"filename\":\"/Temp/gang-recruit-member.txt.js\",\"url\":\"blob:file:///34cebc19-1f19-4705-a76f-ab25d0d591c3\",\"moduleSequenceNumber\":607265}],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"home\",\"moduleSequenceNumber\":412,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.canRecruitMember\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.recruitMember\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([\\\"Instagram\\\",\\\"Netflix\\\",\\\"Facebook\\\",\\\"Imgur\\\",\\\"Apple\\\",\\\"Microsoft\\\",\\\"GitHub\\\",\\\"DropBox\\\",\\\"Oomnitza\\\",\\\"Google\\\",\\\"WhatsApp\\\",\\\"Salesforce\\\"].map(e => [e, ns.gang.getAscensionResult(e)]))); } catch { }\\n        if (ns.read(\\\"/Temp/gang-getAscensionResult.txt\\\") != result) await ns.write(\\\"/Temp/gang-getAscensionResult.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-getAscensionResult.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///02f43205-7fda-4e6b-8857-e3e1851e6b6b\",\"moduleSequenceNumber\":328},{\"filename\":\"/Temp/gang-getAscensionResult.txt.js\",\"url\":\"blob:file:///fb5437e4-02f6-4829-83d4-514f68e107b9\",\"moduleSequenceNumber\":675}],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":413,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getAscensionResult\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.getOwnedAugmentations(true)); } catch { }\\n        if (ns.read(\\\"/Temp/player-augs-purchased.txt\\\") != result) await ns.write(\\\"/Temp/player-augs-purchased.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/player-augs-purchased.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///0a6c7d58-44d9-4bf7-b83b-91027b42b958\",\"moduleSequenceNumber\":328},{\"filename\":\"/Temp/player-augs-purchased.txt.js\",\"url\":\"blob:file:///c5300e82-39d2-4020-970e-85619780d778\",\"moduleSequenceNumber\":660}],\"dependents\":[],\"ramUsage\":6.6,\"server\":\"home\",\"moduleSequenceNumber\":414,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getOwnedAugmentations\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([\\\"Unstable Circadian Modulator\\\",\\\"HemoRecirculator\\\",\\\"Augmented Targeting I\\\",\\\"Augmented Targeting II\\\",\\\"Augmented Targeting III\\\",\\\"Synthetic Heart\\\",\\\"Synfibril Muscle\\\",\\\"Combat Rib I\\\",\\\"Combat Rib II\\\",\\\"Combat Rib III\\\",\\\"Nanofiber Weave\\\",\\\"NEMEAN Subdermal Weave\\\",\\\"Wired Reflexes\\\",\\\"Graphene Bone Lacings\\\",\\\"Bionic Spine\\\",\\\"Graphene Bionic Spine Upgrade\\\",\\\"Bionic Legs\\\",\\\"Graphene Bionic Legs Upgrade\\\",\\\"Speech Processor Implant\\\",\\\"TITN-41 Gene-Modification Injection\\\",\\\"Enhanced Social Interaction Implant\\\",\\\"BitWire\\\",\\\"Artificial Bio-neural Network Implant\\\",\\\"Artificial Synaptic Potentiation\\\",\\\"Enhanced Myelin Sheathing\\\",\\\"Synaptic Enhancement Implant\\\",\\\"Neural-Retention Enhancement\\\",\\\"DataJack\\\",\\\"Embedded Netburner Module\\\",\\\"Embedded Netburner Module Core Implant\\\",\\\"Embedded Netburner Module Core V2 Upgrade\\\",\\\"Embedded Netburner Module Core V3 Upgrade\\\",\\\"Embedded Netburner Module Analyze Engine\\\",\\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\\"Neuralstimulator\\\",\\\"Neural Accelerator\\\",\\\"Cranial Signal Processors - Gen I\\\",\\\"Cranial Signal Processors - Gen II\\\",\\\"Cranial Signal Processors - Gen III\\\",\\\"Cranial Signal Processors - Gen IV\\\",\\\"Cranial Signal Processors - Gen V\\\",\\\"Neuronal Densification\\\",\\\"Nuoptimal Nootropic Injector Implant\\\",\\\"Speech Enhancement\\\",\\\"FocusWire\\\",\\\"PC Direct-Neural Interface\\\",\\\"PC Direct-Neural Interface Optimization Submodule\\\",\\\"PC Direct-Neural Interface NeuroNet Injector\\\",\\\"ADR-V1 Pheromone Gene\\\",\\\"ADR-V2 Pheromone Gene\\\",\\\"The Shadow's Simulacrum\\\",\\\"Hacknet Node CPU Architecture Neural-Upload\\\",\\\"Hacknet Node Cache Architecture Neural-Upload\\\",\\\"Hacknet Node NIC Architecture Neural-Upload\\\",\\\"Hacknet Node Kernel Direct-Neural Interface\\\",\\\"Hacknet Node Core Direct-Neural Interface\\\",\\\"Neurotrainer I\\\",\\\"Neurotrainer II\\\",\\\"Neurotrainer III\\\",\\\"HyperSight Corneal Implant\\\",\\\"LuminCloaking-V1 Skin Implant\\\",\\\"LuminCloaking-V2 Skin Implant\\\",\\\"SmartSonar Implant\\\",\\\"Power Recirculation Core\\\",\\\"QLink\\\",\\\"SPTN-97 Gene Modification\\\",\\\"ECorp HVMind Implant\\\",\\\"CordiARC Fusion Reactor\\\",\\\"SmartJaw\\\",\\\"Neotra\\\",\\\"Xanipher\\\",\\\"Hydroflame Left Arm\\\",\\\"nextSENS Gene Modification\\\",\\\"OmniTek InfoLoad\\\",\\\"Photosynthetic Cells\\\",\\\"BitRunners Neurolink\\\",\\\"The Black Hand\\\",\\\"CRTX42-AA Gene Modification\\\",\\\"Neuregen Gene Modification\\\",\\\"CashRoot Starter Kit\\\",\\\"NutriGen Implant\\\",\\\"PCMatrix\\\",\\\"INFRARET Enhancement\\\",\\\"DermaForce Particle Barrier\\\",\\\"Graphene BrachiBlades Upgrade\\\",\\\"Graphene Bionic Arms Upgrade\\\",\\\"BrachiBlades\\\",\\\"Bionic Arms\\\",\\\"Social Negotiation Assistant (S.N.A)\\\",\\\"Neuroreceptor Management Implant\\\"].map(e => [e, ns.getAugmentationRepReq(e)]))); } catch { }\\n        if (ns.read(\\\"/Temp/aug-repreqs.txt\\\") != result) await ns.write(\\\"/Temp/aug-repreqs.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/aug-repreqs.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///2db72b12-009e-4edf-8af1-a23b5c18887a\",\"moduleSequenceNumber\":328},{\"filename\":\"/Temp/aug-repreqs.txt.js\",\"url\":\"blob:file:///6885ae30-820f-417c-b576-b24089aa873c\",\"moduleSequenceNumber\":661}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"home\",\"moduleSequenceNumber\":415,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getAugmentationRepReq\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.gang.ascendMember('Microsoft')); } catch { }\\n        if (ns.read(\\\"/Temp/gang-ascend-member.txt\\\") != result) await ns.write(\\\"/Temp/gang-ascend-member.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-ascend-member.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///b1d6329b-b072-4e57-bb3b-936a6e00c1b5\",\"moduleSequenceNumber\":328},{\"filename\":\"/Temp/gang-ascend-member.txt.js\",\"url\":\"blob:file:///eadb714d-a574-4ce6-b9cb-d843715082bd\",\"moduleSequenceNumber\":3291}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"home\",\"moduleSequenceNumber\":416,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.ascendMember\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify([{\\\"member\\\":\\\"Apple\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"Baseball Bat\\\",\\\"cost\\\":286383.0276479806},{\\\"member\\\":\\\"Oomnitza\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"Baseball Bat\\\",\\\"cost\\\":286383.0276479806},{\\\"member\\\":\\\"WhatsApp\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"Baseball Bat\\\",\\\"cost\\\":286383.0276479806},{\\\"member\\\":\\\"Salesforce\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"Baseball Bat\\\",\\\"cost\\\":286383.0276479806},{\\\"member\\\":\\\"Apple\\\",\\\"type\\\":\\\"Armor\\\",\\\"equipmentName\\\":\\\"Bulletproof Vest\\\",\\\"cost\\\":572766.0552959612},{\\\"member\\\":\\\"Oomnitza\\\",\\\"type\\\":\\\"Armor\\\",\\\"equipmentName\\\":\\\"Bulletproof Vest\\\",\\\"cost\\\":572766.0552959612},{\\\"member\\\":\\\"WhatsApp\\\",\\\"type\\\":\\\"Armor\\\",\\\"equipmentName\\\":\\\"Bulletproof Vest\\\",\\\"cost\\\":572766.0552959612},{\\\"member\\\":\\\"Salesforce\\\",\\\"type\\\":\\\"Armor\\\",\\\"equipmentName\\\":\\\"Bulletproof Vest\\\",\\\"cost\\\":572766.0552959612},{\\\"member\\\":\\\"Apple\\\",\\\"type\\\":\\\"Vehicle\\\",\\\"equipmentName\\\":\\\"Ford Flex V20\\\",\\\"cost\\\":859149.0829439419},{\\\"member\\\":\\\"Oomnitza\\\",\\\"type\\\":\\\"Vehicle\\\",\\\"equipmentName\\\":\\\"Ford Flex V20\\\",\\\"cost\\\":859149.0829439419},{\\\"member\\\":\\\"WhatsApp\\\",\\\"type\\\":\\\"Vehicle\\\",\\\"equipmentName\\\":\\\"Ford Flex V20\\\",\\\"cost\\\":859149.0829439419},{\\\"member\\\":\\\"Salesforce\\\",\\\"type\\\":\\\"Vehicle\\\",\\\"equipmentName\\\":\\\"Ford Flex V20\\\",\\\"cost\\\":859149.0829439419},{\\\"member\\\":\\\"Apple\\\",\\\"type\\\":\\\"Armor\\\",\\\"equipmentName\\\":\\\"Full Body Armor\\\",\\\"cost\\\":1431915.1382399031},{\\\"member\\\":\\\"Oomnitza\\\",\\\"type\\\":\\\"Armor\\\",\\\"equipmentName\\\":\\\"Full Body Armor\\\",\\\"cost\\\":1431915.1382399031},{\\\"member\\\":\\\"WhatsApp\\\",\\\"type\\\":\\\"Armor\\\",\\\"equipmentName\\\":\\\"Full Body Armor\\\",\\\"cost\\\":1431915.1382399031},{\\\"member\\\":\\\"Salesforce\\\",\\\"type\\\":\\\"Armor\\\",\\\"equipmentName\\\":\\\"Full Body Armor\\\",\\\"cost\\\":1431915.1382399031},{\\\"member\\\":\\\"Apple\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"NUKE Rootkit\\\",\\\"cost\\\":1431915.1382399031},{\\\"member\\\":\\\"Oomnitza\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"NUKE Rootkit\\\",\\\"cost\\\":1431915.1382399031},{\\\"member\\\":\\\"WhatsApp\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"NUKE Rootkit\\\",\\\"cost\\\":1431915.1382399031},{\\\"member\\\":\\\"Salesforce\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"NUKE Rootkit\\\",\\\"cost\\\":1431915.1382399031},{\\\"member\\\":\\\"Apple\\\",\\\"type\\\":\\\"Vehicle\\\",\\\"equipmentName\\\":\\\"ATX1070 Superbike\\\",\\\"cost\\\":2577447.248831826},{\\\"member\\\":\\\"Oomnitza\\\",\\\"type\\\":\\\"Vehicle\\\",\\\"equipmentName\\\":\\\"ATX1070 Superbike\\\",\\\"cost\\\":2577447.248831826},{\\\"member\\\":\\\"WhatsApp\\\",\\\"type\\\":\\\"Vehicle\\\",\\\"equipmentName\\\":\\\"ATX1070 Superbike\\\",\\\"cost\\\":2577447.248831826},{\\\"member\\\":\\\"Salesforce\\\",\\\"type\\\":\\\"Vehicle\\\",\\\"equipmentName\\\":\\\"ATX1070 Superbike\\\",\\\"cost\\\":2577447.248831826},{\\\"member\\\":\\\"Apple\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"Katana\\\",\\\"cost\\\":3436596.3317757677},{\\\"member\\\":\\\"Oomnitza\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"Katana\\\",\\\"cost\\\":3436596.3317757677},{\\\"member\\\":\\\"WhatsApp\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"Katana\\\",\\\"cost\\\":3436596.3317757677},{\\\"member\\\":\\\"Salesforce\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"Katana\\\",\\\"cost\\\":3436596.3317757677},{\\\"member\\\":\\\"Apple\\\",\\\"type\\\":\\\"Vehicle\\\",\\\"equipmentName\\\":\\\"Mercedes-Benz S9001\\\",\\\"cost\\\":5154894.497663652},{\\\"member\\\":\\\"Oomnitza\\\",\\\"type\\\":\\\"Vehicle\\\",\\\"equipmentName\\\":\\\"Mercedes-Benz S9001\\\",\\\"cost\\\":5154894.497663652},{\\\"member\\\":\\\"WhatsApp\\\",\\\"type\\\":\\\"Vehicle\\\",\\\"equipmentName\\\":\\\"Mercedes-Benz S9001\\\",\\\"cost\\\":5154894.497663652},{\\\"member\\\":\\\"Salesforce\\\",\\\"type\\\":\\\"Vehicle\\\",\\\"equipmentName\\\":\\\"Mercedes-Benz S9001\\\",\\\"cost\\\":5154894.497663652},{\\\"member\\\":\\\"Apple\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"Glock 18C\\\",\\\"cost\\\":7159575.691199516},{\\\"member\\\":\\\"Oomnitza\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"Glock 18C\\\",\\\"cost\\\":7159575.691199516},{\\\"member\\\":\\\"WhatsApp\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"Glock 18C\\\",\\\"cost\\\":7159575.691199516},{\\\"member\\\":\\\"Salesforce\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"Glock 18C\\\",\\\"cost\\\":7159575.691199516},{\\\"member\\\":\\\"Apple\\\",\\\"type\\\":\\\"Armor\\\",\\\"equipmentName\\\":\\\"Liquid Body Armor\\\",\\\"cost\\\":7159575.691199516},{\\\"member\\\":\\\"Oomnitza\\\",\\\"type\\\":\\\"Armor\\\",\\\"equipmentName\\\":\\\"Liquid Body Armor\\\",\\\"cost\\\":7159575.691199516},{\\\"member\\\":\\\"WhatsApp\\\",\\\"type\\\":\\\"Armor\\\",\\\"equipmentName\\\":\\\"Liquid Body Armor\\\",\\\"cost\\\":7159575.691199516},{\\\"member\\\":\\\"Salesforce\\\",\\\"type\\\":\\\"Armor\\\",\\\"equipmentName\\\":\\\"Liquid Body Armor\\\",\\\"cost\\\":7159575.691199516},{\\\"member\\\":\\\"Apple\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"Soulstealer Rootkit\\\",\\\"cost\\\":7159575.691199516},{\\\"member\\\":\\\"Oomnitza\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"Soulstealer Rootkit\\\",\\\"cost\\\":7159575.691199516},{\\\"member\\\":\\\"WhatsApp\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"Soulstealer Rootkit\\\",\\\"cost\\\":7159575.691199516},{\\\"member\\\":\\\"Salesforce\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"Soulstealer Rootkit\\\",\\\"cost\\\":7159575.691199516},{\\\"member\\\":\\\"Apple\\\",\\\"type\\\":\\\"Vehicle\\\",\\\"equipmentName\\\":\\\"White Ferrari\\\",\\\"cost\\\":8591490.829439418},{\\\"member\\\":\\\"Oomnitza\\\",\\\"type\\\":\\\"Vehicle\\\",\\\"equipmentName\\\":\\\"White Ferrari\\\",\\\"cost\\\":8591490.829439418},{\\\"member\\\":\\\"WhatsApp\\\",\\\"type\\\":\\\"Vehicle\\\",\\\"equipmentName\\\":\\\"White Ferrari\\\",\\\"cost\\\":8591490.829439418},{\\\"member\\\":\\\"Salesforce\\\",\\\"type\\\":\\\"Vehicle\\\",\\\"equipmentName\\\":\\\"White Ferrari\\\",\\\"cost\\\":8591490.829439418},{\\\"member\\\":\\\"Apple\\\",\\\"type\\\":\\\"Armor\\\",\\\"equipmentName\\\":\\\"Graphene Plating Armor\\\",\\\"cost\\\":11455321.105919225},{\\\"member\\\":\\\"Oomnitza\\\",\\\"type\\\":\\\"Armor\\\",\\\"equipmentName\\\":\\\"Graphene Plating Armor\\\",\\\"cost\\\":11455321.105919225},{\\\"member\\\":\\\"WhatsApp\\\",\\\"type\\\":\\\"Armor\\\",\\\"equipmentName\\\":\\\"Graphene Plating Armor\\\",\\\"cost\\\":11455321.105919225},{\\\"member\\\":\\\"Salesforce\\\",\\\"type\\\":\\\"Armor\\\",\\\"equipmentName\\\":\\\"Graphene Plating Armor\\\",\\\"cost\\\":11455321.105919225},{\\\"member\\\":\\\"Apple\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"Hmap Node\\\",\\\"cost\\\":11455321.105919225},{\\\"member\\\":\\\"Oomnitza\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"Hmap Node\\\",\\\"cost\\\":11455321.105919225},{\\\"member\\\":\\\"WhatsApp\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"Hmap Node\\\",\\\"cost\\\":11455321.105919225},{\\\"member\\\":\\\"Salesforce\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"Hmap Node\\\",\\\"cost\\\":11455321.105919225},{\\\"member\\\":\\\"Apple\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"P90C\\\",\\\"cost\\\":14319151.382399032},{\\\"member\\\":\\\"Oomnitza\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"P90C\\\",\\\"cost\\\":14319151.382399032},{\\\"member\\\":\\\"WhatsApp\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"P90C\\\",\\\"cost\\\":14319151.382399032},{\\\"member\\\":\\\"Salesforce\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"P90C\\\",\\\"cost\\\":14319151.382399032},{\\\"member\\\":\\\"Apple\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"Steyr AUG\\\",\\\"cost\\\":17182981.658878837},{\\\"member\\\":\\\"Oomnitza\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"Steyr AUG\\\",\\\"cost\\\":17182981.658878837},{\\\"member\\\":\\\"WhatsApp\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"Steyr AUG\\\",\\\"cost\\\":17182981.658878837},{\\\"member\\\":\\\"Salesforce\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"Steyr AUG\\\",\\\"cost\\\":17182981.658878837},{\\\"member\\\":\\\"Apple\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"Demon Rootkit\\\",\\\"cost\\\":21478727.07359855},{\\\"member\\\":\\\"Oomnitza\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"Demon Rootkit\\\",\\\"cost\\\":21478727.07359855},{\\\"member\\\":\\\"WhatsApp\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"Demon Rootkit\\\",\\\"cost\\\":21478727.07359855},{\\\"member\\\":\\\"Salesforce\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"Demon Rootkit\\\",\\\"cost\\\":21478727.07359855},{\\\"member\\\":\\\"Apple\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"Jack the Ripper\\\",\\\"cost\\\":21478727.07359855},{\\\"member\\\":\\\"Oomnitza\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"Jack the Ripper\\\",\\\"cost\\\":21478727.07359855},{\\\"member\\\":\\\"WhatsApp\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"Jack the Ripper\\\",\\\"cost\\\":21478727.07359855},{\\\"member\\\":\\\"Salesforce\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"Jack the Ripper\\\",\\\"cost\\\":21478727.07359855},{\\\"member\\\":\\\"Apple\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"AK-47\\\",\\\"cost\\\":28638302.764798064},{\\\"member\\\":\\\"Oomnitza\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"AK-47\\\",\\\"cost\\\":28638302.764798064},{\\\"member\\\":\\\"WhatsApp\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"AK-47\\\",\\\"cost\\\":28638302.764798064},{\\\"member\\\":\\\"Salesforce\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"AK-47\\\",\\\"cost\\\":28638302.764798064},{\\\"member\\\":\\\"Apple\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"M15A10 Assault Rifle\\\",\\\"cost\\\":42957454.1471971},{\\\"member\\\":\\\"Oomnitza\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"M15A10 Assault Rifle\\\",\\\"cost\\\":42957454.1471971},{\\\"member\\\":\\\"WhatsApp\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"M15A10 Assault Rifle\\\",\\\"cost\\\":42957454.1471971},{\\\"member\\\":\\\"Salesforce\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"M15A10 Assault Rifle\\\",\\\"cost\\\":42957454.1471971},{\\\"member\\\":\\\"Apple\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"AWM Sniper Rifle\\\",\\\"cost\\\":64436181.22079564},{\\\"member\\\":\\\"Oomnitza\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"AWM Sniper Rifle\\\",\\\"cost\\\":64436181.22079564},{\\\"member\\\":\\\"WhatsApp\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"AWM Sniper Rifle\\\",\\\"cost\\\":64436181.22079564},{\\\"member\\\":\\\"Salesforce\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"AWM Sniper Rifle\\\",\\\"cost\\\":64436181.22079564}].reduce((success, o) => success && ns.gang.purchaseEquipment(o.member, o.equipmentName), true)); } catch { }\\n        if (ns.read(\\\"/Temp/gang-upgrade-members.txt\\\") != result) await ns.write(\\\"/Temp/gang-upgrade-members.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-upgrade-members.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///426841c4-6cd2-4c44-8438-be42b290d350\",\"moduleSequenceNumber\":328},{\"filename\":\"/Temp/gang-upgrade-members.txt.js\",\"url\":\"blob:file:///c136e09c-4043-4a1f-9071-05f1b3605ba4\",\"moduleSequenceNumber\":3293}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"home\",\"moduleSequenceNumber\":417,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { ns.gang.setTerritoryWarfare(false); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-set-warfare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///42cbdf11-13dc-41ef-867d-5bd8c2b2edbb\",\"moduleSequenceNumber\":328},{\"filename\":\"/Temp/gang-set-warfare.js\",\"url\":\"blob:file:///888cdb53-d453-44b6-aa7f-bb6f95ca7300\",\"moduleSequenceNumber\":1675}],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":418,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.setTerritoryWarfare\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const factionList = [\\n\\t/* basic factions */\\n\\t\\\"CyberSec\\\",\\n\\t\\\"Tian Di Hui\\\",\\n\\t\\\"Netburners\\\",\\n\\t\\\"NiteSec\\\",\\n\\t\\\"The Black Hand\\\",\\n\\t\\\"BitRunners\\\",\\n];\\n\\nconst locationFactionList = [\\n\\t\\\"Sector-12\\\",\\n\\t\\\"Chongqing\\\",\\n\\t\\\"New Tokyo\\\",\\n\\t\\\"Ishima\\\",\\n\\t\\\"Aevum\\\",\\n\\t\\\"Volhaven\\\",\\n\\n];\\n\\nconst gangList = [\\n\\t\\\"Slum Snakes\\\",\\n\\t\\\"Tetrads\\\",\\n\\t\\\"Silhouette\\\",\\n\\t\\\"Speakers for the Dead\\\",\\n\\t\\\"The Dark Army\\\",\\n\\t\\\"The Syndicate\\\",\\n];\\n\\nconst endgameFactionList = [\\n\\t\\\"The Covenant\\\",\\n\\t\\\"Daedalus\\\",\\n\\t\\\"Illuminati\\\",\\n];\\n\\nconst corpList = [\\n\\t\\\"ECorp\\\",\\n\\t\\\"MegaCorp\\\",\\n\\t\\\"KuaiGong International\\\",\\n\\t\\\"Four Sigma\\\",\\n\\t\\\"NWO\\\",\\n\\t\\\"Blade Industries\\\",\\n\\t\\\"OmniTek Incorporated\\\",\\n\\t\\\"Bachman & Associates\\\",\\n\\t\\\"Clarke Incorporated\\\",\\n\\t\\\"Fulcrum Secret Technologies\\\",\\n];\\n\\nconst aug_bonus_types = {\\n\\thack: [\\\"hacking_mult\\\", \\\"hacking_exp_mult\\\", \\\"hacking_speed_mult\\\", \\\"hacking_chance_mult\\\", \\\"hacking_grow_mult\\\", \\\"hacking_money_mult\\\"],\\n\\tfaction: [\\\"faction_rep_mult\\\"],\\n\\tcompany: [\\\"company_rep_mult\\\", \\\"work_money_mult\\\"],\\n\\tcrime: [\\\"crime_success_mult\\\", \\\"crime_money_mult\\\"],\\n\\tcombat: [\\\"agility_exp_mult\\\", \\\"agility_mult\\\", \\\"defense_exp_mult\\\", \\\"defense_mult\\\", \\\"dexterity_exp_mult\\\", \\\"dexterity_mult\\\", \\\"strength_exp_mult\\\", \\\"strength_mult\\\"],\\n\\tcharisma: [\\\"charisma_exp_mult\\\", \\\"charisma_mult\\\"]\\n};\\n\\nconst augs_to_ignore = [\\n\\t\\\"NeuroFlux Governor\\\",\\n\\t\\\"The Red Pill\\\",\\n];\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst flagdata = ns.flags([\\n\\t\\t[\\\"factions\\\", false],\\n\\t\\t[\\\"locations\\\", false],\\n\\t\\t[\\\"gangs\\\", false],\\n\\t\\t[\\\"endgame\\\", false],\\n\\t\\t[\\\"corps\\\", false],\\n\\t\\t[\\\"all\\\", false],\\n\\t\\t[\\\"faction\\\", \\\"\\\"],\\n\\t\\t[\\\"help\\\", false],\\n\\t\\t[\\\"type\\\", []],\\n\\t\\t[\\\"ask\\\", false],\\n\\t\\t[\\\"buy\\\", false],\\n\\t])\\n\\tlet factions_to_consider = [];\\n\\tlet types_to_consider = [];\\n\\tif (flagdata.help) {\\n\\t\\tns.tprint(\\n\\t\\t\\t`Pass in any of: --factions, --locations, --gangs, --corps, --endgame; or --all for factions. Use --faction X for a specific faction.\\n\\t\\t\\t   --type can be: ${Object.keys(aug_bonus_types).join(\\\", \\\")} or all.\\n\\t\\t\\t   --ask prompts to buy; --buy autobuys any augs. If neither are specified, no purchasing will happen.`\\n\\t\\t);\\n\\t\\treturn\\n\\t}\\n\\t// If they didn't pass in a valid type, yell\\n\\tif (!flagdata.type == \\\"all\\\" && !Object.keys(aug_bonus_types).some(items => flagdata.type.includes(items))) {\\n\\t\\tns.tprint(\\\"you dun goofed\\\");\\n\\t\\treturn\\n\\t}\\n\\tconst pattern = [\\n\\t\\t[data => { return data.factions || data.all }, () => factions_to_consider.push(...factionList)],\\n\\t\\t[data => { return data.locations || data.all }, () => factions_to_consider.push(...locationFactionList)],\\n\\t\\t[data => { return data.gangs || data.all }, () => factions_to_consider.push(...gangList)],\\n\\t\\t[data => { return data.corps || data.all }, () => factions_to_consider.push(...corpList)],\\n\\t\\t[data => { return data.endgame || data.all }, () => factions_to_consider.push(...endgameFactionList)],\\n\\t\\t[data => { return data.faction }, (data) => { factions_to_consider.push(data.faction) }],\\n\\t\\t[data => { return data.type }, (data) => { (data.type == \\\"all\\\" ? types_to_consider.push(Object.keys(aug_bonus_types)) : types_to_consider.push(data.type)) }],\\n\\n\\t]\\n\\tfor (const [condition, action] of pattern) {\\n\\t\\tif (condition(flagdata)) action(flagdata)\\n\\t}\\n\\t// Build the map of possible augs\\n\\tlet aug_map = buildAugMap(ns, factions_to_consider, true);\\n\\t// Map the shorthand type arguments to actual aug stats we want\\n\\tlet aug_stat_types = getStatsFromTypes(types_to_consider.flat());\\n\\t// Now let's take a look at the rep requirements, and costs...\\n\\tlet desired_aug_names = filterAugsByStats(ns, aug_map, aug_stat_types);\\n\\t// Narrow it down to +exp first...\\n\\tlet desired_augs = Object.entries(aug_map).filter(([key, value]) => desired_aug_names.includes(key));\\n\\tlet exp_augs = filterByExp(desired_augs);\\n\\t// Now prompt\\n\\tif (flagdata.ask || flagdata.buy) {\\n\\t\\tif (exp_augs.length > 0) {\\n\\t\\t\\tawait promptForAugs(ns, aug_map, exp_augs, flagdata.ask, flagdata.buy)\\n\\t\\t} else {\\n\\t\\t\\tawait promptForAugs(ns, aug_map, Object.fromEntries(desired_augs), flagdata.ask, flagdata.buy)\\n\\t\\t}\\n\\t} else {\\n\\t\\tlet sorted_exp_augs = Object.keys(exp_augs).sort((a, b) => a[\\\"cost\\\"] - b[\\\"cost\\\"]).reverse();\\n\\t\\tns.tprint(\\\"Augs with +exp stats sorted by cost: \\\" + sorted_exp_augs.join(\\\", \\\"));\\n\\t\\tlet sorted_desired_augs = Object.entries(Object.fromEntries(desired_augs)).sort(([,a], [,b]) => a[\\\"cost\\\"] - b[\\\"cost\\\"]).reverse()[0];\\n\\t\\tns.tprint(\\\"Augs to aim for with your desired stats: \\\" + sorted_desired_augs.join(\\\", \\\"));\\n\\t\\tns.tprint(`Most expensive aug is ${sorted_desired_augs[0]} at ${ns.nFormat(Object.fromEntries(desired_augs)[sorted_desired_augs[0]][\\\"cost\\\"], '$0.00a')}`);\\n\\t\\tlet most_rep_aug = Object.entries(Object.fromEntries(desired_augs)).sort(([,a], [,b]) => a[\\\"repreq\\\"] - b[\\\"repreq\\\"]).reverse()[0][0];\\n\\t\\tns.tprint(`Most rep-required aug is ${most_rep_aug} at ${ns.nFormat(aug_map[most_rep_aug][\\\"repreq\\\"], '0.000a')}`);\\n\\t}\\n}\\n\\n/**\\n * Build up a map of augmentations available everywhere for future slicing\\n * @param {NS} ns\\n * @param {array} factions_to_consider A list of factions to search through \\n * @param {boolean} skip_nf Skip NeuroFlux Governor \\n */\\nfunction buildAugMap(ns, factions_to_consider, skip_nf) {\\n\\t// ns.tprint(`Factions to consider: ${factions_to_consider}`);\\n\\tlet aug_map = {};\\n\\t// Keys: augmentation name; Values: an object aug_model = {\\\"factions\\\": [], \\\"repreq\\\": 0, \\\"cost\\\": 0};\\n\\t// Now get all augs matching multipliers\\n\\tfor (const faction of factions_to_consider) {\\n\\t\\tlet avail_augs = ns.getAugmentationsFromFaction(faction).filter(item => !augs_to_ignore.includes(item));\\n\\t\\tfor (const aug of avail_augs) {\\n\\t\\t\\t// ns.tprint(`Considering ${aug} from ${faction}`)\\n\\t\\t\\t// Don't care about the infinitely-upgrading Governor\\n\\t\\t\\tif (aug == \\\"NeuroFlux Governor\\\" && skip_nf) continue\\n\\t\\t\\t// Get the stats, and cost\\n\\t\\t\\tlet aug_stats = ns.getAugmentationStats(aug);\\n\\t\\t\\tlet repreq = ns.getAugmentationRepReq(aug);\\n\\t\\t\\tlet cost = ns.getAugmentationPrice(aug);\\n\\t\\t\\tlet prereq = ns.getAugmentationPrereq(aug);\\n\\t\\t\\t// Add to the list of factions already found for a given aug\\n\\t\\t\\tlet augs_factions = [];\\n\\t\\t\\tif (aug in aug_map) {\\n\\t\\t\\t\\taugs_factions = aug_map[aug][\\\"factions\\\"];\\n\\t\\t\\t}\\n\\t\\t\\taugs_factions.push(faction);\\n\\t\\t\\taug_map[aug] = { \\\"factions\\\": augs_factions, \\\"repreq\\\": repreq, \\\"prereq\\\": prereq, \\\"cost\\\": cost, \\\"stats\\\": aug_stats };\\n\\t\\t}\\n\\t}\\n\\treturn aug_map;\\n}\\n\\n/** \\n * Return a list of aug names filtered by stats\\n * @param {NS} ns\\n * @param {map} aug_map Map of all augmentations generated by buildAugMap()\\n * @param {array} desired_stats A list of stats to search for \\n */\\nfunction filterAugsByStats(ns, aug_map, desired_stats) {\\n\\tlet desired_augs = [];\\n\\t// Get my augs first\\n\\tlet my_augs = ns.getOwnedAugmentations(true);\\n\\t// Brute force it:\\n\\tfor (let [aug, model] of Object.entries(aug_map)) {\\n\\t\\t// Filter out my already installed augs\\n\\t\\tif (my_augs.includes(aug)) continue\\n\\t\\t/*\\n\\t\\t * Basic filtering code:\\n\\t\\t * desired_stats = [\\\"hacking_exp_mult\\\", \\\"hacking_money_mult\\\"]\\n\\t\\t * Object.keys(item[\\\"stats\\\"]) = [\\\"hacking_mult\\\", \\\"hacking_exp_mult\\\", \\\"hacking_speed_mult\\\"]\\n\\t\\t * let matches = desired_stats.filter( items => actual_stats.includes(items) );\\n\\t\\t */\\n\\t\\t// Look for matching stats\\n\\t\\tlet matching_stats = desired_stats.filter(items => Object.keys(model[\\\"stats\\\"]).includes(items));\\n\\t\\tif (matching_stats.length > 0) {\\n\\t\\t\\tdesired_augs.push(aug);\\n\\t\\t\\t// ns.tprint(`${aug} from [${model[\\\"factions\\\"].join(\\\", \\\")}]: ${matching_stats.join(\\\", \\\")}`);\\n\\t\\t}\\n\\t}\\n\\treturn desired_augs.flat();\\n}\\n\\n/**\\n * Return a list of aug stats from the passed in types\\n * @param {array} types Shorthand types passed in to ns.flags\\n */\\nfunction getStatsFromTypes(types) {\\n\\tlet stat_list = [];\\n\\tfor (let type of types) {\\n\\t\\tstat_list.push(aug_bonus_types[type]);\\n\\t}\\n\\treturn stat_list.flat()\\n}\\n\\n/**\\n * Return a dictionary of augs containing +exp bonuses\\n * @param aug_map Object of augmentations\\n */\\nfunction filterByExp(aug_map) {\\n\\t// Prioritize exp gain first\\n\\tlet fixed_aug_map = Object.fromEntries(Object.values(aug_map));\\n\\tlet exp_augs = {};\\n\\tfor (const [aug, aug_model] of Object.entries(fixed_aug_map)) {\\n\\t\\tfor (const stat of Object.keys(aug_model[\\\"stats\\\"])) {\\n\\t\\t\\tif (stat.includes(\\\"exp\\\")) {\\n\\t\\t\\t\\texp_augs[aug] = aug_model\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn exp_augs\\n}\\n\\n/** @param {NS} ns **/\\nasync function promptForAugs(ns, aug_map, desired_augs, should_prompt, should_autobuy) {\\n\\t// Sort by cost, then prompt to buy\\n\\tlet sorted_augs = Object.fromEntries(Object.entries(desired_augs).sort((a, b) => a[\\\"cost\\\"] - b[\\\"cost\\\"]).reverse());\\n\\tns.tprint(\\\"Augs to aim for: \\\" + Object.keys(sorted_augs).join(\\\", \\\"));\\n\\t// ns.tprint(JSON.stringify(Object.keys(sorted_augs), null, 4));\\n\\tfor (const [aug, aug_model] of Object.entries(sorted_augs)) {\\n\\t\\tawait purchaseAug(ns, aug, aug_map, should_prompt, should_autobuy);\\n\\t}\\n\\t// Object.keys(sorted_augs).forEach(aug => await purchaseAug(ns, aug, aug_map, should_prompt, should_autobuy));\\n}\\n\\nfunction getCommonFaction(player_factions, faction_list) {\\n\\treturn faction_list.filter(faction => player_factions.includes(faction))\\n}\\n\\n/** \\n * Purchase an aug. Return true if succeeded, otherwise false.\\n * @param {NS} ns \\n * @param {string} aug Name of augmentation \\n * @param aug_model Model of stats about augmentation\\n**/\\nasync function purchaseAug(ns, aug, aug_map, should_prompt, should_autobuy) {\\n\\t// So, you want to buy an augmentation.\\n\\t// ns.tprint(`Considering ${aug}`);\\n\\t// Do I have the rep?\\n\\tlet repAvail = augRepAvailable(ns, aug_map[aug][\\\"repreq\\\"], aug_map[aug][\\\"factions\\\"]);\\n\\t// ns.tprint(\\\"Rep: \\\" + repAvail);\\n\\t// Do I have the money?\\n\\tlet costAvail = augCostAvailable(ns, aug_map[aug][\\\"cost\\\"]);\\n\\t// ns.tprint(\\\"Cost: \\\" + costAvail);\\n\\t// Do I satisfy pre-reqs?\\n\\tlet prereqsAvail = augPreReqsAvailable(ns, aug_map[aug][\\\"prereq\\\"])\\n\\t// ns.tprint(\\\"PreReqs: \\\" + prereqsAvail);\\n\\tif (prereqsAvail) {\\n\\t\\tfor (const pre of prereqsAvail) await purchaseAug(ns, pre, aug_map, should_prompt, should_autobuy)\\n\\t}\\n\\t// If all of those are true, let's do it\\n\\tif (repAvail && costAvail && (prereqsAvail.length == 0)) {\\n\\t\\tlet should_buy = false;\\n\\t\\tlet did_buy = false;\\n\\t\\tif (should_prompt) {\\n\\t\\t\\tshould_buy = await ns.prompt(`Buy ${aug}?`);\\n\\t\\t}\\n\\t\\tif (should_autobuy || should_buy) {\\n\\t\\t\\tdid_buy = ns.purchaseAugmentation(repAvail, aug);\\n\\t\\t\\tif (did_buy) ns.tprint(`Purchased ${aug}!`)\\n\\t\\t\\tawait ns.sleep(5);\\n\\t\\t} else {\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\t}\\n}\\n\\n/** \\n * Return list of factions I have enough rep to buy from\\n * @param {NS} ns \\n * @param {string} aug Name of augmentation \\n * @param {number} repreq Amount of rep required \\n * @param {array} factions List of factions to check \\n**/\\nfunction augRepAvailable(ns, repreq, factions) {\\n\\t// Is this aug available to purchase right now?\\n\\tlet player = ns.getPlayer();\\n\\tlet myfactions = player.factions;\\n\\tlet commonFaction = getCommonFaction(myfactions, factions);\\n\\treturn commonFaction.find(faction => repreq <= ns.getFactionRep(faction))\\n}\\n\\n/** \\n * Return true if I have enough money to buy a faction\\n * @param {NS} ns \\n * @param {string} aug Name of augmentation \\n * @param {number} price Cost of aug\\n**/\\nfunction augCostAvailable(ns, price) {\\n\\t// Is this aug available to purchase right now?\\n\\tlet my_money = ns.getPlayer().money;\\n\\treturn (my_money >= price)\\n}\\n\\n/** \\n * Return a list of prereqs I do NOT satisfy; otherwise empty list\\n * @param {NS} ns \\n * @param {string} aug Name of augmentation \\n * @param {number} prereqs List of aug prereqs\\n**/\\nfunction augPreReqsAvailable(ns, prereqs) {\\n\\t// Do I meet all the pre-reqs?\\n\\tlet my_augs = ns.getOwnedAugmentations(true);\\n\\tlet unsatisfied = prereqs.filter(item => !my_augs.includes(item));\\n\\treturn unsatisfied\\n}\\n\\n\\n// function printCheckbox(condition, label) {\\n//   return `[${!!condition ? 'x' : ' '}] ${label}`\\n// }\",\"filename\":\"/UNUSED/AugmentMe.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"AugmentMe.js\",\"url\":\"blob:file:///9b8430c0-5f46-495e-928c-cef4ed8a0789\",\"moduleSequenceNumber\":730307}],\"dependents\":[],\"ramUsage\":35.6,\"server\":\"home\",\"moduleSequenceNumber\":419,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getAugmentationRepReq\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getAugmentationPrice\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getAugmentationPrereq\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"purchaseAugmentation\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getFactionRep\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const repoParams = {\\n    baseUrl: \\\"https://raw.githubusercontent.com/HtheChemist/BitBurnerCentralManager/master/build\\\",\\n    //baseUrl: \\\"http://localhost:9182\\\", // Dev version\\n    manifest: \\\"/resources/manifest.txt\\\",\\n    helpers: \\\"/lib/Helpers.js\\\",\\n    pullFiles: \\\"/Orchestrator/utils/pullFiles.js\\\"\\n};\\nasync function pullFile(ns, file) {\\n    const manifestUrl = `${repoParams.baseUrl}${file}`;\\n    ns.tprintf(`INFO   > Downloading ${manifestUrl} -> ${file}`);\\n    if (ns.fileExists(file))\\n        ns.rm(file);\\n    if (!(await ns.wget(manifestUrl, file, \\\"home\\\"))) {\\n        ns.tprintf(`ERROR  > ${manifestUrl} -> ${file} failed.`);\\n        ns.exit();\\n    }\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const files = [repoParams.helpers, repoParams.manifest, repoParams.pullFiles];\\n    for (let file of files) {\\n        await pullFile(ns, file);\\n    }\\n    ns.tprintf(`INFO   > Successfully pulled initial files!`);\\n    ns.tprintf(`INFO   > Running download script...`);\\n    await ns.sleep(250);\\n    ns.run(repoParams.pullFiles);\\n}\\n\",\"filename\":\"/Orchestrator/utils/initRepo.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Orchestrator/utils/initRepo.js\",\"url\":\"blob:file:///e48556aa-204c-4228-ac3b-00887cfc9e2f\",\"moduleSequenceNumber\":2630287}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"home\",\"moduleSequenceNumber\":420,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { repoParams } from \\\"/Orchestrator/utils/initRepo\\\";\\nconst ReadText = {\\n    readLines(ns, file) {\\n        return ns.read(file).split(/\\\\r?\\\\n/);\\n    },\\n    readNonEmptyLines(ns, file) {\\n        return ReadText.readLines(ns, file).filter((x) => x.trim() != \\\"\\\");\\n    },\\n};\\nconst DownloadFiles = {\\n    async getfileToHome(ns, source, dest) {\\n        const logger = new TermLogger(ns);\\n        logger.info(`Downloading ${source} -> ${dest}`);\\n        if (!(await ns.wget(source, dest, \\\"home\\\"))) {\\n            logger.err(`\\\\tFailed retrieving ${source} -> ${dest}`);\\n        }\\n    },\\n};\\nclass TermLogger {\\n    constructor(ns) {\\n        this.ns = ns;\\n    }\\n    info(msg, ...args) {\\n        this.ns.tprintf(`${TermLogger.INFO_LITERAL} ${msg}`, ...args);\\n    }\\n    warn(msg, ...args) {\\n        this.ns.tprintf(`${TermLogger.WARN_LITERAL} ${msg}`, ...args);\\n    }\\n    err(msg, ...args) {\\n        this.ns.tprintf(`${TermLogger.ERR_LITERAL} ${msg}`, ...args);\\n    }\\n    log(msg, ...args) {\\n        this.ns.tprintf(`${TermLogger.TRACE_LITERAL} ${msg}`, ...args);\\n    }\\n}\\nTermLogger.INFO_LITERAL = \\\"INFO   >\\\";\\nTermLogger.WARN_LITERAL = \\\"WARN   >\\\";\\nTermLogger.ERR_LITERAL = \\\"ERROR  >\\\";\\nTermLogger.TRACE_LITERAL = \\\"TRACE  >\\\";\\nclass RepoInit {\\n    constructor(ns, logger = new TermLogger(ns)) {\\n        this.ns = ns;\\n        this.logger = logger;\\n    }\\n    static getSourceDestPair(line) {\\n        return line.startsWith(\\\"./\\\")\\n            ? {\\n                source: `${repoParams.baseUrl}${line.substring(1)}`,\\n                dest: line.substring(1),\\n            }\\n            : null;\\n    }\\n    async pullScripts() {\\n        await this.getManifest();\\n        await this.downloadAllFiles();\\n    }\\n    async getManifest() {\\n        const manifestUrl = `${repoParams.baseUrl}${repoParams.manifest}`;\\n        this.logger.info(`Getting manifest...`);\\n        await DownloadFiles.getfileToHome(this.ns, manifestUrl, repoParams.manifest);\\n    }\\n    async downloadAllFiles() {\\n        const files = ReadText.readNonEmptyLines(this.ns, repoParams.manifest);\\n        this.logger.info(`Contents of manifest:`);\\n        this.logger.info(`\\\\t${files}`);\\n        for (let file of files) {\\n            const pair = RepoInit.getSourceDestPair(file);\\n            if (!pair) {\\n                this.logger.err(`Could not read line ${file}`);\\n            }\\n            else {\\n                await DownloadFiles.getfileToHome(this.ns, pair.source, pair.dest);\\n            }\\n        }\\n    }\\n}\\nexport { ReadText, TermLogger, RepoInit, DownloadFiles };\\n\",\"filename\":\"/lib/Helpers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":421,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { RepoInit } from \\\"/lib/Helpers\\\";\\nexport async function main(ns) {\\n    const initRepo = new RepoInit(ns);\\n    await initRepo.pullScripts();\\n}\\n\",\"filename\":\"/Orchestrator/utils/pullFiles.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Orchestrator/utils/initRepo.js\",\"url\":\"blob:file:///f70a5928-31dc-4ca3-b37b-a3956fd8a86c\",\"moduleSequenceNumber\":2630287},{\"filename\":\"/lib/Helpers.js\",\"url\":\"blob:file:///8112737d-7bbb-46cc-969f-f2b5fa6de401\",\"moduleSequenceNumber\":2630289},{\"filename\":\"/Orchestrator/utils/pullFiles.js\",\"url\":\"blob:file:///7bb38d7e-52f2-4da9-a1c2-f51c4b09d37c\",\"moduleSequenceNumber\":2630292}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":422,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { DEBUG } from \\\"/Orchestrator/Config/Debug\\\";\\nexport function dprint(ns, message) {\\n    if (DEBUG) {\\n        const now = new Date(Date.now());\\n        const hour = now.getHours();\\n        const minute = now.getMinutes();\\n        const second = now.getSeconds();\\n        const timestamp = hour + \\\":\\\" + minute + \\\":\\\" + second;\\n        ns.print(timestamp + \\\": \\\" + message);\\n    }\\n}\\n\",\"filename\":\"/Orchestrator/Common/Dprint.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":423,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Action, ChannelName } from \\\"/Orchestrator/MessageManager/enum\\\";\\nimport { Payload } from \\\"/Orchestrator/MessageManager/class\\\";\\nimport { KILL_MESSAGE } from \\\"/Orchestrator/Config/Config\\\";\\nimport { freeThreads } from \\\"/Orchestrator/ThreadManager/common\\\";\\nimport { dprint } from \\\"/Orchestrator/Common/Dprint\\\";\\nexport async function copyFile(ns, fileList, host) {\\n    for (let j = 0; j < fileList.length; j++) {\\n        const script = fileList[j];\\n        ns.fileExists(script, host) && ns.rm(script, host);\\n        await ns.scp(script, \\\"home\\\", host);\\n    }\\n}\\nexport async function executeScript(ns, script, threads, hack, messageHandler, id) {\\n    dprint(ns, \\\"Executing scripts: \\\" + script);\\n    let executedScript = 0;\\n    for (const host of Object.keys(threads)) {\\n        if (threads[host] === 0)\\n            continue;\\n        const pid = ns.exec(script, host, threads[host], hack.host, id, executedScript);\\n        if (pid > 0) {\\n            executedScript++;\\n        }\\n        else {\\n            dprint(ns, \\\"Hack \\\" + id + \\\" targeting \\\" + hack.host + \\\" could not start script on \\\" + host + \\\" with \\\" + threads[host] + \\\" threads.\\\");\\n            await freeThreads(ns, { [host]: threads[host] }, messageHandler);\\n        }\\n    }\\n    return executedScript;\\n}\\nexport async function checkForKill(ns, messageHandler) {\\n    const killMessage = await messageHandler.getMessagesInQueue(KILL_MESSAGE);\\n    if (killMessage.length > 0) {\\n        dprint(ns, \\\"Kill request\\\");\\n        await messageHandler.sendMessage(ChannelName.hackManager, new Payload(Action.hackDone, \\\"Killed\\\"));\\n        return true;\\n    }\\n    return false;\\n}\\nexport function formatMoney(n, decimalPlaces = 3) {\\n    const levels = [1e30, 1e27, 1e24, 1e21, 1e18, 1e15, 1e12, 1e9, 1e6, 1e3];\\n    const notations = [\\\"n\\\", \\\"o\\\", \\\"S\\\", \\\"s\\\", \\\"Q\\\", \\\"q\\\", \\\"t\\\", \\\"b\\\", \\\"m\\\", \\\"k\\\"];\\n    if (n === Infinity)\\n        return \\\"∞\\\";\\n    for (const [index, level] of levels.entries()) {\\n        if (n >= level) {\\n            const number = Math.round((n / level) * (Math.pow(10, decimalPlaces))) / (10 * decimalPlaces);\\n            return number + notations[index] + \\\"$\\\";\\n        }\\n    }\\n    return n + \\\"$\\\";\\n}\\n\",\"filename\":\"/Orchestrator/Common/GenericFunctions.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.75,\"server\":\"home\",\"moduleSequenceNumber\":424,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { HackMode, HackType, RequiredScript } from \\\"/Orchestrator/HackManager/enum\\\";\\nimport { Action, ChannelName } from \\\"/Orchestrator/MessageManager/enum\\\";\\nexport const MANAGING_SERVER = \\\"home\\\";\\nexport const HACKING_SERVER = \\\"home\\\";\\nexport const THREAD_SERVER = \\\"home\\\";\\nexport const BASE_DIR = \\\"/Orchestrator/\\\";\\nexport const HACKING_SCRIPTS = {\\n    [RequiredScript.hack]: \\\"/Orchestrator/HackManager/script/hack.js\\\",\\n    [RequiredScript.weaken]: \\\"/Orchestrator/HackManager/script/weaken.js\\\",\\n    [RequiredScript.grow]: \\\"/Orchestrator/HackManager/script/grow.js\\\",\\n    [RequiredScript.xp]: \\\"/Orchestrator/HackManager/script/xp.js\\\",\\n};\\nexport const SHARING_SCRIPT = \\\"/Orchestrator/ThreadManager/script/share.js\\\";\\nexport const MANAGER_SCRIPTS = {\\n    [ChannelName.messageManager]: {\\n        script: \\\"/Orchestrator/MessageManager/manager.js\\\",\\n        server: MANAGING_SERVER\\n    },\\n    [ChannelName.threadManager]: {\\n        script: \\\"/Orchestrator/ThreadManager/manager.js\\\",\\n        server: THREAD_SERVER\\n    },\\n    [ChannelName.hackManager]: {\\n        script: \\\"/Orchestrator/HackManager/manager.js\\\",\\n        server: MANAGING_SERVER\\n    },\\n    [ChannelName.targetManager]: {\\n        script: \\\"/Orchestrator/TargetManager/manager.js\\\",\\n        server: MANAGING_SERVER\\n    },\\n    [ChannelName.serverManager]: {\\n        script: \\\"/Orchestrator/ServerManager/manager.js\\\",\\n        server: MANAGING_SERVER\\n    }\\n};\\nexport const HACKING_CONDUCTOR = {\\n    [HackType.growWeakenHack]: \\\"/Orchestrator/HackManager/conductor/GrowWeakenConductor.js\\\",\\n    [HackType.moneyHack]: \\\"/Orchestrator/HackManager/conductor/MoneyHackConductor.js\\\",\\n    [HackType.xpHack]: \\\"/Orchestrator/HackManager/conductor/XpHackConductor.js\\\",\\n};\\nexport const HACK_MODE = {\\n    [HackMode.money]: [HackType.moneyHack, HackType.growWeakenHack],\\n    [HackMode.xp]: [HackType.xpHack]\\n};\\nexport const IMPORT_TO_COPY = [\\n    \\\"/Orchestrator/MessageManager/class.js\\\",\\n    \\\"/Orchestrator/MessageManager/enum.js\\\",\\n    \\\"/Orchestrator/Common/Dprint.js\\\",\\n    \\\"/Orchestrator/Config/Debug.js\\\",\\n    \\\"/Orchestrator/HackManager/enum.js\\\",\\n    SHARING_SCRIPT\\n];\\nexport const DEFAULT_HACKING_MODE = HackMode.money;\\nexport const HACK_TYPE_PARTIAL_THREAD = [HackType.growWeakenHack];\\nexport const SERVER_INITIAL_RAM = 8;\\nexport const BOOT_SCRIPTS = [\\n    ChannelName.messageManager,\\n    ChannelName.threadManager,\\n    ChannelName.hackManager,\\n    ChannelName.targetManager,\\n    ChannelName.serverManager\\n];\\nexport const KILL_MESSAGE = m => m.payload.action === Action.kill;\\nexport const PORT_CRACKER = (ns) => [\\n    { file: \\\"BruteSSH.exe\\\", function: ns.brutessh },\\n    { file: \\\"FTPCrack.exe\\\", function: ns.ftpcrack },\\n    { file: \\\"relaySMTP.exe\\\", function: ns.relaysmtp },\\n    { file: \\\"HTTPWorm.exe\\\", function: ns.httpworm },\\n    { file: \\\"SQLInject.exe\\\", function: ns.sqlinject },\\n];\\nexport const MIN_HACK_CHANCE = 0.5;\\nexport const MIN_SERVER_FOR_UPDATE = 1;\\nexport const MAX_SERVER_RAM = -1;\\nexport const MONEY_HACKING_TARGET_PERCENT = 0.95;\\nexport const USE_LOGISTIC_PROBABILITY = true;\\nexport const TIMEOUT_THRESHOLD = 180 * 1000; // 3 minutes seems to be the sweet spot\\nexport const USE_SHARE = true;\\n\",\"filename\":\"/Orchestrator/Config/Config.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.75,\"server\":\"home\",\"moduleSequenceNumber\":425,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const DEBUG = true;\\n\",\"filename\":\"/Orchestrator/Config/Debug.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":426,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const PROGRAMS = [\\n    { name: \\\"tor\\\", price: 200000 },\\n    { name: \\\"brutessh.exe\\\", price: 500e3 },\\n    { name: \\\"ftpcrack.exe\\\", price: 1500e3 },\\n    { name: \\\"relaysmtp.exe\\\", price: 5e6 },\\n    { name: \\\"httpworm.exe\\\", price: 30e6 },\\n    { name: \\\"sqlinject.exe\\\", price: 250e6 }\\n];\\nexport const COMMIT_CRIME = true;\\n\",\"filename\":\"/Orchestrator/Config/Singularity.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":427,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function calculateThreadsRatio(availableThreads, currentSecurity, minSecurity, growThreads, weakenThreads) {\\n    if ((growThreads + weakenThreads) <= availableThreads) {\\n        return { weakenThreads: weakenThreads, growThreads: growThreads };\\n    }\\n    const threadsForMinSecurity = (currentSecurity - minSecurity) / 0.05;\\n    const threadsLeft = availableThreads - threadsForMinSecurity;\\n    if (threadsForMinSecurity >= availableThreads) {\\n        return { weakenThreads: availableThreads, growThreads: 0 };\\n    }\\n    const calcWeakenThreads = Math.round(Math.ceil(threadsLeft / 13.5));\\n    const calcGrowThreads = Math.round(Math.ceil(threadsLeft - weakenThreads));\\n    if (calcGrowThreads < 0) {\\n        return { weakenThreads: availableThreads, growThreads: 0 };\\n    }\\n    return { weakenThreads: calcWeakenThreads + threadsForMinSecurity, growThreads: calcGrowThreads };\\n}\\n\",\"filename\":\"/Orchestrator/HackManager/algorithm/Common/CalculateThreadsRatio.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":428,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { USE_LOGISTIC_PROBABILITY } from \\\"/Orchestrator/Config/Config\\\";\\nexport function helpers(availableThreads, currentSecurity, minSecurity, growThreads, weakenThreads) {\\n    if ((growThreads + weakenThreads) <= availableThreads) {\\n        return { weakenThreads: weakenThreads, growThreads: growThreads };\\n    }\\n    const threadsForMinSecurity = (currentSecurity - minSecurity) / 0.05;\\n    const threadsLeft = availableThreads - threadsForMinSecurity;\\n    if (threadsForMinSecurity >= availableThreads) {\\n        return { weakenThreads: availableThreads, growThreads: 0 };\\n    }\\n    const calcWeakenThreads = Math.round(Math.ceil(threadsLeft / 13.5));\\n    const calcGrowThreads = Math.round(Math.ceil(threadsLeft - weakenThreads));\\n    if (calcGrowThreads < 0) {\\n        return { weakenThreads: availableThreads, growThreads: 0 };\\n    }\\n    return { weakenThreads: calcWeakenThreads + threadsForMinSecurity, growThreads: calcGrowThreads };\\n}\\nexport function calculateProbabilty(hackChance) {\\n    if (!USE_LOGISTIC_PROBABILITY) {\\n        return hackChance;\\n    }\\n    return Math.log10(hackChance / (1 - hackChance + Number.EPSILON));\\n}\\n\",\"filename\":\"/Orchestrator/HackManager/algorithm/Common/helpers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.75,\"server\":\"home\",\"moduleSequenceNumber\":429,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { MONEY_HACKING_TARGET_PERCENT } from \\\"/Orchestrator/Config/Config\\\";\\nimport { Hack } from \\\"/Orchestrator/HackManager/hack\\\";\\nimport { HackType } from \\\"/Orchestrator/HackManager/enum\\\";\\nimport { calculateProbabilty, helpers } from \\\"/Orchestrator/HackManager/algorithm/Common/helpers\\\";\\nexport function GrowWeakenAlgorithm(ns, currentHack, hackedHost, availableThreads) {\\n    //DEBUG && ns.print(\\\"Calculating hacks\\\")\\n    let potentialHack = [];\\n    for (let host of hackedHost) {\\n        if (host.maxMoney === 0) {\\n            continue;\\n        }\\n        if (currentHack.find(h => h.host == host.name)) {\\n            continue;\\n        }\\n        const hostCurMoney = ns.getServerMoneyAvailable(host.name);\\n        const hostCurSecurity = ns.getServerSecurityLevel(host.name);\\n        const baseHackChance = ((1.75 * ns.getHackingLevel()) - host.hackingRequired) / (1.75 * ns.getHackingLevel());\\n        const moneyToMax = host.maxMoney - hostCurMoney;\\n        // We check if the server is almost fully grown/fully weaken and skip those that are close to the limit\\n        // if ((hostCurSecurity/host.minSecurity)-1 < 0.25 && hostCurMoney/host.maxMoney < 0.75) {\\n        //     continue\\n        // }\\n        // Thread required to grow to max:\\n        // max = old*(rate)^thread\\n        // The \\\"rate\\\" (serverGrowth) is dependant on the current server security level when the grow finish.\\n        // In situation where multiple host are hacking concurrently, the race condition make the final growth amount to\\n        // be less than expected since the security level of the host constantly increase.\\n        // One workaround would be to always assume max security, however this would increase drastically the amount\\n        // of required threads.\\n        const serverGrowth = Math.min(1 + 0.03 / hostCurSecurity, 1.0035);\\n        const growThreads = Math.ceil((Math.log(host.maxMoney / hostCurMoney) / (Math.log(serverGrowth)) * host.growRate));\\n        // We skip those who return NaN orr Infinite\\n        if (!Number.isFinite(growThreads)) {\\n            continue;\\n        }\\n        // Calculate Total Security, considering Grow\\n        const weakenThread = Math.ceil(((hostCurSecurity - host.minSecurity) + (growThreads * 0.004)) / 0.05);\\n        // Calculate Hacked Amount per thread\\n        //const percentHacked = ns.hackAnalyze(hackedHost[i].name)\\n        const threadsRatio = helpers(availableThreads, hostCurSecurity, host.minSecurity, growThreads, weakenThread);\\n        const percentGrown = growThreads ? threadsRatio.growThreads / growThreads : 1;\\n        const hackAmount = hostCurMoney + (moneyToMax * percentGrown) * MONEY_HACKING_TARGET_PERCENT;\\n        const hackTime = host.hackTime * 5; // We need to consider the time of the grow/weaken + the time of the hack\\n        const percentHackedPerThread = ns.hackAnalyze(host.name);\\n        const hackingThreadRequired = MONEY_HACKING_TARGET_PERCENT / percentHackedPerThread;\\n        // We also want to skip the hack that would require too few threads\\n        if (threadsRatio.weakenThreads <= 1 && threadsRatio.growThreads <= 1) {\\n            continue;\\n        }\\n        // Save grow/weaken hack\\n        potentialHack.push(new Hack(host.name, hackTime, hackAmount, 0, threadsRatio.growThreads, threadsRatio.weakenThreads, ((hackAmount * percentHackedPerThread) / hackTime) * calculateProbabilty(baseHackChance), HackType.growWeakenHack, baseHackChance));\\n    }\\n    // Sort potentialHack by value.\\n    //DEBUG && ns.print(\\\"Got \\\" + potentialHack.length + \\\" hacks\\\")\\n    return potentialHack;\\n}\\n\",\"filename\":\"/Orchestrator/HackManager/algorithm/GrowWeakenAlgorithm.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.5,\"server\":\"home\",\"moduleSequenceNumber\":430,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { MONEY_HACKING_TARGET_PERCENT } from \\\"/Orchestrator/Config/Config\\\";\\nimport { Hack } from \\\"/Orchestrator/HackManager/hack\\\";\\nimport { HackType } from \\\"/Orchestrator/HackManager/enum\\\";\\nimport { calculateProbabilty } from \\\"/Orchestrator/HackManager/algorithm/Common/helpers\\\";\\nexport function MoneyHackAlgorithm(ns, currentHack, hackedHost, availableThreads) {\\n    //DEBUG && ns.print(\\\"Calculating hacks\\\")\\n    let potentialHack = [];\\n    for (const host of hackedHost) {\\n        if (host.maxMoney === 0) {\\n            continue;\\n        }\\n        if (currentHack.find(h => h.host == host.name)) {\\n            continue;\\n        }\\n        // Quick hack\\n        const hostCurMoney = ns.getServerMoneyAvailable(host.name);\\n        const hostCurSecurity = ns.getServerSecurityLevel(host.name);\\n        const maxHackAmount = hostCurMoney * MONEY_HACKING_TARGET_PERCENT;\\n        const hackThreads = Math.ceil(ns.hackAnalyzeThreads(host.name, maxHackAmount));\\n        const finalHackThreads = Math.min(hackThreads, availableThreads);\\n        const hackPercentage = hackThreads / availableThreads > 1 ? 1 : hackThreads / availableThreads;\\n        const hackAmount = maxHackAmount * hackPercentage;\\n        const baseHackChance = ((1.75 * ns.getHackingLevel()) - host.hackingRequired) / (1.75 * ns.getHackingLevel());\\n        const hackChance = (100 - hostCurSecurity) / 100 * baseHackChance;\\n        const hackPerThread = ns.hackAnalyze(host.name);\\n        // We skip those that are not high enough\\n        // if (hostCurMoney/host.maxMoney < 0.75) {\\n        //     continue\\n        // }\\n        // We need to ensure that it return a valid number of thread for the hack\\n        if (Number.isFinite(finalHackThreads) && hackThreads > 0) {\\n            potentialHack.push(new Hack(host.name, host.hackTime, hackAmount, finalHackThreads, 0, 0, (hackAmount * hackPerThread) / host.hackTime * calculateProbabilty(hackChance), HackType.moneyHack, hackChance));\\n        }\\n    }\\n    // Sort potentialHack by value.\\n    //potentialHack.sort(hackSorter)\\n    //DEBUG && ns.print(\\\"Got \\\" + potentialHack.length + \\\" quick hacks\\\")\\n    return potentialHack;\\n}\\n\",\"filename\":\"/Orchestrator/HackManager/algorithm/MoneyHackAlgorithm.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"home\",\"moduleSequenceNumber\":431,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Hack, hackSorter } from \\\"/Orchestrator/HackManager/hack\\\";\\nimport { HackType } from \\\"/Orchestrator/HackManager/enum\\\";\\nexport function XPHackAlgorithm(ns, currentHack, hackedHost) {\\n    let potentialHack = [];\\n    for (let host of hackedHost) {\\n        if (host.maxMoney === 0) {\\n            continue;\\n        }\\n        if (currentHack.find(h => h.host === host.name)) {\\n            continue;\\n        }\\n        potentialHack.push(new Hack(host.name, 1, 100, 0, 0, -1, (3 + (host.minSecurity * 0.3)) / host.weakenTime, HackType.xpHack, 0));\\n    }\\n    // Sort potentialHack by value.\\n    potentialHack.sort(hackSorter);\\n    // XP hack need only one hack\\n    potentialHack = potentialHack[0] ? [potentialHack[0]] : [];\\n    return potentialHack;\\n}\\n\",\"filename\":\"/Orchestrator/HackManager/algorithm/XpHackAlgorithm.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"home\",\"moduleSequenceNumber\":432,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { MessageHandler, Payload } from \\\"/Orchestrator/MessageManager/class\\\";\\nimport { Action, ChannelName } from \\\"/Orchestrator/MessageManager/enum\\\";\\nimport { HACKING_SCRIPTS, TIMEOUT_THRESHOLD } from \\\"/Orchestrator/Config/Config\\\";\\nimport { Hack } from \\\"/Orchestrator/HackManager/hack\\\";\\nimport { executeScript } from \\\"/Orchestrator/Common/GenericFunctions\\\";\\nimport { freeThreads, getThreads } from \\\"/Orchestrator/ThreadManager/common\\\";\\nimport { dprint } from \\\"/Orchestrator/Common/Dprint\\\";\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('exec');\\n    const myId = ns.args[1];\\n    const mySelf = ChannelName.hackConductor;\\n    const messageHandler = new MessageHandler(ns, mySelf, myId);\\n    const hack = Hack.fromJSON(ns.args[0]);\\n    dprint(ns, \\\"Starting hack: \\\" + myId);\\n    let allocatedThreads = await getThreads(ns, hack.growThreads + hack.weakenThreads, messageHandler, { time: Math.max(hack.weakenTime, hack.growTime) });\\n    let numOfHost = Object.keys(allocatedThreads).length;\\n    if (!numOfHost) {\\n        dprint(ns, \\\"Hack lack required threads\\\");\\n        await freeThreads(ns, allocatedThreads, messageHandler);\\n        return messageHandler.sendMessage(ChannelName.hackManager, new Payload(Action.hackReady, -1));\\n    }\\n    let growAllocatedThreads = {};\\n    let growThreadsAmountRequired = hack.growThreads;\\n    for (const host of Object.keys(allocatedThreads)) {\\n        if (growThreadsAmountRequired === 0) {\\n            break;\\n        }\\n        else if (allocatedThreads[host] <= growThreadsAmountRequired) {\\n            growAllocatedThreads[host] = allocatedThreads[host];\\n            growThreadsAmountRequired -= allocatedThreads[host];\\n            delete allocatedThreads[host];\\n        }\\n        else if (allocatedThreads[host] > growThreadsAmountRequired) {\\n            growAllocatedThreads[host] = growThreadsAmountRequired;\\n            allocatedThreads[host] -= growThreadsAmountRequired;\\n            growThreadsAmountRequired = 0;\\n        }\\n    }\\n    let weakenAllocatedThreads = { ...allocatedThreads };\\n    let growResponseReceived = 0;\\n    let weakenResponseReceived = 0;\\n    dprint(ns, 'Hack ready');\\n    await messageHandler.sendMessage(ChannelName.hackManager, new Payload(Action.hackReady));\\n    dprint(ns, \\\"Starting weaken script\\\");\\n    dprint(ns, \\\"Starting grow script\\\");\\n    let numOfWeakenHost = await executeScript(ns, HACKING_SCRIPTS.weaken, weakenAllocatedThreads, hack, messageHandler, myId);\\n    let numOfGrowHost = await executeScript(ns, HACKING_SCRIPTS.grow, growAllocatedThreads, hack, messageHandler, myId);\\n    const hackStartTime = Date.now();\\n    const timeOutTime = hackStartTime + hack.hackTime + TIMEOUT_THRESHOLD;\\n    const timeOutHour = new Date(timeOutTime).getHours();\\n    const timeOutMinute = new Date(timeOutTime).getMinutes();\\n    const timeOutSecond = new Date(timeOutTime).getSeconds();\\n    dprint(ns, \\\"Awaiting grow/weaken confirmation\\\");\\n    dprint(ns, \\\"Hack will timeout at: \\\" + timeOutHour + \\\":\\\" + timeOutMinute + \\\":\\\" + timeOutSecond);\\n    while (timeOutTime > Date.now()) {\\n        //const filter = m => (m.payload.action === Action.weakenScriptDone || m.payload.action === Action.growScriptDone)\\n        //if(await checkForKill()) return\\n        const responses = await messageHandler.getMessagesInQueue();\\n        for (const response of responses) {\\n            switch (response.payload.action) {\\n                case Action.growScriptDone:\\n                    growResponseReceived++;\\n                    dprint(ns, \\\"Received \\\" + growResponseReceived + \\\"/\\\" + numOfGrowHost + \\\" grow results\\\");\\n                    break;\\n                case Action.weakenScriptDone:\\n                    // Weaken takes longer than grow\\n                    weakenResponseReceived++;\\n                    dprint(ns, \\\"Received \\\" + weakenResponseReceived + \\\"/\\\" + numOfWeakenHost + \\\" weaken results\\\");\\n                    break;\\n                default:\\n                    break;\\n            }\\n        }\\n        // if (Date.now()>hackStartTime+hack.weakenTime+TIMEOUT_THRESHOLD) {\\n        //     ns.tprint(\\\"HACK \\\" + hack.host + \\\" IS OVERTIME\\\")\\n        //     ns.tprint(\\\"G: \\\" + growResponseReceived + \\\"/\\\" + numOfGrowHost)\\n        //     ns.tprint(\\\"W: \\\" + weakenResponseReceived + \\\"/\\\" + numOfWeakenHost)\\n        // }\\n        if ((weakenResponseReceived >= numOfWeakenHost && growResponseReceived >= numOfGrowHost)) {\\n            break;\\n        }\\n        await ns.sleep(100);\\n    }\\n    dprint(ns, \\\"Weaken and grow completed.\\\");\\n    await freeThreads(ns, growAllocatedThreads, messageHandler);\\n    await freeThreads(ns, weakenAllocatedThreads, messageHandler);\\n    const results = \\\"$: \\\" + Math.round(ns.getServerMoneyAvailable(hack.host) / ns.getServerMaxMoney(hack.host) * 100000) / 1000 + \\\"%, Sec: \\\" + Math.round(((ns.getServerSecurityLevel(hack.host) / ns.getServerMinSecurityLevel(hack.host)) - 1) * 100000) / 1000;\\n    await messageHandler.sendMessage(ChannelName.hackManager, new Payload(Action.hackDone, results));\\n    await messageHandler.clearMyMessage();\\n    dprint(ns, \\\"Exiting\\\");\\n}\\n\",\"filename\":\"/Orchestrator/HackManager/conductor/GrowWeakenConductor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.75,\"server\":\"home\",\"moduleSequenceNumber\":433,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { MessageHandler, Payload } from \\\"/Orchestrator/MessageManager/class\\\";\\nimport { Action, ChannelName } from \\\"/Orchestrator/MessageManager/enum\\\";\\nimport { HACKING_SCRIPTS, TIMEOUT_THRESHOLD } from \\\"/Orchestrator/Config/Config\\\";\\nimport { Hack } from \\\"/Orchestrator/HackManager/hack\\\";\\nimport { executeScript, formatMoney } from \\\"/Orchestrator/Common/GenericFunctions\\\";\\nimport { freeThreads, getThreads } from \\\"/Orchestrator/ThreadManager/common\\\";\\nimport { dprint } from \\\"/Orchestrator/Common/Dprint\\\";\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('exec');\\n    const myId = ns.args[1];\\n    const mySelf = ChannelName.hackConductor;\\n    const messageHandler = new MessageHandler(ns, mySelf, myId);\\n    const hack = Hack.fromJSON(ns.args[0]);\\n    dprint(ns, \\\"Starting hack: \\\" + myId);\\n    const hackAllocatedThreads = await getThreads(ns, hack.hackThreads, messageHandler, { time: hack.hackTime });\\n    let numOfHackHost = Object.keys(hackAllocatedThreads).length;\\n    let hackResponseReceived = 0;\\n    let hackValue = 0;\\n    if (!numOfHackHost) {\\n        dprint(ns, \\\"Hack lack required threads\\\");\\n        hackAllocatedThreads && await freeThreads(ns, hackAllocatedThreads, messageHandler);\\n        return messageHandler.sendMessage(ChannelName.hackManager, new Payload(Action.hackReady, -1));\\n    }\\n    dprint(ns, 'Hack ready');\\n    await messageHandler.sendMessage(ChannelName.hackManager, new Payload(Action.hackReady));\\n    dprint(ns, \\\"Starting hack script\\\");\\n    numOfHackHost = await executeScript(ns, HACKING_SCRIPTS.hack, hackAllocatedThreads, hack, messageHandler, myId);\\n    const hackStartTime = Date.now();\\n    const timeOutTime = hackStartTime + hack.weakenTime + TIMEOUT_THRESHOLD;\\n    const timeOutHour = new Date(timeOutTime).getHours();\\n    const timeOutMinute = new Date(timeOutTime).getMinutes();\\n    const timeOutSecond = new Date(timeOutTime).getSeconds();\\n    dprint(ns, \\\"Awaiting hack confirmation\\\");\\n    dprint(ns, \\\"Hack will timeout at: \\\" + timeOutHour + \\\":\\\" + timeOutMinute + \\\":\\\" + timeOutSecond);\\n    while (timeOutTime > Date.now()) {\\n        //if(await checkForKill()) return\\n        const responses = await messageHandler.getMessagesInQueue();\\n        for (const response of responses) {\\n            if (response.payload.action === Action.hackScriptDone) {\\n                hackResponseReceived++;\\n                hackValue += response.payload.info;\\n                dprint(ns, \\\"Received \\\" + hackResponseReceived + \\\"/\\\" + numOfHackHost + \\\" hack results\\\");\\n            }\\n        }\\n        if (hackResponseReceived >= numOfHackHost) {\\n            break;\\n        }\\n        await ns.sleep(100);\\n    }\\n    dprint(ns, \\\"Hack script completed\\\");\\n    await freeThreads(ns, hackAllocatedThreads, messageHandler);\\n    await messageHandler.sendMessage(ChannelName.hackManager, new Payload(Action.hackDone, formatMoney(hackValue)));\\n    await messageHandler.clearMyMessage();\\n    dprint(ns, \\\"Exiting\\\");\\n}\\n\",\"filename\":\"/Orchestrator/HackManager/conductor/MoneyHackConductor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.55,\"server\":\"home\",\"moduleSequenceNumber\":434,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { MessageHandler, Payload } from \\\"/Orchestrator/MessageManager/class\\\";\\nimport { Action, ChannelName } from \\\"/Orchestrator/MessageManager/enum\\\";\\nimport { HACKING_SCRIPTS } from \\\"/Orchestrator/Config/Config\\\";\\nimport { Hack } from \\\"/Orchestrator/HackManager/hack\\\";\\nimport { executeScript } from \\\"/Orchestrator/Common/GenericFunctions\\\";\\nimport { freeThreads, getThreads } from \\\"/Orchestrator/ThreadManager/common\\\";\\nimport { dprint } from \\\"/Orchestrator/Common/Dprint\\\";\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('exec');\\n    const myId = ns.args[1];\\n    const mySelf = ChannelName.hackConductor;\\n    const messageHandler = new MessageHandler(ns, mySelf, myId);\\n    const hack = Hack.fromJSON(ns.args[0]);\\n    dprint(ns, \\\"Starting hack: \\\" + myId);\\n    let cycle = 0;\\n    dprint(ns, 'Hack ready');\\n    await messageHandler.sendMessage(ChannelName.hackManager, new Payload(Action.hackReady));\\n    const weakenAllocatedThreads = await getThreads(ns, hack.weakenThreads, messageHandler, { time: hack.weakenTime });\\n    const numOfWeakenHost = await executeScript(ns, HACKING_SCRIPTS.xp, weakenAllocatedThreads, hack, messageHandler, myId);\\n    let stopRequest = false;\\n    dprint(ns, \\\"Starting XP script\\\");\\n    while (!stopRequest) {\\n        let weakenResponseReceived = 0;\\n        const responses = await messageHandler.getMessagesInQueue();\\n        for (const response of responses) {\\n            switch (response.payload.action) {\\n                case Action.weakenScriptDone:\\n                    weakenResponseReceived++;\\n                    dprint(ns, \\\"Received \\\" + weakenResponseReceived + \\\"/\\\" + numOfWeakenHost + \\\" weaken results\\\");\\n                    if (weakenResponseReceived >= numOfWeakenHost) {\\n                        cycle++;\\n                        weakenResponseReceived = 0;\\n                        dprint(ns, \\\"Weaken cycle complete. Starting cycle: \\\" + cycle);\\n                    }\\n                    break;\\n                case Action.stop:\\n                    dprint(ns, \\\"Received stop request\\\");\\n                    stopRequest = true;\\n                    break;\\n                default:\\n                    break;\\n            }\\n        }\\n        await ns.sleep(100);\\n    }\\n    dprint(ns, \\\"Stop requested\\\");\\n    for (let i = 0; i < numOfWeakenHost; i++) {\\n        await messageHandler.sendMessage(ChannelName.bootScript, new Payload(Action.stop), (myId * 1000) + i);\\n    }\\n    await freeThreads(ns, weakenAllocatedThreads, messageHandler);\\n    await messageHandler.sendMessage(ChannelName.hackManager, new Payload(Action.hackDone, \\\"Stop request\\\"));\\n    await messageHandler.clearMyMessage();\\n    dprint(ns, \\\"Exiting\\\");\\n}\\n\",\"filename\":\"/Orchestrator/HackManager/conductor/XpHackConductor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.55,\"server\":\"home\",\"moduleSequenceNumber\":435,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var RequiredScript;\\n(function (RequiredScript) {\\n    RequiredScript[\\\"hack\\\"] = \\\"hack\\\";\\n    RequiredScript[\\\"weaken\\\"] = \\\"weaken\\\";\\n    RequiredScript[\\\"grow\\\"] = \\\"grow\\\";\\n    RequiredScript[\\\"xp\\\"] = \\\"xp\\\";\\n})(RequiredScript || (RequiredScript = {}));\\nexport var HackType;\\n(function (HackType) {\\n    HackType[\\\"growWeakenHack\\\"] = \\\"growWeakenHack\\\";\\n    HackType[\\\"moneyHack\\\"] = \\\"moneyHack\\\";\\n    HackType[\\\"xpHack\\\"] = \\\"xpHack\\\";\\n})(HackType || (HackType = {}));\\nexport var HackMode;\\n(function (HackMode) {\\n    HackMode[\\\"money\\\"] = \\\"money\\\";\\n    HackMode[\\\"xp\\\"] = \\\"xp\\\";\\n})(HackMode || (HackMode = {}));\\n\",\"filename\":\"/Orchestrator/HackManager/enum.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":436,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class Hack {\\n    constructor(host, hackTime, hackValue, hackThreads, growThreads, weakenThreads, relativeValue, hackType, hackChance) {\\n        this.host = host;\\n        this.hackTime = hackTime;\\n        this.hackValue = hackValue;\\n        this.hackThreads = Math.round(hackThreads);\\n        this.growThreads = Math.round(growThreads);\\n        this.weakenThreads = Math.round(weakenThreads);\\n        this.relativeValue = relativeValue;\\n        this.hackType = hackType;\\n        this.hackChance = hackChance;\\n        this.id = null;\\n        this.startTime = null;\\n        this.pid = null;\\n    }\\n    get growTime() {\\n        return this.hackTime * 3.2;\\n    }\\n    get weakenTime() {\\n        return this.hackTime * 4;\\n    }\\n    static fromJSON(json) {\\n        const { host, hackTime, hackValue, hackThreads, growThreads, weakenThreads, relativeValue, hackType, hackChance } = JSON.parse(json);\\n        return new Hack(host, hackTime, hackValue, hackThreads, growThreads, weakenThreads, relativeValue, hackType, hackChance);\\n    }\\n}\\nexport class HackedHost {\\n    constructor(ns, host) {\\n        this.name = host;\\n        this.hackTime = ns.getHackTime(host);\\n        this.growRate = ns.getServerGrowth(host) / 100;\\n        this.minSecurity = ns.getServerMinSecurityLevel(host);\\n        this.maxMoney = ns.getServerMaxMoney(host);\\n        this.ram = ns.getServerMaxRam(host);\\n        this.hackingRequired = ns.getServerRequiredHackingLevel(host);\\n    }\\n    get growTime() {\\n        return this.hackTime * 3.2;\\n    }\\n    get weakenTime() {\\n        return this.hackTime * 4;\\n    }\\n}\\nexport const hackSorter = (a, b) => {\\n    if (a.relativeValue < b.relativeValue) {\\n        return 1;\\n    }\\n    if (a.relativeValue > b.relativeValue) {\\n        return -1;\\n    }\\n    return 0;\\n};\\n\",\"filename\":\"/Orchestrator/HackManager/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"home\",\"moduleSequenceNumber\":437,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { MessageHandler, Payload, } from \\\"/Orchestrator/MessageManager/class\\\";\\nimport { DEFAULT_HACKING_MODE, HACK_MODE, HACKING_CONDUCTOR, HACKING_SERVER, } from \\\"/Orchestrator/Config/Config\\\";\\nimport { HackedHost, hackSorter } from \\\"/Orchestrator/HackManager/hack\\\";\\nimport { GrowWeakenAlgorithm } from \\\"/Orchestrator/HackManager/algorithm/GrowWeakenAlgorithm\\\";\\nimport { Action, ChannelName } from \\\"/Orchestrator/MessageManager/enum\\\";\\nimport { HackMode, HackType } from \\\"/Orchestrator/HackManager/enum\\\";\\nimport { XPHackAlgorithm } from \\\"/Orchestrator/HackManager/algorithm/XpHackAlgorithm\\\";\\nimport { MoneyHackAlgorithm } from \\\"/Orchestrator/HackManager/algorithm/MoneyHackAlgorithm\\\";\\nimport { dprint } from \\\"/Orchestrator/Common/Dprint\\\";\\nconst HackAlgorithm = {\\n    [HackType.growWeakenHack]: GrowWeakenAlgorithm,\\n    [HackType.moneyHack]: MoneyHackAlgorithm,\\n    [HackType.xpHack]: XPHackAlgorithm,\\n};\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('exec');\\n    ns.disableLog('getHackTime');\\n    ns.disableLog('getServerGrowth');\\n    ns.disableLog('getServerMinSecurityLevel');\\n    ns.disableLog('getServerSecurityLevel');\\n    ns.disableLog('getServerMaxMoney');\\n    ns.disableLog('getServerMoneyAvailable');\\n    ns.disableLog('getServerMaxRam');\\n    ns.disableLog('getServerRequiredHackingLevel');\\n    ns.disableLog('getServerUsedRam');\\n    ns.disableLog('getHackingLevel');\\n    const mySelf = ChannelName.hackManager;\\n    const messageHandler = new MessageHandler(ns, mySelf);\\n    const messageActions = {\\n        [Action.hackDone]: hackDone,\\n        [Action.addHost]: addHost,\\n        [Action.pause]: requestPause,\\n        [Action.kill]: kill,\\n        [Action.printHacks]: printHacks,\\n        [Action.printRunningHacks]: printRunningHacks,\\n        [Action.switchHackMode]: switchHackRequest\\n    };\\n    //const messageFilter = message => [Action.hackDone, Action.addHost, Action.pause, Action.kill, Action.printHacks, Action.printRunningHacks].includes(message.payload.action)\\n    const hackedHost = [];\\n    let currentHackMode = DEFAULT_HACKING_MODE;\\n    let currentHackId = 1;\\n    let currentHack = [];\\n    let pauseRequested = false;\\n    let killRequested = false;\\n    let switchRequested = false;\\n    while (true) {\\n        // This is a 1 second \\\"sleep\\\"\\n        for (let i = 0; i < 10; i++) {\\n            let responses = await messageHandler.getMessagesInQueue();\\n            if (responses.length > 0) {\\n                for (const response of responses) {\\n                    await messageActions[response.payload.action]?.(response);\\n                }\\n            }\\n            await ns.sleep(100);\\n        }\\n        if (!pauseRequested && !(currentHackMode === HackMode.xp && currentHack.length > 1)) {\\n            await pickHack();\\n        }\\n        // if (currentHack.length === 0 && pauseRequested) {\\n        //     dprint(ns, \\\"Manager paused\\\")\\n        //     await messageHandler.sendMessage(ChannelName.serverManager, new Payload(Action.hackPaused))\\n        //     await messageHandler.waitForAnswer(m => m.payload.action === Action.hackResume)\\n        //     pauseRequested = false\\n        //     dprint(ns, \\\"Manager resumed\\\")\\n        // }\\n        if (currentHack.length === 0 && switchRequested) {\\n            switchHackMode();\\n        }\\n        if (currentHack.length < 1 && killRequested) {\\n            dprint(ns, \\\"Manager kill\\\");\\n            return;\\n        }\\n        //await cleanup()\\n        await ns.sleep(100);\\n    }\\n    async function cleanup() {\\n        for (const hack of currentHack) {\\n            const maxTime = Math.max(hack.hackTime, hack.weakenTime, hack.growTime);\\n            const startTime = hack.startTime || 0;\\n            if (startTime + maxTime * 1.5 < Date.now()) {\\n                dprint(ns, \\\"Orphan hack detected, killing hack id: \\\" + hack.id);\\n                ns.kill(hack.pid);\\n            }\\n        }\\n    }\\n    async function switchHackRequest(message) {\\n        switchRequested = true;\\n        await requestPause();\\n    }\\n    function switchHackMode() {\\n        currentHackMode === HackMode.money ? currentHackMode = HackMode.xp : currentHackMode = HackMode.money;\\n        dprint(ns, \\\"Hack switching hacking mode to \\\" + currentHackMode);\\n        pauseRequested = false;\\n        switchRequested = false;\\n    }\\n    async function printHacks(message) {\\n        const availableThreads = await getAvailableThreads();\\n        if (availableThreads <= 0) {\\n            ns.tprint(\\\"No threads available, no hacks available.\\\");\\n            return;\\n        }\\n        let potentialHack = [];\\n        for (const hackType of HACK_MODE[currentHackMode]) {\\n            potentialHack.push(...HackAlgorithm[hackType](ns, currentHack, hackedHost, availableThreads));\\n        }\\n        potentialHack.sort(hackSorter);\\n        if (potentialHack.length === 0) {\\n            ns.tprint(\\\"No hack available.\\\");\\n        }\\n        let id = 0;\\n        for (let hack of potentialHack) {\\n            ns.tprint(\\\"Hack number \\\" + id + \\\": \\\");\\n            ns.tprint(\\\" - Target: \\\" + hack.host);\\n            ns.tprint(\\\" - Relative Value: \\\" + hack.relativeValue);\\n            ns.tprint(\\\" - Hack Type: \\\" + hack.hackType);\\n            ns.tprint(\\\" - Hack Threads: \\\" + hack.hackThreads);\\n            ns.tprint(\\\" - Weaken Threads: \\\" + hack.weakenThreads);\\n            ns.tprint(\\\" - Grow Threads: \\\" + hack.growThreads);\\n            id++;\\n        }\\n        ns.tprint(\\\"Calculated hack total: \\\" + potentialHack.length);\\n    }\\n    async function printRunningHacks(message) {\\n        if (currentHack.length === 0) {\\n            ns.tprint(\\\"No hack currently running.\\\");\\n        }\\n        for (let hack of currentHack) {\\n            ns.tprint(\\\"Hack number \\\" + hack.id + \\\": \\\");\\n            ns.tprint(\\\" - Target: \\\" + hack.host);\\n            ns.tprint(\\\" - Relative Value: \\\" + hack.relativeValue);\\n            ns.tprint(\\\" - Hack Type: \\\" + hack.hackType);\\n            ns.tprint(\\\" - Hack Threads: \\\" + hack.hackThreads);\\n            ns.tprint(\\\" - Weaken Threads: \\\" + hack.weakenThreads);\\n            ns.tprint(\\\" - Grow Threads: \\\" + hack.growThreads);\\n        }\\n        ns.tprint(\\\"Running hacks: \\\" + currentHack.length);\\n    }\\n    async function hackDone(message) {\\n        const hack = currentHack.find(h => h.id == message.originId);\\n        if (hack) {\\n            dprint(ns, \\\"<= \\\" + hack.hackType + \\\" \\\" + hack.id + \\\" from \\\" + hack.host + \\\": \\\" + message.payload.info);\\n            currentHack = currentHack.filter(h => h.id !== message.originId);\\n        }\\n        else {\\n            dprint(ns, \\\"Finished hack cannot be found!\\\");\\n        }\\n    }\\n    async function addHost(message) {\\n        let host = message.payload.info;\\n        dprint(ns, \\\"Received new host: \\\" + host);\\n        hackedHost.push(new HackedHost(ns, host));\\n    }\\n    function enoughRam(hackType) {\\n        return (ns.getServerMaxRam(HACKING_SERVER) - ns.getServerUsedRam(HACKING_SERVER) - ns.getScriptRam(HACKING_CONDUCTOR[hackType], HACKING_SERVER)) > 0;\\n    }\\n    async function pickHack() {\\n        dprint(ns, \\\"Sending hacks.\\\");\\n        //while (true) {\\n        // We limit to 50 iteration before returning to the main loop, with a high thread count, we may get stuck\\n        // where the hack finish too fast and it eventually clog up the queue\\n        for (let i = 0; i < 50; i++) {\\n            const availableThreads = await getAvailableThreads();\\n            let hackSentSuccess = false;\\n            if (availableThreads <= 0) {\\n                //dprint(ns, \\\"No threads available\\\")\\n                break;\\n            }\\n            let potentialHack = [];\\n            for (const hackType of HACK_MODE[currentHackMode]) {\\n                potentialHack.push(...HackAlgorithm[hackType](ns, currentHack, hackedHost, availableThreads));\\n            }\\n            potentialHack.sort(hackSorter);\\n            for (const topHack of potentialHack) {\\n                if (!enoughRam(topHack.hackType))\\n                    continue;\\n                if (currentHack.filter(h => h.host === topHack.host).length > 0)\\n                    continue;\\n                // Start the hack\\n                if (await startHack(topHack)) {\\n                    hackSentSuccess = true;\\n                    break;\\n                }\\n                //}\\n            }\\n            if (!hackSentSuccess) {\\n                dprint(ns, \\\"No more hack\\\");\\n                break;\\n            }\\n            await ns.sleep(100);\\n        }\\n        dprint(ns, \\\"Hack sending loop done.\\\");\\n        if (currentHack.length < 1) {\\n            dprint(ns, \\\"No hack successfully started\\\");\\n        }\\n    }\\n    async function getAvailableThreads() {\\n        // Get available threads amount\\n        const messageFilter = m => m.payload.action === Action.threadsAvailable;\\n        const response = await messageHandler.sendAndWait(ChannelName.threadManager, new Payload(Action.getThreadsAvailable), null, true, messageFilter);\\n        //dprint(ns, \\\"Getting available threads: \\\" + response[0].payload.info)\\n        return response[0].payload.info;\\n    }\\n    async function startHack(hack) {\\n        dprint(ns, \\\"=> \\\" + hack.hackType + \\\" to \\\" + hack.host + \\\" (RV: \\\" + Math.round(hack.relativeValue * 1000) + \\\")\\\");\\n        let executed = 0;\\n        currentHackId++;\\n        hack.id = currentHackId;\\n        for (let i = 0; i < 50; i++) {\\n            executed = ns.exec(HACKING_CONDUCTOR[hack.hackType], HACKING_SERVER, 1, JSON.stringify(hack), currentHackId);\\n            if (executed > 0) {\\n                hack.pid = executed;\\n                break;\\n            }\\n            await ns.sleep(100);\\n        }\\n        if (executed === 0) {\\n            dprint(ns, \\\"Unable to start hack, process not starting.\\\");\\n            return false;\\n        }\\n        // Awaiting hack to start before continuing, could probably be skipped when everything is more stable\\n        let messageFilter = (m) => m.payload.action === Action.hackReady;\\n        const response = await messageHandler.waitForAnswer(messageFilter, 15000);\\n        if (response.length === 0) {\\n            dprint(ns, \\\"Hack got stuck somewhere.\\\");\\n            return false;\\n        }\\n        if (response[0].payload.info === -1) {\\n            dprint(ns, \\\"Unable to start hack, lack of threads\\\");\\n            return false;\\n        }\\n        hack.startTime = Date.now();\\n        currentHack.push(hack);\\n        return true;\\n    }\\n    async function requestPause(message) {\\n        dprint(ns, \\\"Pause requested\\\");\\n        pauseRequested = true;\\n        for (const hack of currentHack) {\\n            await messageHandler.sendMessage(ChannelName.hackConductor, new Payload(Action.stop), hack.id);\\n        }\\n    }\\n    async function kill(message) {\\n        dprint(ns, \\\"Kill requested\\\");\\n        pauseRequested = true;\\n        killRequested = true;\\n        for (const hack of currentHack) {\\n            await messageHandler.sendMessage(ChannelName.hackConductor, new Payload(Action.kill), hack.id);\\n        }\\n    }\\n}\\n\",\"filename\":\"/Orchestrator/HackManager/manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.95,\"server\":\"home\",\"moduleSequenceNumber\":438,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport { MessageHandler, Payload } from \\\"/Orchestrator/MessageManager/class\\\";\\nimport { Action, ChannelName } from \\\"/Orchestrator/MessageManager/enum\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"sleep\\\");\\n    const mySelf = ChannelName.hackScript;\\n    const target = ns.args[0];\\n    const originId = ns.args[1];\\n    const messageHandler = new MessageHandler(ns, mySelf);\\n    const results = await ns.grow(target);\\n    await messageHandler.sendMessage(ChannelName.hackConductor, new Payload(Action.growScriptDone, results), originId);\\n}\\n\",\"filename\":\"/Orchestrator/HackManager/script/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":439,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport { MessageHandler, Payload } from \\\"/Orchestrator/MessageManager/class\\\";\\nimport { Action, ChannelName } from \\\"/Orchestrator/MessageManager/enum\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"sleep\\\");\\n    const mySelf = ChannelName.hackScript;\\n    const target = ns.args[0];\\n    const originId = ns.args[1];\\n    const messageHandler = new MessageHandler(ns, mySelf);\\n    const results = await ns.hack(target);\\n    await messageHandler.sendMessage(ChannelName.hackConductor, new Payload(Action.hackScriptDone, results), originId);\\n}\\n\",\"filename\":\"/Orchestrator/HackManager/script/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":440,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport { MessageHandler, Payload } from \\\"/Orchestrator/MessageManager/class\\\";\\nimport { Action, ChannelName } from \\\"/Orchestrator/MessageManager/enum\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"sleep\\\");\\n    const mySelf = ChannelName.hackScript;\\n    const target = ns.args[0];\\n    const originId = ns.args[1];\\n    const messageHandler = new MessageHandler(ns, mySelf);\\n    const results = await ns.weaken(target);\\n    await messageHandler.sendMessage(ChannelName.hackConductor, new Payload(Action.weakenScriptDone, results), originId);\\n}\\n\",\"filename\":\"/Orchestrator/HackManager/script/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":441,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport { MessageHandler, Payload } from \\\"/Orchestrator/MessageManager/class\\\";\\nimport { Action, ChannelName } from \\\"/Orchestrator/MessageManager/enum\\\";\\nimport { dprint } from \\\"/Orchestrator/Common/Dprint\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"sleep\\\");\\n    const mySelf = ChannelName.hackScript;\\n    const target = ns.args[0];\\n    const originId = ns.args[1];\\n    const myId = ns.args[2];\\n    const messageHandler = new MessageHandler(ns, mySelf, myId);\\n    let stopRequest = false;\\n    let cycle = 0;\\n    dprint(ns, \\\"Starting\\\");\\n    while (!stopRequest) {\\n        dprint(ns, \\\"New cycle: \\\" + cycle);\\n        const responses = await messageHandler.getMessagesInQueue();\\n        if (responses.length > 0) {\\n            for (const response of responses) {\\n                if (response.payload.action === Action.stop) {\\n                    stopRequest = true;\\n                }\\n            }\\n        }\\n        const results = await ns.weaken(target);\\n        dprint(ns, \\\"Weaken: \\\" + results);\\n        await messageHandler.sendMessage(ChannelName.hackConductor, new Payload(Action.weakenScriptDone, results), originId);\\n        cycle++;\\n    }\\n}\\n\",\"filename\":\"/Orchestrator/HackManager/script/xp.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":442,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Action, ChannelName } from \\\"/Orchestrator/MessageManager/enum\\\";\\nexport const NULL_PORT_DATA = \\\"NULL PORT DATA\\\";\\nexport class Payload {\\n    constructor(action, info, extra) {\\n        this.action = action;\\n        this.info = info || null;\\n        this.extra = extra !== undefined ? extra : null;\\n    }\\n}\\nexport class Message {\\n    constructor(comPort, origin, destination, payload, originId = null, destinationId = null, sentTime = null, dispatchedTime = null) {\\n        this.origin = origin;\\n        this.destination = destination;\\n        this.payload = payload;\\n        this.originId = originId;\\n        this.destinationId = destinationId;\\n        this.comPort = comPort;\\n        this.sentTime = sentTime;\\n        this.dispatchedTime = dispatchedTime;\\n    }\\n    get string() {\\n        return JSON.stringify({\\n            origin: this.origin,\\n            destination: this.destination,\\n            payload: this.payload,\\n            originId: this.originId,\\n            destinationId: this.destinationId,\\n            comPort: this.comPort,\\n            sentTime: this.sentTime,\\n            dispatchedTime: this.dispatchedTime\\n        });\\n    }\\n    static fromJSON(json) {\\n        //console.log(\\\"Parsing JSON: \\\" + json)\\n        const { origin, destination, payload, originId, destinationId, comPort, sentTime, dispatchedTime } = JSON.parse(json);\\n        return new Message(comPort, origin, destination, payload, originId, destinationId, sentTime, dispatchedTime);\\n    }\\n}\\nexport class MessageHandler {\\n    constructor(ns, origin, originId = null) {\\n        this.origin = origin;\\n        this.ns = ns;\\n        this.originId = originId;\\n        this.messageQueue = [];\\n        this.messageChannel = Math.ceil(Math.random() * 20);\\n        //this.messageChannel = CommunicationChannels[Math.floor(Math.random() * CommunicationChannels.length)]\\n    }\\n    async sendMessage(destination, payload, destinationId = null) {\\n        let newMessage = new Message(this.messageChannel, this.origin, destination, payload, this.originId, destinationId);\\n        newMessage.sentTime = Date.now();\\n        //console.log(\\\"Sending message: \\\" + newMessage.string)\\n        let ntry = 10;\\n        for (let i = 0; i < ntry; i++) {\\n            const messageWritten = await this.ns.tryWritePort(this.messageChannel, newMessage.string);\\n            if (messageWritten)\\n                return;\\n            await this.ns.sleep(100);\\n        }\\n        this.ns.print(\\\"MESSAGE LOST: \\\" + newMessage.string);\\n    }\\n    async clearMyMessage() {\\n        await this.sendMessage(ChannelName.messageManager, new Payload(Action.clearMyMessage));\\n    }\\n    async checkMessage(filter) {\\n        const payload = filter ? new Payload(Action.messageRequest, filter.toString()) : new Payload(Action.messageRequest);\\n        await this.sendMessage(ChannelName.messageManager, payload);\\n        let numberTry = 0;\\n        while (numberTry < 100) {\\n            let response = this.ns.peek(this.messageChannel);\\n            if (response === NULL_PORT_DATA) {\\n                await this.ns.sleep(100);\\n                numberTry++;\\n                continue;\\n            }\\n            let parsedMessage = Message.fromJSON(response);\\n            if (parsedMessage.destination === this.origin && parsedMessage.destinationId === this.originId) {\\n                this.ns.readPort(this.messageChannel);\\n                if (parsedMessage.payload.action === Action.noMessage) {\\n                    break;\\n                }\\n                this.messageQueue.push(parsedMessage);\\n            }\\n            await this.ns.sleep(10);\\n        }\\n    }\\n    async popLastMessage() {\\n        await this.checkMessage();\\n        const response = this.messageQueue.splice(0, 1);\\n        if (response) {\\n            return response;\\n        }\\n        return [];\\n    }\\n    async getMessagesInQueue(filter) {\\n        await this.checkMessage(filter);\\n        let messagesToReturn = filter ? this.messageQueue.filter(filter) : this.messageQueue;\\n        this.messageQueue = filter ? this.messageQueue.filter(m => !filter(m)) : [];\\n        return messagesToReturn;\\n    }\\n    async waitForAnswer(filter, timeToWait = 10000) {\\n        const numberOfCycle = Math.floor(timeToWait / 100);\\n        for (let i = 0; i < numberOfCycle; i++) {\\n            //while(true) {\\n            let response = filter ? await this.getMessagesInQueue(filter) : await this.popLastMessage();\\n            if (response.length > 0) {\\n                return response;\\n            }\\n            await this.ns.sleep(100);\\n        }\\n        //this.ns.tprint(\\\"Expected message not received!\\\")\\n        return [];\\n    }\\n    async sendAndWait(destination, payload, destinationId = null, retry = false, filter) {\\n        let numberOfTry = 1;\\n        if (retry) {\\n            numberOfTry = 10;\\n        }\\n        for (let i = 0; i < numberOfTry; i++) {\\n            await this.sendMessage(destination, payload, destinationId);\\n            const response = await this.waitForAnswer(filter);\\n            if (response.length > 0) {\\n                return response;\\n            }\\n            await this.ns.sleep(100);\\n        }\\n        return [];\\n    }\\n}\\n\",\"filename\":\"/Orchestrator/MessageManager/class.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":443,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// export enum Channel {\\n//     messageManager = 1, // Message Manager Port [DEPRECATED]\\n//     threadManager = 2, // Thread Manager Port\\n//     serverManager = 3, // Server Manager Port\\n//     hackManager = 4, // Hack Manager Port\\n//     targetManager = 5, // Target Manager Port\\n//     hackConductor = 6, // Hack Port\\n//     hackScript = 8, // Script Port\\n//     consoleLink = 9, // Console Port\\n//     bootScript = 10, // Boot Script\\n//     communication_1 = 16, // General communication\\n//     communication_2 = 17,\\n//     communication_3 = 18,\\n//     communication_4 = 19,\\n//     communication_5 = 20\\n// }\\nexport var ChannelName;\\n(function (ChannelName) {\\n    ChannelName[\\\"messageManager\\\"] = \\\"messageManager\\\";\\n    ChannelName[\\\"threadManager\\\"] = \\\"threadManager\\\";\\n    ChannelName[\\\"serverManager\\\"] = \\\"serverManager\\\";\\n    ChannelName[\\\"hackManager\\\"] = \\\"hackManager\\\";\\n    ChannelName[\\\"targetManager\\\"] = \\\"targetManager\\\";\\n    ChannelName[\\\"hackConductor\\\"] = \\\"hackConductor\\\";\\n    ChannelName[\\\"hackScript\\\"] = \\\"hackScript\\\";\\n    ChannelName[\\\"consoleLink\\\"] = \\\"consoleLink\\\";\\n    ChannelName[\\\"bootScript\\\"] = \\\"bootScript\\\";\\n    ChannelName[\\\"shareScript\\\"] = \\\"shareScript\\\";\\n})(ChannelName || (ChannelName = {}));\\nexport var Action;\\n(function (Action) {\\n    // Thread Manager Actions\\n    Action[\\\"threads\\\"] = \\\"threads\\\";\\n    Action[\\\"threadsAvailable\\\"] = \\\"threadsAvailable\\\";\\n    Action[\\\"getThreads\\\"] = \\\"getThreads\\\";\\n    Action[\\\"getThreadsAvailable\\\"] = \\\"getThreadsAvailable\\\";\\n    Action[\\\"freeThreads\\\"] = \\\"freeThreads\\\";\\n    Action[\\\"updateHost\\\"] = \\\"updateHost\\\";\\n    Action[\\\"consoleThreadsUse\\\"] = \\\"consoleThreadsUse\\\";\\n    Action[\\\"lockHost\\\"] = \\\"lockHost\\\";\\n    Action[\\\"hostLocked\\\"] = \\\"hostLocked\\\";\\n    Action[\\\"getTotalThreads\\\"] = \\\"getTotalThreads\\\";\\n    Action[\\\"totalThreads\\\"] = \\\"totalThreads\\\";\\n    Action[\\\"useShareSwitch\\\"] = \\\"useShareSwitch\\\";\\n    // Hack Manager Actions\\n    Action[\\\"hackDone\\\"] = \\\"hackDone\\\";\\n    Action[\\\"hackReady\\\"] = \\\"hackRead\\\";\\n    Action[\\\"hackScriptDone\\\"] = \\\"hackScriptDone\\\";\\n    Action[\\\"weakenScriptDone\\\"] = \\\"weakenScriptDone\\\";\\n    Action[\\\"growScriptDone\\\"] = \\\"growScriptDone\\\";\\n    Action[\\\"hackPaused\\\"] = \\\"hackPaused\\\";\\n    Action[\\\"hackResume\\\"] = \\\"hackResume\\\";\\n    Action[\\\"printHacks\\\"] = \\\"printHacks\\\";\\n    Action[\\\"printRunningHacks\\\"] = \\\"printRunningHacks\\\";\\n    Action[\\\"switchHackMode\\\"] = \\\"switchHackMode\\\";\\n    // Target Manager Actions\\n    Action[\\\"addHost\\\"] = \\\"addHost\\\";\\n    Action[\\\"getHostList\\\"] = \\\"getHostList\\\";\\n    // General Actions\\n    Action[\\\"stop\\\"] = \\\"stop\\\";\\n    Action[\\\"pause\\\"] = \\\"pause\\\";\\n    Action[\\\"kill\\\"] = \\\"kill\\\";\\n    Action[\\\"resume\\\"] = \\\"resume\\\";\\n    Action[\\\"messageRequest\\\"] = \\\"messageRequest\\\";\\n    Action[\\\"noMessage\\\"] = \\\"noMessage\\\";\\n    // Message Manager Actions\\n    Action[\\\"dumpQueue\\\"] = \\\"dumpQueue\\\";\\n    Action[\\\"clearMyMessage\\\"] = \\\"clearMyMessage\\\";\\n})(Action || (Action = {}));\\n\",\"filename\":\"/Orchestrator/MessageManager/enum.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":444,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport { Message, NULL_PORT_DATA, Payload } from \\\"/Orchestrator/MessageManager/class\\\";\\nimport { Action, ChannelName } from \\\"/Orchestrator/MessageManager/enum\\\";\\nimport { dprint } from \\\"/Orchestrator/Common/Dprint\\\";\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    emptyPorts();\\n    let messageQueue = [];\\n    while (true) {\\n        await receiveMessage();\\n        await checkMessageRequest();\\n        await checkConsoleCall();\\n        await checkClearMessage();\\n        await ns.sleep(10);\\n    }\\n    async function checkConsoleCall() {\\n        const dumpQueue = extractMessage(m => m.payload.action === Action.dumpQueue);\\n        if (dumpQueue.length > 0) {\\n            for (const message of messageQueue) {\\n                ns.tprint(\\\"From: \\\" + message.origin + \\\":\\\" + message.originId + \\\" -> To:\\\" + message.destination + \\\":\\\" + message.destinationId + \\\" > Payload: \\\" + JSON.stringify(message.payload));\\n            }\\n        }\\n    }\\n    async function checkClearMessage() {\\n        const messages = extractMessage(m => m.payload.action === Action.clearMyMessage);\\n        for (const message of messages) {\\n            messageQueue = messageQueue.filter(m => m.destinationId !== message.originId && m.destination !== message.origin);\\n        }\\n    }\\n    function extractMessage(filter) {\\n        const extractedMessage = messageQueue.filter(filter);\\n        messageQueue = messageQueue.filter(m => !filter(m));\\n        return extractedMessage;\\n    }\\n    async function checkMessageRequest() {\\n        const requests = extractMessage(m => m.payload.action === Action.messageRequest);\\n        for (const request of requests) {\\n            const port = request.comPort;\\n            const requesterFilter = (m) => (m.destination === request.origin && m.destinationId === request.originId);\\n            let extraFilter = (m) => true;\\n            if (request.payload.info) {\\n                extraFilter = eval(request.payload.info);\\n            }\\n            const messageForRequester = extractMessage(requesterFilter);\\n            const messageToSend = messageForRequester.filter(extraFilter);\\n            const messageToKeep = messageForRequester.filter(m => !extraFilter(m));\\n            messageQueue.push(...messageToKeep);\\n            if (messageToSend.length > 0) {\\n                await dispatchMessage(messageToSend, port);\\n            }\\n            await dispatchMessage([new Message(request.comPort, ChannelName.messageManager, request.origin, new Payload(Action.noMessage), null, request.originId)], port);\\n        }\\n    }\\n    async function dispatchMessage(messageToSend, port) {\\n        for (const message of messageToSend) {\\n            message.dispatchedTime = Date.now();\\n            message.comPort = port;\\n            const writtenMessage = await ns.tryWritePort(message.comPort, message.string);\\n            if (!writtenMessage) {\\n                dprint(ns, \\\"Sending failed: \\\" + message.destination + \\\":\\\" + message.destinationId + \\\"(Port: \\\" + message.comPort + \\\"). Readded to queue.\\\");\\n                messageQueue.push(message);\\n            }\\n        }\\n    }\\n    async function receiveMessage() {\\n        for (let port = 1; port < 21; port++) {\\n            const response = ns.peek(port);\\n            if (response !== NULL_PORT_DATA) {\\n                let parsedResponse = Message.fromJSON(response);\\n                // If the message has been on top of the port queue for more than 1 second we push it at the back of the queue\\n                if (parsedResponse.dispatchedTime && (Date.now() - parsedResponse.dispatchedTime) > 1000) {\\n                    if ((Date.now() - parsedResponse.dispatchedTime) > 1000) {\\n                        ns.readPort(port);\\n                        await dispatchMessage([parsedResponse], parsedResponse.comPort);\\n                        dprint(ns, \\\"Stale to: \\\" + parsedResponse.destination + \\\":\\\" + parsedResponse.destinationId + \\\" Action: \\\" + parsedResponse.payload.action);\\n                    }\\n                    else if ((Date.now() - parsedResponse.dispatchedTime) > 60000) {\\n                        ns.readPort(port);\\n                        dprint(ns, \\\"Discarded to: \\\" + parsedResponse.destination + \\\":\\\" + parsedResponse.destinationId + \\\" Action: \\\" + parsedResponse.payload.action);\\n                    }\\n                    // If the message has never been dispatched we read it\\n                }\\n                else if (!parsedResponse.dispatchedTime) {\\n                    ns.readPort(port);\\n                    messageQueue.push(parsedResponse);\\n                }\\n            }\\n        }\\n    }\\n    function emptyPorts() {\\n        for (let i = 1; i < 21; i++) {\\n            while (true) {\\n                if (ns.readPort(i) === NULL_PORT_DATA) {\\n                    break;\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"filename\":\"/Orchestrator/MessageManager/manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":445,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { HACKING_SCRIPTS, IMPORT_TO_COPY, KILL_MESSAGE, MAX_SERVER_RAM, MIN_SERVER_FOR_UPDATE, SERVER_INITIAL_RAM } from \\\"/Orchestrator/Config/Config\\\";\\nimport { Action, ChannelName } from \\\"/Orchestrator/MessageManager/enum\\\";\\nimport { MessageHandler, Payload } from \\\"/Orchestrator/MessageManager/class\\\";\\nimport { copyFile } from \\\"/Orchestrator/Common/GenericFunctions\\\";\\nimport { dprint } from \\\"/Orchestrator/Common/Dprint\\\";\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getPurchasedServerLimit');\\n    ns.disableLog('getPurchasedServers');\\n    ns.disableLog('getPurchasedServerCost');\\n    ns.disableLog('getServerMoneyAvailable');\\n    ns.disableLog('serverExists');\\n    ns.disableLog('purchaseServer');\\n    ns.disableLog('deleteServer');\\n    ns.disableLog('getServerMaxRam');\\n    ns.disableLog('killall');\\n    ns.disableLog('scp');\\n    const mySelf = ChannelName.serverManager;\\n    const messageHandler = new MessageHandler(ns, mySelf);\\n    let hackPaused = false;\\n    let everythingMaxed = false;\\n    let taggedForUpdate = [];\\n    while (true) {\\n        if (everythingMaxed) {\\n            dprint(ns, \\\"All server maxed out, quitting.\\\");\\n            break;\\n        }\\n        if (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\n            dprint(ns, \\\"Max server not hit\\\");\\n            while (ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(SERVER_INITIAL_RAM) && ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\n                const numberOfServer = ns.getPurchasedServers().length;\\n                const hostname = \\\"pserv-\\\" + numberOfServer;\\n                await buyServer(hostname, SERVER_INITIAL_RAM);\\n            }\\n            dprint(ns, \\\"Insufficient funds.\\\");\\n        }\\n        if (ns.getPurchasedServers().length == ns.getPurchasedServerLimit()) {\\n            // Try to upgrade the servers\\n            dprint(ns, \\\"Max server hit. Upgrading Server\\\");\\n            await upgradeServer();\\n        }\\n        // if (hackPaused) {\\n        //     dprint(ns, \\\"Resuming.\\\")\\n        //     await messageHandler.sendMessage(ChannelName.hackManager, new Payload(Action.hackResume))\\n        //     hackPaused = false\\n        // }\\n        for (let i = 0; i < 60; i++) {\\n            //if (await checkForKill()) return\\n            await ns.sleep(1000);\\n        }\\n    }\\n    async function checkForKill() {\\n        const killMessage = await messageHandler.getMessagesInQueue(KILL_MESSAGE);\\n        if (killMessage.length > 0) {\\n            dprint(ns, \\\"Kill request\\\");\\n            return true;\\n        }\\n        return false;\\n    }\\n    async function upgradeServer() {\\n        let serverArray = ns.getPurchasedServers();\\n        let smallestRamValue = ns.getServerMaxRam(serverArray[1]);\\n        let smallestServers = [];\\n        // Finding what are the smallest servers\\n        for (let j = 1; j < serverArray.length; j++) {\\n            let curServer = serverArray[j];\\n            if (ns.getServerMaxRam(curServer) < smallestRamValue) {\\n                smallestServers = [];\\n                smallestRamValue = ns.getServerMaxRam(curServer);\\n            }\\n            if (ns.getServerMaxRam(curServer) == smallestRamValue) {\\n                smallestServers.push(curServer);\\n            }\\n        }\\n        dprint(ns, \\\"Smallest servers have \\\" + smallestRamValue + \\\"gb. Count(\\\" + smallestServers.length + \\\")\\\");\\n        // Upgrading the server\\n        let priceCheck = ns.getPurchasedServerCost(smallestRamValue * 2);\\n        if (!Number.isFinite(priceCheck) || (smallestRamValue >= MAX_SERVER_RAM && MAX_SERVER_RAM !== -1)) {\\n            everythingMaxed = true;\\n            return;\\n        }\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") >= Math.min(priceCheck * MIN_SERVER_FOR_UPDATE, priceCheck * smallestServers.length)) {\\n            for (let i = 0; i < smallestServers.length; i++) {\\n                dprint(ns, \\\"Trying to update: \\\" + serverArray[i]);\\n                if (ns.getServerMoneyAvailable(\\\"home\\\") > priceCheck) {\\n                    await buyServer(serverArray[i], smallestRamValue * 2);\\n                }\\n                else {\\n                    dprint(ns, \\\"Not enough money. Requiring \\\" + priceCheck);\\n                    return;\\n                }\\n            }\\n        }\\n        else {\\n            dprint(ns, \\\"Not enough money to upgrade the minimum amount of server. \\\");\\n            return;\\n        }\\n    }\\n    async function buyServer(hostname, ram) {\\n        // Note: No need to ask for pause if we go through the thread lock method\\n        // if (!hackPaused) {\\n        //     await messageHandler.sendMessage(ChannelName.hackManager, new Payload(Action.pause))\\n        //     dprint(ns, \\\"Pause requested awaiting answer\\\")\\n        //     await messageHandler.waitForAnswer(m => m.payload.action === Action.hackPaused)\\n        //     hackPaused = true\\n        // }\\n        const moneyAvailable = ns.getServerMoneyAvailable(\\\"home\\\");\\n        const cost = ns.getPurchasedServerCost(ram);\\n        if (ns.serverExists(hostname)) {\\n            // Note: this kind of structure may cause a long delay since some threads can take a while to free\\n            // it is therefore blocking. We could possibly implement a non blocking method\\n            if (ns.getServerUsedRam(hostname) > 0) {\\n                await messageHandler.sendMessage(ChannelName.threadManager, new Payload(Action.lockHost, hostname));\\n                ns.print(\\\"Waiting for server to empty.\\\");\\n                while (true) {\\n                    const response = await messageHandler.waitForAnswer((m) => true, 10 * 60 * 1000);\\n                    if (response.length > 0) {\\n                        break;\\n                    }\\n                    await ns.sleep(1000);\\n                }\\n            }\\n            if (ns.getServerUsedRam(hostname) > 0) {\\n                ns.print(\\\"Script are still running.\\\");\\n                return;\\n            }\\n            if (moneyAvailable > cost) {\\n                ns.deleteServer(hostname);\\n                dprint(ns, \\\"Deleted server \\\" + hostname);\\n            }\\n        }\\n        if (moneyAvailable > cost) {\\n            let newServer = ns.purchaseServer(hostname, ram);\\n            await copyFile(ns, Object.values(HACKING_SCRIPTS), newServer);\\n            await copyFile(ns, IMPORT_TO_COPY, newServer);\\n            dprint(ns, \\\"Bough new server \\\" + newServer + \\\" with \\\" + ram + \\\" gb of ram\\\");\\n            await messageHandler.sendMessage(ChannelName.threadManager, new Payload(Action.updateHost, hostname));\\n        }\\n    }\\n}\\n\",\"filename\":\"/Orchestrator/ServerManager/manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":11.8,\"server\":\"home\",\"moduleSequenceNumber\":446,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport { ChannelName } from \\\"/Orchestrator/MessageManager/enum\\\";\\nimport { MessageHandler } from \\\"/Orchestrator/MessageManager/class\\\";\\nimport { formatMoney } from \\\"/Orchestrator/Common/GenericFunctions\\\";\\nimport { COMMIT_CRIME, PROGRAMS } from \\\"/Orchestrator/Config/Singularity\\\";\\nimport { dprint } from \\\"/Orchestrator/Common/Dprint\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"sleep\\\");\\n    ns.disableLog(\\\"scp\\\");\\n    ns.disableLog(\\\"scan\\\");\\n    ns.disableLog(\\\"getHackingLevel\\\");\\n    ns.disableLog(\\\"getServerRequiredHackingLevel\\\");\\n    ns.disableLog(\\\"getServerNumPortsRequired\\\");\\n    ns.disableLog(\\\"nuke\\\");\\n    const mySelf = ChannelName.targetManager;\\n    const messageHandler = new MessageHandler(ns, mySelf);\\n    const currentHost = ns.getHostname();\\n    const backdooredHost = [];\\n    const stuffBough = [];\\n    let buyStuffSwitch = true;\\n    checkAlreadyBought();\\n    let checkedHost = [];\\n    while (true) {\\n        dprint(ns, \\\"Scanning network\\\");\\n        checkedHost = [];\\n        await scanAll(currentHost);\\n        ns.connect(\\\"home\\\");\\n        dprint(ns, \\\"Finshing scan. Waiting for next cycle.\\\");\\n        buyStuffSwitch && await buyStuff();\\n        for (let i = 0; i < 4; i++) {\\n            ns.tprint(COMMIT_CRIME);\\n            if (COMMIT_CRIME) {\\n                ns.tprint(\\\"Criming!\\\");\\n                await commitCrime();\\n            }\\n            //if (await checkForKill(ns, messageHandler)) return\\n            await ns.sleep(250);\\n        }\\n        ns.tprint(\\\"Pausing crime for 10 seconds, now it is time to kill the script.\\\");\\n        await ns.sleep(10 * 1000);\\n    }\\n    function checkAlreadyBought() {\\n        if (ns.scan(\\\"home\\\").includes(\\\"darkweb\\\"))\\n            stuffBough.push(\\\"tor\\\");\\n        for (const program of PROGRAMS) {\\n            if (ns.fileExists(program.name, \\\"home\\\"))\\n                stuffBough.push(program.name);\\n        }\\n        if (stuffBough.length === PROGRAMS.length + 1)\\n            buyStuffSwitch = false;\\n    }\\n    async function buyStuff() {\\n        for (const program of PROGRAMS) {\\n            if ((stuffBough.includes(\\\"tor\\\") || program.name === \\\"tor\\\") && !stuffBough.includes(program.name)) {\\n                const moneyAvailable = ns.getServerMoneyAvailable(\\\"home\\\");\\n                if (program.price <= moneyAvailable) {\\n                    if (program.name === \\\"tor\\\") {\\n                        ns.purchaseTor();\\n                    }\\n                    else {\\n                        !ns.fileExists(program.name, \\\"home\\\") && ns.purchaseProgram(program.name);\\n                    }\\n                    dprint(ns, \\\"Bought: \\\" + program.name);\\n                    stuffBough.push(program.name);\\n                }\\n            }\\n        }\\n    }\\n    async function scanAll(base_host) {\\n        let hostArray = ns.scan(base_host);\\n        for (const host of hostArray) {\\n            if (!checkedHost.includes(host) && !host.includes(\\\"pserv-\\\")) {\\n                checkedHost.push(host);\\n                ns.connect(host);\\n                if (!backdooredHost.includes(host) && ns.hasRootAccess(host)) {\\n                    await ns.installBackdoor();\\n                    ns.print(\\\"Backdoored: \\\" + host);\\n                    backdooredHost.push(host);\\n                }\\n                await ns.sleep(100);\\n                await scanAll(host);\\n                ns.connect(base_host);\\n            }\\n        }\\n    }\\n    // From https://steamlists.com/bitburner-crime-script-code-odds-of-success-requirements/\\n    async function commitCrime() {\\n        const crimes = [\\n            \\\"heist\\\",\\n            \\\"assassination\\\",\\n            \\\"kidnap\\\",\\n            \\\"grand theft auto\\\",\\n            \\\"homicide\\\",\\n            \\\"larceny\\\",\\n            \\\"mug someone\\\",\\n            \\\"rob store\\\",\\n            \\\"shoplift\\\",\\n        ];\\n        if (ns.isBusy())\\n            return;\\n        // Calculate the risk value of all crimes\\n        const choices = crimes.map((crime) => {\\n            const crimeStats = ns.getCrimeStats(crime); // Let us look at the important bits\\n            const crimeChance = ns.getCrimeChance(crime); // We need to calculate if its worth it\\n            /** Using probabilty(odds) to calculate the \\\"risk\\\" to get the best reward\\n             * Risk Value = Money Earned * Odds of Success(P(A) / ~P(A)) / Time taken\\n             *\\n             * Larger risk values indicate a better choice\\n             */\\n            const crimeValue = (crimeStats.money * Math.log10(crimeChance / (1 - crimeChance + Number.EPSILON))) /\\n                crimeStats.time;\\n            return { crime: crime, relativeValue: crimeValue, stats: crimeStats };\\n        });\\n        choices.sort(choiceSorter);\\n        ns.commitCrime(choices[0].crime);\\n        ns.print(\\\"Crime: \\\" + choices[0].crime + \\\" (RV: \\\" + choices[0].relativeValue.toPrecision(3) + \\\"): \\\" + formatMoney(choices[0].stats.money));\\n    }\\n}\\nexport const choiceSorter = (a, b) => {\\n    if (a.relativeValue < b.relativeValue) {\\n        return 1;\\n    }\\n    if (a.relativeValue > b.relativeValue) {\\n        return -1;\\n    }\\n    return 0;\\n};\\n\",\"filename\":\"/Orchestrator/SingularityManager/manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":26.75,\"server\":\"home\",\"moduleSequenceNumber\":447,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"commitCrime\",\"cost\":5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getCrimeStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getCrimeChance\",\"cost\":5},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport { Action, ChannelName } from \\\"/Orchestrator/MessageManager/enum\\\";\\nimport { HACKING_SCRIPTS, HACKING_SERVER, IMPORT_TO_COPY, MANAGING_SERVER, PORT_CRACKER, } from \\\"/Orchestrator/Config/Config\\\";\\nimport { MessageHandler, Payload } from \\\"/Orchestrator/MessageManager/class\\\";\\nimport { copyFile } from \\\"/Orchestrator/Common/GenericFunctions\\\";\\nimport { dprint } from \\\"/Orchestrator/Common/Dprint\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"sleep\\\");\\n    ns.disableLog(\\\"scp\\\");\\n    ns.disableLog(\\\"scan\\\");\\n    ns.disableLog(\\\"getHackingLevel\\\");\\n    ns.disableLog(\\\"getServerRequiredHackingLevel\\\");\\n    ns.disableLog(\\\"getServerNumPortsRequired\\\");\\n    ns.disableLog(\\\"nuke\\\");\\n    const mySelf = ChannelName.targetManager;\\n    const messageHandler = new MessageHandler(ns, mySelf);\\n    const currentHost = ns.getHostname();\\n    const hackedHost = [];\\n    let checkedHost = [];\\n    let portOpener = [];\\n    while (true) {\\n        dprint(ns, \\\"Scanning network\\\");\\n        portOpener = buildPortOpener();\\n        checkedHost = [];\\n        await scan_all(currentHost);\\n        dprint(ns, \\\"Finshing scan. Waiting for next cycle.\\\");\\n        for (let i = 0; i < 60; i++) {\\n            //if (await checkForKill(ns, messageHandler)) return\\n            await ns.sleep(1000);\\n        }\\n    }\\n    async function scan_all(base_host) {\\n        let hostArray = ns.scan(base_host);\\n        for (let i = 0; i < hostArray.length; i++) {\\n            const host = hostArray[i];\\n            if (!checkedHost.includes(host) && !host.includes(\\\"pserv-\\\")) {\\n                checkedHost.push(host);\\n                if (checkHost(host) && !hackedHost.includes(host)) {\\n                    dprint(ns, \\\"Found new host: \\\" + host);\\n                    // We ns.rm before since there seems to be a bug with cached import: https://github.com/danielyxie/bitburner/issues/2413\\n                    if (host !== \\\"home\\\" && host !== HACKING_SERVER && host !== MANAGING_SERVER && !host.includes(\\\"pserv-\\\")) {\\n                        await prepareServer(host);\\n                    }\\n                    hackedHost.push(host);\\n                    await broadcastNewHost(host);\\n                }\\n                await ns.sleep(100);\\n                await scan_all(host);\\n            }\\n        }\\n    }\\n    function checkHost(host) {\\n        if (ns.hasRootAccess(host)) {\\n            // Already root\\n            return true;\\n        }\\n        if (ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(host)) {\\n            const requiredPort = ns.getServerNumPortsRequired(host);\\n            if (requiredPort <= portOpener.length) {\\n                // We have enough port cracker\\n                let portOpen = 0;\\n                while (portOpen < requiredPort) {\\n                    portOpener[portOpen](host);\\n                    portOpen++;\\n                }\\n            }\\n            else {\\n                // Not enough port cracker\\n                return false;\\n            }\\n            // Can be hacked\\n            ns.nuke(host);\\n            return true;\\n        }\\n        else {\\n            // Not enough hacking level\\n            return false;\\n        }\\n    }\\n    async function broadcastNewHost(host) {\\n        dprint(ns, \\\"Broadcasting host: \\\" + host);\\n        const payload = new Payload(Action.addHost, host);\\n        dprint(ns, \\\"Broadcasting to Thread Manager\\\");\\n        await messageHandler.sendMessage(ChannelName.threadManager, payload);\\n        dprint(ns, \\\"Broadcasting to Hack Manager\\\");\\n        await messageHandler.sendMessage(ChannelName.hackManager, payload);\\n    }\\n    async function prepareServer(host) {\\n        await copyFile(ns, Object.values(HACKING_SCRIPTS), host);\\n        await copyFile(ns, IMPORT_TO_COPY, host);\\n    }\\n    function buildPortOpener() {\\n        const opener = [];\\n        for (let i = 0; i < PORT_CRACKER(ns).length; i++) {\\n            if (ns.fileExists(PORT_CRACKER(ns)[i].file)) {\\n                opener.push(PORT_CRACKER(ns)[i].function);\\n            }\\n        }\\n        return opener;\\n    }\\n}\\n\",\"filename\":\"/Orchestrator/TargetManager/manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.05,\"server\":\"home\",\"moduleSequenceNumber\":448,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Payload } from \\\"/Orchestrator/MessageManager/class\\\";\\nimport { Action, ChannelName } from \\\"/Orchestrator/MessageManager/enum\\\";\\nimport { DEBUG } from \\\"/Orchestrator/Config/Debug\\\";\\nexport async function getThreads(ns, amount, messageHandler, extra) {\\n    const response = await messageHandler.sendAndWait(ChannelName.threadManager, new Payload(Action.getThreads, amount, extra), null, true, m => m.payload.action === Action.threads);\\n    if (response.length === 0) {\\n        ns.tprint(\\\"Did not receive any thread answers!\\\");\\n        return {};\\n    }\\n    DEBUG && ns.print(\\\"Got threads: \\\");\\n    DEBUG && ns.print(response[0].payload.info);\\n    return response[0].payload.info;\\n}\\nexport async function freeThreads(ns, allocatedThreads, messageHandler) {\\n    DEBUG && ns.print(\\\"Freeing threads\\\");\\n    await messageHandler.sendMessage(ChannelName.threadManager, new Payload(Action.freeThreads, allocatedThreads));\\n}\\n\",\"filename\":\"/Orchestrator/ThreadManager/common.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":449,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport { MessageHandler, Payload, } from \\\"/Orchestrator/MessageManager/class\\\";\\nimport { HACKING_SCRIPTS, HACKING_SERVER, MANAGING_SERVER, SHARING_SCRIPT, THREAD_SERVER, TIMEOUT_THRESHOLD, USE_SHARE, } from \\\"/Orchestrator/Config/Config\\\";\\nimport { Action, ChannelName } from \\\"/Orchestrator/MessageManager/enum\\\";\\nimport { dprint } from \\\"/Orchestrator/Common/Dprint\\\";\\nimport { DEBUG } from \\\"/Orchestrator/Config/Debug\\\";\\nexport class Thread {\\n    constructor(host, inUse) {\\n        this.host = host;\\n        this.inUse = inUse;\\n        this.locked = false;\\n        this.expectedRelease = null;\\n    }\\n}\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n    ns.disableLog('getServerMaxRam');\\n    ns.disableLog('getServerUsedRam');\\n    ns.disableLog('exec');\\n    const mySelf = ChannelName.threadManager;\\n    let threads = [];\\n    let killrequest = false;\\n    let lockedHost = [];\\n    let useShare = USE_SHARE;\\n    const messageActions = {\\n        [Action.getThreads]: getThreads,\\n        [Action.getThreadsAvailable]: getAvailableThreads,\\n        [Action.addHost]: addHost,\\n        [Action.freeThreads]: freeThreads,\\n        [Action.updateHost]: updateHost,\\n        [Action.kill]: kill,\\n        [Action.consoleThreadsUse]: consoleThreadsUse,\\n        [Action.lockHost]: lockHost,\\n        [Action.getTotalThreads]: getTotalThreads,\\n        [Action.useShareSwitch]: useShareSwitch,\\n    };\\n    const messageHandler = new MessageHandler(ns, mySelf);\\n    const ramChunk = Math.max(...Object.values(HACKING_SCRIPTS).map(script => ns.getScriptRam(script)));\\n    const shareChunk = ns.getScriptRam(SHARING_SCRIPT);\\n    while (true) {\\n        if (killrequest)\\n            break;\\n        const lastMessage = await messageHandler.popLastMessage();\\n        lastMessage.length > 0 && await messageActions[lastMessage[0].payload.action]?.(lastMessage[0]);\\n        //cleanup()\\n        await ns.sleep(100);\\n    }\\n    dprint(ns, \\\"Exiting\\\");\\n    function cleanup() {\\n        let orphanThreads = 0;\\n        for (let i = 0; i < threads.length; i++) {\\n            const threadIndex = threads.findIndex(t => (t.inUse && (t.expectedRelease && t.expectedRelease < Date.now())));\\n            if (threadIndex === -1)\\n                return;\\n            threads[threadIndex].inUse = false;\\n            threads[threadIndex].expectedRelease = null;\\n            orphanThreads++;\\n        }\\n        DEBUG && ns.tprint(\\\"Cleaned up \\\" + orphanThreads + \\\" orphan threads.\\\");\\n    }\\n    async function useShareSwitch(message) {\\n        useShare = !useShare;\\n        const hosts = [...new Set(threads.map(thread => thread.host))];\\n        for (const host of hosts) {\\n            killAndRestartShare(host);\\n        }\\n    }\\n    function killAndRestartShare(host) {\\n        const nbOfThreadsInUse = threads.filter(t => (t.host === host && t.inUse)).length;\\n        const nbOfShareThreads = Math.floor((ns.getServerMaxRam(host) - (nbOfThreadsInUse * ramChunk)) / shareChunk);\\n        ns.kill(SHARING_SCRIPT, host);\\n        if (!lockedHost.includes(host) && nbOfShareThreads > 0 && useShare) {\\n            ns.exec(SHARING_SCRIPT, host, nbOfShareThreads);\\n        }\\n    }\\n    async function addHost(message) {\\n        const host = message.payload.info;\\n        const hosts = [...new Set(threads.map(thread => thread.host))];\\n        // If the host is the one from which the Hack emanate we skip it\\n        if (host === HACKING_SERVER || host === MANAGING_SERVER || host === THREAD_SERVER)\\n            return;\\n        if (hosts.includes(host))\\n            await updateHost(message);\\n        const hostThreads = Math.floor(((ns.getServerMaxRam(host) - ns.getServerUsedRam(host)) / ramChunk));\\n        dprint(ns, \\\"Got new host: \\\" + host + \\\" with \\\" + hostThreads + \\\" threads\\\");\\n        for (let j = 0; j < hostThreads; j++)\\n            threads.push(new Thread(host, false));\\n        useShare && killAndRestartShare(host);\\n    }\\n    async function getTotalThreads(message) {\\n        const payload = new Payload(Action.totalThreads, threads.filter(t => !t.locked).length);\\n        await messageHandler.sendMessage(message.origin, payload, message.originId);\\n    }\\n    async function getAvailableThreads(message) {\\n        //dprint(ns, \\\"Got thread request from: \\\" + message.origin + \\\" for available threads\\\")\\n        let payload = new Payload(Action.threadsAvailable, 0);\\n        if (threads.length) {\\n            let availableThreads = threads.filter(thread => (!thread.inUse && !thread.locked)).length;\\n            payload = new Payload(Action.threadsAvailable, availableThreads);\\n        }\\n        await messageHandler.sendMessage(message.origin, payload, message.originId);\\n    }\\n    async function getThreads(message) {\\n        let number = message.payload.info;\\n        const exact = message.payload.extra?.['exact'] || false;\\n        const expectedTime = message.payload.extra?.['time'] || null;\\n        if (threads.length === 0) {\\n            dprint(ns, \\\"Thread manager not ready.\\\");\\n            await messageHandler.sendMessage(message.origin, new Payload(Action.threads, {}), message.originId);\\n            return;\\n        }\\n        const unusedThreads = threads.filter(thread => (!thread.inUse && !thread.locked));\\n        dprint(ns, \\\"Got thread request from: \\\" + message.originId + \\\" for \\\" + number + \\\" threads (Exact: \\\" + exact + \\\")\\\");\\n        // -1 will return all available threads [Deprecated]\\n        if (number === -1) {\\n            number = unusedThreads.length;\\n        }\\n        if (unusedThreads.length < number && exact) {\\n            dprint(ns, \\\"Not enough threads\\\");\\n            await messageHandler.sendMessage(message.origin, new Payload(Action.threads, {}), message.originId);\\n            return;\\n        }\\n        const allocatedThreads = unusedThreads.slice(0, number);\\n        allocatedThreads.map(thread => {\\n            thread.inUse = true;\\n            if (expectedTime)\\n                thread.expectedRelease = Date.now() + expectedTime + TIMEOUT_THRESHOLD;\\n        });\\n        const uniqueHost = [...new Set(allocatedThreads.map(thread => thread.host))];\\n        const allocatedThreadsByHost = uniqueHost.reduce((acc, cur) => {\\n            acc[cur] = allocatedThreads.filter(t => t.host == cur).length;\\n            return acc;\\n        }, {});\\n        if (useShare) {\\n            for (const host of Object.keys(allocatedThreadsByHost)) {\\n                killAndRestartShare(host);\\n            }\\n        }\\n        dprint(ns, \\\"Allocated \\\" + allocatedThreads.length + \\\" threads to hack \\\" + message.originId);\\n        await messageHandler.sendMessage(message.origin, new Payload(Action.threads, allocatedThreadsByHost), message.originId);\\n    }\\n    async function freeThreads(message) {\\n        dprint(ns, \\\"Received thread freeing request from \\\" + message.origin + \\\"(Origin ID: \\\" + message.originId + \\\")\\\");\\n        const threadsInfo = message.payload.info;\\n        for (const host of Object.keys(threadsInfo)) {\\n            const usedThreadFilter = t => (t.inUse && t.host === host);\\n            const usedThreads = threads.filter(usedThreadFilter); // We filter the used threads for the host\\n            threads = threads.filter(t => !usedThreadFilter(t)); // We remove those thread from the current pool\\n            const threadsToRelease = usedThreads.splice(0, threadsInfo[host]); // We remove the thread that we want to release\\n            threads.push(...usedThreads); // We read the still used threads in the pool\\n            const releasedThreads = threadsToRelease.map(t => {\\n                const thread = new Thread(t.host, false);\\n                thread.locked = t.locked;\\n                return thread;\\n            });\\n            threads.push(...releasedThreads);\\n            // for (let i = 0; i < threadsInfo[host]; i++) {\\n            //     const threadIndex = threads.findIndex(t => (t.inUse && t.host === host))\\n            //     if (threadIndex>=0) {\\n            //         threads[threadIndex].inUse = false\\n            //         threads[threadIndex].expectedRelease = null\\n            //     }\\n            // }\\n            dprint(ns, \\\"Deallocated \\\" + threadsInfo[host] + \\\" threads of \\\" + host);\\n            useShare && killAndRestartShare(host);\\n            await checkLockedStatus(host);\\n            await ns.sleep(100); // Throttle\\n        }\\n    }\\n    async function checkLockedStatus(hostname) {\\n        const hostThreads = threads.filter(t => (t.host === hostname));\\n        if (lockedHost.includes(hostname) && !hostThreads.some(t => t.inUse)) {\\n            await messageHandler.sendMessage(ChannelName.serverManager, new Payload(Action.hostLocked, hostname));\\n        }\\n    }\\n    async function updateHost(message) {\\n        dprint(ns, \\\"Updating threads amount on \\\" + message.payload.info);\\n        const host = message.payload.info;\\n        lockedHost = lockedHost.filter(h => h !== message.payload.info);\\n        threads = threads.filter(t => t.host !== host);\\n        await addHost(message);\\n    }\\n    async function kill() {\\n        dprint(ns, \\\"Kill request. Kill all threads\\\");\\n        const usedThreads = threads.filter(t => t.inUse = true);\\n        const uniqueHost = [...new Set(usedThreads.map(thread => thread.host))];\\n        for (const host of uniqueHost) {\\n            ns.killall(host);\\n        }\\n        killrequest = true;\\n    }\\n    async function consoleThreadsUse(message) {\\n        for (const host of [...new Set(threads.map(thread => thread.host))]) {\\n            const hostUsedRam = ns.getServerUsedRam(host);\\n            const hostMaxRam = ns.getServerMaxRam(host);\\n            const hostThreads = threads.filter(t => t.host === host);\\n            const hostThreadsInUse = hostThreads.filter(t => t.inUse);\\n            const numberOfBar = hostThreads.length ? Math.round((hostThreadsInUse.length / hostThreads.length * 20)) : 20;\\n            const numberOfDash = 20 - numberOfBar;\\n            const padding = 20 - host.length;\\n            const barSymbol = lockedHost.includes(host) ? \\\"X\\\" : \\\"|\\\";\\n            const dashSymbol = lockedHost.includes(host) ? \\\"*\\\" : \\\"-\\\";\\n            ns.tprint(host + \\\" \\\".repeat(padding) + \\\": [\\\" + barSymbol.repeat(numberOfBar) + dashSymbol.repeat(numberOfDash) + \\\"] (\\\" + hostThreadsInUse.length + \\\"/\\\" + hostThreads.length + \\\")  \\\" + hostUsedRam + \\\" GiB/\\\" + hostMaxRam + \\\" GiB\\\");\\n        }\\n    }\\n    async function lockHost(message) {\\n        const host = message.payload.info;\\n        lockedHost.push(host);\\n        useShare && killAndRestartShare(host);\\n        for (const thread of threads)\\n            if (thread.host === host)\\n                thread.locked = true;\\n        await checkLockedStatus(host);\\n    }\\n}\\n\",\"filename\":\"/Orchestrator/ThreadManager/manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.75,\"server\":\"home\",\"moduleSequenceNumber\":450,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport { MessageHandler } from \\\"/Orchestrator/MessageManager/class\\\";\\nimport { Action, ChannelName } from \\\"/Orchestrator/MessageManager/enum\\\";\\nimport { dprint } from \\\"/Orchestrator/Common/Dprint\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"sleep\\\");\\n    const mySelf = ChannelName.shareScript;\\n    const myId = ns.args[0];\\n    const messageHandler = new MessageHandler(ns, mySelf, myId);\\n    let stopRequest = false;\\n    let cycle = 0;\\n    dprint(ns, \\\"Starting\\\");\\n    while (!stopRequest) {\\n        dprint(ns, \\\"New cycle: \\\" + cycle);\\n        const responses = await messageHandler.getMessagesInQueue();\\n        if (responses.length > 0) {\\n            for (const response of responses) {\\n                if (response.payload.action === Action.stop) {\\n                    stopRequest = true;\\n                }\\n            }\\n        }\\n        await ns.share();\\n        dprint(ns, \\\"Cycle \\\" + cycle + \\\" done.\\\");\\n        cycle++;\\n    }\\n    dprint(ns, \\\"Stop requested.\\\");\\n}\\n\",\"filename\":\"/Orchestrator/ThreadManager/script/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"home\",\"moduleSequenceNumber\":451,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { findMyFactionsWithAug } from \\\"utils/augs.js\\\";\\n\\n\\nconst NF = \\\"NeuroFlux Governor\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst flagdata = ns.flags([\\n\\t\\t[\\\"auto\\\", false],\\n\\t\\t[\\\"simulate\\\", false],\\n\\t\\t[\\\"nowork\\\", false],\\n\\t\\t[\\\"help\\\", false]\\n\\t])\\n\\tif (flagdata.help) {\\n\\t\\tns.tprint(\\\"--auto to automatically buy until you can't; --simulate to simulate but not actually spend resources; --nowork to not work for a faction when out of rep\\\");\\n\\t\\treturn\\n\\t}\\n\\t// Is the NF available to me right now?\\n\\tlet player = ns.getPlayer();\\n\\tns.tprint(\\\"Current money: \\\" + player.money);\\n\\t// my_factions_w_nf is a list of factions selling NF sorted descending by highest rep\\n\\tlet my_factions_w_nf = findMyFactionsWithAug(ns, NF, player);\\n\\tif (my_factions_w_nf.length == 0) {\\n\\t\\tns.tprint(\\\"You don't currently belong to any factions that sell the NeuroFlux Governor.\\\");\\n\\t\\treturn\\n\\t}\\n\\t/*\\n\\t\\tWhat this should do for v3:\\n\\t\\t- Money goes faster than rep\\n\\t\\t- While we have enough money, check to see if we have enough rep\\n\\t\\t- Farm for rep until we have enough to buy\\n\\t\\t- Buy until we can't\\n\\t\\t- If out of money, end script and complain\\n\\t*/\\n\\tlet closest_faction = getClosestNFFaction(ns, my_factions_w_nf);\\n\\tns.tprint(`Current NF rep req: ${ns.getAugmentationRepReq(NF)}`)\\n\\tns.tprint(`Closest faction is ${closest_faction} with rep ${ns.getFactionRep(closest_faction)}`);\\n\\tlet started_working = false;\\n\\tlet shouldBuy = flagdata.auto;\\n\\tlet didBuy = false;\\n\\tlet money = ns.getPlayer().money;\\n\\tlet price = ns.getAugmentationPrice(NF);\\n\\tlet bought_price;\\n\\t// While there are factions who sell NF and I don't want to stop buying:\\n\\twhile (money >= price) {\\n\\t\\t// While our rep is less than the requirement (and not simulating), start working for that faction\\n\\t\\twhile ((ns.getFactionRep(closest_faction) < ns.getAugmentationRepReq(NF)) && !flagdata.simulate && !flagdata.nowork) {\\n\\t\\t\\t// This intentionally stops working after a time and re-starts to update the rep\\n\\t\\t\\tstarted_working = ns.workForFaction(closest_faction, \\\"Hacking Contracts\\\");\\n\\t\\t\\tawait ns.sleep(30000);\\n\\t\\t}\\n\\t\\t// We have enough rep to buy now, stop working\\n\\t\\tif (started_working) {\\n\\t\\t\\tns.stopAction();\\n\\t\\t\\tstarted_working = false;\\n\\t\\t}\\n\\t\\t// Buy while we have enough money\\n\\t\\t// If 'auto' mode set, do not prompt\\n\\t\\tif (!flagdata.auto && !flagdata.simulate) {\\n\\t\\t\\tshouldBuy = await ns.prompt(`Buy from ${closest_faction} for ${ns.nFormat(price, '$0.00a')}`);\\n\\t\\t}\\n\\t\\t// If prompted yes, or 'auto' is set, proceed\\n\\t\\tif (shouldBuy || flagdata.simulate) {\\n\\t\\t\\t// If not simulating, do the purchase and re-evaluate our metrics\\n\\t\\t\\tif (!flagdata.simulate) {\\n\\t\\t\\t\\tbought_price = price;\\n\\t\\t\\t\\tdidBuy = ns.purchaseAugmentation(closest_faction, NF);\\n\\t\\t\\t\\tmoney = ns.getPlayer().money;\\n\\t\\t\\t\\tprice = ns.getAugmentationPrice(NF);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t// If simulating, raise the price\\n\\t\\t\\t\\tbought_price = price;\\n\\t\\t\\t\\tdidBuy = true;\\n\\t\\t\\t\\tmoney -= price;\\n\\t\\t\\t\\tprice = Math.pow(price, 1.14);\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (didBuy) ns.tprint(`Bought from ${closest_faction} for ${ns.nFormat(bought_price, '$0.00a')}`)\\n\\t\\t} else {\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\t}\\n\\tns.tprint(`You're out of money, need ${ns.nFormat(price, '$0.00a')}`);\\n}\\n\\n/** \\n * Determine the faction whose rep is closest to the next rep requirement. \\n * @param {NS} ns \\n * @param avail_factions Factions I belong to that sell NF \\n**/\\nfunction getClosestNFFaction(ns, avail_factions) {\\n\\tlet rep_sorted_fax = avail_factions.sort((a, b) => ns.getFactionRep(a) - ns.getFactionRep(b));\\n\\tlet sorted_fax = rep_sorted_fax.sort((a, b) => (ns.getAugmentationRepReq(NF) - ns.getFactionRep(a)) < (ns.getAugmentationRepReq(NF) - ns.getFactionRep(b)))\\n\\treturn sorted_fax[0]\\n}\\n\\n/** \\n * Find factions that sell a given augmentation, sorted by rep (descending)\\n * @param {NS} ns \\n * @param {string} aug An aug to search for\\n**/\\nfunction findFactionsWithAug(ns, aug, player) {\\n\\treturn player.factions.filter(\\n\\t\\tfaction => ns.getAugmentationsFromFaction(faction).includes(aug)\\n\\t).sort((repA, repB) => ns.getFactionRep(repA) - ns.getFactionRep(repB)).reverse();\\n}\",\"filename\":\"neuroflux.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/augs.js\",\"url\":\"blob:file:///7b4b3c99-860f-4317-af57-b6a75c8b34c9\",\"moduleSequenceNumber\":394},{\"filename\":\"neuroflux.js\",\"url\":\"blob:file:///c1d77ace-bad3-43e9-81cf-2d33d4f9c7bd\",\"moduleSequenceNumber\":365404}],\"dependents\":[],\"ramUsage\":22.1,\"server\":\"home\",\"moduleSequenceNumber\":452,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getAugmentationRepReq\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getFactionRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getAugmentationPrice\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"workForFaction\",\"cost\":3},{\"type\":\"fn\",\"name\":\"stopAction\",\"cost\":1},{\"type\":\"fn\",\"name\":\"purchaseAugmentation\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getAugmentationsFromFaction\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { [\\\"Speakers for the Dead\\\",\\\"The Dark Army\\\",\\\"The Syndicate\\\",\\\"Slum Snakes\\\",\\\"The Black Hand\\\"].forEach(g => ns.gang.createGang(g)); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-createGang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///5e64f43d-3f20-448d-9a73-b91afe9caabc\",\"moduleSequenceNumber\":331},{\"filename\":\"/Temp/gang-createGang.js\",\"url\":\"blob:file:///7c5d720a-45fb-4424-8be9-883e168e42c8\",\"moduleSequenceNumber\":264666}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":453,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.createGang\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { findMyFactionsWithAug } from \\\"utils/augs.js\\\";\\nimport { donationAmountForRep, workUntilDonate } from \\\"utils/repNeededForFavor.js\\\";\\nimport { locateServer, createNetworkMap } from \\\"utils/networkmap.js\\\";\\nimport { maximizeScriptUse } from \\\"utils/script_tools.js\\\";\\n\\n/**\\n * End-Gameplan\\n * 1. Create network map\\n * 1.5. Buy programs from darkweb\\n * 4. Run gangs\\n * 6. If don't have Q-link yet, wait for Q-link (25t)\\n * 7. Buy all the exp+ augs\\n * 8. Buy all the faction rep+ augs for Daedalus\\n * 9. Once all augs bought, buy NF until hack level > 2500\\n * 10. If Hack > 2500, +30 augs, 100b+ money, wait for Daedalus invite\\n * 11. Grind faction until 150 Favor (462k rep)\\n * 12. Buy the Red Pill\\n * 13. Hunt down that World Daemon, buy NF until meet the required hack level\\n * \\n */\\n\\nconst TheRedPill = \\\"The Red Pill\\\";\\nconst FAVOR_TO_DONATE = 150;\\nconst WORLD = \\\"w0r1d_d43m0n\\\";\\nconst HOME = 'home';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t// Create network map\\n\\tawait createNetworkMap(ns);\\n\\t// Start hacking\\n\\tns.exec('gangs.js', HOME);\\n\\tns.exec('obtainPrograms.js', HOME);\\n\\tmaximizeScriptUse(ns, \\\"growHackingXP.js\\\", HOME);\\n\\t// Join Daedalus if it's currently waiting\\n\\tawait joinDaedalus(ns);\\n\\tawait grindForRedPill(ns);\\n\\t// hack the world daemon!\\n\\tawait hackThePlanet(ns);\\n}\\n\\n\\n/** \\n * Grind for The Red Pill. Typically this is Daedalus, but in BN2 it's the gang.\\n * @param {NS} ns \\n**/\\nasync function grindForRedPill(ns) {\\n\\tlet player = ns.getPlayer();\\n\\tlet red_pill_req = ns.getAugmentationRepReq(TheRedPill)\\n\\t// First, find the faction with the red pill\\n\\tlet factions_w_red_pill = findMyFactionsWithAug(ns, TheRedPill, player);\\n\\twhile (factions_w_red_pill.length == 0) {\\n\\t\\tns.tprint(\\\"You don't currently belong to any factions with \\\" + TheRedPill);\\n\\t\\tfactions_w_red_pill = findMyFactionsWithAug(ns, TheRedPill, player);\\n\\t\\tawait ns.sleep(30000);\\n\\t\\treturn\\n\\t}\\n\\twhile (!ns.getOwnedAugmentations(true).includes(TheRedPill)) {\\n\\t\\tns.tprint(\\\"Hunt for the red pill!\\\");\\n\\t\\t//Do we have enough rep to buy it now?\\n\\t\\tif (ns.getFactionRep(factions_w_red_pill[0]) >= red_pill_req) {\\n\\t\\t\\tlet should_buy = await ns.prompt(`Buy ${TheRedPill} from ${factions_w_red_pill[0]}}?`);\\n\\t\\t\\tif (should_buy) {\\n\\t\\t\\t\\tlet did_buy = ns.purchaseAugmentation(factions_w_red_pill[0], TheRedPill);\\n\\t\\t\\t\\tif (did_buy) ns.tprint(`Purchased ${TheRedPill}!`)\\n\\t\\t\\t}\\n\\t\\t\\treturn\\n\\t\\t\\t// Do we have enough favor to to donate rep?\\n\\t\\t} else if (ns.getFactionFavor(factions_w_red_pill[0]) >= FAVOR_TO_DONATE) {\\n\\t\\t\\tlet money_needed = donationAmountForRep(ns, factions_w_red_pill[0], red_pill_req);\\n\\t\\t\\t// ns.tprint(`Need to donate ${money_needed}`);\\n\\t\\t\\tlet should_donate = await ns.prompt(`Donate ${ns.nFormat(money_needed, '$0.00a')} to ${factions_w_red_pill[0]}?`);\\n\\t\\t\\tlet did_donate = false;\\n\\t\\t\\tif (should_donate) did_donate = ns.donateToFaction(factions_w_red_pill[0], money_needed);\\n\\t\\t\\tif (did_donate) {\\n\\t\\t\\t\\tns.tprint(`Donated ${ns.nFormat(money_needed, '$0.00a')} to ${factions_w_red_pill[0]}`);\\n\\t\\t\\t\\tns.tprint(\\\"Next reset will let you buy \\\" + TheRedPill)\\n\\t\\t\\t}\\n\\t\\t\\treturn\\n\\t\\t}\\n\\t\\t// Okay, we don't have enough rep, or favor to donate yet.\\n\\t\\t// The Red Pill costs 2.5m rep. That's not worth waiting for, \\n\\t\\t// so grind to 150 favor instead (which requires ~462k rep)\\n\\t\\tns.tprint(`Working for ${factions_w_red_pill[0]} until we can donate`)\\n\\t\\tawait workUntilDonate(ns, factions_w_red_pill[0]);\\n\\t\\tif (ns.getFactionFavorGain(factions_w_red_pill[0]) >= FAVOR_TO_DONATE) {\\n\\t\\t\\tns.tprint(\\\"Next reset will let you donate favor for \\\" + TheRedPill);\\n\\t\\t\\tlet should_reset = await ns.prompt(\\\"Reset to buy The Red Pill?\\\");\\n\\t\\t\\tif (should_reset) {\\n\\t\\t\\t\\tns.installAugmentations('endgameplan.js');\\n\\t\\t\\t}\\n\\t\\t\\treturn\\n\\t\\t}\\n\\t}\\n}\\n\\n/** \\n * Find the world daemon and hack it!.\\n * @param {NS} ns \\n**/\\nasync function hackThePlanet(ns) {\\n\\tlet daemon_path = await locateServer(ns, WORLD);\\n\\tif (daemon_path.length < 5) return\\n\\tns.tprint(`Path to ${WORLD}: ${daemon_path.join(\\\" -> \\\")}`);\\n\\tfor (const step of daemon_path) {\\n\\t\\t// ns.tprint(\\\"Connecting to: \\\" + step)\\n\\t\\tns.connect(step);\\n\\t}\\n\\tlet should_end_bitnode = await ns.prompt(`Backdoor the ${WORLD} and end the bitnode?`);\\n\\tif (should_end_bitnode) {\\n\\t\\tawait ns.installBackdoor();\\n\\t} else ns.connect('home');\\n}\\n\\nasync function joinDaedalus(ns) {\\n\\tconst DAEDALUS = \\\"Daedalus\\\";\\n\\tif (DAEDALUS in ns.getPlayer().factions) return\\n\\t// Check our faction invites\\n\\tlet invited_factions = ns.checkFactionInvitations();\\n\\twhile (!invited_factions.includes(DAEDALUS)) {\\n\\t\\t// Wait for Daedalus to show up\\n\\t\\tawait ns.sleep(30000);\\n\\t\\tinvited_factions = ns.checkFactionInvitations();\\n\\t}\\n\\tif (invited_factions.includes(DAEDALUS)) {\\n\\t\\tlet did_join = ns.joinFaction(DAEDALUS);\\n\\t\\tif (did_join) ns.tprint(\\\"Joined \\\" + DAEDALUS)\\n\\t}\\n}\",\"filename\":\"endgameplan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/readNetworkMap.js\",\"url\":\"blob:file:///d0f65e35-0ee8-402d-bb3f-d0c22cca6432\",\"moduleSequenceNumber\":603951},{\"filename\":\"/utils/repNeededForFavor.js\",\"url\":\"blob:file:///bfd7c390-05fa-450b-a44e-53a635057fb9\",\"moduleSequenceNumber\":591925},{\"filename\":\"/utils/augs.js\",\"url\":\"blob:file:///9e9284ec-0627-42cb-a387-a718d43a1e07\",\"moduleSequenceNumber\":590444},{\"filename\":\"gameplan.js\",\"url\":\"blob:file:///0987bf8f-56e8-4f2f-901c-776129ed3fa8\",\"moduleSequenceNumber\":609442}],\"dependents\":[],\"ramUsage\":50.25,\"server\":\"home\",\"moduleSequenceNumber\":1507,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getAugmentationRepReq\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getFactionRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"purchaseAugmentation\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getFactionFavor\",\"cost\":1},{\"type\":\"fn\",\"name\":\"donateToFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getFactionFavorGain\",\"cost\":0.75},{\"type\":\"fn\",\"name\":\"installAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"checkFactionInvitations\",\"cost\":3},{\"type\":\"fn\",\"name\":\"joinFaction\",\"cost\":3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"workForFaction\",\"cost\":3},{\"type\":\"fn\",\"name\":\"stopAction\",\"cost\":1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * Find my factions that sell a given augmentation, sorted by rep (descending)\\n * @param {NS} ns \\n * @param {string} aug An aug to search for\\n**/\\nexport function findMyFactionsWithAug(ns, aug, player) {\\n\\treturn player.factions.filter(\\n\\t\\tfaction => ns.getAugmentationsFromFaction(faction).includes(aug)\\n\\t).sort((repA, repB) => ns.getFactionRep(repA) - ns.getFactionRep(repB)).reverse();\\n}\",\"filename\":\"/utils/augs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":7.6,\"server\":\"home\",\"moduleSequenceNumber\":455,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getFactionRep\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { workoutAllUntil, commitKarmaFocusedCrime, GANG_KARMA } from \\\"utils/crimes.js\\\";\\nimport { obtainPrograms } from \\\"obtainPrograms.js\\\";\\nimport { maximizeScriptUse } from \\\"utils/script_tools.js\\\";\\n\\n/**\\n * Early Gameplan w/ Gangs (32 GB RAM)\\n * 1. Buy programs from darkweb\\n * 2. Run findOptimal with 1 thread\\n * 3. Run easy-hack with 2 threads\\n * 4. Gym until 30 of each stat\\n * 5. Start mugging until >70% chance of homicide\\n * 6. Homicide until -54k karma\\n * 7. Start gang\\n * 8. Along the way, evaluate if we have enough money for the next RAM upgrade\\n */\\n\\nconst HOME = 'home';\\nconst MIN_STAT = 30;\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t// 2-3 Run hacking programs\\n\\t//TODO figure out optimal thread counts here\\n\\t// not enough RAM to do this script + findOptimal + easy-hack in 32 GB\\n\\t// ns.exec('easy-hack.script', HOME, 2);\\n\\t// 4. Hit the gym until minimum stats\\n\\tawait workoutAllUntil(ns, MIN_STAT);\\n\\t// 5-6 Start crimes until we can do homicides to get to the gang karma, also upgrade home\\n\\tawait crimeWhileUpgradingLoop(ns);\\n\\t// TODO figure out how to do more hacking based on increased RAM amounts\\n\\t// 7. Start a gang\\n\\tstartAGang(ns);\\n}\\n\\n/** \\n * Commit crimes, but if we have enough money, buy more home upgrades\\n * @param {NS} ns \\n**/\\nasync function crimeWhileUpgradingLoop(ns) {\\n\\tns.disableLog(\\\"ALL\\\"); // Disable the log\\n\\tns.tail(); // Open a window to view the status of the script\\n\\tlet timeout = 250; // In ms - too low of a time will result in a lockout/hang\\n\\twhile (Math.abs(ns.heart.break()) <= GANG_KARMA) {\\n\\t\\tawait ns.sleep(timeout); // Wait it out first\\n\\t\\tif (ns.isBusy()) continue;\\n\\t\\t// See if we can upgrade our home\\n\\t\\tupgradeHome(ns);\\n\\t\\t// If we have lots of money, see if we can buy darkweb programs\\n\\t\\tobtainPrograms(ns);\\n\\t\\t// Spin up hacking XP tools\\n\\t\\tgrowHackingXP(ns);\\n\\t\\t// Otherwise, commit crime!\\n\\t\\tcommitKarmaFocusedCrime(ns);\\n\\t}\\n}\\n\\n\\n/** \\n * Upgrade the home\\n * @param {NS} ns \\n**/\\nfunction upgradeHome(ns) {\\n\\t// Do I have enough money to buy a RAM or core upgrade?\\n\\tlet ram_cost = ns.getUpgradeHomeRamCost();\\n\\tlet core_cost = ns.getUpgradeHomeCoresCost();\\n\\tlet money = ns.getPlayer().money;\\n\\tlet did_upgrade = false;\\n\\tif (money > ram_cost) {\\n\\t\\tdid_upgrade = ns.upgradeHomeRam();\\n\\t\\tif (did_upgrade) ns.print(`Bought RAM upgrade for ${ns.nFormat(ram_cost, '0.00a')}`)\\n\\t}\\n\\tif (money > core_cost) {\\n\\t\\tdid_upgrade = ns.upgradeHomeCores();\\n\\t\\tif (did_upgrade) ns.print(`Bought Cores upgrade for ${ns.nFormat(core_cost, '0.00a')}`)\\n\\t}\\n}\\n\\n/** \\n * Spin up hacking scripts to grow hacking XP\\n * @param {NS} ns\\n**/\\nfunction growHackingXP(ns) {\\n\\tlet HACKSCRIPT;\\n\\tif (ns.getHackingLevel <= 300) {\\n\\t\\tHACKSCRIPT =  \\\"growHackingXP.js\\\";\\n\\t} else {\\n\\t\\t// TODO: Figure out which server to hack\\n\\t\\tHACKSCRIPT = \\\"basicHack.js\\\";\\n\\t}\\n\\tmaximizeScriptUse(ns,HACKSCRIPT, HOME);\\n}\\n\\n/** \\n * Check factions to see if I can join one and start a gang\\n * @param {NS} ns \\n**/\\nfunction startAGang(ns) {\\n\\tlet invitations = ns.checkFactionInvitations();\\n\\tconst gangList = [\\n\\t\\t\\\"Slum Snakes\\\",\\n\\t\\t\\\"Tetrads\\\",\\n\\t\\t\\\"Silhouette\\\",\\n\\t\\t\\\"Speakers for the Dead\\\",\\n\\t\\t\\\"The Dark Army\\\",\\n\\t\\t\\\"The Syndicate\\\",\\n\\t];\\n\\tlet ready_gang = invitations.find(gang => gangList.includes(gang));\\n\\tif (ready_gang) {\\n\\t\\tlet joined = ns.joinFaction(ready_gang);\\n\\t\\tif (joined) ns.print(`Joined ${ready_gang} faction`)\\n\\t}\\n\\tns.exec('gangs.js', HOME);\\n}\",\"filename\":\"earlygameplan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/crimes.js\",\"url\":\"blob:file:///2e77cbca-27f0-4abd-8dce-7ad4d5eec284\",\"moduleSequenceNumber\":520336},{\"filename\":\"earlygameplan.js\",\"url\":\"blob:file:///60e09fe1-7ddb-442b-ab14-02f369891b6d\",\"moduleSequenceNumber\":520438}],\"dependents\":[],\"ramUsage\":36.3,\"server\":\"home\",\"moduleSequenceNumber\":456,\"ramUsageEntries\":[{\"type\":\"fn\",\"name\":\"getCrimeChance\",\"cost\":5},{\"type\":\"fn\",\"name\":\"commitCrime\",\"cost\":5},{\"type\":\"fn\",\"name\":\"upgradeHomeRam\",\"cost\":3},{\"type\":\"fn\",\"name\":\"upgradeHomeCores\",\"cost\":3},{\"type\":\"fn\",\"name\":\"checkFactionInvitations\",\"cost\":3},{\"type\":\"fn\",\"name\":\"joinFaction\",\"cost\":3},{\"type\":\"fn\",\"name\":\"gymWorkout\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getUpgradeHomeRamCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"getUpgradeHomeCoresCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"stopAction\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"let crimes = [\\n\\t\\\"heist\\\",\\n\\t\\\"assassination\\\",\\n\\t\\\"kidnap\\\",\\n\\t\\\"grand theft auto\\\",\\n\\t\\\"homicide\\\",\\n\\t\\\"larceny\\\",\\n\\t\\\"mug someone\\\",\\n\\t\\\"rob store\\\",\\n\\t\\\"shoplift\\\",\\n];\\n\\nexport const GANG_KARMA = 54000;\\n\\n/** \\n * Work out all stats until they hit a certain level\\n * @param {NS} ns \\n * @param {number} level The amount we all stats should be\\n**/\\nexport async function workoutAllUntil(ns, level) {\\n\\tconst STATS = [\\n\\t\\t\\\"strength\\\",\\n\\t\\t\\\"defense\\\",\\n\\t\\t\\\"dexterity\\\",\\n\\t\\t\\\"agility\\\",\\n\\t]\\n\\tlet me = ns.getPlayer();\\n\\tfor (let stat of STATS) {\\n\\t\\twhile (me[stat] < level) {\\n\\t\\t\\tif (!ns.isBusy()) {\\n\\t\\t\\t\\tns.toast(\\\"Training \\\" + stat);\\n\\t\\t\\t\\tns.gymWorkout('Powerhouse Gym', stat, false)\\n\\t\\t\\t}\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t\\tme = ns.getPlayer();\\n\\t\\t}\\n\\t\\tns.stopAction();\\n\\t}\\n}\\n\\n/** \\n * Commit a single crime to get us closer to Gang Karma levels\\n * @param {NS} ns \\n**/\\nexport function commitKarmaFocusedCrime(ns) {\\n\\tconst HOMICIDE = \\\"homicide\\\";\\n\\tconst MUG = \\\"mug someone\\\";\\n\\t// Calculate crime success chance of homicide\\n\\tlet homicide_chance = ns.getCrimeChance(HOMICIDE);\\n\\tif (homicide_chance <= 0.7) {\\n\\t\\tns.commitCrime(MUG);\\n\\t\\tns.print(`Homicide chance: ${ns.nFormat(homicide_chance, '0.00%')}, mugging people instead.`)\\n\\t} else {\\n\\t\\tns.commitCrime(HOMICIDE);\\n\\t\\tns.print(`Committing homicide at ${ns.nFormat(homicide_chance, '0.00%')}; Current karma: ${ns.heart.break()}`);\\n\\t}\\n}\\n\\n/** \\n * Commit crimes until we have enough negative karma to start a gang\\n * @param {NS} ns \\n**/\\nexport async function crimeUntilGang(ns) {\\n\\t/** \\n\\t * Fastest stat growth is mugging, so start there\\n\\t * Switch to homicide once it's >70% success chance\\n\\t**/\\n\\tns.disableLog(\\\"ALL\\\"); // Disable the log\\n\\tns.tail(); // Open a window to view the status of the script\\n\\tlet timeout = 250; // In ms - too low of a time will result in a lockout/hang\\n\\twhile (Math.abs(ns.heart.break()) <= GANG_KARMA) {\\n\\t\\tawait ns.sleep(timeout); // Wait it out first\\n\\t\\tif (ns.isBusy()) continue;\\n\\t\\tcommitKarmaFocusedCrime(ns);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst flagdata = ns.flags([\\n\\t\\t[\\\"crimes\\\", []],\\n\\t\\t[\\\"help\\\", false],\\n\\t])\\n\\tif (flagdata.help) {\\n\\t\\tns.tprint(\\n\\t\\t\\t`Pass in --crimes to only do a specific crime.`\\n\\t\\t);\\n\\t\\treturn\\n\\t}\\n\\tif (flagdata.crimes.length > 0) {\\n\\t\\t// Only commit specific crimes\\n\\t\\tcrimes = flagdata.crimes;\\n\\t}\\n\\t// First, work out a bit to build up stats\\n\\tconst MIN_STAT = 30;\\n\\tawait workoutAllUntil(ns, MIN_STAT);\\n\\t// Disable the log\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\tns.tail(); // Open a window to view the status of the script\\n\\tlet timeout = 250; // In ms - too low of a time will result in a lockout/hang\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(timeout); // Wait it out first\\n\\t\\tif (ns.isBusy()) continue;\\n\\t\\t/** Calculate the risk value of all crimes */\\n\\t\\tlet choices = crimes.map((crime) => {\\n\\t\\t\\tlet crimeStats = ns.getCrimeStats(crime); // Let us look at the important bits\\n\\t\\t\\tlet crimeChance = ns.getCrimeChance(crime); // We need to calculate if its worth it\\n\\t\\t\\t/** Using probabilty(odds) to calculate the \\\"risk\\\" to get the best reward\\n\\t\\t\\t * Risk Value = Money Earned * Odds of Success(P(A) / ~P(A)) / Time taken\\n\\t\\t\\t *\\n\\t\\t\\t * Larger risk values indicate a better choice\\n\\t\\t\\t */\\n\\t\\t\\tlet crimeRiskValue =\\n\\t\\t\\t\\t(crimeStats.money * Math.log10(crimeChance / (1 - crimeChance + Number.EPSILON))) /\\n\\t\\t\\t\\tcrimeStats.time;\\n\\t\\t\\treturn [crime, crimeRiskValue];\\n\\t\\t});\\n\\n\\t\\tlet bestCrime = choices.reduce((prev, current) => {\\n\\t\\t\\treturn prev[1] > current[1] ? prev : current;\\n\\t\\t});\\n\\n\\t\\tns.commitCrime(bestCrime[0]);\\n\\t\\tns.print(\\n\\t\\t\\t`Crime: ${bestCrime[0]} Risk Value: ${bestCrime[1].toPrecision(3)} Cash to Earn: \\\\$${ns\\n\\t\\t\\t\\t.getCrimeStats(bestCrime[0])\\n\\t\\t\\t\\t.money.toPrecision(4)}; Current karma: ${ns.heart.break()}`\\n\\t\\t);\\n\\t}\\n}\",\"filename\":\"/utils/crimes.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":20.6,\"server\":\"home\",\"moduleSequenceNumber\":457,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"gymWorkout\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stopAction\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getCrimeChance\",\"cost\":5},{\"type\":\"fn\",\"name\":\"commitCrime\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getCrimeStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Hyper Batcher (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/hyperBatcher.js\\n// Usage: run hyperBatcher.js [target] (source) (percentage) (affectStocks) (simulate)\\n// Parameter target: The server to take money from.\\n// Parameter source: The server to run the attack. (default: the server this runs on.)\\n// Parameter percentage: Percentage of maxMoney to steal. (Default: 0.2)\\n// Parameter affectStocks: \\\"H\\\",\\\"G\\\", or \\\"GH\\\", to let grows and/or hacks affect stocks. (Default: \\\"\\\")\\n// Parameter simulate: If true, don't run scripts; print the expected results instead. (Default: false)\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\\n\\nlet scriptStart;\\n\\n/** Calculate the amount of hack threads needed for a batch attack.\\n * @param {NS} ns\\n * @param {String} tgt          The hostname of the target server.\\n * @param {Number} moneyPct     The percent of the target's maximum money we want to hack.\\n * @param {Boolean} hasFormulas Whether or not the player has access to formulas.\\n * @return {Number[]}           The amount of threads, hack duration, security increase, actual money hacked.\\n */\\nfunction calcHack(ns, tgt, moneyPct, hasFormulas) {\\n    // Calculate the hack.\\n    let maxMoney = ns.getServerMaxMoney(tgt);\\n    while (moneyPct > 1) { moneyPct /= 100; }\\n    let threads;\\n    let timeToHack;\\n    let fractionStole;\\n\\n    if (!hasFormulas) {\\n        // Base on current amounts.\\n        threads = Math.max(1, Math.floor(ns.hackAnalyzeThreads(tgt, moneyPct)));\\n        timeToHack = ns.getHackTime(tgt);\\n        fractionStole = ns.hackAnalyze(tgt);\\n    } else {\\n        // Use formulas to be accurate.\\n        let srv = ns.getServer(tgt);\\n        srv.hackDifficulty = srv.minDifficulty;\\n        srv.moneyAvailable = srv.moneyMax;\\n        let p = ns.getPlayer();\\n\\n        threads = Math.floor(moneyPct / ns.formulas.hacking.hackPercent(srv, p));\\n        timeToHack = ns.formulas.hacking.hackTime(srv, p);\\n        fractionStole = ns.formulas.hacking.hackPercent(srv, p);\\n    }\\n    return [\\n        threads,\\n        timeToHack,\\n        ns.hackAnalyzeSecurity(threads),\\n        fractionStole * threads * maxMoney\\n    ];\\n}\\n\\n/** Calculate the amount of grow threads needed for a batch attack.\\n * @param {NS} ns\\n * @param {String} tgt          The hostname of the target server.\\n * @param {Number} money        The amount of money we've stolen.\\n * @param {Boolean} hasFormulas Whether or not the player has access to formulas.\\n * @return {Number[]}           The amount of threads, grow duration, security increase.\\n */\\nfunction calcGrow(ns, tgt, money, hasFormulas) {\\n    let max = ns.getServerMaxMoney(tgt);\\n    let regrow = max / (max - Math.max(money, 1));\\n    let threads;\\n    let timeToGrow;\\n\\n    if (!hasFormulas) {\\n        threads = ns.growthAnalyze(tgt, regrow);\\n        timeToGrow = ns.getGrowTime(tgt);\\n    } else {\\n        let srv = ns.getServer(tgt);\\n        srv.hackDifficulty = srv.minDifficulty;\\n        srv.moneyAvailable = srv.moneyMax - money;\\n        let p = ns.getPlayer();\\n        threads = Math.ceil(Math.log(regrow) / Math.log(ns.formulas.hacking.growPercent(srv, 1, p)));\\n        timeToGrow = ns.formulas.hacking.growTime(srv, p);\\n    }\\n\\n    return [\\n        threads,\\n        timeToGrow,\\n        ns.growthAnalyzeSecurity(threads)\\n    ];\\n}\\n\\n/** Calculate the amount of weaken threads needed for a batch attack.\\n * @param {NS} ns\\n * @param {String} tgt          The hostname of the target server.\\n * @param {Number} secIncrease  The amount of security we need to lower.\\n * @param {Boolean} hasFormulas Whether or not the player has access to formulas.\\n * @return {Number[]}           The amount of threads, weaken duration, security decrease.\\n */\\nfunction calcWeaken(ns, tgt, secIncrease, hasFormulas) {\\n    // Calculate the weaken we need to counter hack.\\n    let secEffect = 0;\\n    let threads = Math.ceil(secIncrease / ns.weakenAnalyze(1));\\n    if (!hasFormulas) {\\n        return [threads, ns.getWeakenTime(tgt), secEffect];\\n    }\\n    let srv = ns.getServer(tgt);\\n    srv.hackDifficulty = srv.minDifficulty;\\n    srv.moneyAvailable = srv.moneyMax;\\n    let p = ns.getPlayer();\\n\\n    return [threads, ns.formulas.hacking.weakenTime(srv, p), secEffect];\\n}\\n\\n/** Calculate the maximum amount of batches we can run based on server RAM\\n * @param  {String} runTimes The duration of all attacks (in ms); order: HWGW.\\n * @param  {String} delay    The delay between end times (in ms).\\n * @return {Number[]}        The start time of all attacks (in ms); order: HWGW.\\n */\\nfunction calcDelays(runTimes, delay) {\\n    return [\\n        runTimes[1] - delay - runTimes[0],\\n        0,\\n        runTimes[1] + delay - runTimes[2],\\n        delay * 2\\n    ];\\n}\\n\\n/** Calculates every batch we can feasibly start before the first hack lands.\\n * @param {NS} ns\\n * @param {Number} delay       the delay between landings.\\n * @param {Number[4]} runTimes the runtime of each script.\\n * @param {Number[4]} threads  the number of threads for each script.\\n * @param {String} src         the hostname of the server launching the attack.\\n */\\nfunction calcBatches(ns, delay, runTimes, threads, src) {\\n    // Calculate our delays.\\n    const delays = calcDelays(runTimes, delay);\\n    // We can run this many batches before the first hack lands.\\n    const firstHackLand = delays[0] + runTimes[0];\\n    // we can run this many batches before RAM runs out.\\n    let ramUse =\\n        ns.getScriptRam('/batch/hack.js', src) * threads[0] +\\n        ns.getScriptRam('/batch/grow.js', src) * threads[2] +\\n        ns.getScriptRam('/batch/weaken.js', src) * (threads[1] + threads[3]);\\n    // This will break if multiple batchers are running.\\n    let maxBatches = (ns.getServerMaxRam(src) - ns.getServerUsedRam(src)) / ramUse;\\n\\n    // Get the start times.\\n    let execs = Array();\\n    let i = 0;\\n    while (maxBatches > i && firstHackLand > delays[1] + delay * (4 * i)) {\\n        execs.push([delays[0] + delay * (4 * i), 'H']);\\n        execs.push([delays[1] + delay * (4 * i), 'Wh']);\\n        execs.push([delays[2] + delay * (4 * i), 'G']);\\n        execs.push([delays[3] + delay * (4 * i), 'Wg']);\\n        i++;\\n    }\\n    return execs.sort((a, b) => a[0] - b[0]);\\n}\\n\\n/** Run the batch hacks.\\n * @param {NS} ns\\n * @param {String} tgt          The server we're stealing money from.\\n * @param {String} src          The server running the hacks.\\n * @param {Number[4]} threads   The amount of threads of the script types.\\n * @param {Array} execs         Array of [Number,String]; indicating delay and type of script.\\n * @param {Number} profit       The expected money to get per hack.\\n * @param {String} affectStocks A string containing \\\"H\\\" to have hacks influence stocks, \\\"G\\\" to have grow influence stocks.\\n * @return {Promise<boolean>} True if we cancelled early, requiring recalculation before restarting.\\n**/\\nasync function startBatching(ns, tgt, src, threads, execs, firstLand, profit, affectStocks) {\\n    const currLvl = ns.getHackingLevel;\\n    const startLvl = currLvl();\\n    const now = ns.getTimeSinceLastAug;\\n    const batchStart = now();\\n\\n    ns.print(`INFO: Launching attack: ${src} -> ${tgt}.\\\\nFirst hack will land at T+${timeFormat(ns, now() + firstLand - scriptStart)}\\\\nTotal yield ${ns.nFormat(profit, \\\"$0.00a\\\")} over ${execs.length} scripts`);\\n\\n    let script = \\\"\\\"; let t; let slept = 0;\\n    for (let x of execs) {\\n        if (currLvl() != startLvl) {\\n            ns.print(`WARNING: [T+${timeFormat(ns, now() - scriptStart, false)}]Hack level increased, aborting hack.`);\\n            return true;\\n        }\\n        // Check if an abort has been called by hack.js\\n        if (ns.fileExists(`ABORT_${tgt}.txt`, src)) {\\n            ns.rm(`ABORT_${tgt}.txt`, src);\\n            if (batchStart - now() <= 0) {\\n                ns.print(`ERROR: [T+${timeFormat(ns, now() - scriptStart, false)}]ABORT received from hack.js.`);\\n                return true;\\n            }\\n        }\\n\\n        switch (x[1]) {\\n            case \\\"H\\\":\\n                script = \\\"/batch/hack.js\\\";\\n                t = threads[0];\\n                break;\\n            case \\\"G\\\":\\n                script = \\\"/batch/grow.js\\\";\\n                t = threads[2];\\n                break;\\n            case \\\"Wh\\\":\\n                script = \\\"/batch/weaken.js\\\";\\n                t = threads[1];\\n                break;\\n            case \\\"Wg\\\":\\n                script = \\\"/batch/weaken.js\\\";\\n                t = threads[3];\\n                break;\\n        }\\n\\n        if (x[0] - slept < 0) {\\n            ns.print(`ERROR: [T+${timeFormat(ns, now() - scriptStart, false)}]Trying to sleep a negative amount. We've fallen behind!`);\\n            return true;\\n        }\\n        await ns.sleep(x[0] - slept);\\n        slept = x[0];\\n\\n        // Ensure we're not bumping into RAM limitations\\n        if (ns.getServerMaxRam(src) - ns.getServerUsedRam(src) < ns.getScriptRam(script, src)) {\\n            ns.print(`ERROR: [T+${timeFormat(ns, now() - scriptStart, false)}]Aborting, out of RAM.`);\\n            return true;\\n        }\\n        ns.exec(script, src, t, tgt, profit, affectStocks.includes(x[1]), now());\\n    }\\n    return false;\\n}\\n\\n/** Calculate the threads needed to hack tgt for pct% of maxMoney.\\n * @param {NS} ns\\n * @param  {String} tgt Server hostname to attack.\\n * @param  {Number} pct Percentage of maxMoney we want to steal.\\n * @param  {Boolean} hasFormulas Whether or not the player has access to formulas.\\n * @return {Object[3]}  Threads required, Script runtimes, money hacked per batch.\\n */\\nfunction calcThreads(ns, tgt, pct, hasFormulas) {\\n    let threads = Array(4), runTimes = Array(4); let sec; let profit;\\n    [threads[0], runTimes[0], sec, profit] = calcHack(ns, tgt, pct, hasFormulas);\\n    [threads[1], runTimes[1]] = calcWeaken(ns, tgt, sec, hasFormulas);\\n    [threads[2], runTimes[2], sec] = calcGrow(ns, tgt, profit, hasFormulas);\\n    [threads[3], runTimes[3]] = calcWeaken(ns, tgt, sec, hasFormulas);\\n\\n    return [threads, runTimes, profit];\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    scriptStart = ns.getTimeSinceLastAug();\\n    ns.clearLog();\\n    ns.disableLog('ALL');\\n    //Parameter parsing.\\n    if (ns.args[0] == undefined) {\\n        ns.tprint(\\\"ERROR: Invalid target.\\\");\\n        ns.tprint(\\\"INFO: Usage: target(string), source(string, optional), percent(number, optional), affectStocks(string, optional), simulate(boolean, optional).\\\");\\n        ns.exit();\\n    }\\n\\n    const tgt = ns.args[0];\\n    const src = ns.args[1] ? ns.args[1] : ns.getHostname();\\n    const pct = ns.args[2] ? ns.args[2] : 0.2;\\n    const affectStocks = ns.args[3] ? ns.args[3] : \\\"\\\";\\n    const sim = ns.args[4];\\n\\n    // Constants.\\n    const delay = 100;\\n    const hasFormulas = ns.fileExists('Formulas.EXE', 'home');\\n    if (!hasFormulas) {\\n        if (\\n            ns.getServerMaxMoney(tgt) != ns.getServerMoneyAvailable(tgt) ||\\n            ns.getServerMinSecurityLevel(tgt) != ns.getServerSecurityLevel(tgt)\\n        ) {\\n            ns.tprint(\\\"ERROR: Targeting a non-prepped server without formulas.\\\");\\n            ns.exit();\\n        }\\n        ns.tprint(\\\"WARN: Formulas not found.\\\");\\n    }\\n\\n    // Calculate the threads needed, runTimes and actual money hacked.\\n    let threads, runTimes, profit;\\n    [threads, runTimes, profit] = calcThreads(ns, tgt, pct, hasFormulas);\\n\\n    // If we're only simulating, we just got enough info.\\n    if (sim) {\\n        let ram =\\n            ns.getScriptRam('/batch/hack.js') * threads[0] +\\n            ns.getScriptRam('/batch/grow.js') * threads[2] +\\n            ns.getScriptRam('/batch/weaken.js') * (threads[1] + threads[3]);\\n        let time = runTimes[3] + delay * 2;\\n        ns.tprint(`${src} -> ${tgt}, stealing \\\\$${ns.nFormat(profit, \\\"0.000a\\\")} in ${ns.tFormat(time)} using ${ns.nFormat(ram * 1e9, \\\"0.00b\\\")} RAM`);\\n        ns.tprint(`Threads: hack(${threads[0]}), weaken(${threads[1]}), grow(${threads[2]}), weaken(${threads[3]});`);\\n        ns.exit();\\n    }\\n\\n    if (ns.getServerMaxMoney(tgt) != ns.getServerMoneyAvailable(tgt) ||\\n        ns.getServerMinSecurityLevel(tgt) != ns.getServerSecurityLevel(tgt)) {\\n        ns.tprint(`ERROR: Server ${tgt} not prepared.`);\\n        ns.exit();\\n    }\\n\\n    // ensure the src server has the latest hacking scripts.\\n    if (src != 'home') {\\n        for (let file of ['/batch/hack.js', '/batch/grow.js', '/batch/weaken.js']) {\\n            ns.print(`uploading ${file}`);\\n            await ns.scp(file, 'home', src);\\n        }\\n    }\\n\\n    // Ensure there's no abort file lingering.\\n    if (ns.fileExists(`ABORT_${tgt}.txt`, src)) {\\n        ns.rm(`ABORT_${tgt}.txt`, src);\\n    }\\n\\n    let recalc = false;\\n    while (true) {\\n        if (recalc) {\\n            if (ns.getHostname() == src) {\\n                ns.tprint(`FAIL: [${src}]Recalc is telling us to killall, but we're hacking from the dispatcher.`);\\n            }\\n            ns.killall(src);\\n            [threads, runTimes, profit] = calcThreads(ns, tgt, pct);\\n            recalc = false;\\n        }\\n        let execs = calcBatches(ns, delay, runTimes, threads, src);\\n        let time = execs.filter(x => x[1] == \\\"H\\\")[0][0];\\n        recalc = await startBatching(ns, tgt, src, threads, execs, time + runTimes[0], profit, affectStocks);\\n        // If a batch fails, make sure we let it fully run out.\\n        await ns.sleep(runTimes[1] + delay * 2);\\n    }\\n}\\n\\n/**Returns information about a percent% batch hack against tgt (Used in gradeServers.js)\\n * @params {NS} ns\\n * @params {String} tgt Target server\\n * @params {number} percent decimal-represented money percentage\\n * @return {number[]} [RAM Usage, Time in ms, hacked money.]\\n */\\nexport function getBatchInfo(ns, tgt, percent) {\\n    const hasFormulas = ns.fileExists('Formulas.EXE', 'home');\\n    let profit = calcHack(ns, tgt, percent, hasFormulas)[3];\\n    percent = profit / ns.getServerMaxMoney(tgt);\\n    let threads = calcThreads(ns, tgt, percent, hasFormulas)[0];\\n    let time = calcWeaken(ns, tgt, calcGrow(ns, tgt, profit, hasFormulas)[2], hasFormulas)[1] + 200;\\n    return ([\\n        ns.getScriptRam('/batch/hack.js', \\\"home\\\") * threads[0] +\\n        ns.getScriptRam('/batch/grow.js', \\\"home\\\") * threads[2] +\\n        ns.getScriptRam('/batch/weaken.js', \\\"home\\\") * (threads[1] + threads[3]),\\n        time,\\n        profit\\n    ]);\\n}\\n\\n/**Format a given number in ms to a human-readable string, except shorter.\\n * @param {NS} ns\\n * @param {Number} time\\n * @param {Boolean} msAcc\\n * @return {String} a shortened ns.tFormat();\\n */\\nexport function timeFormat(ns, time, msAcc) {\\n    return ns.tFormat(time, msAcc)\\n        .replaceAll(\\\"days\\\", \\\"d\\\")\\n        .replaceAll(\\\"hours\\\", \\\"h\\\")\\n        .replaceAll(\\\"minutes\\\", \\\"m\\\")\\n        .replaceAll(\\\"seconds\\\", \\\"s\\\")\\n\\n        .replaceAll(\\\"day\\\", \\\"d\\\")\\n        .replaceAll(\\\"hour\\\", \\\"h\\\")\\n        .replaceAll(\\\"minute\\\", \\\"m\\\")\\n        .replaceAll(\\\"second\\\", \\\"s\\\")\\n\\n        .replaceAll(\\\",\\\", \\\"\\\")\\n        .replaceAll(\\\" \\\", \\\"\\\");\\n}\",\"filename\":\"/WIP/hyperbatcher.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/WIP/hyperbatcher.js\",\"url\":\"blob:file:///b67acb72-d03c-4c93-9282-fb85b9b34593\",\"moduleSequenceNumber\":361259}],\"dependents\":[],\"ramUsage\":14.5,\"server\":\"home\",\"moduleSequenceNumber\":458,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getTimeSinceLastAug\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grader (c) 2022 Tyrope\\n// Usage: run serverGrader.js (percent) (topOnly)\\n// Parameter percent: The % of maxMoney the batch will be stealing. (default: 20)\\n// Parameter topOnly: If given a number, will limit the amount of servers to only the top n. (default: Infinity)\\n\\nimport { squishLines, makeTable } from 'WIP/tablemaker.js'\\nimport { getBatchInfo } from 'WIP/hyperbatcher.js'\\nimport { readNetworkMap } from \\\"utils/networkmap.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    // Fail if no Formulas.exe\\n    if (ns.ls('home', 'Formulas.exe').length == 0) {\\n        ns.tprint(\\\"You need Formulas.exe to use this script.\\\");\\n        ns.exit();\\n    }\\n    ns.disableLog('ALL');\\n    ns.tail();\\n\\n    const pct = ns.args[0] ? ns.args[0] : 20;\\n    const topOnly = ns.args[1] ? ns.args[1] + 1 : Infinity;\\n\\n    // Get all the servers.\\n    let servers = Object.keys(await readNetworkMap(ns));\\n\\n    // Only keep servers that...\\n    servers = servers.filter((s) => {\\n        return (\\n            // have money.\\n            ns.getServerMaxMoney(s) != 0 &&\\n            // are below or equal to our hacking level.\\n            ns.getServerRequiredHackingLevel(s) <= ns.getHackingLevel()\\n        )\\n    });\\n\\n    // Sort by score.\\n    servers.sort((a, b) => { return getServerScore(ns, b, pct) - getServerScore(ns, a, pct); });\\n\\n    let data = [[\\\"SERVER\\\", \\\"Max $\\\", \\\"%h\\\", \\\"$/s\\\", \\\"RAM\\\", \\\"batchtime\\\", \\\"Score\\\"]];\\n\\n    for (let server of servers) {\\n        if (data.length >= topOnly) {\\n            break;\\n        }\\n        data.push(getServerInfo(ns, server, pct));\\n    }\\n\\tawait ns.write('servergrades.json', JSON.stringify(data, null, 2), 'w');\\n    ns.print(makeTable(data, false));\\n    await ns.sleep(10);\\n    squishLines(ns.getScriptName() + \\\" \\\" + ns.args.join(\\\" \\\"));\\n}\\n\\n/** Calculate the score of 1 server.\\n * @param {NS} ns\\n * @param {String} server       Server to score.\\n * @param {Number} pct          Percentage of maxMoney to hack.\\n * @return {Number} The server's score.\\n**/\\nexport function findOptimalServer(ns) {\\n    // Fail if no Formulas.exe\\n    if (ns.ls('home', 'Formulas.exe').length == 0) {\\n        ns.tprint(\\\"You need Formulas.exe to use this script.\\\");\\n        ns.exit();\\n    }\\n}\\n\\n\\n/** Calculate the score of 1 server.\\n * @param {NS} ns\\n * @param {String} server       Server to score.\\n * @param {Number} pct          Percentage of maxMoney to hack.\\n * @return {Number} The server's score.\\n**/\\nexport function getServerScore(ns, server, pct) {\\n    let chanceToHack;\\n    const srv = ns.getServer(server);\\n    srv.hackDifficulty = srv.minDifficulty;\\n    srv.moneyAvailable = srv.moneyMax;\\n    chanceToHack = ns.formulas.hacking.hackChance(srv, ns.getPlayer());\\n    let batchInfo = getBatchInfo(ns, server, pct);\\n    let moneyPerSec = batchInfo[2] / batchInfo[1];\\n    return (moneyPerSec * chanceToHack) / (batchInfo[0] * 0.25);\\n}\\n\\n/** Get all the data of 1 server.\\n * @param {NS} ns\\n * @param {String} srv          Server to score.\\n * @param {Number} pct          Percentage of maxMoney to hack.\\n * @return {Object[]} The server's information.\\n**/\\nfunction getServerInfo(ns, srv, pct) {\\n    let batchInfo = getBatchInfo(ns, srv, pct);\\n    let chanceToHack = ns.formulas.hacking.hackChance(ns.getServer(srv), ns.getPlayer());\\n    return ([\\n        srv,\\n        ns.nFormat(ns.getServerMaxMoney(srv), \\\"0.00a\\\"), // \\\"Max $\\\"\\n        `${ns.nFormat(chanceToHack * 100, \\\"0.00\\\")}%`, // \\\"%h\\\"\\n        ns.nFormat(batchInfo[2] / batchInfo[1], \\\"0.00a\\\"), //\\\"$/s\\\"\\n        ns.nFormat(batchInfo[0] * 1e9, \\\"0.00b\\\"), //\\\"RAM/b\\\"\\n        timeFormat(ns, batchInfo[1], true), //\\\"tB\\\"\\n        ns.nFormat(getServerScore(ns, srv, pct), \\\"0.000\\\") //\\\"Score\\\"\\n    ]);\\n}\\n\\n/**Format a given number in ms to a human-readable string, except shorter.\\n * @param {NS} ns\\n * @param {Number} time\\n * @param {Boolean} msAcc\\n * @return {String} a shortened ns.tFormat();\\n */\\nexport function timeFormat(ns, time, msAcc) {\\n    return ns.tFormat(time, msAcc)\\n        .replaceAll(\\\"days\\\", \\\"d\\\")\\n        .replaceAll(\\\"hours\\\", \\\"h\\\")\\n        .replaceAll(\\\"minutes\\\", \\\"m\\\")\\n        .replaceAll(\\\"seconds\\\", \\\"s\\\")\\n\\n        .replaceAll(\\\"day\\\", \\\"d\\\")\\n        .replaceAll(\\\"hour\\\", \\\"h\\\")\\n        .replaceAll(\\\"minute\\\", \\\"m\\\")\\n        .replaceAll(\\\"second\\\", \\\"s\\\")\\n\\n        .replaceAll(\\\",\\\", \\\"\\\")\\n        .replaceAll(\\\" \\\", \\\"\\\");\\n}\",\"filename\":\"/WIP/gradeservers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/script_tools.js\",\"url\":\"blob:file:///c25e5603-38a5-4872-b8d9-c83df423dcdb\",\"moduleSequenceNumber\":360880},{\"filename\":\"/utils/networkmap.js\",\"url\":\"blob:file:///49d996e6-04be-4768-bfb8-567039a32457\",\"moduleSequenceNumber\":351023},{\"filename\":\"/WIP/hyperbatcher.js\",\"url\":\"blob:file:///f73a8bdb-89f0-47f0-a4e6-6f773bdaba21\",\"moduleSequenceNumber\":361259},{\"filename\":\"/WIP/tablemaker.js\",\"url\":\"blob:file:///cf48c8fa-3283-4c87-978e-abe40de088b0\",\"moduleSequenceNumber\":400},{\"filename\":\"/WIP/gradeservers.js\",\"url\":\"blob:file:///b41b1f4a-fffc-41a5-9b49-b8d790fbe521\",\"moduleSequenceNumber\":373299}],\"dependents\":[],\"ramUsage\":14.15,\"server\":\"home\",\"moduleSequenceNumber\":459,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Table Maker (c) 2022 Tyrope\\n// Usage: import {squishLines, makeTable} from '/lib/tableMaker.js'\\n\\n/**\\n * Modifies one css property of the specified log\\n * @param logName name that appears in the tilebar of the log\\n * @param style property name of the style to change (hyphen-case)\\n * @param value value to change the property to\\n * @returns true if the log was found, false otherwise\\n * @link https://discord.com/channels/415207508303544321/895204896788328448/930188523888336956\\n * @author Discord cyn#1161\\n */\\nfunction modifyLogStyle(logName, style, value) {\\n    const doc = eval('document');\\n    const titleBar = doc.querySelector(`[title=\\\"${logName}\\\"]`)\\n    if (titleBar == null || titleBar == undefined) return false\\n\\n    const paragraphs = titleBar.parentNode.parentNode.parentNode\\n        .lastChild.firstChild.firstChild.childNodes\\n\\n    for (const p of paragraphs) {\\n        if (p.style.getPropertyValue(style) != value) {\\n            p.style.setProperty(style, value)\\n        }\\n    }\\n    return true\\n}\\n\\n/**Wrapper for modifyLogStyle\\n * @param {String} logName script name and arguments.\\n */\\nexport function squishLines(logName) {\\n    if (logName.includes(\\\" \\\") == false) {\\n        // There's no arguments, add a trailing space.\\n        logName += \\\" \\\";\\n    }\\n    modifyLogStyle(logName, 'line-height', '1');\\n}\\n\\n/** Because all self-respecting datasheets should be displayed in a pretty way.\\n * @param {Object[]} data          Information to put in a table.\\n * @param {Boolean} hasMiddleRows? When true, adds horizontal lines between ALL rows, not just below the header.\\n * @return {String}                The table, in a multiline string.\\n**/\\nexport function makeTable(data, hasMiddleRows) {\\n    // Thanks to @Daturo#2506 on the Bitburner Discord for showing me these ASCII characters.\\n    let border = [['╔', '╦', '╗'], ['╠', '╬', '╣'], ['╚', '╩', '╝'], ['═', '║']];\\n    // Find the widest text in each colomn\\n    let widths = Array();\\n    // Loop rows.\\n    for (let y = 0; y < data.length; y++) {\\n        // Loop columns.\\n        for (let x = 0; x < data[y].length; x++) {\\n            // Check if we're bigger (+2 for spaces between data and borders).\\n            if (widths[x] == undefined) {\\n                widths[x] = String(data[y][x]).length + 2;\\n            } else if (widths[x] < String(data[y][x]).length + 2) {\\n                widths[x] = String(data[y][x]).length + 2;\\n            }\\n        }\\n    }\\n    let table = \\\"\\\";\\n    // Top row.\\n    table += border[0][0]\\n    for (let w of widths) {\\n        table += \\\"\\\".padEnd(w, border[3][0]);\\n        table += border[0][1];\\n    }\\n    table = table.substr(0, table.length - 1) + border[0][2] + \\\"\\\\n\\\";\\n    // Draw the actual data bits.\\n    for (let y = 0; y < data.length; y++) {\\n        table += border[3][1];\\n        for (let x = 0; x < data[y].length; x++) {\\n            table += \\\" \\\" + String(data[y][x]).padEnd(widths[x] - 1) + border[3][1];\\n        }\\n        table += \\\"\\\\n\\\";\\n\\n        if (hasMiddleRows || y == 0) {\\n            // Insert a horizontal line.\\n            if (y != data.length - 1) {\\n                table += border[1][0];\\n                for (let x = 0; x < data[y].length; x++) {\\n                    table += \\\"\\\".padEnd(widths[x], border[3][0]);\\n                    if (x != data[y].length - 1) {\\n                        table += border[1][1];\\n                    } else {\\n                        table += border[1][2] + \\\"\\\\n\\\";\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    // Bottom row.\\n    table += border[2][0];\\n    for (let w of widths) {\\n        table += \\\"\\\".padEnd(w, border[3][0]);\\n        table += border[2][1];\\n    }\\n    table = table.substr(0, table.length - 1) + border[2][2];\\n\\n    return table;\\n}\",\"filename\":\"/WIP/tablemaker.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":460,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Mid Gameplan w/ Gangs (1 TB RAM)\\n * 1. Buy programs from darkweb\\n * 2. Run findOptimal with 1 thread\\n * 3. Run easy-hack with 2 threads\\n * 4. Start gang\\n * 5. Buy all the +hacking exp augs\\n * 6. Buy all the NFs\\n * 7. If gangs are making enough money that saving up for Qlink (25t) isn't bananas, do that\\n */\\n\\nconst HOME = 'home';\\nconst MIN_STAT = 30;\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.exec('obtainPrograms.js', HOME);\\n\\t// 2-3 Run hacking programs\\n\\t//TODO figure out optimal thread counts here\\n\\tns.exec('findOptimal.js', HOME);\\n\\tns.exec('easy-hack.script', HOME, 2);\\n\\t// 4. Start a gang\\n\\tns.exec('gangs.js', HOME);\\n\\t// TODO midgame?\\n}\",\"filename\":\"/WIP/midgameplan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.9,\"server\":\"home\",\"moduleSequenceNumber\":461,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const factionList = [\\n\\t/* basic factions */\\n\\t\\\"CyberSec\\\",\\n\\t\\\"Tian Di Hui\\\",\\n\\t\\\"Netburners\\\",\\n\\t\\\"NiteSec\\\",\\n\\t\\\"The Black Hand\\\",\\n\\t\\\"BitRunners\\\",\\n];\\n\\nexport const locationFactionList = [\\n\\t\\\"Sector-12\\\",\\n\\t\\\"Chongqing\\\",\\n\\t\\\"New Tokyo\\\",\\n\\t\\\"Ishima\\\",\\n\\t\\\"Aevum\\\",\\n\\t\\\"Volhaven\\\",\\n\\n];\\n\\nexport const gangList = [\\n\\t\\\"Slum Snakes\\\",\\n\\t\\\"Tetrads\\\",\\n\\t\\\"Silhouette\\\",\\n\\t\\\"Speakers for the Dead\\\",\\n\\t\\\"The Dark Army\\\",\\n\\t\\\"The Syndicate\\\",\\n];\\n\\nexport const endgameFactionList = [\\n\\t\\\"The Covenant\\\",\\n\\t\\\"Daedalus\\\",\\n\\t\\\"Illuminati\\\",\\n];\\n\\nexport const corpList = [\\n\\t\\\"ECorp\\\",\\n\\t\\\"MegaCorp\\\",\\n\\t\\\"KuaiGong International\\\",\\n\\t\\\"Four Sigma\\\",\\n\\t\\\"NWO\\\",\\n\\t\\\"Blade Industries\\\",\\n\\t\\\"OmniTek Incorporated\\\",\\n\\t\\\"Bachman & Associates\\\",\\n\\t\\\"Clarke Incorporated\\\",\\n\\t\\\"Fulcrum Secret Technologies\\\",\\n];\\n\\nexport const aug_bonus_types = {\\n\\thack: [\\\"hacking_mult\\\", \\\"hacking_exp_mult\\\", \\\"hacking_speed_mult\\\", \\\"hacking_chance_mult\\\", \\\"hacking_grow_mult\\\", \\\"hacking_money_mult\\\"],\\n\\tfaction: [\\\"faction_rep_mult\\\"],\\n\\tcompany: [\\\"company_rep_mult\\\", \\\"work_money_mult\\\"],\\n\\tcrime: [\\\"crime_success_mult\\\", \\\"crime_money_mult\\\"],\\n\\tcombat: [\\\"agility_exp_mult\\\", \\\"agility_mult\\\", \\\"defense_exp_mult\\\", \\\"defense_mult\\\", \\\"dexterity_exp_mult\\\", \\\"dexterity_mult\\\", \\\"strength_exp_mult\\\", \\\"strength_mult\\\"],\\n\\tcharisma: [\\\"charisma_exp_mult\\\", \\\"charisma_mult\\\"]\\n};\\n\\nconst AUGMAP = \\\"augmap.json.txt\\\";\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst flagdata = ns.flags([\\n\\t\\t[\\\"help\\\", false],\\n\\t\\t[\\\"ask\\\", false],\\n\\t\\t[\\\"auto\\\", false],\\n\\t])\\n\\tlet factions_to_consider = [];\\n\\tlet types_to_consider = [];\\n\\tif (flagdata.help) {\\n\\t\\tns.tprint(\\n\\t\\t\\t`--ask prompts to buy; --auto autobuys any augs. If neither are specified, no purchasing will happen.`\\n\\t\\t);\\n\\t\\treturn\\n\\t}\\n\\t// Build the aug map first\\n\\tlet aug_map = await buildAugMap(ns);\\n\\t// Look for preferred augs based on the exp+, faction+, then hack+ stats\\n\\tlet preferred = await listPreferredAugs(ns);\\n\\tns.tprint(`Augs to buy: ${preferred.join(\\\", \\\")}`);\\n\\t// Now check to see if we should buy\\n\\tif (preferred.length > 0) {\\n\\t\\tif (!flagdata.ask && !flagdata.auto) return\\n\\t\\tawait promptForAugs(ns, aug_map, preferred, flagdata.ask)\\n\\t}\\n}\\n\\n/**\\n * Return an Object of the aug map from JSON\\n * @param {NS} ns\\n * @returns Object of the aug map\\n */\\nexport async function readAugMap(ns) {\\n\\tif (!ns.ls('home', AUGMAP)) {\\n\\t\\tawait buildAugMap(ns);\\n\\t}\\n\\treturn JSON.parse(ns.read(AUGMAP));\\n}\\n\\n/**\\n * Build up a map of augmentations available everywhere for future slicing\\n * @param {NS} ns\\n * @returns Object of the aug map\\n */\\nexport async function buildAugMap(ns) {\\n\\tlet aug_map = {};\\n\\t/* Keys: augmentation name; \\n\\t * Values: an object aug_model \\n\\t * \\\"factions\\\": [list of strings], \\n\\t * \\\"repreq\\\": 0, \\n\\t * \\\"cost\\\": 0, \\n\\t * \\\"stats\\\": [list of strings],\\n\\t * \\\"prereqs\\\": [list of strings],\\n\\t * \\\"owned\\\": false,\\n\\t*/\\n\\tlet factions_to_consider = factionList.concat(locationFactionList, gangList, endgameFactionList, corpList);\\n\\t// ns.tprint(`Factions to consider: ${factions_to_consider}`);\\n\\tlet my_augs = ns.getOwnedAugmentations();\\n\\tfor (const faction of factions_to_consider) {\\n\\t\\tlet avail_augs = ns.getAugmentationsFromFaction(faction);\\n\\t\\tfor (const aug of avail_augs) {\\n\\t\\t\\t// ns.tprint(`Considering ${aug} from ${faction}`);\\n\\t\\t\\t// Get basic aug data\\n\\t\\t\\tif (!(aug in aug_map)) {\\n\\t\\t\\t\\taug_map[aug] = getAugData(ns, aug);\\n\\t\\t\\t\\taug_map[aug][\\\"factions\\\"] = [];\\n\\t\\t\\t}\\n\\t\\t\\t// Add to the list of factions already found for a given aug\\n\\t\\t\\tlet augs_factions = [];\\n\\t\\t\\t// are there already factions?\\n\\t\\t\\t// ns.tprint(`Existing factions: ${aug_map[aug][\\\"factions\\\"]}`);\\n\\t\\t\\tif (aug in aug_map && \\\"factions\\\" in aug_map[aug]) {\\n\\t\\t\\t\\taugs_factions = aug_map[aug][\\\"factions\\\"];\\n\\t\\t\\t\\t// ns.tprint(`Pre factions: ${augs_factions}`);\\n\\t\\t\\t}\\n\\t\\t\\taugs_factions.push(faction);\\n\\t\\t\\t// ns.tprint(`Mid factions: ${augs_factions}`);\\n\\t\\t\\taug_map[aug][\\\"factions\\\"] = augs_factions;\\n\\t\\t\\t// ns.tprint(`Post factions: ${augs_factions}`);\\n\\t\\t\\t// Check if I own any of them\\n\\t\\t\\taug_map[aug][\\\"owned\\\"] = my_augs.includes(aug);\\n\\t\\t}\\n\\t}\\n\\tawait ns.write(\\\"augmap.json\\\", JSON.stringify(aug_map, null, 2), 'w');\\n\\treturn aug_map;\\n}\\n\\n/**\\n * Get a list of names of priority augs\\n * @param {NS} ns\\n * @returns List of aug names (strings) to purchase\\n */\\nexport async function listPreferredAugs(ns) {\\n\\tlet aug_map = await readAugMap(ns);\\n\\t/* Preferred order:\\n\\t1. Hacking exp+ augs\\n\\t2. Faction rep+ augs\\n\\t3. Hacking augs \\n\\t */\\n\\tlet exp_augs = listExpAugs(aug_map);\\n\\t// ns.tprint(\\\"EXP Augs: \\\");\\n\\t// ns.tprint(exp_augs);\\n\\tif (exp_augs.length > 0) return exp_augs\\n\\tlet faction_augs = listFactionAugs(aug_map);\\n\\t// ns.tprint(\\\"Faction Augs: \\\");\\n\\t// ns.tprint(faction_augs);\\n\\tif (faction_augs.length > 0) return faction_augs\\n\\tlet hacking_augs = listHackingAugs(aug_map);\\n\\t// ns.tprint(\\\"Hacking Augs:\\\");\\n\\t// ns.tprint(hacking_augs);\\n\\tif (hacking_augs.length > 0) return hacking_augs\\n\\t// If nothing left to buy, return an empty list\\n\\treturn []\\n}\\n\\n/**\\n * Fetch all data about an aug\\n * @param {NS} ns\\n * @param {string} aug Name of an aug to fetch data about\\n * @returns An object of data about an aug\\n */\\nfunction getAugData(ns, aug) {\\n\\treturn {\\n\\t\\t\\\"stats\\\": ns.getAugmentationStats(aug),\\n\\t\\t\\\"repreq\\\": ns.getAugmentationRepReq(aug),\\n\\t\\t\\\"cost\\\": ns.getAugmentationPrice(aug),\\n\\t\\t\\\"prereqs\\\": ns.getAugmentationPrereq(aug),\\n\\t}\\n}\\n\\n/**\\n* Get a list of names of exp-enhancing augs\\n* @param {object} aug_map Map of augs as generated by readAugMap\\n* @param {boolean} owned True to include augs I own, false to exclude them\\n* @returns List of aug names to purchase\\n*/\\nfunction listExpAugs(aug_map, owned = false) {\\n\\tlet desired_augs = {};\\n\\t// Map the shorthand type arguments to actual aug stats we want, filtered to only include exp\\n\\tlet aug_stat_types = getStatsFromTypes([\\\"hack\\\"]).filter(stat => stat.includes(\\\"exp\\\"));\\n\\t// Now let's take a look at the rep requirements, and costs...\\n\\tfor (let [aug, model] of Object.entries(aug_map)) {\\n\\t\\t// Look for matching stats\\n\\t\\tif (aug_stat_types.some(item => Object.keys(model[\\\"stats\\\"]).includes(item))) {\\n\\t\\t\\t// Skip items we own unless specifically told to include them\\n\\t\\t\\tif (aug_map[aug][\\\"owned\\\"] && !owned) continue\\n\\t\\t\\tdesired_augs[aug] = model;\\n\\t\\t}\\n\\t}\\n\\treturn Object.keys(sortAugsByRepThenCost(desired_augs, aug_map))\\n}\\n\\n/**\\n* Get a list of names of faction-rep-gain augs\\n* @param {object} aug_map Map of augs as generated by readAugMap\\n* @param {boolean} owned True to include augs I own, false to exclude them\\n* @returns List of aug names to purchase\\n*/\\nfunction listFactionAugs(aug_map, owned = false) {\\n\\tlet desired_augs = {};\\n\\t// Map the shorthand type arguments to actual aug stats we want, filtered to only include exp\\n\\tlet aug_stat_types = getStatsFromTypes([\\\"faction\\\"]);\\n\\t// Now let's take a look at the rep requirements, and costs...\\n\\tfor (let [aug, model] of Object.entries(aug_map)) {\\n\\t\\t// Look for matching stats\\n\\t\\tif (aug_stat_types.some(item => Object.keys(model[\\\"stats\\\"]).includes(item))) {\\n\\t\\t\\t// Skip items we own unless specifically told to include them\\n\\t\\t\\tif (aug_map[aug][\\\"owned\\\"] && !owned) continue\\n\\t\\t\\tdesired_augs[aug] = model;\\n\\t\\t}\\n\\t}\\n\\treturn Object.keys(sortAugsByRepThenCost(desired_augs, aug_map))\\n}\\n\\n/**\\n* Get a list of names of hacking augs\\n* @param {object} aug_map Map of augs as generated by readAugMap\\n* @param {boolean} owned True to include augs I own, false to exclude them\\n* @returns List of aug names to purchase\\n*/\\nfunction listHackingAugs(aug_map, owned = false) {\\n\\tlet desired_augs = {};\\n\\t// Map the shorthand type arguments to actual aug stats we want, filtered to only include exp\\n\\tlet aug_stat_types = getStatsFromTypes([\\\"hack\\\"]);\\n\\t// Now let's take a look at the rep requirements, and costs...\\n\\tfor (let [aug, model] of Object.entries(aug_map)) {\\n\\t\\t// Look for matching stats\\n\\t\\tif (aug_stat_types.some(item => Object.keys(model[\\\"stats\\\"]).includes(item))) {\\n\\t\\t\\t// Skip items we own unless specifically told to include them\\n\\t\\t\\tif (aug_map[aug][\\\"owned\\\"] && !owned) continue\\n\\t\\t\\tdesired_augs[aug] = model;\\n\\t\\t}\\n\\t}\\n\\treturn Object.keys(sortAugsByRepThenCost(desired_augs, aug_map))\\n}\\n\\n/**\\n * Return a list of aug stats from the passed in types\\n * @param {array} types Shorthand types passed in to ns.flags\\n */\\nfunction getStatsFromTypes(types) {\\n\\tlet stat_list = [];\\n\\tfor (let type of types) {\\n\\t\\tstat_list.push(aug_bonus_types[type]);\\n\\t}\\n\\treturn stat_list.flat()\\n}\\n\\n/**\\n * Sort augs by rep req, then cost\\n * @param aug_list List of aug names to sort\\n * @param aug_map Map of augs from readAugMap()\\n * @returns Same list of aug names sorted by rep, then by cost\\n */\\nfunction sortAugsByRepThenCost(aug_list, aug_map) {\\n\\tlet aug_objects = {};\\n\\tfor (const aug in aug_list) {\\n\\t\\taug_objects[aug] = aug_map[aug]\\n\\t}\\n\\t// Sort by rep\\n\\tlet sorted_rep_augs = Object.fromEntries(Object.entries(aug_objects).sort(([, a], [, b]) => a[\\\"repreq\\\"] - b[\\\"repreq\\\"]).reverse());\\n\\treturn Object.fromEntries(\\n\\t\\tObject.entries(sorted_rep_augs).sort(\\n\\t\\t\\t([, a], [, b]) => a[\\\"cost\\\"] - b[\\\"cost\\\"]\\n\\t\\t).reverse()\\n\\t);\\n}\\n\\n/**\\n * Prompt to buy a list of augs\\n * @param aug_map Map of augs from readAugMap()\\n * @param {array} desired_augs List of strings to buy\\n * @param {boolean} should_prompt True if we should prompt to buy; false means we buy silently\\n * @returns Same list of aug names sorted by rep, then by cost\\n */\\nasync function promptForAugs(ns, aug_map, desired_augs, should_prompt) {\\n\\tfor (const aug of desired_augs) {\\n\\t\\t// ns.tprint(`Considering ${aug}`);\\n\\t\\t// Do I have a faction for whom satisifes the rep cost?\\n\\t\\tlet satisfy_rep = augRepAvailable(ns, aug_map[aug][\\\"repreq\\\"], aug_map[aug][\\\"factions\\\"]);\\n\\t\\t// ns.tprint(\\\"Rep: \\\" + satisfy_rep);\\n\\t\\t// Do I have the money?\\n\\t\\tlet rich_af = augCostAvailable(ns, aug_map[aug][\\\"cost\\\"]);\\n\\t\\t// ns.tprint(\\\"Cost: \\\" + rich_af);\\n\\t\\t// Do I satisfy pre-reqs?\\n\\t\\tlet needed_prereqs = augPreReqsAvailable(ns, aug_map[aug][\\\"prereqs\\\"]);\\n\\t\\t// ns.tprint(\\\"PreReqs: \\\" + needed_prereqs);\\n\\t\\tif (needed_prereqs.length > 0) {\\n\\t\\t\\t// Calculate our pre-reqs first\\n\\t\\t\\tawait promptForAugs(ns, aug_map, needed_prereqs, should_prompt);\\n\\t\\t}\\n\\t\\t// If all of those are true, let's do it\\n\\t\\tif (satisfy_rep && rich_af && (needed_prereqs.length == 0)) {\\n\\t\\t\\tawait purchaseAug(ns, aug, satisfy_rep, should_prompt);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** \\n * Purchase an aug. Return true if succeeded, otherwise false.\\n * @param {NS} ns \\n * @param {string} aug Name of augmentation \\n * @param {string} faction Which faction to buy from\\n * @param {boolean} should_prompt True if we should prompt to buy; false means we buy silently\\n**/\\nasync function purchaseAug(ns, aug, faction, should_prompt = true) {\\n\\tlet should_buy = true;\\n\\tlet did_buy = false;\\n\\tif (should_prompt) {\\n\\t\\tshould_buy = await ns.prompt(`Buy ${aug}?`);\\n\\t}\\n\\tif (should_buy) {\\n\\t\\tawait ns.sleep(5);\\n\\t\\tdid_buy = ns.purchaseAugmentation(faction, aug);\\n\\t\\tif (did_buy) {\\n\\t\\t\\tns.tprint(`Purchased ${aug}!`);\\n\\t\\t}\\n\\t} else ns.exit();\\n}\\n\\n/** \\n * Return list of factions I have enough rep to buy from\\n * @param {NS} ns \\n * @param {string} aug Name of augmentation \\n * @param {number} repreq Amount of rep required \\n * @param {array} factions List of factions to check \\n**/\\nfunction augRepAvailable(ns, repreq, factions) {\\n\\t// Is this aug available to purchase right now?\\n\\tlet player = ns.getPlayer();\\n\\tlet myfactions = player.factions;\\n\\tlet common_factions = factions.filter(faction => myfactions.includes(faction));\\n\\treturn common_factions.find(faction => repreq <= ns.getFactionRep(faction))\\n}\\n\\n/** \\n * Return true if I have enough money to buy a faction\\n * @param {NS} ns \\n * @param {string} aug Name of augmentation \\n * @param {number} price Cost of aug\\n**/\\nfunction augCostAvailable(ns, price) {\\n\\t// Is this aug available to purchase right now?\\n\\tlet my_money = ns.getPlayer().money;\\n\\treturn (my_money >= price)\\n}\\n\\n/** \\n * Return a list of prereqs I do NOT satisfy; otherwise empty list\\n * @param {NS} ns \\n * @param {string} aug Name of augmentation \\n * @param {number} prereqs List of aug prereqs\\n**/\\nfunction augPreReqsAvailable(ns, prereqs) {\\n\\t// Do I meet all the pre-reqs?\\n\\tlet my_augs = ns.getOwnedAugmentations(true);\\n\\treturn prereqs.filter(item => !my_augs.includes(item))\\n}\",\"filename\":\"FastAugmentMe.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"FastAugmentMe.js\",\"url\":\"blob:file:///56141f7b-aea7-48ed-a4e2-ce02e018fe7d\",\"moduleSequenceNumber\":199332}],\"dependents\":[],\"ramUsage\":33.3,\"server\":\"home\",\"moduleSequenceNumber\":462,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getAugmentationRepReq\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getAugmentationPrice\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getAugmentationPrereq\",\"cost\":5},{\"type\":\"fn\",\"name\":\"purchaseAugmentation\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getFactionRep\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// hyperBatcher Hack script (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner\\n// Not intended for direct use; run hyperBatcher.js instead.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const expProfit = ns.args[1];\\n    let affectStocks = ns.args[2] ? ns.args[2] : false;\\n\\n    let profit = await ns.hack(ns.args[0], { stock: affectStocks });\\n\\n    // We hacked \\n    if (\\n        // We hacked something, but \\n        profit != 0 &&\\n        // a different amount than expected, abort.\\n        Math.abs((profit - expProfit) / ((profit + expProfit) / 2)) > 0.05\\n    ) {\\n        ns.write(`ABORT_${ns.args[0]}.txt`, \\\"\\\", 'w');\\n    }\\n}\",\"filename\":\"/batch/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batch/hack.js\",\"url\":\"blob:file:///4d765ef7-e1d8-4b3d-8921-411569d4f669\",\"moduleSequenceNumber\":361641}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":463,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Target Hack (c)2022 Tyrope\\n// usage: run targetHack.js [target]\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog('getServerSecurityLevel');\\n    ns.disableLog('getServerMaxMoney');\\n\\n    let srv = ns.getHostname();\\n\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(srv) > ns.getServerMinSecurityLevel(srv)) {\\n            await ns.weaken(srv);\\n        }\\n\\n        // Make sure the server has max money available.\\n        if (ns.getServerMoneyAvailable(srv) < ns.getServerMaxMoney(srv)) {\\n            await ns.grow(srv);\\n            continue;\\n        }\\n        await ns.hack(srv);\\n    }\\n}\",\"filename\":\"basicHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"basicHack.js\",\"url\":\"blob:file:///33070a67-cd51-4f38-9965-7d672682a22c\",\"moduleSequenceNumber\":205765}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"home\",\"moduleSequenceNumber\":464,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Hack XP grow script (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/growXP.js\\n// usage: run growXP.js\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    // Infinite loop, go!\\n    while (true) {\\n        while (ns.getServerSecurityLevel('joesguns') > ns.getServerMinSecurityLevel('joesguns')) {\\n            await ns.weaken('joesguns');\\n        }\\n        await ns.grow('joesguns');\\n    }\\n}\",\"filename\":\"growHackingXP.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"home\",\"moduleSequenceNumber\":465,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { workoutAllUntil, commitKarmaFocusedCrime } from \\\"utils/crimes.js\\\";\\n\\n/**\\n * Starting game plan\\n * 1. Gym until 30 of each stat\\n * 2. Start mugging until we have enough money for the next RAM upgrade\\n * 3. Spin up the earlygameplan.js\\n */\\n\\nconst HOME = 'home';\\nconst MIN_STAT = 30;\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait workoutAllUntil(ns, MIN_STAT);\\n\\tawait crimeWhileUpgradingLoop(ns);\\n\\tns.spawn('earlygameplan.js');\\n}\\n\\n/** \\n * Commit crimes, but if we have enough money, buy more home upgrades\\n * @param {NS} ns \\n**/\\nasync function crimeWhileUpgradingLoop(ns) {\\n\\tns.disableLog(\\\"ALL\\\"); // Disable the log\\n\\tns.tail(); // Open a window to view the status of the script\\n\\tlet timeout = 250; // In ms - too low of a time will result in a lockout/hang\\n\\twhile (ns.getServerMaxRam(HOME) <= 32) {\\n\\t\\tawait ns.sleep(timeout); // Wait it out first\\n\\t\\tif (ns.isBusy()) continue;\\n\\t\\t// See if we can upgrade our home\\n\\t\\tupgradeHome(ns);\\n\\t\\t// Otherwise, commit crime!\\n\\t\\tcommitKarmaFocusedCrime(ns);\\n\\t}\\n\\tns.tprint(\\\"Bought enough RAM to move to Early Game\\\")\\n}\\n\\n\\n/** \\n * Upgrade the home\\n * @param {NS} ns \\n**/\\nfunction upgradeHome(ns) {\\n\\t// Do I have enough money to buy a RAM or core upgrade?\\n\\tlet ram_cost = ns.getUpgradeHomeRamCost();\\n\\tlet core_cost = ns.getUpgradeHomeCoresCost();\\n\\tlet money = ns.getPlayer().money;\\n\\tlet did_upgrade = false;\\n\\tif (money > ram_cost) {\\n\\t\\tdid_upgrade = ns.upgradeHomeRam();\\n\\t\\tif (did_upgrade) ns.print(`Bought RAM upgrade for ${ns.nFormat(ram_cost, '0.00a')}`)\\n\\t}\\n\\tif (money > core_cost) {\\n\\t\\tdid_upgrade = ns.upgradeHomeCores();\\n\\t\\tif (did_upgrade) ns.print(`Bought Cores upgrade for ${ns.nFormat(core_cost, '0.00a')}`)\\n\\t}\\n}\",\"filename\":\"startinggameplan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":26.65,\"server\":\"home\",\"moduleSequenceNumber\":466,\"ramUsageEntries\":[{\"type\":\"fn\",\"name\":\"getCrimeChance\",\"cost\":5},{\"type\":\"fn\",\"name\":\"commitCrime\",\"cost\":5},{\"type\":\"fn\",\"name\":\"upgradeHomeRam\",\"cost\":3},{\"type\":\"fn\",\"name\":\"upgradeHomeCores\",\"cost\":3},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gymWorkout\",\"cost\":2},{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getUpgradeHomeRamCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"getUpgradeHomeCoresCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"stopAction\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { maximizeScriptUse } from \\\"utils/script_tools.js\\\";\\n\\nconst HOME = 'home';\\nconst NETWORK_MAP = 'network_map.json';\\n\\n/** \\n * Create a network map in JSON format\\n * @param {NS} ns \\n**/\\nexport async function createNetworkMap(ns) {\\n\\tconst scanHost = (host, myParent, currentData = {}) => {\\n\\t\\tconst myConnections = ns.scan(host);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(host);\\n\\t\\tconst hackTime = ns.getHackTime(host);\\n\\n\\t\\tif (host == HOME) {\\n\\t\\t\\tmyParent = \\\"\\\";\\n\\t\\t}\\n\\n\\t\\tlet newData = {\\n\\t\\t\\t...currentData,\\n\\t\\t\\t[host]: {\\n\\t\\t\\t\\tparent: myParent,\\n\\t\\t\\t\\tconnections: myConnections,\\n\\t\\t\\t\\troot: ns.hasRootAccess(host),\\n\\t\\t\\t\\tcurrentMoney,\\n\\t\\t\\t\\tmaxMoney: ns.getServerMaxMoney(host),\\n\\t\\t\\t\\thackLevel: ns.getServerRequiredHackingLevel(host),\\n\\t\\t\\t\\thackTime,\\n\\t\\t\\t\\tports: ns.getServerNumPortsRequired(host),\\n\\t\\t\\t\\tmoneyPerSec: currentMoney / hackTime,\\n\\t\\t\\t\\tmaxRAM: ns.getServerMaxRam(host)\\n\\t\\t\\t}\\n\\t\\t};\\n\\n\\t\\t// Attempt to crack the server, record the result if we rooted it\\n\\t\\t// Obviously, skip home...\\n\\t\\tif (host != HOME && !newData[host][\\\"root\\\"]) {\\n\\t\\t\\tnewData[host][\\\"root\\\"] = crackServer(ns, host);\\n\\t\\t}\\n\\n\\t\\t// Recursively build the map of nodes\\n\\t\\tmyConnections\\n\\t\\t\\t.filter((node) => !newData[node]) // prevent infinite looping...\\n\\t\\t\\t.forEach((node) => {\\n\\t\\t\\t\\tnewData = scanHost(node, host, newData);\\n\\t\\t\\t});\\n\\n\\t\\treturn newData;\\n\\t};\\n\\n\\t// Recursively build the map\\n\\tconst data = scanHost(HOME, HOME);\\n\\t// Now make 'em all grow\\n\\tconst SERVERGROWER = \\\"serverGrower.js\\\";\\n\\tfor (const node of Object.keys(data)) {\\n\\t\\tawait ns.scp(SERVERGROWER, node);\\n\\t\\tmaximizeScriptUse(ns, SERVERGROWER, node);\\n\\t}\\n\\tawait ns.write(NETWORK_MAP, JSON.stringify(data, null, 2), 'w');\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst argData = ns.flags([\\n\\t\\t['daemon', false]\\n\\t]);\\n\\tif (argData.daemon) {\\n\\t\\twhile (true) {\\n\\t\\t\\tawait createNetworkMap(ns);\\n\\t\\t\\tawait ns.sleep(30000);\\n\\t\\t}\\n\\t} else {\\n\\t\\tawait createNetworkMap(ns);\\n\\t}\\n}\\n\\n/**\\n* Return an Object of the network map from JSON\\n* @param {NS} ns\\n*/\\nexport async function readNetworkMap(ns) {\\n\\tconst NETWORK_MAP = 'network_map.json.txt';\\n\\t// If we don't have a network map yet, make one\\n\\tif (!ns.ls('home', NETWORK_MAP)) {\\n\\t\\tawait createNetworkMap(ns);\\n\\t}\\n\\treturn JSON.parse(ns.read(NETWORK_MAP));\\n}\\n\\n/**\\n* Search for a path to specific server\\n* @param {NS} ns\\n* @param {string} server A server to generate a path for\\n* @returns Ordered list of servers from home to target server\\n*/\\nexport async function locateServer(ns, server) {\\n\\tlet network_map = await readNetworkMap(ns);\\n\\tlet premap_to_server = locateServerPrimitive(ns, server, network_map, []);\\n\\tpremap_to_server.push('home');\\n\\treturn premap_to_server.reverse();  // this will be a reverse-ordered list from home to target\\n}\\n\\n/**\\n* Crack a server\\n* @param {NS} ns\\n* @param {string} server A server to crack\\n* @param server_data Server data from BuildAugMap()\\n* @returns True if we nuked it\\n*/\\nexport function crackServer(ns, server) {\\n\\t// If we don't have root access, open ports and nuke it\\n\\tif (!ns.hasRootAccess(server)) {\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\")) {\\n\\t\\t\\tns.brutessh(server);\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\")) {\\n\\t\\t\\tns.ftpcrack(server);\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"RelaySMTP.exe\\\")) {\\n\\t\\t\\tns.relaysmtp(server);\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\")) {\\n\\t\\t\\tns.httpworm(server);\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\")) {\\n\\t\\t\\tns.sqlinject(server);\\n\\t\\t}\\n\\t\\tns.nuke(server);\\n\\t}\\n\\treturn ns.hasRootAccess(server)\\n}\\n\\n/**\\n* Search for a specific server by iterating through parents; generally don't call this publicly\\n* @param {string} server Server to look for\\n* @param {object} network_map Object of network map as generated by readNetworkMap()\\n* @param {array} connection_list An array of paths leading up to a server (in reverse order)\\n* @returns A reverse list of paths leading up a server\\n*/\\nfunction locateServerPrimitive(ns, server, network_map, connection_list) {\\n\\tif (!Object.keys(network_map).includes(server)) return []\\n\\tif (network_map[server].parent != '') {\\n\\t\\t// ns.tprint(`Current server: ${server}`)\\n\\t\\t// ns.tprint(`Parent: ${network_map[server].parent}`)\\n\\t\\tconnection_list.push(server);\\n\\t\\t// ns.tprint(`Current connection list: ${connection_list.join(\\\", \\\")}`)\\n\\t\\tlocateServerPrimitive(network_map[server].parent, network_map, connection_list);\\n\\t}\\n\\treturn connection_list;\\n}\",\"filename\":\"/utils/networkmap.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/script_tools.js\",\"url\":\"blob:file:///2219e106-91c2-4d6e-b14d-8b96f5d97edb\",\"moduleSequenceNumber\":344860},{\"filename\":\"/utils/networkmap.js\",\"url\":\"blob:file:///597d931f-3086-41fc-b2b9-216c86ba82b5\",\"moduleSequenceNumber\":347517}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"home\",\"moduleSequenceNumber\":1884,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"serverGrower.js\",\"url\":\"blob:file:///1cf28c3e-c7ac-4c6d-85fd-b839e051c5c1\",\"moduleSequenceNumber\":347519}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"home\",\"moduleSequenceNumber\":468,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** Run a script on a host with the maximum possible threads\\n * @param {NS} ns \\n * @param {string} script Name of script to evaluate and run\\n * @param {string} host Name of server to execute on\\n*/\\nexport function maximizeScriptUse(ns, script, host) {\\n\\tlet threads = maxThreads(ns, script, host);\\n\\t// ns.tprint(`${host} threads: ${threads}`);\\n\\tif (threads > 0) {\\n\\t\\t// Kill it first before recalculating usage\\n\\t\\tns.kill(script, host);\\n\\t\\tns.exec(script, host, threads);\\n\\t} else {\\n\\t\\tns.kill(script, 'home', host);\\n\\t\\tns.exec(script, 'home', 1, host);\\n\\t}\\n}\\n\\nexport function maxThreads(ns, script, host) {\\n\\tlet current_ram = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\n\\t// ns.tprint(`${host} current RAM: ${current_ram}`);\\n\\tlet script_cost = ns.getScriptRam(script);\\n\\t// ns.tprint(`${host} script cost: ${script_cost}`);\\n\\treturn Math.floor(current_ram / script_cost);\\n}\",\"filename\":\"/utils/script_tools.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":2261,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { maxThreads } from \\\"utils/script_tools.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t// Run a function with max memory usage\\n\\tlet script = ns.args[0];\\n\\tlet threads = maxThreads(ns, script, 'home');\\n\\tns.tprint(`Max threads for ${script}: ${threads}`);\\n}\",\"filename\":\"runMax.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/script_tools.js\",\"url\":\"blob:file:///5063bc5b-7dcb-4f77-94c7-1b5b75a13107\",\"moduleSequenceNumber\":359741},{\"filename\":\"runMax.js\",\"url\":\"blob:file:///80ce7abc-45e1-4da1-bd2d-c10ec33afc3d\",\"moduleSequenceNumber\":360500}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"home\",\"moduleSequenceNumber\":470,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"network_map.json.txt\",\"text\":\"{\\n  \\\"home\\\": {\\n    \\\"parent\\\": \\\"\\\",\\n    \\\"connections\\\": [\\n      \\\"n00dles\\\",\\n      \\\"foodnstuff\\\",\\n      \\\"sigma-cosmetics\\\",\\n      \\\"joesguns\\\",\\n      \\\"hong-fang-tea\\\",\\n      \\\"harakiri-sushi\\\",\\n      \\\"iron-gym\\\",\\n      \\\"darkweb\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 30857507482406.38,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 1,\\n    \\\"hackTime\\\": 45.70139894005611,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 675198313357.5493,\\n    \\\"maxRAM\\\": 65536\\n  },\\n  \\\"n00dles\\\": {\\n    \\\"parent\\\": \\\"home\\\",\\n    \\\"connections\\\": [\\n      \\\"home\\\",\\n      \\\"nectar-net\\\",\\n      \\\"max-hardware\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 196875,\\n    \\\"maxMoney\\\": 196875,\\n    \\\"hackLevel\\\": 1,\\n    \\\"hackTime\\\": 45.70139894005611,\\n    \\\"ports\\\": 0,\\n    \\\"moneyPerSec\\\": 4307.855001511652,\\n    \\\"maxRAM\\\": 4\\n  },\\n  \\\"nectar-net\\\": {\\n    \\\"parent\\\": \\\"n00dles\\\",\\n    \\\"connections\\\": [\\n      \\\"n00dles\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 7734375,\\n    \\\"maxMoney\\\": 7734375,\\n    \\\"hackLevel\\\": 20,\\n    \\\"hackTime\\\": 77.30584895332873,\\n    \\\"ports\\\": 0,\\n    \\\"moneyPerSec\\\": 100049.02739855318,\\n    \\\"maxRAM\\\": 16\\n  },\\n  \\\"max-hardware\\\": {\\n    \\\"parent\\\": \\\"n00dles\\\",\\n    \\\"connections\\\": [\\n      \\\"n00dles\\\",\\n      \\\"neo-net\\\",\\n      \\\"phantasy\\\",\\n      \\\"omega-net\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 28125000,\\n    \\\"maxMoney\\\": 28125000,\\n    \\\"hackLevel\\\": 80,\\n    \\\"hackTime\\\": 136.42208638822717,\\n    \\\"ports\\\": 1,\\n    \\\"moneyPerSec\\\": 206161.6322152005,\\n    \\\"maxRAM\\\": 32\\n  },\\n  \\\"neo-net\\\": {\\n    \\\"parent\\\": \\\"max-hardware\\\",\\n    \\\"connections\\\": [\\n      \\\"max-hardware\\\",\\n      \\\"the-hub\\\",\\n      \\\"comptek\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 14062500,\\n    \\\"maxMoney\\\": 14062500,\\n    \\\"hackLevel\\\": 50,\\n    \\\"hackTime\\\": 136.42208638822717,\\n    \\\"ports\\\": 1,\\n    \\\"moneyPerSec\\\": 103080.81610760024,\\n    \\\"maxRAM\\\": 32\\n  },\\n  \\\"the-hub\\\": {\\n    \\\"parent\\\": \\\"neo-net\\\",\\n    \\\"connections\\\": [\\n      \\\"neo-net\\\",\\n      \\\"summit-uni\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 510264005.625,\\n    \\\"maxMoney\\\": 510264005.625,\\n    \\\"hackLevel\\\": 301,\\n    \\\"hackTime\\\": 935.1734021912973,\\n    \\\"ports\\\": 2,\\n    \\\"moneyPerSec\\\": 545635.7125099472,\\n    \\\"maxRAM\\\": 16\\n  },\\n  \\\"summit-uni\\\": {\\n    \\\"parent\\\": \\\"the-hub\\\",\\n    \\\"connections\\\": [\\n      \\\"the-hub\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 662028837.1875,\\n    \\\"maxMoney\\\": 662028837.1875,\\n    \\\"hackLevel\\\": 462,\\n    \\\"hackTime\\\": 2356.464172212644,\\n    \\\"ports\\\": 3,\\n    \\\"moneyPerSec\\\": 280941.6094647755,\\n    \\\"maxRAM\\\": 64\\n  },\\n  \\\"comptek\\\": {\\n    \\\"parent\\\": \\\"neo-net\\\",\\n    \\\"connections\\\": [\\n      \\\"neo-net\\\",\\n      \\\"rothman-uni\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 167596694.25,\\n    \\\"maxMoney\\\": 628487603.4375,\\n    \\\"hackLevel\\\": 393,\\n    \\\"hackTime\\\": 5226.473656936362,\\n    \\\"ports\\\": 3,\\n    \\\"moneyPerSec\\\": 32066.878214830856,\\n    \\\"maxRAM\\\": 0\\n  },\\n  \\\"rothman-uni\\\": {\\n    \\\"parent\\\": \\\"comptek\\\",\\n    \\\"connections\\\": [\\n      \\\"comptek\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 507667080.9375,\\n    \\\"maxMoney\\\": 507667080.9375,\\n    \\\"hackLevel\\\": 373,\\n    \\\"hackTime\\\": 1402.4190480709754,\\n    \\\"ports\\\": 3,\\n    \\\"moneyPerSec\\\": 361993.85742499365,\\n    \\\"maxRAM\\\": 16\\n  },\\n  \\\"phantasy\\\": {\\n    \\\"parent\\\": \\\"max-hardware\\\",\\n    \\\"connections\\\": [\\n      \\\"max-hardware\\\",\\n      \\\"netlink\\\",\\n      \\\"johnson-ortho\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 67500000,\\n    \\\"maxMoney\\\": 67500000,\\n    \\\"hackLevel\\\": 100,\\n    \\\"hackTime\\\": 204.63312958234076,\\n    \\\"ports\\\": 2,\\n    \\\"moneyPerSec\\\": 329858.61154432077,\\n    \\\"maxRAM\\\": 32\\n  },\\n  \\\"netlink\\\": {\\n    \\\"parent\\\": \\\"phantasy\\\",\\n    \\\"connections\\\": [\\n      \\\"phantasy\\\",\\n      \\\"I.I.I.I\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 773437500,\\n    \\\"maxMoney\\\": 773437500,\\n    \\\"hackLevel\\\": 378,\\n    \\\"hackTime\\\": 2108.1759749860707,\\n    \\\"ports\\\": 3,\\n    \\\"moneyPerSec\\\": 366875.20832083776,\\n    \\\"maxRAM\\\": 64\\n  },\\n  \\\"I.I.I.I\\\": {\\n    \\\"parent\\\": \\\"netlink\\\",\\n    \\\"connections\\\": [\\n      \\\"netlink\\\",\\n      \\\"millenium-fitness\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 345,\\n    \\\"hackTime\\\": 45.47402879607573,\\n    \\\"ports\\\": 3,\\n    \\\"moneyPerSec\\\": 0,\\n    \\\"maxRAM\\\": 64\\n  },\\n  \\\"millenium-fitness\\\": {\\n    \\\"parent\\\": \\\"I.I.I.I\\\",\\n    \\\"connections\\\": [\\n      \\\"I.I.I.I\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 207213395.06053662,\\n    \\\"maxMoney\\\": 703125000,\\n    \\\"hackLevel\\\": 482,\\n    \\\"hackTime\\\": 2018.1373979698405,\\n    \\\"ports\\\": 3,\\n    \\\"moneyPerSec\\\": 102675.56374951695,\\n    \\\"maxRAM\\\": 16\\n  },\\n  \\\"johnson-ortho\\\": {\\n    \\\"parent\\\": \\\"phantasy\\\",\\n    \\\"connections\\\": [\\n      \\\"phantasy\\\",\\n      \\\"syscore\\\",\\n      \\\"catalyst\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 59538796.5,\\n    \\\"maxMoney\\\": 223270486.875,\\n    \\\"hackLevel\\\": 271,\\n    \\\"hackTime\\\": 2301.0526470612126,\\n    \\\"ports\\\": 2,\\n    \\\"moneyPerSec\\\": 25874.591168541894,\\n    \\\"maxRAM\\\": 0\\n  },\\n  \\\"syscore\\\": {\\n    \\\"parent\\\": \\\"johnson-ortho\\\",\\n    \\\"connections\\\": [\\n      \\\"johnson-ortho\\\",\\n      \\\"lexo-corp\\\",\\n      \\\"alpha-ent\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 373765653.75,\\n    \\\"maxMoney\\\": 1401621201.5625,\\n    \\\"hackLevel\\\": 625,\\n    \\\"hackTime\\\": 9264.178753188022,\\n    \\\"ports\\\": 4,\\n    \\\"moneyPerSec\\\": 40345.25495542478,\\n    \\\"maxRAM\\\": 0\\n  },\\n  \\\"lexo-corp\\\": {\\n    \\\"parent\\\": \\\"syscore\\\",\\n    \\\"connections\\\": [\\n      \\\"syscore\\\",\\n      \\\"aerocorp\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 2241246150,\\n    \\\"maxMoney\\\": 2241246150,\\n    \\\"hackLevel\\\": 677,\\n    \\\"hackTime\\\": 3585.8545407145507,\\n    \\\"ports\\\": 4,\\n    \\\"moneyPerSec\\\": 625024.2793042543,\\n    \\\"maxRAM\\\": 64\\n  },\\n  \\\"aerocorp\\\": {\\n    \\\"parent\\\": \\\"lexo-corp\\\",\\n    \\\"connections\\\": [\\n      \\\"lexo-corp\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 878863293,\\n    \\\"maxMoney\\\": 3295737348.75,\\n    \\\"hackLevel\\\": 873,\\n    \\\"hackTime\\\": 17406.887666182734,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 50489.39878594227,\\n    \\\"maxRAM\\\": 0\\n  },\\n  \\\"alpha-ent\\\": {\\n    \\\"parent\\\": \\\"syscore\\\",\\n    \\\"connections\\\": [\\n      \\\"syscore\\\",\\n      \\\"galactic-cyber\\\",\\n      \\\"global-pharm\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 1873106659.6875,\\n    \\\"maxMoney\\\": 1873106659.6875,\\n    \\\"hackLevel\\\": 548,\\n    \\\"hackTime\\\": 2288.25312901853,\\n    \\\"ports\\\": 4,\\n    \\\"moneyPerSec\\\": 818574.9364585843,\\n    \\\"maxRAM\\\": 128\\n  },\\n  \\\"galactic-cyber\\\": {\\n    \\\"parent\\\": \\\"alpha-ent\\\",\\n    \\\"connections\\\": [\\n      \\\"alpha-ent\\\",\\n      \\\"omnia\\\",\\n      \\\"unitalife\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 572191664.25,\\n    \\\"maxMoney\\\": 2145718740.9375,\\n    \\\"hackLevel\\\": 835,\\n    \\\"hackTime\\\": 11457.483531143745,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 49940.43087163669,\\n    \\\"maxRAM\\\": 0\\n  },\\n  \\\"omnia\\\": {\\n    \\\"parent\\\": \\\"galactic-cyber\\\",\\n    \\\"connections\\\": [\\n      \\\"galactic-cyber\\\",\\n      \\\"defcomm\\\",\\n      \\\"zeus-med\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 732301266,\\n    \\\"maxMoney\\\": 2746129747.5,\\n    \\\"hackLevel\\\": 939,\\n    \\\"hackTime\\\": 9507.552202646131,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 77023.11282563211,\\n    \\\"maxRAM\\\": 64\\n  },\\n  \\\"defcomm\\\": {\\n    \\\"parent\\\": \\\"omnia\\\",\\n    \\\"connections\\\": [\\n      \\\"omnia\\\",\\n      \\\"infocomm\\\",\\n      \\\"zb-def\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 640755402.75,\\n    \\\"maxMoney\\\": 2402832760.3125,\\n    \\\"hackLevel\\\": 964,\\n    \\\"hackTime\\\": 18559.056739003605,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 34525.21384900948,\\n    \\\"maxRAM\\\": 0\\n  },\\n  \\\"infocomm\\\": {\\n    \\\"parent\\\": \\\"defcomm\\\",\\n    \\\"connections\\\": [\\n      \\\"defcomm\\\",\\n      \\\"microdyne\\\",\\n      \\\"run4theh111z\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 664906997.25,\\n    \\\"maxMoney\\\": 2493401239.6875,\\n    \\\"hackLevel\\\": 893,\\n    \\\"hackTime\\\": 14734.894839851515,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 45124.65168409036,\\n    \\\"maxRAM\\\": 0\\n  },\\n  \\\"microdyne\\\": {\\n    \\\"parent\\\": \\\"infocomm\\\",\\n    \\\"connections\\\": [\\n      \\\"infocomm\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 1872096730.3125,\\n    \\\"maxMoney\\\": 1872096730.3125,\\n    \\\"hackLevel\\\": 843,\\n    \\\"hackTime\\\": 4645.6267818070955,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 402980.44122784137,\\n    \\\"maxRAM\\\": 64\\n  },\\n  \\\"run4theh111z\\\": {\\n    \\\"parent\\\": \\\"infocomm\\\",\\n    \\\"connections\\\": [\\n      \\\"infocomm\\\",\\n      \\\"stormtech\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 543,\\n    \\\"hackTime\\\": 45.47402879607573,\\n    \\\"ports\\\": 4,\\n    \\\"moneyPerSec\\\": 0,\\n    \\\"maxRAM\\\": 64\\n  },\\n  \\\"stormtech\\\": {\\n    \\\"parent\\\": \\\"run4theh111z\\\",\\n    \\\"connections\\\": [\\n      \\\"run4theh111z\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 886134676.5,\\n    \\\"maxMoney\\\": 3323005036.875,\\n    \\\"hackLevel\\\": 1045,\\n    \\\"hackTime\\\": 18926.64960343518,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 46819.41574800259,\\n    \\\"maxRAM\\\": 0\\n  },\\n  \\\"zb-def\\\": {\\n    \\\"parent\\\": \\\"defcomm\\\",\\n    \\\"connections\\\": [\\n      \\\"defcomm\\\",\\n      \\\"titan-labs\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 813446174.25,\\n    \\\"maxMoney\\\": 3050423153.4375,\\n    \\\"hackLevel\\\": 804,\\n    \\\"hackTime\\\": 10280.873588908382,\\n    \\\"ports\\\": 4,\\n    \\\"moneyPerSec\\\": 79122.28150802225,\\n    \\\"maxRAM\\\": 0\\n  },\\n  \\\"titan-labs\\\": {\\n    \\\"parent\\\": \\\"zb-def\\\",\\n    \\\"connections\\\": [\\n      \\\"zb-def\\\",\\n      \\\"fulcrumtech\\\",\\n      \\\"helios\\\",\\n      \\\"vitalife\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 2360028611.25,\\n    \\\"maxMoney\\\": 2360028611.25,\\n    \\\"hackLevel\\\": 832,\\n    \\\"hackTime\\\": 4585.601063796276,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 514660.69080510153,\\n    \\\"maxRAM\\\": 128\\n  },\\n  \\\"fulcrumtech\\\": {\\n    \\\"parent\\\": \\\"titan-labs\\\",\\n    \\\"connections\\\": [\\n      \\\"titan-labs\\\",\\n      \\\"omnitek\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 4757623472.8125,\\n    \\\"maxMoney\\\": 4757623472.8125,\\n    \\\"hackLevel\\\": 1035,\\n    \\\"hackTime\\\": 7340.645098406524,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 648120.622783584,\\n    \\\"maxRAM\\\": 1024\\n  },\\n  \\\"omnitek\\\": {\\n    \\\"parent\\\": \\\"fulcrumtech\\\",\\n    \\\"connections\\\": [\\n      \\\"fulcrumtech\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 41760918416.25,\\n    \\\"maxMoney\\\": 41760918416.25,\\n    \\\"hackLevel\\\": 1018,\\n    \\\"hackTime\\\": 7683.746645672915,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 5434968.166183299,\\n    \\\"maxRAM\\\": 512\\n  },\\n  \\\"helios\\\": {\\n    \\\"parent\\\": \\\"titan-labs\\\",\\n    \\\"connections\\\": [\\n      \\\"titan-labs\\\",\\n      \\\"kuai-gong\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 513016418.25,\\n    \\\"maxMoney\\\": 1923811568.4375,\\n    \\\"hackLevel\\\": 862,\\n    \\\"hackTime\\\": 8306.581681078374,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 61760.23278246984,\\n    \\\"maxRAM\\\": 64\\n  },\\n  \\\"kuai-gong\\\": {\\n    \\\"parent\\\": \\\"helios\\\",\\n    \\\"connections\\\": [\\n      \\\"helios\\\",\\n      \\\"clarkinc\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 22329847753.5,\\n    \\\"maxMoney\\\": 83736929075.625,\\n    \\\"hackLevel\\\": 1078,\\n    \\\"hackTime\\\": 23228.578701879636,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 961309.2578795227,\\n    \\\"maxRAM\\\": 0\\n  },\\n  \\\"clarkinc\\\": {\\n    \\\"parent\\\": \\\"kuai-gong\\\",\\n    \\\"connections\\\": [\\n      \\\"kuai-gong\\\",\\n      \\\"ecorp\\\",\\n      \\\"The-Cave\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 17840217593.25,\\n    \\\"maxMoney\\\": 66900815974.6875,\\n    \\\"hackLevel\\\": 987,\\n    \\\"hackTime\\\": 10604.16835450728,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 1682377.815669727,\\n    \\\"maxRAM\\\": 0\\n  },\\n  \\\"ecorp\\\": {\\n    \\\"parent\\\": \\\"clarkinc\\\",\\n    \\\"connections\\\": [\\n      \\\"clarkinc\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 12730752.787058707,\\n    \\\"maxMoney\\\": 174438313444.6875,\\n    \\\"hackLevel\\\": 1181,\\n    \\\"hackTime\\\": 11429.118594099378,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 1113.8875392920795,\\n    \\\"maxRAM\\\": 0\\n  },\\n  \\\"The-Cave\\\": {\\n    \\\"parent\\\": \\\"clarkinc\\\",\\n    \\\"connections\\\": [\\n      \\\"clarkinc\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 925,\\n    \\\"hackTime\\\": 45.47402879607573,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 0,\\n    \\\"maxRAM\\\": 0\\n  },\\n  \\\"vitalife\\\": {\\n    \\\"parent\\\": \\\"titan-labs\\\",\\n    \\\"connections\\\": [\\n      \\\"titan-labs\\\",\\n      \\\"4sigma\\\",\\n      \\\".\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 567168647.25,\\n    \\\"maxMoney\\\": 2126882427.1875,\\n    \\\"hackLevel\\\": 892,\\n    \\\"hackTime\\\": 6531.724652913931,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 86832.90821161222,\\n    \\\"maxRAM\\\": 64\\n  },\\n  \\\"4sigma\\\": {\\n    \\\"parent\\\": \\\"vitalife\\\",\\n    \\\"connections\\\": [\\n      \\\"vitalife\\\",\\n      \\\"b-and-a\\\",\\n      \\\"blade\\\",\\n      \\\"powerhouse-fitness\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 16208918112,\\n    \\\"maxMoney\\\": 60783442920,\\n    \\\"hackLevel\\\": 1181,\\n    \\\"hackTime\\\": 18967.19538436048,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 854576.4296478522,\\n    \\\"maxRAM\\\": 0\\n  },\\n  \\\"b-and-a\\\": {\\n    \\\"parent\\\": \\\"4sigma\\\",\\n    \\\"connections\\\": [\\n      \\\"4sigma\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 17480455398,\\n    \\\"maxMoney\\\": 65551707742.5,\\n    \\\"hackLevel\\\": 1136,\\n    \\\"hackTime\\\": 18504.507799335905,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 944659.3007260287,\\n    \\\"maxRAM\\\": 0\\n  },\\n  \\\"blade\\\": {\\n    \\\"parent\\\": \\\"4sigma\\\",\\n    \\\"connections\\\": [\\n      \\\"4sigma\\\",\\n      \\\"fulcrumassets\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 86277039941.25,\\n    \\\"maxMoney\\\": 86277039941.25,\\n    \\\"hackLevel\\\": 1188,\\n    \\\"hackTime\\\": 8148.9459602567695,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 10587509.152966755,\\n    \\\"maxRAM\\\": 512\\n  },\\n  \\\"fulcrumassets\\\": {\\n    \\\"parent\\\": \\\"blade\\\",\\n    \\\"connections\\\": [\\n      \\\"blade\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 750000,\\n    \\\"maxMoney\\\": 2812500,\\n    \\\"hackLevel\\\": 1234,\\n    \\\"hackTime\\\": 27722.420280882434,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 27.053914932427634,\\n    \\\"maxRAM\\\": 0\\n  },\\n  \\\"powerhouse-fitness\\\": {\\n    \\\"parent\\\": \\\"4sigma\\\",\\n    \\\"connections\\\": [\\n      \\\"4sigma\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 675000000,\\n    \\\"maxMoney\\\": 2531250000,\\n    \\\"hackLevel\\\": 996,\\n    \\\"hackTime\\\": 11293.492104266219,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 59768.93539820271,\\n    \\\"maxRAM\\\": 16\\n  },\\n  \\\".\\\": {\\n    \\\"parent\\\": \\\"vitalife\\\",\\n    \\\"connections\\\": [\\n      \\\"vitalife\\\",\\n      \\\"nwo\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 547,\\n    \\\"hackTime\\\": 45.47402879607573,\\n    \\\"ports\\\": 4,\\n    \\\"moneyPerSec\\\": 0,\\n    \\\"maxRAM\\\": 16\\n  },\\n  \\\"nwo\\\": {\\n    \\\"parent\\\": \\\".\\\",\\n    \\\"connections\\\": [\\n      \\\".\\\",\\n      \\\"megacorp\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 24073963924.5,\\n    \\\"maxMoney\\\": 90277364716.875,\\n    \\\"hackLevel\\\": 1274,\\n    \\\"hackTime\\\": 28619.566026493012,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 841171.5223848899,\\n    \\\"maxRAM\\\": 0\\n  },\\n  \\\"megacorp\\\": {\\n    \\\"parent\\\": \\\"nwo\\\",\\n    \\\"connections\\\": [\\n      \\\"nwo\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 42340903549.5,\\n    \\\"maxMoney\\\": 158778388310.625,\\n    \\\"hackLevel\\\": 1286,\\n    \\\"hackTime\\\": 28888.70975017618,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 1465655.749794841,\\n    \\\"maxRAM\\\": 0\\n  },\\n  \\\"zeus-med\\\": {\\n    \\\"parent\\\": \\\"omnia\\\",\\n    \\\"connections\\\": [\\n      \\\"omnia\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 983745716.25,\\n    \\\"maxMoney\\\": 3689046435.9375,\\n    \\\"hackLevel\\\": 807,\\n    \\\"hackTime\\\": 15705.57635321555,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 62636.715401315945,\\n    \\\"maxRAM\\\": 0\\n  },\\n  \\\"unitalife\\\": {\\n    \\\"parent\\\": \\\"galactic-cyber\\\",\\n    \\\"connections\\\": [\\n      \\\"galactic-cyber\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 788113882.5,\\n    \\\"maxMoney\\\": 2955427059.375,\\n    \\\"hackLevel\\\": 805,\\n    \\\"hackTime\\\": 10663.101985295316,\\n    \\\"ports\\\": 4,\\n    \\\"moneyPerSec\\\": 73910.3765102152,\\n    \\\"maxRAM\\\": 16\\n  },\\n  \\\"global-pharm\\\": {\\n    \\\"parent\\\": \\\"alpha-ent\\\",\\n    \\\"connections\\\": [\\n      \\\"alpha-ent\\\",\\n      \\\"deltaone\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 1128863565,\\n    \\\"maxMoney\\\": 4233238368.75,\\n    \\\"hackLevel\\\": 826,\\n    \\\"hackTime\\\": 13621.625956538905,\\n    \\\"ports\\\": 4,\\n    \\\"moneyPerSec\\\": 82872.89407312656,\\n    \\\"maxRAM\\\": 16\\n  },\\n  \\\"deltaone\\\": {\\n    \\\"parent\\\": \\\"global-pharm\\\",\\n    \\\"connections\\\": [\\n      \\\"global-pharm\\\",\\n      \\\"icarus\\\",\\n      \\\"univ-energy\\\",\\n      \\\"solaris\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 989379996.75,\\n    \\\"maxMoney\\\": 3710174987.8125,\\n    \\\"hackLevel\\\": 849,\\n    \\\"hackTime\\\": 14976.302248095883,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 66063.03614604144,\\n    \\\"maxRAM\\\": 0\\n  },\\n  \\\"icarus\\\": {\\n    \\\"parent\\\": \\\"deltaone\\\",\\n    \\\"connections\\\": [\\n      \\\"deltaone\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 743314143,\\n    \\\"maxMoney\\\": 2787428036.25,\\n    \\\"hackLevel\\\": 879,\\n    \\\"hackTime\\\": 17526.210096680235,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 42411.57323229832,\\n    \\\"maxRAM\\\": 0\\n  },\\n  \\\"univ-energy\\\": {\\n    \\\"parent\\\": \\\"deltaone\\\",\\n    \\\"connections\\\": [\\n      \\\"deltaone\\\",\\n      \\\"taiyang-digital\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 3225208356.5625,\\n    \\\"maxMoney\\\": 3225208356.5625,\\n    \\\"hackLevel\\\": 814,\\n    \\\"hackTime\\\": 5597.852944796922,\\n    \\\"ports\\\": 4,\\n    \\\"moneyPerSec\\\": 576150.9615146747,\\n    \\\"maxRAM\\\": 128\\n  },\\n  \\\"taiyang-digital\\\": {\\n    \\\"parent\\\": \\\"univ-energy\\\",\\n    \\\"connections\\\": [\\n      \\\"univ-energy\\\",\\n      \\\"applied-energetics\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 622838525.25,\\n    \\\"maxMoney\\\": 2335644469.6875,\\n    \\\"hackLevel\\\": 947,\\n    \\\"hackTime\\\": 15192.529833957824,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 40996.36677084896,\\n    \\\"maxRAM\\\": 0\\n  },\\n  \\\"applied-energetics\\\": {\\n    \\\"parent\\\": \\\"taiyang-digital\\\",\\n    \\\"connections\\\": [\\n      \\\"taiyang-digital\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 670148645.25,\\n    \\\"maxMoney\\\": 2513057419.6875,\\n    \\\"hackLevel\\\": 848,\\n    \\\"hackTime\\\": 13790.408498669125,\\n    \\\"ports\\\": 4,\\n    \\\"moneyPerSec\\\": 48595.2715116941,\\n    \\\"maxRAM\\\": 0\\n  },\\n  \\\"solaris\\\": {\\n    \\\"parent\\\": \\\"deltaone\\\",\\n    \\\"connections\\\": [\\n      \\\"deltaone\\\",\\n      \\\"nova-med\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 2151294361.875,\\n    \\\"maxMoney\\\": 2151294361.875,\\n    \\\"hackLevel\\\": 774,\\n    \\\"hackTime\\\": 4269.101823375589,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 503922.00769153034,\\n    \\\"maxRAM\\\": 64\\n  },\\n  \\\"nova-med\\\": {\\n    \\\"parent\\\": \\\"solaris\\\",\\n    \\\"connections\\\": [\\n      \\\"solaris\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 867910737,\\n    \\\"maxMoney\\\": 3254665263.75,\\n    \\\"hackLevel\\\": 781,\\n    \\\"hackTime\\\": 13237.157253702066,\\n    \\\"ports\\\": 4,\\n    \\\"moneyPerSec\\\": 65566.2481275781,\\n    \\\"maxRAM\\\": 0\\n  },\\n  \\\"catalyst\\\": {\\n    \\\"parent\\\": \\\"johnson-ortho\\\",\\n    \\\"connections\\\": [\\n      \\\"johnson-ortho\\\",\\n      \\\"rho-construction\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 1081387153.125,\\n    \\\"maxMoney\\\": 1081387153.125,\\n    \\\"hackLevel\\\": 438,\\n    \\\"hackTime\\\": 2236.412736191004,\\n    \\\"ports\\\": 3,\\n    \\\"moneyPerSec\\\": 483536.4848470629,\\n    \\\"maxRAM\\\": 32\\n  },\\n  \\\"rho-construction\\\": {\\n    \\\"parent\\\": \\\"catalyst\\\",\\n    \\\"connections\\\": [\\n      \\\"catalyst\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 1459824862.5,\\n    \\\"maxMoney\\\": 1459824862.5,\\n    \\\"hackLevel\\\": 505,\\n    \\\"hackTime\\\": 1538.1590240272612,\\n    \\\"ports\\\": 3,\\n    \\\"moneyPerSec\\\": 949072.780965024,\\n    \\\"maxRAM\\\": 16\\n  },\\n  \\\"omega-net\\\": {\\n    \\\"parent\\\": \\\"max-hardware\\\",\\n    \\\"connections\\\": [\\n      \\\"max-hardware\\\",\\n      \\\"avmnite-02h\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 185191045.3125,\\n    \\\"maxMoney\\\": 185191045.3125,\\n    \\\"hackLevel\\\": 214,\\n    \\\"hackTime\\\": 532.0461369140859,\\n    \\\"ports\\\": 2,\\n    \\\"moneyPerSec\\\": 348073.28249129717,\\n    \\\"maxRAM\\\": 32\\n  },\\n  \\\"avmnite-02h\\\": {\\n    \\\"parent\\\": \\\"omega-net\\\",\\n    \\\"connections\\\": [\\n      \\\"omega-net\\\",\\n      \\\"zb-institute\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 214,\\n    \\\"hackTime\\\": 45.47402879607573,\\n    \\\"ports\\\": 2,\\n    \\\"moneyPerSec\\\": 0,\\n    \\\"maxRAM\\\": 16\\n  },\\n  \\\"zb-institute\\\": {\\n    \\\"parent\\\": \\\"avmnite-02h\\\",\\n    \\\"connections\\\": [\\n      \\\"avmnite-02h\\\",\\n      \\\"aevum-police\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 765418507.5,\\n    \\\"maxMoney\\\": 2870319403.125,\\n    \\\"hackLevel\\\": 756,\\n    \\\"hackTime\\\": 5315.032906953325,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 144010.1163811518,\\n    \\\"maxRAM\\\": 32\\n  },\\n  \\\"aevum-police\\\": {\\n    \\\"parent\\\": \\\"zb-institute\\\",\\n    \\\"connections\\\": [\\n      \\\"zb-institute\\\",\\n      \\\"snap-fitness\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 169999728.75,\\n    \\\"maxMoney\\\": 637498982.8125,\\n    \\\"hackLevel\\\": 443,\\n    \\\"hackTime\\\": 5937.570229576516,\\n    \\\"ports\\\": 4,\\n    \\\"moneyPerSec\\\": 28631.194609402515,\\n    \\\"maxRAM\\\": 16\\n  },\\n  \\\"snap-fitness\\\": {\\n    \\\"parent\\\": \\\"aevum-police\\\",\\n    \\\"connections\\\": [\\n      \\\"aevum-police\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 337500000,\\n    \\\"maxMoney\\\": 1265625000,\\n    \\\"hackLevel\\\": 686,\\n    \\\"hackTime\\\": 9228.068821665434,\\n    \\\"ports\\\": 4,\\n    \\\"moneyPerSec\\\": 36573.19928169865,\\n    \\\"maxRAM\\\": 0\\n  },\\n  \\\"foodnstuff\\\": {\\n    \\\"parent\\\": \\\"home\\\",\\n    \\\"connections\\\": [\\n      \\\"home\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 5625000,\\n    \\\"maxMoney\\\": 5625000,\\n    \\\"hackLevel\\\": 1,\\n    \\\"hackTime\\\": 46.156139228016855,\\n    \\\"ports\\\": 0,\\n    \\\"moneyPerSec\\\": 121868.94515184266,\\n    \\\"maxRAM\\\": 16\\n  },\\n  \\\"sigma-cosmetics\\\": {\\n    \\\"parent\\\": \\\"home\\\",\\n    \\\"connections\\\": [\\n      \\\"home\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 6468750,\\n    \\\"maxMoney\\\": 6468750,\\n    \\\"hackLevel\\\": 5,\\n    \\\"hackTime\\\": 48.88458095578141,\\n    \\\"ports\\\": 0,\\n    \\\"moneyPerSec\\\": 132327.00114277983,\\n    \\\"maxRAM\\\": 16\\n  },\\n  \\\"joesguns\\\": {\\n    \\\"parent\\\": \\\"home\\\",\\n    \\\"connections\\\": [\\n      \\\"home\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 7031250,\\n    \\\"maxMoney\\\": 7031250,\\n    \\\"hackLevel\\\": 10,\\n    \\\"hackTime\\\": 56.84253599509466,\\n    \\\"ports\\\": 0,\\n    \\\"moneyPerSec\\\": 123696.9793291203,\\n    \\\"maxRAM\\\": 16\\n  },\\n  \\\"hong-fang-tea\\\": {\\n    \\\"parent\\\": \\\"home\\\",\\n    \\\"connections\\\": [\\n      \\\"home\\\",\\n      \\\"CSEC\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 8437500,\\n    \\\"maxMoney\\\": 8437500,\\n    \\\"hackLevel\\\": 30,\\n    \\\"hackTime\\\": 79.57955039313251,\\n    \\\"ports\\\": 0,\\n    \\\"moneyPerSec\\\": 106025.98228210313,\\n    \\\"maxRAM\\\": 16\\n  },\\n  \\\"CSEC\\\": {\\n    \\\"parent\\\": \\\"hong-fang-tea\\\",\\n    \\\"connections\\\": [\\n      \\\"hong-fang-tea\\\",\\n      \\\"silver-helix\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 55,\\n    \\\"hackTime\\\": 45.47402879607573,\\n    \\\"ports\\\": 1,\\n    \\\"moneyPerSec\\\": 0,\\n    \\\"maxRAM\\\": 8\\n  },\\n  \\\"silver-helix\\\": {\\n    \\\"parent\\\": \\\"CSEC\\\",\\n    \\\"connections\\\": [\\n      \\\"CSEC\\\",\\n      \\\"crush-fitness\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 126562500,\\n    \\\"maxMoney\\\": 126562500,\\n    \\\"hackLevel\\\": 150,\\n    \\\"hackTime\\\": 386.5292447666436,\\n    \\\"ports\\\": 2,\\n    \\\"moneyPerSec\\\": 327433.1805770832,\\n    \\\"maxRAM\\\": 64\\n  },\\n  \\\"crush-fitness\\\": {\\n    \\\"parent\\\": \\\"silver-helix\\\",\\n    \\\"connections\\\": [\\n      \\\"silver-helix\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 39656010.75,\\n    \\\"maxMoney\\\": 148710040.3125,\\n    \\\"hackLevel\\\": 238,\\n    \\\"hackTime\\\": 1866.7515139808909,\\n    \\\"ports\\\": 2,\\n    \\\"moneyPerSec\\\": 21243.325880814547,\\n    \\\"maxRAM\\\": 0\\n  },\\n  \\\"harakiri-sushi\\\": {\\n    \\\"parent\\\": \\\"home\\\",\\n    \\\"connections\\\": [\\n      \\\"home\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 11250000,\\n    \\\"maxMoney\\\": 11250000,\\n    \\\"hackLevel\\\": 40,\\n    \\\"hackTime\\\": 90.94805759215146,\\n    \\\"ports\\\": 0,\\n    \\\"moneyPerSec\\\": 123696.97932912028,\\n    \\\"maxRAM\\\": 16\\n  },\\n  \\\"iron-gym\\\": {\\n    \\\"parent\\\": \\\"home\\\",\\n    \\\"connections\\\": [\\n      \\\"home\\\",\\n      \\\"zer0\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 56250000,\\n    \\\"maxMoney\\\": 56250000,\\n    \\\"hackLevel\\\": 100,\\n    \\\"hackTime\\\": 272.84417277645434,\\n    \\\"ports\\\": 1,\\n    \\\"moneyPerSec\\\": 206161.6322152005,\\n    \\\"maxRAM\\\": 32\\n  },\\n  \\\"zer0\\\": {\\n    \\\"parent\\\": \\\"iron-gym\\\",\\n    \\\"connections\\\": [\\n      \\\"iron-gym\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 21093750,\\n    \\\"maxMoney\\\": 21093750,\\n    \\\"hackLevel\\\": 75,\\n    \\\"hackTime\\\": 181.89611518430291,\\n    \\\"ports\\\": 1,\\n    \\\"moneyPerSec\\\": 115965.91812105027,\\n    \\\"maxRAM\\\": 32\\n  },\\n  \\\"darkweb\\\": {\\n    \\\"parent\\\": \\\"home\\\",\\n    \\\"connections\\\": [\\n      \\\"home\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 1,\\n    \\\"hackTime\\\": 45.70139894005611,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 0,\\n    \\\"maxRAM\\\": 1\\n  }\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/owned-source-files.txt\",\"text\":\"{\\\"1\\\":3,\\\"2\\\":1,\\\"4\\\":2}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/player-info.txt\",\"text\":\"{\\\"hacking\\\":7438,\\\"hp\\\":10,\\\"max_hp\\\":10,\\\"strength\\\":4,\\\"defense\\\":3,\\\"dexterity\\\":6,\\\"agility\\\":3,\\\"charisma\\\":2,\\\"intelligence\\\":0,\\\"hacking_chance_mult\\\":5.150810616487218,\\\"hacking_speed_mult\\\":4.939482053673567,\\\"hacking_money_mult\\\":23.52852305013459,\\\"hacking_grow_mult\\\":5.35520806399352,\\\"hacking_exp\\\":13503740.314626884,\\\"strength_exp\\\":0,\\\"defense_exp\\\":0,\\\"dexterity_exp\\\":0,\\\"agility_exp\\\":0,\\\"charisma_exp\\\":0,\\\"hacking_mult\\\":22.86071873642847,\\\"strength_mult\\\":4.345430031446902,\\\"defense_mult\\\":3.7786348099538283,\\\"dexterity_mult\\\":6.083602044025663,\\\"agility_mult\\\":3.7786348099538283,\\\"charisma_mult\\\":2.677432665338712,\\\"hacking_exp_mult\\\":17.50233434832848,\\\"strength_exp_mult\\\":2.879364708932555,\\\"defense_exp_mult\\\":2.879364708932555,\\\"dexterity_exp_mult\\\":2.879364708932555,\\\"agility_exp_mult\\\":2.879364708932555,\\\"charisma_exp_mult\\\":2.879364708932555,\\\"company_rep_mult\\\":9.041483385537006,\\\"faction_rep_mult\\\":1.8064901869204806,\\\"numPeopleKilled\\\":0,\\\"money\\\":17685412090151.1,\\\"city\\\":\\\"Sector-12\\\",\\\"location\\\":\\\"Travel Agency\\\",\\\"companyName\\\":\\\"\\\",\\\"crime_money_mult\\\":1.7707887998271905,\\\"crime_success_mult\\\":1.7707887998271905,\\\"isWorking\\\":false,\\\"workType\\\":\\\"\\\",\\\"currentWorkFactionName\\\":\\\"\\\",\\\"currentWorkFactionDescription\\\":\\\"\\\",\\\"workHackExpGainRate\\\":0,\\\"workStrExpGainRate\\\":0,\\\"workDefExpGainRate\\\":0,\\\"workDexExpGainRate\\\":0,\\\"workAgiExpGainRate\\\":0,\\\"workChaExpGainRate\\\":0,\\\"workRepGainRate\\\":0,\\\"workMoneyGainRate\\\":0,\\\"workMoneyLossRate\\\":0,\\\"workHackExpGained\\\":0,\\\"workStrExpGained\\\":0,\\\"workDefExpGained\\\":0,\\\"workDexExpGained\\\":0,\\\"workAgiExpGained\\\":0,\\\"workChaExpGained\\\":0,\\\"workRepGained\\\":0,\\\"workMoneyGained\\\":0,\\\"createProgramName\\\":\\\"\\\",\\\"createProgramReqLvl\\\":100,\\\"className\\\":\\\"\\\",\\\"crimeType\\\":\\\"\\\",\\\"work_money_mult\\\":1.885033238525719,\\\"hacknet_node_money_mult\\\":1.4280554837316053,\\\"hacknet_node_purchase_cost_mult\\\":0.6446435430662757,\\\"hacknet_node_ram_cost_mult\\\":0.6446435430662757,\\\"hacknet_node_core_cost_mult\\\":0.6446435430662757,\\\"hacknet_node_level_cost_mult\\\":0.6446435430662757,\\\"hasWseAccount\\\":false,\\\"hasTixApiAccess\\\":false,\\\"has4SData\\\":false,\\\"has4SDataTixApi\\\":false,\\\"bladeburner_max_stamina_mult\\\":1,\\\"bladeburner_stamina_gain_mult\\\":1,\\\"bladeburner_analysis_mult\\\":1,\\\"bladeburner_success_chance_mult\\\":1,\\\"bitNodeN\\\":4,\\\"totalPlaytime\\\":3986436200,\\\"playtimeSinceLastAug\\\":237734800,\\\"playtimeSinceLastBitnode\\\":382894600,\\\"jobs\\\":{},\\\"factions\\\":[\\\"Slum Snakes\\\",\\\"Sector-12\\\"],\\\"tor\\\":true,\\\"hasCorporation\\\":false}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/player-gang-joined.txt\",\"text\":\"true\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-equipment-names.txt\",\"text\":\"[\\\"Baseball Bat\\\",\\\"Katana\\\",\\\"Glock 18C\\\",\\\"P90C\\\",\\\"Steyr AUG\\\",\\\"AK-47\\\",\\\"M15A10 Assault Rifle\\\",\\\"AWM Sniper Rifle\\\",\\\"Bulletproof Vest\\\",\\\"Full Body Armor\\\",\\\"Liquid Body Armor\\\",\\\"Graphene Plating Armor\\\",\\\"Ford Flex V20\\\",\\\"ATX1070 Superbike\\\",\\\"Mercedes-Benz S9001\\\",\\\"White Ferrari\\\",\\\"NUKE Rootkit\\\",\\\"Soulstealer Rootkit\\\",\\\"Demon Rootkit\\\",\\\"Hmap Node\\\",\\\"Jack the Ripper\\\",\\\"Bionic Arms\\\",\\\"Bionic Legs\\\",\\\"Bionic Spine\\\",\\\"BrachiBlades\\\",\\\"Nanofiber Weave\\\",\\\"Synthetic Heart\\\",\\\"Synfibril Muscle\\\",\\\"BitWire\\\",\\\"Neuralstimulator\\\",\\\"DataJack\\\",\\\"Graphene Bone Lacings\\\"]\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-getEquipmentType.txt\",\"text\":\"{\\\"Baseball Bat\\\":\\\"Weapon\\\",\\\"Katana\\\":\\\"Weapon\\\",\\\"Glock 18C\\\":\\\"Weapon\\\",\\\"P90C\\\":\\\"Weapon\\\",\\\"Steyr AUG\\\":\\\"Weapon\\\",\\\"AK-47\\\":\\\"Weapon\\\",\\\"M15A10 Assault Rifle\\\":\\\"Weapon\\\",\\\"AWM Sniper Rifle\\\":\\\"Weapon\\\",\\\"Bulletproof Vest\\\":\\\"Armor\\\",\\\"Full Body Armor\\\":\\\"Armor\\\",\\\"Liquid Body Armor\\\":\\\"Armor\\\",\\\"Graphene Plating Armor\\\":\\\"Armor\\\",\\\"Ford Flex V20\\\":\\\"Vehicle\\\",\\\"ATX1070 Superbike\\\":\\\"Vehicle\\\",\\\"Mercedes-Benz S9001\\\":\\\"Vehicle\\\",\\\"White Ferrari\\\":\\\"Vehicle\\\",\\\"NUKE Rootkit\\\":\\\"Rootkit\\\",\\\"Soulstealer Rootkit\\\":\\\"Rootkit\\\",\\\"Demon Rootkit\\\":\\\"Rootkit\\\",\\\"Hmap Node\\\":\\\"Rootkit\\\",\\\"Jack the Ripper\\\":\\\"Rootkit\\\",\\\"Bionic Arms\\\":\\\"Augmentation\\\",\\\"Bionic Legs\\\":\\\"Augmentation\\\",\\\"Bionic Spine\\\":\\\"Augmentation\\\",\\\"BrachiBlades\\\":\\\"Augmentation\\\",\\\"Nanofiber Weave\\\":\\\"Augmentation\\\",\\\"Synthetic Heart\\\":\\\"Augmentation\\\",\\\"Synfibril Muscle\\\":\\\"Augmentation\\\",\\\"BitWire\\\":\\\"Augmentation\\\",\\\"Neuralstimulator\\\":\\\"Augmentation\\\",\\\"DataJack\\\":\\\"Augmentation\\\",\\\"Graphene Bone Lacings\\\":\\\"Augmentation\\\"}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-getEquipmentCost.txt\",\"text\":\"{\\\"Baseball Bat\\\":286383.0276479806,\\\"Bulletproof Vest\\\":572766.0552959612,\\\"Ford Flex V20\\\":859149.0829439419,\\\"Full Body Armor\\\":1431915.1382399031,\\\"NUKE Rootkit\\\":1431915.1382399031,\\\"ATX1070 Superbike\\\":2577447.248831826,\\\"Katana\\\":3436596.3317757677,\\\"Mercedes-Benz S9001\\\":5154894.497663652,\\\"Glock 18C\\\":7159575.691199516,\\\"Liquid Body Armor\\\":7159575.691199516,\\\"Soulstealer Rootkit\\\":7159575.691199516,\\\"White Ferrari\\\":8591490.829439418,\\\"Graphene Plating Armor\\\":11455321.105919225,\\\"Hmap Node\\\":11455321.105919225,\\\"P90C\\\":14319151.382399032,\\\"Steyr AUG\\\":17182981.658878837,\\\"Demon Rootkit\\\":21478727.07359855,\\\"Jack the Ripper\\\":21478727.07359855,\\\"AK-47\\\":28638302.764798064,\\\"M15A10 Assault Rifle\\\":42957454.1471971,\\\"AWM Sniper Rifle\\\":64436181.22079564,\\\"BitWire\\\":1431915138.2399032,\\\"DataJack\\\":2147872707.3598547,\\\"Bionic Arms\\\":2863830276.4798064,\\\"Bionic Legs\\\":2863830276.4798064,\\\"Neuralstimulator\\\":2863830276.4798064,\\\"Nanofiber Weave\\\":3436596331.7757673,\\\"Bionic Spine\\\":4295745414.719709,\\\"Synfibril Muscle\\\":4295745414.719709,\\\"BrachiBlades\\\":5727660552.959613,\\\"Synthetic Heart\\\":7159575691.199515,\\\"Graphene Bone Lacings\\\":14319151382.39903}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-getEquipmentStats.txt\",\"text\":\"{\\\"Baseball Bat\\\":{\\\"str\\\":1.04,\\\"def\\\":1.04},\\\"Katana\\\":{\\\"str\\\":1.08,\\\"def\\\":1.08,\\\"dex\\\":1.08},\\\"Glock 18C\\\":{\\\"str\\\":1.1,\\\"def\\\":1.1,\\\"dex\\\":1.1,\\\"agi\\\":1.1},\\\"P90C\\\":{\\\"str\\\":1.12,\\\"def\\\":1.1,\\\"agi\\\":1.1},\\\"Steyr AUG\\\":{\\\"str\\\":1.2,\\\"def\\\":1.15},\\\"AK-47\\\":{\\\"str\\\":1.25,\\\"def\\\":1.2},\\\"M15A10 Assault Rifle\\\":{\\\"str\\\":1.3,\\\"def\\\":1.25},\\\"AWM Sniper Rifle\\\":{\\\"str\\\":1.3,\\\"dex\\\":1.25,\\\"agi\\\":1.3},\\\"Bulletproof Vest\\\":{\\\"def\\\":1.04},\\\"Full Body Armor\\\":{\\\"def\\\":1.08},\\\"Liquid Body Armor\\\":{\\\"def\\\":1.15,\\\"agi\\\":1.15},\\\"Graphene Plating Armor\\\":{\\\"def\\\":1.2},\\\"Ford Flex V20\\\":{\\\"agi\\\":1.04,\\\"cha\\\":1.04},\\\"ATX1070 Superbike\\\":{\\\"agi\\\":1.08,\\\"cha\\\":1.08},\\\"Mercedes-Benz S9001\\\":{\\\"agi\\\":1.12,\\\"cha\\\":1.12},\\\"White Ferrari\\\":{\\\"agi\\\":1.16,\\\"cha\\\":1.16},\\\"NUKE Rootkit\\\":{\\\"hack\\\":1.05},\\\"Soulstealer Rootkit\\\":{\\\"hack\\\":1.1},\\\"Demon Rootkit\\\":{\\\"hack\\\":1.15},\\\"Hmap Node\\\":{\\\"hack\\\":1.12},\\\"Jack the Ripper\\\":{\\\"hack\\\":1.15},\\\"Bionic Arms\\\":{\\\"str\\\":1.3,\\\"dex\\\":1.3},\\\"Bionic Legs\\\":{\\\"agi\\\":1.6},\\\"Bionic Spine\\\":{\\\"str\\\":1.15,\\\"def\\\":1.15,\\\"dex\\\":1.15,\\\"agi\\\":1.15},\\\"BrachiBlades\\\":{\\\"str\\\":1.4,\\\"def\\\":1.4},\\\"Nanofiber Weave\\\":{\\\"str\\\":1.2,\\\"def\\\":1.2},\\\"Synthetic Heart\\\":{\\\"str\\\":1.5,\\\"agi\\\":1.5},\\\"Synfibril Muscle\\\":{\\\"str\\\":1.3,\\\"def\\\":1.3},\\\"BitWire\\\":{\\\"hack\\\":1.05},\\\"Neuralstimulator\\\":{\\\"hack\\\":1.15},\\\"DataJack\\\":{\\\"hack\\\":1.1},\\\"Graphene Bone Lacings\\\":{\\\"str\\\":1.7,\\\"def\\\":1.7}}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-task-names.txt\",\"text\":\"[\\\"Unassigned\\\",\\\"Mug People\\\",\\\"Deal Drugs\\\",\\\"Strongarm Civilians\\\",\\\"Run a Con\\\",\\\"Armed Robbery\\\",\\\"Traffick Illegal Arms\\\",\\\"Threaten & Blackmail\\\",\\\"Human Trafficking\\\",\\\"Terrorism\\\",\\\"Vigilante Justice\\\",\\\"Train Combat\\\",\\\"Train Hacking\\\",\\\"Train Charisma\\\",\\\"Territory Warfare\\\"]\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-getTaskStats.txt\",\"text\":\"{\\\"Unassigned\\\":{\\\"name\\\":\\\"Unassigned\\\",\\\"desc\\\":\\\"This gang member is currently idle\\\",\\\"isHacking\\\":true,\\\"isCombat\\\":true,\\\"baseRespect\\\":0,\\\"baseWanted\\\":0,\\\"baseMoney\\\":0,\\\"hackWeight\\\":100,\\\"strWeight\\\":0,\\\"defWeight\\\":0,\\\"dexWeight\\\":0,\\\"agiWeight\\\":0,\\\"chaWeight\\\":0,\\\"difficulty\\\":1,\\\"territory\\\":{\\\"money\\\":1,\\\"respect\\\":1,\\\"wanted\\\":1}},\\\"Mug People\\\":{\\\"name\\\":\\\"Mug People\\\",\\\"desc\\\":\\\"Assign this gang member to mug random people on the streets<br><br>Earns money - Slightly increases respect - Very slightly increases wanted level\\\",\\\"isHacking\\\":false,\\\"isCombat\\\":true,\\\"baseRespect\\\":0.00005,\\\"baseWanted\\\":0.00005,\\\"baseMoney\\\":3.6,\\\"hackWeight\\\":0,\\\"strWeight\\\":25,\\\"defWeight\\\":25,\\\"dexWeight\\\":25,\\\"agiWeight\\\":10,\\\"chaWeight\\\":15,\\\"difficulty\\\":1,\\\"territory\\\":{\\\"money\\\":1,\\\"respect\\\":1,\\\"wanted\\\":1}},\\\"Deal Drugs\\\":{\\\"name\\\":\\\"Deal Drugs\\\",\\\"desc\\\":\\\"Assign this gang member to sell drugs<br><br>Earns money - Slightly increases respect - Slightly increases wanted level - Scales slightly with territory\\\",\\\"isHacking\\\":false,\\\"isCombat\\\":true,\\\"baseRespect\\\":0.00006,\\\"baseWanted\\\":0.002,\\\"baseMoney\\\":15,\\\"hackWeight\\\":0,\\\"strWeight\\\":0,\\\"defWeight\\\":0,\\\"dexWeight\\\":20,\\\"agiWeight\\\":20,\\\"chaWeight\\\":60,\\\"difficulty\\\":3.5,\\\"territory\\\":{\\\"money\\\":1.2,\\\"respect\\\":1,\\\"wanted\\\":1.15}},\\\"Strongarm Civilians\\\":{\\\"name\\\":\\\"Strongarm Civilians\\\",\\\"desc\\\":\\\"Assign this gang member to extort civilians in your territory<br><br>Earns money - Slightly increases respect - Increases wanted - Scales heavily with territory\\\",\\\"isHacking\\\":false,\\\"isCombat\\\":true,\\\"baseRespect\\\":0.00004,\\\"baseWanted\\\":0.02,\\\"baseMoney\\\":7.5,\\\"hackWeight\\\":10,\\\"strWeight\\\":25,\\\"defWeight\\\":25,\\\"dexWeight\\\":20,\\\"agiWeight\\\":10,\\\"chaWeight\\\":10,\\\"difficulty\\\":5,\\\"territory\\\":{\\\"money\\\":1.6,\\\"respect\\\":1.1,\\\"wanted\\\":1.5}},\\\"Run a Con\\\":{\\\"name\\\":\\\"Run a Con\\\",\\\"desc\\\":\\\"Assign this gang member to run cons<br><br>Earns money - Increases respect - Increases wanted level\\\",\\\"isHacking\\\":false,\\\"isCombat\\\":true,\\\"baseRespect\\\":0.00012,\\\"baseWanted\\\":0.05,\\\"baseMoney\\\":45,\\\"hackWeight\\\":0,\\\"strWeight\\\":5,\\\"defWeight\\\":5,\\\"dexWeight\\\":25,\\\"agiWeight\\\":25,\\\"chaWeight\\\":40,\\\"difficulty\\\":14,\\\"territory\\\":{\\\"money\\\":1,\\\"respect\\\":1,\\\"wanted\\\":1}},\\\"Armed Robbery\\\":{\\\"name\\\":\\\"Armed Robbery\\\",\\\"desc\\\":\\\"Assign this gang member to commit armed robbery on stores, banks and armored cars<br><br>Earns money - Increases respect - Increases wanted level\\\",\\\"isHacking\\\":false,\\\"isCombat\\\":true,\\\"baseRespect\\\":0.00014,\\\"baseWanted\\\":0.1,\\\"baseMoney\\\":114,\\\"hackWeight\\\":20,\\\"strWeight\\\":15,\\\"defWeight\\\":15,\\\"dexWeight\\\":20,\\\"agiWeight\\\":10,\\\"chaWeight\\\":20,\\\"difficulty\\\":20,\\\"territory\\\":{\\\"money\\\":1,\\\"respect\\\":1,\\\"wanted\\\":1}},\\\"Traffick Illegal Arms\\\":{\\\"name\\\":\\\"Traffick Illegal Arms\\\",\\\"desc\\\":\\\"Assign this gang member to traffick illegal arms<br><br>Earns money - Increases respect - Increases wanted level - Scales heavily with territory\\\",\\\"isHacking\\\":false,\\\"isCombat\\\":true,\\\"baseRespect\\\":0.0002,\\\"baseWanted\\\":0.24,\\\"baseMoney\\\":174,\\\"hackWeight\\\":15,\\\"strWeight\\\":20,\\\"defWeight\\\":20,\\\"dexWeight\\\":20,\\\"agiWeight\\\":0,\\\"chaWeight\\\":25,\\\"difficulty\\\":32,\\\"territory\\\":{\\\"money\\\":1.4,\\\"respect\\\":1.3,\\\"wanted\\\":1.25}},\\\"Threaten & Blackmail\\\":{\\\"name\\\":\\\"Threaten & Blackmail\\\",\\\"desc\\\":\\\"Assign this gang member to threaten and black mail high-profile targets<br><br>Earns money - Slightly increases respect - Slightly increases wanted level\\\",\\\"isHacking\\\":false,\\\"isCombat\\\":true,\\\"baseRespect\\\":0.0002,\\\"baseWanted\\\":0.125,\\\"baseMoney\\\":72,\\\"hackWeight\\\":25,\\\"strWeight\\\":25,\\\"defWeight\\\":0,\\\"dexWeight\\\":25,\\\"agiWeight\\\":0,\\\"chaWeight\\\":25,\\\"difficulty\\\":28,\\\"territory\\\":{\\\"money\\\":1,\\\"respect\\\":1,\\\"wanted\\\":1}},\\\"Human Trafficking\\\":{\\\"name\\\":\\\"Human Trafficking\\\",\\\"desc\\\":\\\"Assign this gang member to engage in human trafficking operations<br><br>Earns money - Increases respect - Increases wanted level - Scales heavily with territory\\\",\\\"isHacking\\\":false,\\\"isCombat\\\":true,\\\"baseRespect\\\":0.004,\\\"baseWanted\\\":1.25,\\\"baseMoney\\\":360,\\\"hackWeight\\\":30,\\\"strWeight\\\":5,\\\"defWeight\\\":5,\\\"dexWeight\\\":30,\\\"agiWeight\\\":0,\\\"chaWeight\\\":30,\\\"difficulty\\\":36,\\\"territory\\\":{\\\"money\\\":1.5,\\\"respect\\\":1.5,\\\"wanted\\\":1.6}},\\\"Terrorism\\\":{\\\"name\\\":\\\"Terrorism\\\",\\\"desc\\\":\\\"Assign this gang member to commit acts of terrorism<br><br>Greatly increases respect - Greatly increases wanted level - Scales heavily with territory\\\",\\\"isHacking\\\":false,\\\"isCombat\\\":true,\\\"baseRespect\\\":0.01,\\\"baseWanted\\\":6,\\\"baseMoney\\\":0,\\\"hackWeight\\\":20,\\\"strWeight\\\":20,\\\"defWeight\\\":20,\\\"dexWeight\\\":20,\\\"agiWeight\\\":0,\\\"chaWeight\\\":20,\\\"difficulty\\\":36,\\\"territory\\\":{\\\"money\\\":1,\\\"respect\\\":2,\\\"wanted\\\":2}},\\\"Vigilante Justice\\\":{\\\"name\\\":\\\"Vigilante Justice\\\",\\\"desc\\\":\\\"Assign this gang member to be a vigilante and protect the city from criminals<br><br>Decreases wanted level\\\",\\\"isHacking\\\":true,\\\"isCombat\\\":true,\\\"baseRespect\\\":0,\\\"baseWanted\\\":-0.001,\\\"baseMoney\\\":0,\\\"hackWeight\\\":20,\\\"strWeight\\\":20,\\\"defWeight\\\":20,\\\"dexWeight\\\":20,\\\"agiWeight\\\":20,\\\"chaWeight\\\":0,\\\"difficulty\\\":1,\\\"territory\\\":{\\\"money\\\":1,\\\"respect\\\":1,\\\"wanted\\\":0.9}},\\\"Train Combat\\\":{\\\"name\\\":\\\"Train Combat\\\",\\\"desc\\\":\\\"Assign this gang member to increase their combat stats (str, def, dex, agi)\\\",\\\"isHacking\\\":true,\\\"isCombat\\\":true,\\\"baseRespect\\\":0,\\\"baseWanted\\\":0,\\\"baseMoney\\\":0,\\\"hackWeight\\\":0,\\\"strWeight\\\":25,\\\"defWeight\\\":25,\\\"dexWeight\\\":25,\\\"agiWeight\\\":25,\\\"chaWeight\\\":0,\\\"difficulty\\\":100,\\\"territory\\\":{\\\"money\\\":1,\\\"respect\\\":1,\\\"wanted\\\":1}},\\\"Train Hacking\\\":{\\\"name\\\":\\\"Train Hacking\\\",\\\"desc\\\":\\\"Assign this gang member to train their hacking skills\\\",\\\"isHacking\\\":true,\\\"isCombat\\\":true,\\\"baseRespect\\\":0,\\\"baseWanted\\\":0,\\\"baseMoney\\\":0,\\\"hackWeight\\\":100,\\\"strWeight\\\":0,\\\"defWeight\\\":0,\\\"dexWeight\\\":0,\\\"agiWeight\\\":0,\\\"chaWeight\\\":0,\\\"difficulty\\\":45,\\\"territory\\\":{\\\"money\\\":1,\\\"respect\\\":1,\\\"wanted\\\":1}},\\\"Train Charisma\\\":{\\\"name\\\":\\\"Train Charisma\\\",\\\"desc\\\":\\\"Assign this gang member to train their charisma\\\",\\\"isHacking\\\":true,\\\"isCombat\\\":true,\\\"baseRespect\\\":0,\\\"baseWanted\\\":0,\\\"baseMoney\\\":0,\\\"hackWeight\\\":0,\\\"strWeight\\\":0,\\\"defWeight\\\":0,\\\"dexWeight\\\":0,\\\"agiWeight\\\":0,\\\"chaWeight\\\":100,\\\"difficulty\\\":8,\\\"territory\\\":{\\\"money\\\":1,\\\"respect\\\":1,\\\"wanted\\\":1}},\\\"Territory Warfare\\\":{\\\"name\\\":\\\"Territory Warfare\\\",\\\"desc\\\":\\\"Assign this gang member to engage in territorial warfare with other gangs. Members assigned to this task will help increase your gang's territory and will defend your territory from being taken.\\\",\\\"isHacking\\\":true,\\\"isCombat\\\":true,\\\"baseRespect\\\":0,\\\"baseWanted\\\":0,\\\"baseMoney\\\":0,\\\"hackWeight\\\":15,\\\"strWeight\\\":20,\\\"defWeight\\\":20,\\\"dexWeight\\\":20,\\\"agiWeight\\\":20,\\\"chaWeight\\\":5,\\\"difficulty\\\":5,\\\"territory\\\":{\\\"money\\\":1,\\\"respect\\\":1,\\\"wanted\\\":1}}}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-member-names.txt\",\"text\":\"[\\\"Instagram\\\",\\\"Netflix\\\",\\\"Facebook\\\",\\\"Imgur\\\",\\\"Apple\\\",\\\"Microsoft\\\",\\\"GitHub\\\",\\\"DropBox\\\",\\\"Oomnitza\\\",\\\"Google\\\",\\\"WhatsApp\\\",\\\"Salesforce\\\"]\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-getMemberInformation.txt\",\"text\":\"{\\\"Instagram\\\":{\\\"name\\\":\\\"Instagram\\\",\\\"task\\\":\\\"Train Combat\\\",\\\"earnedRespect\\\":0,\\\"hack\\\":28,\\\"str\\\":906039,\\\"def\\\":296972,\\\"dex\\\":19248,\\\"agi\\\":65730,\\\"cha\\\":17,\\\"hack_exp\\\":0,\\\"str_exp\\\":7482989.40482402,\\\"def_exp\\\":2973766.4711839436,\\\"dex_exp\\\":539452.9286445054,\\\"agi_exp\\\":942816.62755398,\\\"cha_exp\\\":0,\\\"hack_mult\\\":2.2723515045000005,\\\"str_mult\\\":29.206517322318344,\\\"def_mult\\\":15.515548794797638,\\\"dex_mult\\\":2.2200750000000005,\\\"agi_mult\\\":7.285657510010882,\\\"cha_mult\\\":1.4592614400000004,\\\"hack_asc_mult\\\":12.66716974098487,\\\"str_asc_mult\\\":101.21224168613729,\\\"def_asc_mult\\\":69.10452145792483,\\\"dex_asc_mult\\\":38.98927561034455,\\\"agi_asc_mult\\\":37.55527104483968,\\\"cha_asc_mult\\\":11.766594129754372,\\\"hack_asc_points\\\":320914.3784938454,\\\"str_asc_points\\\":20487835.734266132,\\\"def_asc_points\\\":9550869.771857586,\\\"dex_asc_points\\\":3040327.225238817,\\\"agi_asc_points\\\":2820796.7665027473,\\\"cha_asc_points\\\":276905.4748287401,\\\"upgrades\\\":[\\\"Baseball Bat\\\",\\\"Bulletproof Vest\\\",\\\"Ford Flex V20\\\",\\\"Full Body Armor\\\",\\\"NUKE Rootkit\\\",\\\"ATX1070 Superbike\\\",\\\"Katana\\\",\\\"Mercedes-Benz S9001\\\",\\\"Glock 18C\\\",\\\"Liquid Body Armor\\\",\\\"Soulstealer Rootkit\\\",\\\"White Ferrari\\\",\\\"Graphene Plating Armor\\\",\\\"Hmap Node\\\",\\\"P90C\\\",\\\"Steyr AUG\\\",\\\"Demon Rootkit\\\",\\\"Jack the Ripper\\\",\\\"AK-47\\\",\\\"M15A10 Assault Rifle\\\",\\\"AWM Sniper Rifle\\\"],\\\"augmentations\\\":[\\\"Bionic Arms\\\",\\\"Bionic Legs\\\",\\\"Nanofiber Weave\\\",\\\"Bionic Spine\\\",\\\"Synfibril Muscle\\\",\\\"BrachiBlades\\\",\\\"Synthetic Heart\\\",\\\"Graphene Bone Lacings\\\",\\\"BitWire\\\",\\\"DataJack\\\",\\\"Neuralstimulator\\\"],\\\"respectGain\\\":0,\\\"wantedLevelGain\\\":0,\\\"moneyGain\\\":0},\\\"Netflix\\\":{\\\"name\\\":\\\"Netflix\\\",\\\"task\\\":\\\"Train Combat\\\",\\\"earnedRespect\\\":0,\\\"hack\\\":28,\\\"str\\\":810992,\\\"def\\\":269315,\\\"dex\\\":19302,\\\"agi\\\":62733,\\\"cha\\\":16,\\\"hack_exp\\\":0,\\\"str_exp\\\":12121524.961086841,\\\"def_exp\\\":4826166.229510552,\\\"dex_exp\\\":896792.8369215224,\\\"agi_exp\\\":1557612.2082293632,\\\"cha_exp\\\":0,\\\"hack_mult\\\":2.2723515045000005,\\\"str_mult\\\":29.206517322318344,\\\"def_mult\\\":15.515548794797638,\\\"dex_mult\\\":2.2200750000000005,\\\"agi_mult\\\":7.285657510010882,\\\"cha_mult\\\":1.4592614400000004,\\\"hack_asc_mult\\\":12.536599078908406,\\\"str_asc_mult\\\":86.25131321877606,\\\"def_asc_mult\\\":59.34902663012474,\\\"dex_asc_mult\\\":36.43476272081638,\\\"agi_asc_mult\\\":33.59702557693275,\\\"cha_asc_mult\\\":11.113662045417446,\\\"hack_asc_points\\\":314332.6329305742,\\\"str_asc_points\\\":14878578.063926827,\\\"def_asc_points\\\":7044613.9238865115,\\\"dex_asc_points\\\":2654983.869044382,\\\"agi_asc_points\\\":2257520.2552341465,\\\"cha_asc_points\\\":247026.96811950457,\\\"upgrades\\\":[\\\"Baseball Bat\\\",\\\"Bulletproof Vest\\\",\\\"Ford Flex V20\\\",\\\"Full Body Armor\\\",\\\"NUKE Rootkit\\\",\\\"ATX1070 Superbike\\\",\\\"Katana\\\",\\\"Mercedes-Benz S9001\\\",\\\"Glock 18C\\\",\\\"Liquid Body Armor\\\",\\\"Soulstealer Rootkit\\\",\\\"White Ferrari\\\",\\\"Graphene Plating Armor\\\",\\\"Hmap Node\\\",\\\"P90C\\\",\\\"Steyr AUG\\\",\\\"Demon Rootkit\\\",\\\"Jack the Ripper\\\",\\\"AK-47\\\",\\\"M15A10 Assault Rifle\\\",\\\"AWM Sniper Rifle\\\"],\\\"augmentations\\\":[\\\"Bionic Arms\\\",\\\"Bionic Legs\\\",\\\"Nanofiber Weave\\\",\\\"Bionic Spine\\\",\\\"Synfibril Muscle\\\",\\\"BrachiBlades\\\",\\\"Synthetic Heart\\\",\\\"Graphene Bone Lacings\\\",\\\"BitWire\\\",\\\"DataJack\\\",\\\"Neuralstimulator\\\"],\\\"respectGain\\\":0,\\\"wantedLevelGain\\\":0,\\\"moneyGain\\\":0},\\\"Facebook\\\":{\\\"name\\\":\\\"Facebook\\\",\\\"task\\\":\\\"Train Combat\\\",\\\"earnedRespect\\\":0,\\\"hack\\\":41,\\\"str\\\":737668,\\\"def\\\":252378,\\\"dex\\\":23466,\\\"agi\\\":63688,\\\"cha\\\":23,\\\"hack_exp\\\":0,\\\"str_exp\\\":12694411.196830971,\\\"def_exp\\\":5185772.574530668,\\\"dex_exp\\\":1201252.8186901358,\\\"agi_exp\\\":1790054.2622743929,\\\"cha_exp\\\":0,\\\"hack_mult\\\":2.2723515045000005,\\\"str_mult\\\":29.206517322318344,\\\"def_mult\\\":15.515548794797638,\\\"dex_mult\\\":2.2200750000000005,\\\"agi_mult\\\":7.285657510010882,\\\"cha_mult\\\":1.4592614400000004,\\\"hack_asc_mult\\\":18.329222581047286,\\\"str_asc_mult\\\":78.0946409267656,\\\"def_asc_mult\\\":55.18280011625231,\\\"dex_asc_mult\\\":42.625166290101156,\\\"agi_asc_mult\\\":33.52648799000922,\\\"cha_asc_mult\\\":16.345975739870752,\\\"hack_asc_points\\\":671920.8008511475,\\\"str_asc_points\\\":12197545.882960904,\\\"def_asc_points\\\":6090282.857340512,\\\"dex_asc_points\\\":3633809.6025175513,\\\"agi_asc_points\\\":2248050.7938884655,\\\"cha_asc_points\\\":534381.8457768863,\\\"upgrades\\\":[\\\"Baseball Bat\\\",\\\"Bulletproof Vest\\\",\\\"Ford Flex V20\\\",\\\"Full Body Armor\\\",\\\"NUKE Rootkit\\\",\\\"ATX1070 Superbike\\\",\\\"Katana\\\",\\\"Mercedes-Benz S9001\\\",\\\"Glock 18C\\\",\\\"Liquid Body Armor\\\",\\\"Soulstealer Rootkit\\\",\\\"White Ferrari\\\",\\\"Graphene Plating Armor\\\",\\\"Hmap Node\\\",\\\"P90C\\\",\\\"Steyr AUG\\\",\\\"Demon Rootkit\\\",\\\"Jack the Ripper\\\",\\\"AK-47\\\",\\\"M15A10 Assault Rifle\\\",\\\"AWM Sniper Rifle\\\"],\\\"augmentations\\\":[\\\"Bionic Arms\\\",\\\"Bionic Legs\\\",\\\"Nanofiber Weave\\\",\\\"Bionic Spine\\\",\\\"Synfibril Muscle\\\",\\\"BrachiBlades\\\",\\\"Synthetic Heart\\\",\\\"Graphene Bone Lacings\\\",\\\"BitWire\\\",\\\"DataJack\\\",\\\"Neuralstimulator\\\"],\\\"respectGain\\\":0,\\\"wantedLevelGain\\\":0,\\\"moneyGain\\\":0},\\\"Imgur\\\":{\\\"name\\\":\\\"Imgur\\\",\\\"task\\\":\\\"Vigilante Justice\\\",\\\"earnedRespect\\\":9970103.831738777,\\\"hack\\\":7307,\\\"str\\\":541637,\\\"def\\\":190626,\\\"dex\\\":19741,\\\"agi\\\":42448,\\\"cha\\\":4080,\\\"hack_exp\\\":39150.47931636452,\\\"str_exp\\\":1767191.2587472205,\\\"def_exp\\\":754164.8533328292,\\\"dex_exp\\\":244073.2375757479,\\\"agi_exp\\\":230924.91503782957,\\\"cha_exp\\\":28411.54570033384,\\\"hack_mult\\\":2.2723515045000005,\\\"str_mult\\\":29.206517322318344,\\\"def_mult\\\":15.515548794797638,\\\"dex_mult\\\":2.2200750000000005,\\\"agi_mult\\\":7.285657510010882,\\\"cha_mult\\\":1.4592614400000004,\\\"hack_asc_mult\\\":23.16376383632619,\\\"str_asc_mult\\\":71.23781624377952,\\\"def_asc_mult\\\":52.709887904161825,\\\"dex_asc_mult\\\":45.12980380481023,\\\"agi_asc_mult\\\":29.837565956888998,\\\"cha_asc_mult\\\":21.717971924992902,\\\"hack_asc_points\\\":1073119.9101301858,\\\"str_asc_points\\\":10149652.926364996,\\\"def_asc_points\\\":5556664.565738611,\\\"dex_asc_points\\\":4073398.3829213283,\\\"agi_asc_points\\\":1780560.6844634023,\\\"cha_asc_points\\\":943340.60906956,\\\"upgrades\\\":[\\\"Baseball Bat\\\",\\\"Bulletproof Vest\\\",\\\"Ford Flex V20\\\",\\\"Full Body Armor\\\",\\\"NUKE Rootkit\\\",\\\"ATX1070 Superbike\\\",\\\"Katana\\\",\\\"Mercedes-Benz S9001\\\",\\\"Glock 18C\\\",\\\"Liquid Body Armor\\\",\\\"Soulstealer Rootkit\\\",\\\"White Ferrari\\\",\\\"Graphene Plating Armor\\\",\\\"Hmap Node\\\",\\\"P90C\\\",\\\"Steyr AUG\\\",\\\"Demon Rootkit\\\",\\\"Jack the Ripper\\\",\\\"AK-47\\\",\\\"M15A10 Assault Rifle\\\",\\\"AWM Sniper Rifle\\\"],\\\"augmentations\\\":[\\\"Bionic Arms\\\",\\\"Bionic Legs\\\",\\\"Nanofiber Weave\\\",\\\"Bionic Spine\\\",\\\"Synfibril Muscle\\\",\\\"BrachiBlades\\\",\\\"Synthetic Heart\\\",\\\"Graphene Bone Lacings\\\",\\\"BitWire\\\",\\\"DataJack\\\",\\\"Neuralstimulator\\\"],\\\"respectGain\\\":0,\\\"wantedLevelGain\\\":-40.46917502396524,\\\"moneyGain\\\":0},\\\"Apple\\\":{\\\"name\\\":\\\"Apple\\\",\\\"task\\\":\\\"Train Combat\\\",\\\"earnedRespect\\\":0,\\\"hack\\\":27,\\\"str\\\":219977,\\\"def\\\":69215,\\\"dex\\\":14569,\\\"agi\\\":23654,\\\"cha\\\":19,\\\"hack_exp\\\":0,\\\"str_exp\\\":861753.0070793598,\\\"def_exp\\\":381255.5160377435,\\\"dex_exp\\\":162658.4241924428,\\\"agi_exp\\\":180119.92748694276,\\\"cha_exp\\\":0,\\\"hack_mult\\\":1.3282500000000002,\\\"str_mult\\\":8.325954,\\\"def_mult\\\":4.2697199999999995,\\\"dex_mult\\\":1.4949999999999999,\\\"agi_mult\\\":2.76,\\\"cha_mult\\\":1,\\\"hack_asc_mult\\\":20.943415841461114,\\\"str_asc_mult\\\":111.31300519711446,\\\"def_asc_mult\\\":76.7249025724578,\\\"dex_asc_mult\\\":52.94010011788575,\\\"agi_asc_mult\\\":45.748533157154704,\\\"cha_asc_mult\\\":19.093615125476877,\\\"hack_asc_points\\\":877253.3342167287,\\\"str_asc_points\\\":24781170.252025668,\\\"def_asc_points\\\":11773421.349506281,\\\"dex_asc_points\\\":5605308.400983533,\\\"agi_asc_points\\\":4185856.5720625664,\\\"cha_asc_points\\\":729132.2771196788,\\\"upgrades\\\":[],\\\"augmentations\\\":[\\\"Bionic Arms\\\",\\\"Bionic Legs\\\",\\\"Nanofiber Weave\\\",\\\"Bionic Spine\\\",\\\"Synfibril Muscle\\\",\\\"BrachiBlades\\\",\\\"Synthetic Heart\\\",\\\"Graphene Bone Lacings\\\",\\\"BitWire\\\",\\\"DataJack\\\",\\\"Neuralstimulator\\\"],\\\"respectGain\\\":0,\\\"wantedLevelGain\\\":0,\\\"moneyGain\\\":0},\\\"Microsoft\\\":{\\\"name\\\":\\\"Microsoft\\\",\\\"task\\\":\\\"Train Combat\\\",\\\"earnedRespect\\\":0,\\\"hack\\\":28,\\\"str\\\":925737,\\\"def\\\":300663,\\\"dex\\\":21462,\\\"agi\\\":69261,\\\"cha\\\":17,\\\"hack_exp\\\":0,\\\"str_exp\\\":15611387.0210829,\\\"def_exp\\\":6073715.10518258,\\\"dex_exp\\\":1109977.4294190782,\\\"agi_exp\\\":1929005.2242316587,\\\"cha_exp\\\":0,\\\"hack_mult\\\":2.2723515045000005,\\\"str_mult\\\":29.206517322318344,\\\"def_mult\\\":15.515548794797638,\\\"dex_mult\\\":2.2200750000000005,\\\"agi_mult\\\":7.285657510010882,\\\"cha_mult\\\":1.4592614400000004,\\\"hack_asc_mult\\\":12.689976991782201,\\\"str_asc_mult\\\":96.03955984067758,\\\"def_asc_mult\\\":64.63156681002195,\\\"dex_asc_mult\\\":39.3863571190928,\\\"agi_asc_mult\\\":36.12894415876297,\\\"cha_asc_mult\\\":12.154618670198035,\\\"hack_asc_points\\\":322071.03210392327,\\\"str_asc_points\\\":18447194.10878218,\\\"def_asc_points\\\":8354478.856636661,\\\"dex_asc_points\\\":3102570.2542254245,\\\"agi_asc_points\\\":2610601.2120540254,\\\"cha_asc_points\\\":295469.51003585325,\\\"upgrades\\\":[\\\"Baseball Bat\\\",\\\"Bulletproof Vest\\\",\\\"Ford Flex V20\\\",\\\"Full Body Armor\\\",\\\"NUKE Rootkit\\\",\\\"ATX1070 Superbike\\\",\\\"Katana\\\",\\\"Mercedes-Benz S9001\\\",\\\"Glock 18C\\\",\\\"Liquid Body Armor\\\",\\\"Soulstealer Rootkit\\\",\\\"White Ferrari\\\",\\\"Graphene Plating Armor\\\",\\\"Hmap Node\\\",\\\"P90C\\\",\\\"Steyr AUG\\\",\\\"Demon Rootkit\\\",\\\"Jack the Ripper\\\",\\\"AK-47\\\",\\\"M15A10 Assault Rifle\\\",\\\"AWM Sniper Rifle\\\"],\\\"augmentations\\\":[\\\"Bionic Arms\\\",\\\"Bionic Legs\\\",\\\"Nanofiber Weave\\\",\\\"Bionic Spine\\\",\\\"Synfibril Muscle\\\",\\\"BrachiBlades\\\",\\\"Synthetic Heart\\\",\\\"Graphene Bone Lacings\\\",\\\"BitWire\\\",\\\"DataJack\\\",\\\"Neuralstimulator\\\"],\\\"respectGain\\\":0,\\\"wantedLevelGain\\\":0,\\\"moneyGain\\\":0},\\\"GitHub\\\":{\\\"name\\\":\\\"GitHub\\\",\\\"task\\\":\\\"Train Combat\\\",\\\"earnedRespect\\\":0,\\\"hack\\\":30,\\\"str\\\":1048037,\\\"def\\\":334194,\\\"dex\\\":22839,\\\"agi\\\":79149,\\\"cha\\\":19,\\\"hack_exp\\\":0,\\\"str_exp\\\":3746884.2059640214,\\\"def_exp\\\":1487619.1902533795,\\\"dex_exp\\\":331553.9526481001,\\\"agi_exp\\\":536607.5148548377,\\\"cha_exp\\\":0,\\\"hack_mult\\\":2.2723515045000005,\\\"str_mult\\\":29.206517322318344,\\\"def_mult\\\":15.515548794797638,\\\"dex_mult\\\":2.2200750000000005,\\\"agi_mult\\\":7.285657510010882,\\\"cha_mult\\\":1.4592614400000004,\\\"hack_asc_mult\\\":13.547135176826316,\\\"str_asc_mult\\\":126.18634167177103,\\\"def_asc_mult\\\":84.52835340253084,\\\"dex_asc_mult\\\":49.7426026022379,\\\"agi_asc_mult\\\":48.889546096493866,\\\"cha_asc_mult\\\":13.406598220613304,\\\"hack_asc_points\\\":367049.74299840996,\\\"str_asc_points\\\":31845985.649009876,\\\"def_asc_points\\\":14290085.057886291,\\\"dex_asc_points\\\":4948653.02728833,\\\"agi_asc_points\\\":4780375.435042398,\\\"cha_asc_points\\\":359473.7516979037,\\\"upgrades\\\":[\\\"Baseball Bat\\\",\\\"Bulletproof Vest\\\",\\\"Ford Flex V20\\\",\\\"Full Body Armor\\\",\\\"NUKE Rootkit\\\",\\\"ATX1070 Superbike\\\",\\\"Katana\\\",\\\"Mercedes-Benz S9001\\\",\\\"Glock 18C\\\",\\\"Liquid Body Armor\\\",\\\"Soulstealer Rootkit\\\",\\\"White Ferrari\\\",\\\"Graphene Plating Armor\\\",\\\"Hmap Node\\\",\\\"P90C\\\",\\\"Steyr AUG\\\",\\\"Demon Rootkit\\\",\\\"Jack the Ripper\\\",\\\"AK-47\\\",\\\"M15A10 Assault Rifle\\\",\\\"AWM Sniper Rifle\\\"],\\\"augmentations\\\":[\\\"Bionic Arms\\\",\\\"Bionic Legs\\\",\\\"Nanofiber Weave\\\",\\\"Bionic Spine\\\",\\\"Synfibril Muscle\\\",\\\"BrachiBlades\\\",\\\"Synthetic Heart\\\",\\\"Graphene Bone Lacings\\\",\\\"BitWire\\\",\\\"DataJack\\\",\\\"Neuralstimulator\\\"],\\\"respectGain\\\":0,\\\"wantedLevelGain\\\":0,\\\"moneyGain\\\":0},\\\"DropBox\\\":{\\\"name\\\":\\\"DropBox\\\",\\\"task\\\":\\\"Train Combat\\\",\\\"earnedRespect\\\":0,\\\"hack\\\":21,\\\"str\\\":1152124,\\\"def\\\":371239,\\\"dex\\\":22830,\\\"agi\\\":85696,\\\"cha\\\":14,\\\"hack_exp\\\":0,\\\"str_exp\\\":9303857.476796621,\\\"def_exp\\\":3633367.7463865913,\\\"dex_exp\\\":626383.1939377752,\\\"agi_exp\\\":1191985.640691804,\\\"cha_exp\\\":0,\\\"hack_mult\\\":2.2723515045000005,\\\"str_mult\\\":29.206517322318344,\\\"def_mult\\\":15.515548794797638,\\\"dex_mult\\\":2.2200750000000005,\\\"agi_mult\\\":7.285657510010882,\\\"cha_mult\\\":1.4592614400000004,\\\"hack_asc_mult\\\":9.298173492674728,\\\"str_asc_mult\\\":125.84065279416913,\\\"def_asc_mult\\\":84.43236610127654,\\\"dex_asc_mult\\\":45.27221132619244,\\\"agi_asc_mult\\\":47.48043522935747,\\\"cha_asc_mult\\\":9.9954324231598,\\\"hack_asc_points\\\":172912.0605997579,\\\"str_asc_points\\\":31671739.791325256,\\\"def_asc_points\\\":14257648.890919985,\\\"dex_asc_points\\\":4099146.236726854,\\\"agi_asc_points\\\":4508783.4591384195,\\\"cha_asc_points\\\":199817.33865190836,\\\"upgrades\\\":[\\\"Baseball Bat\\\",\\\"Bulletproof Vest\\\",\\\"Ford Flex V20\\\",\\\"Full Body Armor\\\",\\\"NUKE Rootkit\\\",\\\"ATX1070 Superbike\\\",\\\"Katana\\\",\\\"Mercedes-Benz S9001\\\",\\\"Glock 18C\\\",\\\"Liquid Body Armor\\\",\\\"Soulstealer Rootkit\\\",\\\"White Ferrari\\\",\\\"Graphene Plating Armor\\\",\\\"Hmap Node\\\",\\\"P90C\\\",\\\"Steyr AUG\\\",\\\"Demon Rootkit\\\",\\\"Jack the Ripper\\\",\\\"AK-47\\\",\\\"M15A10 Assault Rifle\\\",\\\"AWM Sniper Rifle\\\"],\\\"augmentations\\\":[\\\"Bionic Arms\\\",\\\"Bionic Legs\\\",\\\"Nanofiber Weave\\\",\\\"Bionic Spine\\\",\\\"Synfibril Muscle\\\",\\\"BrachiBlades\\\",\\\"Synthetic Heart\\\",\\\"Graphene Bone Lacings\\\",\\\"BitWire\\\",\\\"DataJack\\\",\\\"Neuralstimulator\\\"],\\\"respectGain\\\":0,\\\"wantedLevelGain\\\":0,\\\"moneyGain\\\":0},\\\"Oomnitza\\\":{\\\"name\\\":\\\"Oomnitza\\\",\\\"task\\\":\\\"Train Combat\\\",\\\"earnedRespect\\\":0,\\\"hack\\\":7,\\\"str\\\":275575,\\\"def\\\":77674,\\\"dex\\\":9286,\\\"agi\\\":23950,\\\"cha\\\":6,\\\"hack_exp\\\":0,\\\"str_exp\\\":1042438.8941521086,\\\"def_exp\\\":417932.5086365844,\\\"dex_exp\\\":110116.21474675366,\\\"agi_exp\\\":180544.39088950964,\\\"cha_exp\\\":0,\\\"hack_mult\\\":1.3282500000000002,\\\"str_mult\\\":8.325954,\\\"def_mult\\\":4.2697199999999995,\\\"dex_mult\\\":1.4949999999999999,\\\"agi_mult\\\":2.76,\\\"cha_mult\\\":1,\\\"hack_asc_mult\\\":5.707148287680377,\\\"str_asc_mult\\\":135.9595823328957,\\\"def_asc_mult\\\":84.92244280457933,\\\"dex_asc_mult\\\":36.187250465230534,\\\"agi_asc_mult\\\":46.3015495239195,\\\"cha_asc_mult\\\":6.414797954025129,\\\"hack_asc_points\\\":65143.08315514612,\\\"str_asc_points\\\":36970016.0562709,\\\"def_asc_points\\\":14423642.583794095,\\\"dex_asc_points\\\":2619034.1924666543,\\\"agi_asc_points\\\":4287666.97663194,\\\"cha_asc_points\\\":82299.26558192995,\\\"upgrades\\\":[],\\\"augmentations\\\":[\\\"Bionic Arms\\\",\\\"Bionic Legs\\\",\\\"Nanofiber Weave\\\",\\\"Bionic Spine\\\",\\\"Synfibril Muscle\\\",\\\"BrachiBlades\\\",\\\"Synthetic Heart\\\",\\\"Graphene Bone Lacings\\\",\\\"BitWire\\\",\\\"DataJack\\\",\\\"Neuralstimulator\\\"],\\\"respectGain\\\":0,\\\"wantedLevelGain\\\":0,\\\"moneyGain\\\":0},\\\"Google\\\":{\\\"name\\\":\\\"Google\\\",\\\"task\\\":\\\"Train Combat\\\",\\\"earnedRespect\\\":0,\\\"hack\\\":12,\\\"str\\\":1182032,\\\"def\\\":355974,\\\"dex\\\":17529,\\\"agi\\\":81481,\\\"cha\\\":9,\\\"hack_exp\\\":0,\\\"str_exp\\\":9514068.163530821,\\\"def_exp\\\":3495371.978186569,\\\"dex_exp\\\":496188.52541584434,\\\"agi_exp\\\":1138404.9854808676,\\\"cha_exp\\\":0,\\\"hack_mult\\\":2.2723515045000005,\\\"str_mult\\\":29.206517322318344,\\\"def_mult\\\":15.515548794797638,\\\"dex_mult\\\":2.2200750000000005,\\\"agi_mult\\\":7.285657510010882,\\\"cha_mult\\\":1.4592614400000004,\\\"hack_asc_mult\\\":5.54147743343471,\\\"str_asc_mult\\\":128.81358242327417,\\\"def_asc_mult\\\":81.31590035167453,\\\"dex_asc_mult\\\":35.93905469235161,\\\"agi_asc_mult\\\":45.41463805091518,\\\"cha_asc_mult\\\":6.261692898220208,\\\"hack_asc_points\\\":61415.94429053229,\\\"str_asc_points\\\":33185878.0334353,\\\"def_asc_points\\\":13224551.300006924,\\\"dex_asc_points\\\":2583231.304359681,\\\"agi_asc_points\\\":4124978.698591266,\\\"cha_asc_points\\\":78417.59590324275,\\\"upgrades\\\":[\\\"Baseball Bat\\\",\\\"Bulletproof Vest\\\",\\\"Ford Flex V20\\\",\\\"Full Body Armor\\\",\\\"NUKE Rootkit\\\",\\\"ATX1070 Superbike\\\",\\\"Katana\\\",\\\"Mercedes-Benz S9001\\\",\\\"Glock 18C\\\",\\\"Liquid Body Armor\\\",\\\"Soulstealer Rootkit\\\",\\\"White Ferrari\\\",\\\"Graphene Plating Armor\\\",\\\"Hmap Node\\\",\\\"P90C\\\",\\\"Steyr AUG\\\",\\\"Demon Rootkit\\\",\\\"Jack the Ripper\\\",\\\"AK-47\\\",\\\"M15A10 Assault Rifle\\\",\\\"AWM Sniper Rifle\\\"],\\\"augmentations\\\":[\\\"Bionic Arms\\\",\\\"Bionic Legs\\\",\\\"Nanofiber Weave\\\",\\\"Bionic Spine\\\",\\\"Synfibril Muscle\\\",\\\"BrachiBlades\\\",\\\"Synthetic Heart\\\",\\\"Graphene Bone Lacings\\\",\\\"BitWire\\\",\\\"DataJack\\\",\\\"Neuralstimulator\\\"],\\\"respectGain\\\":0,\\\"wantedLevelGain\\\":0,\\\"moneyGain\\\":0},\\\"WhatsApp\\\":{\\\"name\\\":\\\"WhatsApp\\\",\\\"task\\\":\\\"Train Combat\\\",\\\"earnedRespect\\\":0,\\\"hack\\\":3,\\\"str\\\":319784,\\\"def\\\":91033,\\\"dex\\\":10329,\\\"agi\\\":30333,\\\"cha\\\":2,\\\"hack_exp\\\":0,\\\"str_exp\\\":1189104.3618873833,\\\"def_exp\\\":479909.72221944795,\\\"dex_exp\\\":120477.58111018031,\\\"agi_exp\\\":221047.63508834774,\\\"cha_exp\\\":0,\\\"hack_mult\\\":1.3282500000000002,\\\"str_mult\\\":8.325954,\\\"def_mult\\\":4.2697199999999995,\\\"dex_mult\\\":1.4949999999999999,\\\"agi_mult\\\":2.76,\\\"cha_mult\\\":1,\\\"hack_asc_mult\\\":2.644033872034093,\\\"str_asc_mult\\\":155.08835414658145,\\\"def_asc_mult\\\":97.51599862259457,\\\"dex_asc_mult\\\":39.59228359879444,\\\"agi_asc_mult\\\":56.68881748562298,\\\"cha_asc_mult\\\":2.8954659935151503,\\\"hack_asc_points\\\":13981.830232927194,\\\"str_asc_points\\\":48104795.183790945,\\\"def_asc_points\\\":19018739.974723734,\\\"dex_asc_points\\\":3135097.8411347345,\\\"agi_asc_points\\\":6427244.055836546,\\\"cha_asc_points\\\":16767.446639205355,\\\"upgrades\\\":[],\\\"augmentations\\\":[\\\"Bionic Arms\\\",\\\"Bionic Legs\\\",\\\"Nanofiber Weave\\\",\\\"Bionic Spine\\\",\\\"Synfibril Muscle\\\",\\\"BrachiBlades\\\",\\\"Synthetic Heart\\\",\\\"Graphene Bone Lacings\\\",\\\"BitWire\\\",\\\"DataJack\\\",\\\"Neuralstimulator\\\"],\\\"respectGain\\\":0,\\\"wantedLevelGain\\\":0,\\\"moneyGain\\\":0},\\\"Salesforce\\\":{\\\"name\\\":\\\"Salesforce\\\",\\\"task\\\":\\\"Train Combat\\\",\\\"earnedRespect\\\":0,\\\"hack\\\":1,\\\"str\\\":340804,\\\"def\\\":97823,\\\"dex\\\":5345,\\\"agi\\\":34712,\\\"cha\\\":1,\\\"hack_exp\\\":0,\\\"str_exp\\\":1258100.6474667,\\\"def_exp\\\":511010.6521007705,\\\"dex_exp\\\":69325.89431473166,\\\"agi_exp\\\":248216.54406586033,\\\"cha_exp\\\":0,\\\"hack_mult\\\":1.3282500000000002,\\\"str_mult\\\":8.325954,\\\"def_mult\\\":4.2697199999999995,\\\"dex_mult\\\":1.4949999999999999,\\\"agi_mult\\\":2.76,\\\"cha_mult\\\":1,\\\"hack_asc_mult\\\":1,\\\"str_asc_mult\\\":164.08716090878974,\\\"def_asc_mult\\\":103.83560019566187,\\\"dex_asc_mult\\\":22.78241680449022,\\\"agi_asc_mult\\\":63.6564257194507,\\\"cha_asc_mult\\\":1,\\\"hack_asc_points\\\":0,\\\"str_asc_points\\\":53849192.750214115,\\\"def_asc_points\\\":21563663.73598667,\\\"dex_asc_points\\\":1038077.0309070369,\\\"agi_asc_points\\\":8104281.07075189,\\\"cha_asc_points\\\":0,\\\"upgrades\\\":[],\\\"augmentations\\\":[\\\"Bionic Arms\\\",\\\"Bionic Legs\\\",\\\"Nanofiber Weave\\\",\\\"Bionic Spine\\\",\\\"Synfibril Muscle\\\",\\\"BrachiBlades\\\",\\\"Synthetic Heart\\\",\\\"Graphene Bone Lacings\\\",\\\"BitWire\\\",\\\"DataJack\\\",\\\"Neuralstimulator\\\"],\\\"respectGain\\\":0,\\\"wantedLevelGain\\\":0,\\\"moneyGain\\\":0}}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-faction-rep.txt\",\"text\":\"64727539.88673215\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-set-member-tasks.txt\",\"text\":\"true\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-other-gang-info.txt\",\"text\":\"{\\\"Slum Snakes\\\":{\\\"power\\\":201133.4298771141,\\\"territory\\\":0.9999999999999968},\\\"Tetrads\\\":{\\\"power\\\":543.6682029919622,\\\"territory\\\":0},\\\"The Syndicate\\\":{\\\"power\\\":555.7914074785195,\\\"territory\\\":0},\\\"The Dark Army\\\":{\\\"power\\\":443.4345705009913,\\\"territory\\\":0},\\\"Speakers for the Dead\\\":{\\\"power\\\":10.577893469064358,\\\"territory\\\":0},\\\"NiteSec\\\":{\\\"power\\\":525.9198334311711,\\\"territory\\\":0},\\\"The Black Hand\\\":{\\\"power\\\":3.3694116979718607,\\\"territory\\\":0}}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-recruit-member.txt\",\"text\":\"true\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-getAscensionResult.txt\",\"text\":\"{\\\"Instagram\\\":{\\\"respect\\\":0,\\\"hack\\\":1,\\\"str\\\":1.1688616238590799,\\\"def\\\":1.1454853113295418,\\\"dex\\\":1.0851468047518178,\\\"agi\\\":1.1553281905187334,\\\"cha\\\":1},\\\"Netflix\\\":{\\\"respect\\\":0,\\\"hack\\\":1,\\\"str\\\":1.3475371408477619,\\\"def\\\":1.2984487891503658,\\\"dex\\\":1.1566638694902072,\\\"agi\\\":1.300203485944278,\\\"cha\\\":1},\\\"Facebook\\\":{\\\"respect\\\":0,\\\"hack\\\":1,\\\"str\\\":1.4289884993814035,\\\"def\\\":1.3610369137995555,\\\"dex\\\":1.1535614258301277,\\\"agi\\\":1.3404599406453839,\\\"cha\\\":1},\\\"Imgur\\\":{\\\"respect\\\":9970103.831738777,\\\"hack\\\":1.0176249199368894,\\\"str\\\":1.0835283931656305,\\\"def\\\":1.0656252871906604,\\\"dex\\\":1.029406696816645,\\\"agi\\\":1.0626123418108493,\\\"cha\\\":1.014424936373339},\\\"Apple\\\":{\\\"respect\\\":0,\\\"hack\\\":1,\\\"str\\\":1.017383175214121,\\\"def\\\":1.0161737866036806,\\\"dex\\\":1.0144551555584926,\\\"agi\\\":1.0213742986251912,\\\"cha\\\":1},\\\"Microsoft\\\":{\\\"respect\\\":0,\\\"hack\\\":1,\\\"str\\\":1.359162300340773,\\\"def\\\":1.3144667412663043,\\\"dex\\\":1.165278438450352,\\\"agi\\\":1.3188877011601994,\\\"cha\\\":1},\\\"GitHub\\\":{\\\"respect\\\":0,\\\"hack\\\":1,\\\"str\\\":1.057574465458107,\\\"def\\\":1.0510715244173348,\\\"dex\\\":1.033025467286014,\\\"agi\\\":1.0548622459861687,\\\"cha\\\":1},\\\"DropBox\\\":{\\\"respect\\\":0,\\\"hack\\\":1,\\\"str\\\":1.1377910352447036,\\\"def\\\":1.1204851197846895,\\\"dex\\\":1.0737519137526967,\\\"agi\\\":1.124659853509923,\\\"cha\\\":1},\\\"Oomnitza\\\":{\\\"respect\\\":0,\\\"hack\\\":1,\\\"str\\\":1.014122074197453,\\\"def\\\":1.0144887888129506,\\\"dex\\\":1.0208187734333747,\\\"agi\\\":1.0209228305499203,\\\"cha\\\":1},\\\"Google\\\":{\\\"respect\\\":0,\\\"hack\\\":1,\\\"str\\\":1.134672538778569,\\\"def\\\":1.124714168971957,\\\"dex\\\":1.0918657293422556,\\\"agi\\\":1.1298142517562133,\\\"cha\\\":1},\\\"WhatsApp\\\":{\\\"respect\\\":0,\\\"hack\\\":1,\\\"str\\\":1.0123923364228185,\\\"def\\\":1.0126331636599473,\\\"dex\\\":1.0190597506973327,\\\"agi\\\":1.0171384404516515,\\\"cha\\\":1},\\\"Salesforce\\\":{\\\"respect\\\":0,\\\"hack\\\":1,\\\"str\\\":1.0117171870514734,\\\"def\\\":1.0118702816295195,\\\"dex\\\":1.032699402083136,\\\"agi\\\":1.0152840962720031,\\\"cha\\\":1}}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-augs.txt\",\"text\":\"[\\\"Unstable Circadian Modulator\\\",\\\"HemoRecirculator\\\",\\\"Augmented Targeting I\\\",\\\"Augmented Targeting II\\\",\\\"Augmented Targeting III\\\",\\\"Synthetic Heart\\\",\\\"Synfibril Muscle\\\",\\\"Combat Rib I\\\",\\\"Combat Rib II\\\",\\\"Combat Rib III\\\",\\\"Nanofiber Weave\\\",\\\"NEMEAN Subdermal Weave\\\",\\\"Wired Reflexes\\\",\\\"Graphene Bone Lacings\\\",\\\"Bionic Spine\\\",\\\"Graphene Bionic Spine Upgrade\\\",\\\"Bionic Legs\\\",\\\"Graphene Bionic Legs Upgrade\\\",\\\"Speech Processor Implant\\\",\\\"TITN-41 Gene-Modification Injection\\\",\\\"Enhanced Social Interaction Implant\\\",\\\"BitWire\\\",\\\"Artificial Bio-neural Network Implant\\\",\\\"Artificial Synaptic Potentiation\\\",\\\"Enhanced Myelin Sheathing\\\",\\\"Synaptic Enhancement Implant\\\",\\\"Neural-Retention Enhancement\\\",\\\"DataJack\\\",\\\"Embedded Netburner Module\\\",\\\"Embedded Netburner Module Core Implant\\\",\\\"Embedded Netburner Module Core V2 Upgrade\\\",\\\"Embedded Netburner Module Core V3 Upgrade\\\",\\\"Embedded Netburner Module Analyze Engine\\\",\\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\\"Neuralstimulator\\\",\\\"Neural Accelerator\\\",\\\"Cranial Signal Processors - Gen I\\\",\\\"Cranial Signal Processors - Gen II\\\",\\\"Cranial Signal Processors - Gen III\\\",\\\"Cranial Signal Processors - Gen IV\\\",\\\"Cranial Signal Processors - Gen V\\\",\\\"Neuronal Densification\\\",\\\"Nuoptimal Nootropic Injector Implant\\\",\\\"Speech Enhancement\\\",\\\"FocusWire\\\",\\\"PC Direct-Neural Interface\\\",\\\"PC Direct-Neural Interface Optimization Submodule\\\",\\\"PC Direct-Neural Interface NeuroNet Injector\\\",\\\"ADR-V1 Pheromone Gene\\\",\\\"ADR-V2 Pheromone Gene\\\",\\\"The Shadow's Simulacrum\\\",\\\"Hacknet Node CPU Architecture Neural-Upload\\\",\\\"Hacknet Node Cache Architecture Neural-Upload\\\",\\\"Hacknet Node NIC Architecture Neural-Upload\\\",\\\"Hacknet Node Kernel Direct-Neural Interface\\\",\\\"Hacknet Node Core Direct-Neural Interface\\\",\\\"Neurotrainer I\\\",\\\"Neurotrainer II\\\",\\\"Neurotrainer III\\\",\\\"HyperSight Corneal Implant\\\",\\\"LuminCloaking-V1 Skin Implant\\\",\\\"LuminCloaking-V2 Skin Implant\\\",\\\"SmartSonar Implant\\\",\\\"Power Recirculation Core\\\",\\\"QLink\\\",\\\"SPTN-97 Gene Modification\\\",\\\"ECorp HVMind Implant\\\",\\\"CordiARC Fusion Reactor\\\",\\\"SmartJaw\\\",\\\"Neotra\\\",\\\"Xanipher\\\",\\\"Hydroflame Left Arm\\\",\\\"nextSENS Gene Modification\\\",\\\"OmniTek InfoLoad\\\",\\\"Photosynthetic Cells\\\",\\\"BitRunners Neurolink\\\",\\\"The Black Hand\\\",\\\"CRTX42-AA Gene Modification\\\",\\\"Neuregen Gene Modification\\\",\\\"CashRoot Starter Kit\\\",\\\"NutriGen Implant\\\",\\\"PCMatrix\\\",\\\"INFRARET Enhancement\\\",\\\"DermaForce Particle Barrier\\\",\\\"Graphene BrachiBlades Upgrade\\\",\\\"Graphene Bionic Arms Upgrade\\\",\\\"BrachiBlades\\\",\\\"Bionic Arms\\\",\\\"Social Negotiation Assistant (S.N.A)\\\",\\\"Neuroreceptor Management Implant\\\"]\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/player-augs-purchased.txt\",\"text\":\"[\\\"Neuregen Gene Modification\\\",\\\"CRTX42-AA Gene Modification\\\",\\\"Power Recirculation Core\\\",\\\"Neurotrainer III\\\",\\\"Neurotrainer II\\\",\\\"Neurotrainer I\\\",\\\"Cranial Signal Processors - Gen I\\\",\\\"Synaptic Enhancement Implant\\\",\\\"BitWire\\\",\\\"NeuroFlux Governor\\\",\\\"The Black Hand\\\",\\\"BitRunners Neurolink\\\",\\\"OmniTek InfoLoad\\\",\\\"nextSENS Gene Modification\\\",\\\"Xanipher\\\",\\\"ECorp HVMind Implant\\\",\\\"SPTN-97 Gene Modification\\\",\\\"HyperSight Corneal Implant\\\",\\\"PC Direct-Neural Interface\\\",\\\"PC Direct-Neural Interface Optimization Submodule\\\",\\\"FocusWire\\\",\\\"Neuronal Densification\\\",\\\"Cranial Signal Processors - Gen II\\\",\\\"Cranial Signal Processors - Gen III\\\",\\\"Artificial Synaptic Potentiation\\\",\\\"Social Negotiation Assistant (S.N.A)\\\",\\\"ADR-V1 Pheromone Gene\\\",\\\"QLink\\\",\\\"PC Direct-Neural Interface NeuroNet Injector\\\",\\\"Cranial Signal Processors - Gen IV\\\",\\\"Neural Accelerator\\\",\\\"Neuralstimulator\\\",\\\"Embedded Netburner Module\\\",\\\"Embedded Netburner Module Analyze Engine\\\",\\\"Embedded Netburner Module Core Implant\\\",\\\"Embedded Netburner Module Core V2 Upgrade\\\",\\\"DataJack\\\",\\\"Neural-Retention Enhancement\\\",\\\"Enhanced Myelin Sheathing\\\",\\\"Artificial Bio-neural Network Implant\\\"]\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/aug-repreqs.txt\",\"text\":\"{\\\"Unstable Circadian Modulator\\\":362500,\\\"HemoRecirculator\\\":10000,\\\"Augmented Targeting I\\\":5000,\\\"Augmented Targeting II\\\":8750,\\\"Augmented Targeting III\\\":27500,\\\"Synthetic Heart\\\":750000,\\\"Synfibril Muscle\\\":437500,\\\"Combat Rib I\\\":7500,\\\"Combat Rib II\\\":18750,\\\"Combat Rib III\\\":35000,\\\"Nanofiber Weave\\\":37500,\\\"NEMEAN Subdermal Weave\\\":875000,\\\"Wired Reflexes\\\":1250,\\\"Graphene Bone Lacings\\\":1125000,\\\"Bionic Spine\\\":45000,\\\"Graphene Bionic Spine Upgrade\\\":1625000,\\\"Bionic Legs\\\":150000,\\\"Graphene Bionic Legs Upgrade\\\":750000,\\\"Speech Processor Implant\\\":7500,\\\"TITN-41 Gene-Modification Injection\\\":25000,\\\"Enhanced Social Interaction Implant\\\":375000,\\\"BitWire\\\":3750,\\\"Artificial Bio-neural Network Implant\\\":275000,\\\"Artificial Synaptic Potentiation\\\":6250,\\\"Enhanced Myelin Sheathing\\\":100000,\\\"Synaptic Enhancement Implant\\\":2000,\\\"Neural-Retention Enhancement\\\":20000,\\\"DataJack\\\":112500,\\\"Embedded Netburner Module\\\":15000,\\\"Embedded Netburner Module Core Implant\\\":175000,\\\"Embedded Netburner Module Core V2 Upgrade\\\":1000000,\\\"Embedded Netburner Module Core V3 Upgrade\\\":1750000,\\\"Embedded Netburner Module Analyze Engine\\\":625000,\\\"Embedded Netburner Module Direct Memory Access Upgrade\\\":1000000,\\\"Neuralstimulator\\\":50000,\\\"Neural Accelerator\\\":200000,\\\"Cranial Signal Processors - Gen I\\\":10000,\\\"Cranial Signal Processors - Gen II\\\":18750,\\\"Cranial Signal Processors - Gen III\\\":50000,\\\"Cranial Signal Processors - Gen IV\\\":125000,\\\"Cranial Signal Processors - Gen V\\\":250000,\\\"Neuronal Densification\\\":187500,\\\"Nuoptimal Nootropic Injector Implant\\\":5000,\\\"Speech Enhancement\\\":2500,\\\"FocusWire\\\":75000,\\\"PC Direct-Neural Interface\\\":375000,\\\"PC Direct-Neural Interface Optimization Submodule\\\":500000,\\\"PC Direct-Neural Interface NeuroNet Injector\\\":1500000,\\\"ADR-V1 Pheromone Gene\\\":3750,\\\"ADR-V2 Pheromone Gene\\\":62500,\\\"The Shadow's Simulacrum\\\":37500,\\\"Hacknet Node CPU Architecture Neural-Upload\\\":3750,\\\"Hacknet Node Cache Architecture Neural-Upload\\\":2500,\\\"Hacknet Node NIC Architecture Neural-Upload\\\":1875,\\\"Hacknet Node Kernel Direct-Neural Interface\\\":7500,\\\"Hacknet Node Core Direct-Neural Interface\\\":12500,\\\"Neurotrainer I\\\":1000,\\\"Neurotrainer II\\\":10000,\\\"Neurotrainer III\\\":25000,\\\"HyperSight Corneal Implant\\\":150000,\\\"LuminCloaking-V1 Skin Implant\\\":1500,\\\"LuminCloaking-V2 Skin Implant\\\":5000,\\\"SmartSonar Implant\\\":22500,\\\"Power Recirculation Core\\\":25000,\\\"QLink\\\":1875000,\\\"SPTN-97 Gene Modification\\\":1250000,\\\"ECorp HVMind Implant\\\":1500000,\\\"CordiARC Fusion Reactor\\\":1125000,\\\"SmartJaw\\\":375000,\\\"Neotra\\\":562500,\\\"Xanipher\\\":875000,\\\"Hydroflame Left Arm\\\":1250000,\\\"nextSENS Gene Modification\\\":437500,\\\"OmniTek InfoLoad\\\":625000,\\\"Photosynthetic Cells\\\":562500,\\\"BitRunners Neurolink\\\":875000,\\\"The Black Hand\\\":100000,\\\"CRTX42-AA Gene Modification\\\":45000,\\\"Neuregen Gene Modification\\\":37500,\\\"CashRoot Starter Kit\\\":12500,\\\"NutriGen Implant\\\":6250,\\\"PCMatrix\\\":100000,\\\"INFRARET Enhancement\\\":7500,\\\"DermaForce Particle Barrier\\\":15000,\\\"Graphene BrachiBlades Upgrade\\\":225000,\\\"Graphene Bionic Arms Upgrade\\\":500000,\\\"BrachiBlades\\\":12500,\\\"Bionic Arms\\\":62500,\\\"Social Negotiation Assistant (S.N.A)\\\":6250,\\\"Neuroreceptor Management Implant\\\":75000}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-ascend-member.txt\",\"text\":\"{\\\"respect\\\":0,\\\"hack\\\":1,\\\"str\\\":1.359162300340773,\\\"def\\\":1.3144667412663043,\\\"dex\\\":1.165278438450352,\\\"agi\\\":1.3188877011601994,\\\"cha\\\":1}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-upgrade-members.txt\",\"text\":\"true\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/resources/manifest.txt\",\"text\":\"./lib/Helpers.js\\n./Orchestrator/Backdoorer.js\\n./Orchestrator/Boot.js\\n./Orchestrator/Common/Dprint.js\\n./Orchestrator/Common/GenericFunctions.js\\n./Orchestrator/Config/Config.js\\n./Orchestrator/Config/Debug.js\\n./Orchestrator/Config/Singularity.js\\n./Orchestrator/Console.js\\n./Orchestrator/HackManager/algorithm/Common/CalculateThreadsRatio.js\\n./Orchestrator/HackManager/algorithm/Common/helpers.js\\n./Orchestrator/HackManager/algorithm/GrowWeakenAlgorithm.js\\n./Orchestrator/HackManager/algorithm/MoneyHackAlgorithm.js\\n./Orchestrator/HackManager/algorithm/XpHackAlgorithm.js\\n./Orchestrator/HackManager/conductor/GrowWeakenConductor.js\\n./Orchestrator/HackManager/conductor/MoneyHackConductor.js\\n./Orchestrator/HackManager/conductor/XpHackConductor.js\\n./Orchestrator/HackManager/enum.js\\n./Orchestrator/HackManager/hack.js\\n./Orchestrator/HackManager/manager.js\\n./Orchestrator/HackManager/script/grow.js\\n./Orchestrator/HackManager/script/hack.js\\n./Orchestrator/HackManager/script/weaken.js\\n./Orchestrator/HackManager/script/xp.js\\n./Orchestrator/MessageManager/class.js\\n./Orchestrator/MessageManager/enum.js\\n./Orchestrator/MessageManager/manager.js\\n./Orchestrator/ServerManager/manager.js\\n./Orchestrator/SingularityManager/manager.js\\n./Orchestrator/TargetManager/manager.js\\n./Orchestrator/ThreadManager/common.js\\n./Orchestrator/ThreadManager/manager.js\\n./Orchestrator/ThreadManager/script/share.js\\n./Orchestrator/utils/initRepo.js\\n./Orchestrator/utils/pullFiles.js\\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"augmap.json.txt\",\"text\":\"{\\n  \\\"BitWire\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_mult\\\": 1.05\\n    },\\n    \\\"repreq\\\": 3750,\\n    \\\"cost\\\": 10000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"CyberSec\\\",\\n      \\\"NiteSec\\\",\\n      \\\"Slum Snakes\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"Synaptic Enhancement Implant\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_speed_mult\\\": 1.03\\n    },\\n    \\\"repreq\\\": 2000,\\n    \\\"cost\\\": 7500000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"CyberSec\\\",\\n      \\\"Aevum\\\",\\n      \\\"Slum Snakes\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"Cranial Signal Processors - Gen I\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_mult\\\": 1.05,\\n      \\\"hacking_speed_mult\\\": 1.01\\n    },\\n    \\\"repreq\\\": 10000,\\n    \\\"cost\\\": 70000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"CyberSec\\\",\\n      \\\"Slum Snakes\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"Cranial Signal Processors - Gen II\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_mult\\\": 1.07,\\n      \\\"hacking_chance_mult\\\": 1.05,\\n      \\\"hacking_speed_mult\\\": 1.02\\n    },\\n    \\\"repreq\\\": 18750,\\n    \\\"cost\\\": 125000000,\\n    \\\"prereqs\\\": [\\n      \\\"Cranial Signal Processors - Gen I\\\"\\n    ],\\n    \\\"factions\\\": [\\n      \\\"CyberSec\\\",\\n      \\\"NiteSec\\\",\\n      \\\"Slum Snakes\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"NeuroFlux Governor\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_mult\\\": 1.01,\\n      \\\"strength_mult\\\": 1.01,\\n      \\\"defense_mult\\\": 1.01,\\n      \\\"dexterity_mult\\\": 1.01,\\n      \\\"agility_mult\\\": 1.01,\\n      \\\"charisma_mult\\\": 1.01,\\n      \\\"hacking_exp_mult\\\": 1.01,\\n      \\\"strength_exp_mult\\\": 1.01,\\n      \\\"defense_exp_mult\\\": 1.01,\\n      \\\"dexterity_exp_mult\\\": 1.01,\\n      \\\"agility_exp_mult\\\": 1.01,\\n      \\\"charisma_exp_mult\\\": 1.01,\\n      \\\"hacking_chance_mult\\\": 1.01,\\n      \\\"hacking_speed_mult\\\": 1.01,\\n      \\\"hacking_money_mult\\\": 1.01,\\n      \\\"hacking_grow_mult\\\": 1.01,\\n      \\\"company_rep_mult\\\": 1.01,\\n      \\\"faction_rep_mult\\\": 1.01,\\n      \\\"crime_money_mult\\\": 1.01,\\n      \\\"crime_success_mult\\\": 1.01,\\n      \\\"work_money_mult\\\": 1.01,\\n      \\\"hacknet_node_money_mult\\\": 1.01,\\n      \\\"hacknet_node_purchase_cost_mult\\\": 0.99,\\n      \\\"hacknet_node_ram_cost_mult\\\": 0.99,\\n      \\\"hacknet_node_core_cost_mult\\\": 0.99,\\n      \\\"hacknet_node_level_cost_mult\\\": 0.99\\n    },\\n    \\\"repreq\\\": 2113.1161490475806,\\n    \\\"cost\\\": 3169674.2235713713,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"CyberSec\\\",\\n      \\\"Tian Di Hui\\\",\\n      \\\"Netburners\\\",\\n      \\\"NiteSec\\\",\\n      \\\"The Black Hand\\\",\\n      \\\"BitRunners\\\",\\n      \\\"Sector-12\\\",\\n      \\\"Chongqing\\\",\\n      \\\"New Tokyo\\\",\\n      \\\"Ishima\\\",\\n      \\\"Aevum\\\",\\n      \\\"Volhaven\\\",\\n      \\\"Tetrads\\\",\\n      \\\"Silhouette\\\",\\n      \\\"Speakers for the Dead\\\",\\n      \\\"The Dark Army\\\",\\n      \\\"The Syndicate\\\",\\n      \\\"The Covenant\\\",\\n      \\\"Daedalus\\\",\\n      \\\"Illuminati\\\",\\n      \\\"ECorp\\\",\\n      \\\"MegaCorp\\\",\\n      \\\"KuaiGong International\\\",\\n      \\\"Four Sigma\\\",\\n      \\\"NWO\\\",\\n      \\\"Blade Industries\\\",\\n      \\\"OmniTek Incorporated\\\",\\n      \\\"Bachman & Associates\\\",\\n      \\\"Clarke Incorporated\\\",\\n      \\\"Fulcrum Secret Technologies\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"Neurotrainer I\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_exp_mult\\\": 1.1,\\n      \\\"strength_exp_mult\\\": 1.1,\\n      \\\"defense_exp_mult\\\": 1.1,\\n      \\\"dexterity_exp_mult\\\": 1.1,\\n      \\\"agility_exp_mult\\\": 1.1,\\n      \\\"charisma_exp_mult\\\": 1.1\\n    },\\n    \\\"repreq\\\": 1000,\\n    \\\"cost\\\": 4000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"CyberSec\\\",\\n      \\\"Aevum\\\",\\n      \\\"Slum Snakes\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"Nanofiber Weave\\\": {\\n    \\\"stats\\\": {\\n      \\\"strength_mult\\\": 1.2,\\n      \\\"defense_mult\\\": 1.2\\n    },\\n    \\\"repreq\\\": 37500,\\n    \\\"cost\\\": 125000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Tian Di Hui\\\",\\n      \\\"Slum Snakes\\\",\\n      \\\"Speakers for the Dead\\\",\\n      \\\"The Dark Army\\\",\\n      \\\"The Syndicate\\\",\\n      \\\"Blade Industries\\\",\\n      \\\"OmniTek Incorporated\\\",\\n      \\\"Fulcrum Secret Technologies\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Wired Reflexes\\\": {\\n    \\\"stats\\\": {\\n      \\\"dexterity_mult\\\": 1.05,\\n      \\\"agility_mult\\\": 1.05\\n    },\\n    \\\"repreq\\\": 1250,\\n    \\\"cost\\\": 2500000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Tian Di Hui\\\",\\n      \\\"Sector-12\\\",\\n      \\\"Ishima\\\",\\n      \\\"Aevum\\\",\\n      \\\"Volhaven\\\",\\n      \\\"Slum Snakes\\\",\\n      \\\"Speakers for the Dead\\\",\\n      \\\"The Dark Army\\\",\\n      \\\"The Syndicate\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Speech Processor Implant\\\": {\\n    \\\"stats\\\": {\\n      \\\"charisma_mult\\\": 1.2\\n    },\\n    \\\"repreq\\\": 7500,\\n    \\\"cost\\\": 50000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Tian Di Hui\\\",\\n      \\\"Sector-12\\\",\\n      \\\"Chongqing\\\",\\n      \\\"New Tokyo\\\",\\n      \\\"Ishima\\\",\\n      \\\"Aevum\\\",\\n      \\\"Volhaven\\\",\\n      \\\"Slum Snakes\\\",\\n      \\\"Silhouette\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Nuoptimal Nootropic Injector Implant\\\": {\\n    \\\"stats\\\": {\\n      \\\"company_rep_mult\\\": 1.2\\n    },\\n    \\\"repreq\\\": 5000,\\n    \\\"cost\\\": 20000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Tian Di Hui\\\",\\n      \\\"Chongqing\\\",\\n      \\\"New Tokyo\\\",\\n      \\\"Volhaven\\\",\\n      \\\"Slum Snakes\\\",\\n      \\\"Four Sigma\\\",\\n      \\\"Bachman & Associates\\\",\\n      \\\"Clarke Incorporated\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Speech Enhancement\\\": {\\n    \\\"stats\\\": {\\n      \\\"charisma_mult\\\": 1.1,\\n      \\\"company_rep_mult\\\": 1.1\\n    },\\n    \\\"repreq\\\": 2500,\\n    \\\"cost\\\": 12500000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Tian Di Hui\\\",\\n      \\\"Slum Snakes\\\",\\n      \\\"Speakers for the Dead\\\",\\n      \\\"KuaiGong International\\\",\\n      \\\"Four Sigma\\\",\\n      \\\"Bachman & Associates\\\",\\n      \\\"Clarke Incorporated\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"ADR-V1 Pheromone Gene\\\": {\\n    \\\"stats\\\": {\\n      \\\"company_rep_mult\\\": 1.1,\\n      \\\"faction_rep_mult\\\": 1.1\\n    },\\n    \\\"repreq\\\": 3750,\\n    \\\"cost\\\": 17500000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Tian Di Hui\\\",\\n      \\\"Slum Snakes\\\",\\n      \\\"The Syndicate\\\",\\n      \\\"MegaCorp\\\",\\n      \\\"Four Sigma\\\",\\n      \\\"NWO\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"Social Negotiation Assistant (S.N.A)\\\": {\\n    \\\"stats\\\": {\\n      \\\"company_rep_mult\\\": 1.15,\\n      \\\"faction_rep_mult\\\": 1.15,\\n      \\\"work_money_mult\\\": 1.1\\n    },\\n    \\\"repreq\\\": 6250,\\n    \\\"cost\\\": 30000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Tian Di Hui\\\",\\n      \\\"Slum Snakes\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"Neuroreceptor Management Implant\\\": {\\n    \\\"stats\\\": {},\\n    \\\"repreq\\\": 75000,\\n    \\\"cost\\\": 550000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Tian Di Hui\\\",\\n      \\\"Slum Snakes\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Hacknet Node CPU Architecture Neural-Upload\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacknet_node_money_mult\\\": 1.15,\\n      \\\"hacknet_node_purchase_cost_mult\\\": 0.85\\n    },\\n    \\\"repreq\\\": 3750,\\n    \\\"cost\\\": 11000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Netburners\\\",\\n      \\\"Slum Snakes\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Hacknet Node Cache Architecture Neural-Upload\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacknet_node_money_mult\\\": 1.1,\\n      \\\"hacknet_node_level_cost_mult\\\": 0.85\\n    },\\n    \\\"repreq\\\": 2500,\\n    \\\"cost\\\": 5500000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Netburners\\\",\\n      \\\"Slum Snakes\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Hacknet Node NIC Architecture Neural-Upload\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacknet_node_money_mult\\\": 1.1,\\n      \\\"hacknet_node_purchase_cost_mult\\\": 0.9\\n    },\\n    \\\"repreq\\\": 1875,\\n    \\\"cost\\\": 4500000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Netburners\\\",\\n      \\\"Slum Snakes\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Hacknet Node Kernel Direct-Neural Interface\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacknet_node_money_mult\\\": 1.25\\n    },\\n    \\\"repreq\\\": 7500,\\n    \\\"cost\\\": 40000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Netburners\\\",\\n      \\\"Slum Snakes\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Hacknet Node Core Direct-Neural Interface\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacknet_node_money_mult\\\": 1.45\\n    },\\n    \\\"repreq\\\": 12500,\\n    \\\"cost\\\": 60000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Netburners\\\",\\n      \\\"Slum Snakes\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Artificial Synaptic Potentiation\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_exp_mult\\\": 1.05,\\n      \\\"hacking_chance_mult\\\": 1.05,\\n      \\\"hacking_speed_mult\\\": 1.02\\n    },\\n    \\\"repreq\\\": 6250,\\n    \\\"cost\\\": 80000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"NiteSec\\\",\\n      \\\"The Black Hand\\\",\\n      \\\"Slum Snakes\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"Neural-Retention Enhancement\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_exp_mult\\\": 1.25\\n    },\\n    \\\"repreq\\\": 20000,\\n    \\\"cost\\\": 250000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"NiteSec\\\",\\n      \\\"Slum Snakes\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"DataJack\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_money_mult\\\": 1.25\\n    },\\n    \\\"repreq\\\": 112500,\\n    \\\"cost\\\": 450000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"NiteSec\\\",\\n      \\\"The Black Hand\\\",\\n      \\\"BitRunners\\\",\\n      \\\"Chongqing\\\",\\n      \\\"New Tokyo\\\",\\n      \\\"Slum Snakes\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"Embedded Netburner Module\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_mult\\\": 1.08\\n    },\\n    \\\"repreq\\\": 15000,\\n    \\\"cost\\\": 250000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"NiteSec\\\",\\n      \\\"The Black Hand\\\",\\n      \\\"BitRunners\\\",\\n      \\\"Slum Snakes\\\",\\n      \\\"ECorp\\\",\\n      \\\"MegaCorp\\\",\\n      \\\"NWO\\\",\\n      \\\"Blade Industries\\\",\\n      \\\"Fulcrum Secret Technologies\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"Cranial Signal Processors - Gen III\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_mult\\\": 1.09,\\n      \\\"hacking_speed_mult\\\": 1.02,\\n      \\\"hacking_money_mult\\\": 1.15\\n    },\\n    \\\"repreq\\\": 50000,\\n    \\\"cost\\\": 550000000,\\n    \\\"prereqs\\\": [\\n      \\\"Cranial Signal Processors - Gen II\\\"\\n    ],\\n    \\\"factions\\\": [\\n      \\\"NiteSec\\\",\\n      \\\"The Black Hand\\\",\\n      \\\"BitRunners\\\",\\n      \\\"Slum Snakes\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"Neurotrainer II\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_exp_mult\\\": 1.15,\\n      \\\"strength_exp_mult\\\": 1.15,\\n      \\\"defense_exp_mult\\\": 1.15,\\n      \\\"dexterity_exp_mult\\\": 1.15,\\n      \\\"agility_exp_mult\\\": 1.15,\\n      \\\"charisma_exp_mult\\\": 1.15\\n    },\\n    \\\"repreq\\\": 10000,\\n    \\\"cost\\\": 45000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"NiteSec\\\",\\n      \\\"BitRunners\\\",\\n      \\\"Slum Snakes\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"CRTX42-AA Gene Modification\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_mult\\\": 1.08,\\n      \\\"hacking_exp_mult\\\": 1.15\\n    },\\n    \\\"repreq\\\": 45000,\\n    \\\"cost\\\": 225000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"NiteSec\\\",\\n      \\\"Slum Snakes\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"Enhanced Myelin Sheathing\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_mult\\\": 1.08,\\n      \\\"hacking_exp_mult\\\": 1.1,\\n      \\\"hacking_speed_mult\\\": 1.03\\n    },\\n    \\\"repreq\\\": 100000,\\n    \\\"cost\\\": 1375000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"The Black Hand\\\",\\n      \\\"BitRunners\\\",\\n      \\\"Slum Snakes\\\",\\n      \\\"Fulcrum Secret Technologies\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"Embedded Netburner Module Core Implant\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_mult\\\": 1.07,\\n      \\\"hacking_exp_mult\\\": 1.07,\\n      \\\"hacking_chance_mult\\\": 1.03,\\n      \\\"hacking_speed_mult\\\": 1.03,\\n      \\\"hacking_money_mult\\\": 1.1\\n    },\\n    \\\"repreq\\\": 175000,\\n    \\\"cost\\\": 2500000000,\\n    \\\"prereqs\\\": [\\n      \\\"Embedded Netburner Module\\\"\\n    ],\\n    \\\"factions\\\": [\\n      \\\"The Black Hand\\\",\\n      \\\"BitRunners\\\",\\n      \\\"Slum Snakes\\\",\\n      \\\"ECorp\\\",\\n      \\\"MegaCorp\\\",\\n      \\\"NWO\\\",\\n      \\\"Blade Industries\\\",\\n      \\\"Fulcrum Secret Technologies\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"Neuralstimulator\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_exp_mult\\\": 1.12,\\n      \\\"hacking_chance_mult\\\": 1.1,\\n      \\\"hacking_speed_mult\\\": 1.02\\n    },\\n    \\\"repreq\\\": 50000,\\n    \\\"cost\\\": 3000000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"The Black Hand\\\",\\n      \\\"Sector-12\\\",\\n      \\\"Chongqing\\\",\\n      \\\"New Tokyo\\\",\\n      \\\"Ishima\\\",\\n      \\\"Aevum\\\",\\n      \\\"Volhaven\\\",\\n      \\\"Slum Snakes\\\",\\n      \\\"Four Sigma\\\",\\n      \\\"Bachman & Associates\\\",\\n      \\\"Clarke Incorporated\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"Cranial Signal Processors - Gen IV\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_speed_mult\\\": 1.02,\\n      \\\"hacking_money_mult\\\": 1.2,\\n      \\\"hacking_grow_mult\\\": 1.25\\n    },\\n    \\\"repreq\\\": 125000,\\n    \\\"cost\\\": 1100000000,\\n    \\\"prereqs\\\": [\\n      \\\"Cranial Signal Processors - Gen III\\\"\\n    ],\\n    \\\"factions\\\": [\\n      \\\"The Black Hand\\\",\\n      \\\"BitRunners\\\",\\n      \\\"Slum Snakes\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"The Black Hand\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_mult\\\": 1.1,\\n      \\\"strength_mult\\\": 1.15,\\n      \\\"dexterity_mult\\\": 1.15,\\n      \\\"hacking_speed_mult\\\": 1.02,\\n      \\\"hacking_money_mult\\\": 1.1\\n    },\\n    \\\"repreq\\\": 100000,\\n    \\\"cost\\\": 550000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"The Black Hand\\\",\\n      \\\"Slum Snakes\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"Artificial Bio-neural Network Implant\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_mult\\\": 1.12,\\n      \\\"hacking_speed_mult\\\": 1.03,\\n      \\\"hacking_money_mult\\\": 1.15\\n    },\\n    \\\"repreq\\\": 275000,\\n    \\\"cost\\\": 3000000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"BitRunners\\\",\\n      \\\"Slum Snakes\\\",\\n      \\\"Fulcrum Secret Technologies\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"Embedded Netburner Module Core V2 Upgrade\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_mult\\\": 1.08,\\n      \\\"hacking_exp_mult\\\": 1.15,\\n      \\\"hacking_chance_mult\\\": 1.05,\\n      \\\"hacking_speed_mult\\\": 1.05,\\n      \\\"hacking_money_mult\\\": 1.3\\n    },\\n    \\\"repreq\\\": 1000000,\\n    \\\"cost\\\": 4500000000,\\n    \\\"prereqs\\\": [\\n      \\\"Embedded Netburner Module Core Implant\\\"\\n    ],\\n    \\\"factions\\\": [\\n      \\\"BitRunners\\\",\\n      \\\"Slum Snakes\\\",\\n      \\\"ECorp\\\",\\n      \\\"MegaCorp\\\",\\n      \\\"KuaiGong International\\\",\\n      \\\"NWO\\\",\\n      \\\"Blade Industries\\\",\\n      \\\"OmniTek Incorporated\\\",\\n      \\\"Fulcrum Secret Technologies\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"Neural Accelerator\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_mult\\\": 1.1,\\n      \\\"hacking_exp_mult\\\": 1.15,\\n      \\\"hacking_money_mult\\\": 1.2\\n    },\\n    \\\"repreq\\\": 200000,\\n    \\\"cost\\\": 1750000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"BitRunners\\\",\\n      \\\"Slum Snakes\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"Cranial Signal Processors - Gen V\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_mult\\\": 1.3,\\n      \\\"hacking_money_mult\\\": 1.25,\\n      \\\"hacking_grow_mult\\\": 1.75\\n    },\\n    \\\"repreq\\\": 250000,\\n    \\\"cost\\\": 2250000000,\\n    \\\"prereqs\\\": [\\n      \\\"Cranial Signal Processors - Gen IV\\\"\\n    ],\\n    \\\"factions\\\": [\\n      \\\"BitRunners\\\",\\n      \\\"Slum Snakes\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"BitRunners Neurolink\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_mult\\\": 1.15,\\n      \\\"hacking_exp_mult\\\": 1.2,\\n      \\\"hacking_chance_mult\\\": 1.1,\\n      \\\"hacking_speed_mult\\\": 1.05\\n    },\\n    \\\"repreq\\\": 875000,\\n    \\\"cost\\\": 4375000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"BitRunners\\\",\\n      \\\"Slum Snakes\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"Augmented Targeting I\\\": {\\n    \\\"stats\\\": {\\n      \\\"dexterity_mult\\\": 1.1\\n    },\\n    \\\"repreq\\\": 5000,\\n    \\\"cost\\\": 15000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Sector-12\\\",\\n      \\\"Ishima\\\",\\n      \\\"Slum Snakes\\\",\\n      \\\"The Dark Army\\\",\\n      \\\"The Syndicate\\\",\\n      \\\"KuaiGong International\\\",\\n      \\\"Blade Industries\\\",\\n      \\\"OmniTek Incorporated\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Augmented Targeting II\\\": {\\n    \\\"stats\\\": {\\n      \\\"dexterity_mult\\\": 1.2\\n    },\\n    \\\"repreq\\\": 8750,\\n    \\\"cost\\\": 42500000,\\n    \\\"prereqs\\\": [\\n      \\\"Augmented Targeting I\\\"\\n    ],\\n    \\\"factions\\\": [\\n      \\\"Sector-12\\\",\\n      \\\"Slum Snakes\\\",\\n      \\\"The Dark Army\\\",\\n      \\\"The Syndicate\\\",\\n      \\\"KuaiGong International\\\",\\n      \\\"Blade Industries\\\",\\n      \\\"OmniTek Incorporated\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"CashRoot Starter Kit\\\": {\\n    \\\"stats\\\": {},\\n    \\\"repreq\\\": 12500,\\n    \\\"cost\\\": 125000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Sector-12\\\",\\n      \\\"Slum Snakes\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Neuregen Gene Modification\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_exp_mult\\\": 1.4\\n    },\\n    \\\"repreq\\\": 37500,\\n    \\\"cost\\\": 375000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Chongqing\\\",\\n      \\\"Slum Snakes\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"NutriGen Implant\\\": {\\n    \\\"stats\\\": {\\n      \\\"strength_exp_mult\\\": 1.2,\\n      \\\"defense_exp_mult\\\": 1.2,\\n      \\\"dexterity_exp_mult\\\": 1.2,\\n      \\\"agility_exp_mult\\\": 1.2\\n    },\\n    \\\"repreq\\\": 6250,\\n    \\\"cost\\\": 2500000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"New Tokyo\\\",\\n      \\\"Slum Snakes\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Combat Rib I\\\": {\\n    \\\"stats\\\": {\\n      \\\"strength_mult\\\": 1.1,\\n      \\\"defense_mult\\\": 1.1\\n    },\\n    \\\"repreq\\\": 7500,\\n    \\\"cost\\\": 23750000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Ishima\\\",\\n      \\\"Volhaven\\\",\\n      \\\"Slum Snakes\\\",\\n      \\\"The Dark Army\\\",\\n      \\\"The Syndicate\\\",\\n      \\\"KuaiGong International\\\",\\n      \\\"Blade Industries\\\",\\n      \\\"OmniTek Incorporated\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"INFRARET Enhancement\\\": {\\n    \\\"stats\\\": {\\n      \\\"dexterity_mult\\\": 1.1,\\n      \\\"crime_money_mult\\\": 1.1,\\n      \\\"crime_success_mult\\\": 1.25\\n    },\\n    \\\"repreq\\\": 7500,\\n    \\\"cost\\\": 30000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Ishima\\\",\\n      \\\"Slum Snakes\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"PCMatrix\\\": {\\n    \\\"stats\\\": {\\n      \\\"charisma_mult\\\": 1.0777,\\n      \\\"charisma_exp_mult\\\": 1.0777,\\n      \\\"company_rep_mult\\\": 1.0777,\\n      \\\"faction_rep_mult\\\": 1.0777,\\n      \\\"crime_money_mult\\\": 1.0777,\\n      \\\"crime_success_mult\\\": 1.0777,\\n      \\\"work_money_mult\\\": 1.777\\n    },\\n    \\\"repreq\\\": 100000,\\n    \\\"cost\\\": 2000000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Aevum\\\",\\n      \\\"Slum Snakes\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Combat Rib II\\\": {\\n    \\\"stats\\\": {\\n      \\\"strength_mult\\\": 1.14,\\n      \\\"defense_mult\\\": 1.14\\n    },\\n    \\\"repreq\\\": 18750,\\n    \\\"cost\\\": 65000000,\\n    \\\"prereqs\\\": [\\n      \\\"Combat Rib I\\\"\\n    ],\\n    \\\"factions\\\": [\\n      \\\"Volhaven\\\",\\n      \\\"Slum Snakes\\\",\\n      \\\"The Dark Army\\\",\\n      \\\"The Syndicate\\\",\\n      \\\"KuaiGong International\\\",\\n      \\\"Blade Industries\\\",\\n      \\\"OmniTek Incorporated\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"DermaForce Particle Barrier\\\": {\\n    \\\"stats\\\": {\\n      \\\"defense_mult\\\": 1.4\\n    },\\n    \\\"repreq\\\": 15000,\\n    \\\"cost\\\": 50000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Volhaven\\\",\\n      \\\"Slum Snakes\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Unstable Circadian Modulator\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_mult\\\": 1.15,\\n      \\\"hacking_exp_mult\\\": 2\\n    },\\n    \\\"repreq\\\": 362500,\\n    \\\"cost\\\": 5000000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"Speakers for the Dead\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"HemoRecirculator\\\": {\\n    \\\"stats\\\": {\\n      \\\"strength_mult\\\": 1.08,\\n      \\\"defense_mult\\\": 1.08,\\n      \\\"dexterity_mult\\\": 1.08,\\n      \\\"agility_mult\\\": 1.08\\n    },\\n    \\\"repreq\\\": 10000,\\n    \\\"cost\\\": 45000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"Tetrads\\\",\\n      \\\"The Dark Army\\\",\\n      \\\"The Syndicate\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Augmented Targeting III\\\": {\\n    \\\"stats\\\": {\\n      \\\"dexterity_mult\\\": 1.3\\n    },\\n    \\\"repreq\\\": 27500,\\n    \\\"cost\\\": 115000000,\\n    \\\"prereqs\\\": [\\n      \\\"Augmented Targeting II\\\"\\n    ],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"The Dark Army\\\",\\n      \\\"The Syndicate\\\",\\n      \\\"The Covenant\\\",\\n      \\\"KuaiGong International\\\",\\n      \\\"Blade Industries\\\",\\n      \\\"OmniTek Incorporated\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Synthetic Heart\\\": {\\n    \\\"stats\\\": {\\n      \\\"strength_mult\\\": 1.5,\\n      \\\"agility_mult\\\": 1.5\\n    },\\n    \\\"repreq\\\": 750000,\\n    \\\"cost\\\": 2875000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"Speakers for the Dead\\\",\\n      \\\"The Covenant\\\",\\n      \\\"Daedalus\\\",\\n      \\\"Illuminati\\\",\\n      \\\"KuaiGong International\\\",\\n      \\\"NWO\\\",\\n      \\\"Fulcrum Secret Technologies\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Synfibril Muscle\\\": {\\n    \\\"stats\\\": {\\n      \\\"strength_mult\\\": 1.3,\\n      \\\"defense_mult\\\": 1.3\\n    },\\n    \\\"repreq\\\": 437500,\\n    \\\"cost\\\": 1125000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"Speakers for the Dead\\\",\\n      \\\"The Covenant\\\",\\n      \\\"Daedalus\\\",\\n      \\\"Illuminati\\\",\\n      \\\"KuaiGong International\\\",\\n      \\\"NWO\\\",\\n      \\\"Blade Industries\\\",\\n      \\\"Fulcrum Secret Technologies\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Combat Rib III\\\": {\\n    \\\"stats\\\": {\\n      \\\"strength_mult\\\": 1.18,\\n      \\\"defense_mult\\\": 1.18\\n    },\\n    \\\"repreq\\\": 35000,\\n    \\\"cost\\\": 120000000,\\n    \\\"prereqs\\\": [\\n      \\\"Combat Rib II\\\"\\n    ],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"The Dark Army\\\",\\n      \\\"The Syndicate\\\",\\n      \\\"The Covenant\\\",\\n      \\\"KuaiGong International\\\",\\n      \\\"Blade Industries\\\",\\n      \\\"OmniTek Incorporated\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"NEMEAN Subdermal Weave\\\": {\\n    \\\"stats\\\": {\\n      \\\"defense_mult\\\": 2.2\\n    },\\n    \\\"repreq\\\": 875000,\\n    \\\"cost\\\": 3250000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"The Syndicate\\\",\\n      \\\"The Covenant\\\",\\n      \\\"Daedalus\\\",\\n      \\\"Illuminati\\\",\\n      \\\"Fulcrum Secret Technologies\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Graphene Bone Lacings\\\": {\\n    \\\"stats\\\": {\\n      \\\"strength_mult\\\": 1.7,\\n      \\\"defense_mult\\\": 1.7\\n    },\\n    \\\"repreq\\\": 1125000,\\n    \\\"cost\\\": 4250000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"The Covenant\\\",\\n      \\\"Fulcrum Secret Technologies\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Bionic Spine\\\": {\\n    \\\"stats\\\": {\\n      \\\"strength_mult\\\": 1.15,\\n      \\\"defense_mult\\\": 1.15,\\n      \\\"dexterity_mult\\\": 1.15,\\n      \\\"agility_mult\\\": 1.15\\n    },\\n    \\\"repreq\\\": 45000,\\n    \\\"cost\\\": 125000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"Speakers for the Dead\\\",\\n      \\\"The Syndicate\\\",\\n      \\\"KuaiGong International\\\",\\n      \\\"Blade Industries\\\",\\n      \\\"OmniTek Incorporated\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Graphene Bionic Spine Upgrade\\\": {\\n    \\\"stats\\\": {\\n      \\\"strength_mult\\\": 1.6,\\n      \\\"defense_mult\\\": 1.6,\\n      \\\"dexterity_mult\\\": 1.6,\\n      \\\"agility_mult\\\": 1.6\\n    },\\n    \\\"repreq\\\": 1625000,\\n    \\\"cost\\\": 6000000000,\\n    \\\"prereqs\\\": [\\n      \\\"Bionic Spine\\\"\\n    ],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"ECorp\\\",\\n      \\\"Fulcrum Secret Technologies\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Bionic Legs\\\": {\\n    \\\"stats\\\": {\\n      \\\"agility_mult\\\": 1.6\\n    },\\n    \\\"repreq\\\": 150000,\\n    \\\"cost\\\": 375000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"Speakers for the Dead\\\",\\n      \\\"The Syndicate\\\",\\n      \\\"KuaiGong International\\\",\\n      \\\"Blade Industries\\\",\\n      \\\"OmniTek Incorporated\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Graphene Bionic Legs Upgrade\\\": {\\n    \\\"stats\\\": {\\n      \\\"agility_mult\\\": 2.5\\n    },\\n    \\\"repreq\\\": 750000,\\n    \\\"cost\\\": 4500000000,\\n    \\\"prereqs\\\": [\\n      \\\"Bionic Legs\\\"\\n    ],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"ECorp\\\",\\n      \\\"MegaCorp\\\",\\n      \\\"Fulcrum Secret Technologies\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"TITN-41 Gene-Modification Injection\\\": {\\n    \\\"stats\\\": {\\n      \\\"charisma_mult\\\": 1.15,\\n      \\\"charisma_exp_mult\\\": 1.15\\n    },\\n    \\\"repreq\\\": 25000,\\n    \\\"cost\\\": 190000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"Silhouette\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Enhanced Social Interaction Implant\\\": {\\n    \\\"stats\\\": {\\n      \\\"charisma_mult\\\": 1.6,\\n      \\\"charisma_exp_mult\\\": 1.6\\n    },\\n    \\\"repreq\\\": 375000,\\n    \\\"cost\\\": 1375000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"Four Sigma\\\",\\n      \\\"NWO\\\",\\n      \\\"OmniTek Incorporated\\\",\\n      \\\"Bachman & Associates\\\",\\n      \\\"Clarke Incorporated\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Embedded Netburner Module Core V3 Upgrade\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_mult\\\": 1.1,\\n      \\\"hacking_exp_mult\\\": 1.25,\\n      \\\"hacking_chance_mult\\\": 1.1,\\n      \\\"hacking_speed_mult\\\": 1.05,\\n      \\\"hacking_money_mult\\\": 1.4\\n    },\\n    \\\"repreq\\\": 1750000,\\n    \\\"cost\\\": 7500000000,\\n    \\\"prereqs\\\": [\\n      \\\"Embedded Netburner Module Core V2 Upgrade\\\"\\n    ],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"The Covenant\\\",\\n      \\\"Daedalus\\\",\\n      \\\"Illuminati\\\",\\n      \\\"ECorp\\\",\\n      \\\"MegaCorp\\\",\\n      \\\"NWO\\\",\\n      \\\"Fulcrum Secret Technologies\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Embedded Netburner Module Analyze Engine\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_speed_mult\\\": 1.1\\n    },\\n    \\\"repreq\\\": 625000,\\n    \\\"cost\\\": 6000000000,\\n    \\\"prereqs\\\": [\\n      \\\"Embedded Netburner Module\\\"\\n    ],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"The Covenant\\\",\\n      \\\"Daedalus\\\",\\n      \\\"Illuminati\\\",\\n      \\\"ECorp\\\",\\n      \\\"MegaCorp\\\",\\n      \\\"NWO\\\",\\n      \\\"Fulcrum Secret Technologies\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"Embedded Netburner Module Direct Memory Access Upgrade\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_chance_mult\\\": 1.2,\\n      \\\"hacking_money_mult\\\": 1.4\\n    },\\n    \\\"repreq\\\": 1000000,\\n    \\\"cost\\\": 7000000000,\\n    \\\"prereqs\\\": [\\n      \\\"Embedded Netburner Module\\\"\\n    ],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"The Covenant\\\",\\n      \\\"Daedalus\\\",\\n      \\\"Illuminati\\\",\\n      \\\"ECorp\\\",\\n      \\\"MegaCorp\\\",\\n      \\\"NWO\\\",\\n      \\\"Fulcrum Secret Technologies\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Neuronal Densification\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_mult\\\": 1.15,\\n      \\\"hacking_exp_mult\\\": 1.1,\\n      \\\"hacking_speed_mult\\\": 1.03\\n    },\\n    \\\"repreq\\\": 187500,\\n    \\\"cost\\\": 1375000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"Clarke Incorporated\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"FocusWire\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_exp_mult\\\": 1.05,\\n      \\\"strength_exp_mult\\\": 1.05,\\n      \\\"defense_exp_mult\\\": 1.05,\\n      \\\"dexterity_exp_mult\\\": 1.05,\\n      \\\"agility_exp_mult\\\": 1.05,\\n      \\\"charisma_exp_mult\\\": 1.05,\\n      \\\"company_rep_mult\\\": 1.1,\\n      \\\"work_money_mult\\\": 1.2\\n    },\\n    \\\"repreq\\\": 75000,\\n    \\\"cost\\\": 900000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"KuaiGong International\\\",\\n      \\\"Four Sigma\\\",\\n      \\\"Bachman & Associates\\\",\\n      \\\"Clarke Incorporated\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"PC Direct-Neural Interface\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_mult\\\": 1.08,\\n      \\\"company_rep_mult\\\": 1.3\\n    },\\n    \\\"repreq\\\": 375000,\\n    \\\"cost\\\": 3750000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"ECorp\\\",\\n      \\\"Four Sigma\\\",\\n      \\\"Blade Industries\\\",\\n      \\\"OmniTek Incorporated\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"PC Direct-Neural Interface Optimization Submodule\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_mult\\\": 1.1,\\n      \\\"company_rep_mult\\\": 1.75\\n    },\\n    \\\"repreq\\\": 500000,\\n    \\\"cost\\\": 4500000000,\\n    \\\"prereqs\\\": [\\n      \\\"PC Direct-Neural Interface\\\"\\n    ],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"ECorp\\\",\\n      \\\"Blade Industries\\\",\\n      \\\"Fulcrum Secret Technologies\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"PC Direct-Neural Interface NeuroNet Injector\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_mult\\\": 1.1,\\n      \\\"hacking_speed_mult\\\": 1.05,\\n      \\\"company_rep_mult\\\": 2\\n    },\\n    \\\"repreq\\\": 1500000,\\n    \\\"cost\\\": 7500000000,\\n    \\\"prereqs\\\": [\\n      \\\"PC Direct-Neural Interface\\\"\\n    ],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"Fulcrum Secret Technologies\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"ADR-V2 Pheromone Gene\\\": {\\n    \\\"stats\\\": {\\n      \\\"company_rep_mult\\\": 1.2,\\n      \\\"faction_rep_mult\\\": 1.2\\n    },\\n    \\\"repreq\\\": 62500,\\n    \\\"cost\\\": 550000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"Silhouette\\\",\\n      \\\"Four Sigma\\\",\\n      \\\"Bachman & Associates\\\",\\n      \\\"Clarke Incorporated\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"The Shadow's Simulacrum\\\": {\\n    \\\"stats\\\": {\\n      \\\"company_rep_mult\\\": 1.15,\\n      \\\"faction_rep_mult\\\": 1.15\\n    },\\n    \\\"repreq\\\": 37500,\\n    \\\"cost\\\": 400000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"Speakers for the Dead\\\",\\n      \\\"The Dark Army\\\",\\n      \\\"The Syndicate\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Neurotrainer III\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_exp_mult\\\": 1.2,\\n      \\\"strength_exp_mult\\\": 1.2,\\n      \\\"defense_exp_mult\\\": 1.2,\\n      \\\"dexterity_exp_mult\\\": 1.2,\\n      \\\"agility_exp_mult\\\": 1.2,\\n      \\\"charisma_exp_mult\\\": 1.2\\n    },\\n    \\\"repreq\\\": 25000,\\n    \\\"cost\\\": 130000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"Four Sigma\\\",\\n      \\\"NWO\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"HyperSight Corneal Implant\\\": {\\n    \\\"stats\\\": {\\n      \\\"dexterity_mult\\\": 1.4,\\n      \\\"hacking_speed_mult\\\": 1.03,\\n      \\\"hacking_money_mult\\\": 1.1\\n    },\\n    \\\"repreq\\\": 150000,\\n    \\\"cost\\\": 2750000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"KuaiGong International\\\",\\n      \\\"Blade Industries\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"LuminCloaking-V1 Skin Implant\\\": {\\n    \\\"stats\\\": {\\n      \\\"agility_mult\\\": 1.05,\\n      \\\"crime_money_mult\\\": 1.1\\n    },\\n    \\\"repreq\\\": 1500,\\n    \\\"cost\\\": 5000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"Tetrads\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"LuminCloaking-V2 Skin Implant\\\": {\\n    \\\"stats\\\": {\\n      \\\"defense_mult\\\": 1.1,\\n      \\\"agility_mult\\\": 1.1,\\n      \\\"crime_money_mult\\\": 1.25\\n    },\\n    \\\"repreq\\\": 5000,\\n    \\\"cost\\\": 30000000,\\n    \\\"prereqs\\\": [\\n      \\\"LuminCloaking-V1 Skin Implant\\\"\\n    ],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"Tetrads\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"SmartSonar Implant\\\": {\\n    \\\"stats\\\": {\\n      \\\"dexterity_mult\\\": 1.1,\\n      \\\"dexterity_exp_mult\\\": 1.15,\\n      \\\"crime_money_mult\\\": 1.25\\n    },\\n    \\\"repreq\\\": 22500,\\n    \\\"cost\\\": 75000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Power Recirculation Core\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_mult\\\": 1.05,\\n      \\\"strength_mult\\\": 1.05,\\n      \\\"defense_mult\\\": 1.05,\\n      \\\"dexterity_mult\\\": 1.05,\\n      \\\"agility_mult\\\": 1.05,\\n      \\\"charisma_mult\\\": 1.05,\\n      \\\"hacking_exp_mult\\\": 1.1,\\n      \\\"strength_exp_mult\\\": 1.1,\\n      \\\"defense_exp_mult\\\": 1.1,\\n      \\\"dexterity_exp_mult\\\": 1.1,\\n      \\\"agility_exp_mult\\\": 1.1,\\n      \\\"charisma_exp_mult\\\": 1.1\\n    },\\n    \\\"repreq\\\": 25000,\\n    \\\"cost\\\": 180000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"Tetrads\\\",\\n      \\\"The Dark Army\\\",\\n      \\\"The Syndicate\\\",\\n      \\\"NWO\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"QLink\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_mult\\\": 1.75,\\n      \\\"hacking_chance_mult\\\": 2.5,\\n      \\\"hacking_speed_mult\\\": 2,\\n      \\\"hacking_money_mult\\\": 4\\n    },\\n    \\\"repreq\\\": 1875000,\\n    \\\"cost\\\": 25000000000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"Illuminati\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"SPTN-97 Gene Modification\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_mult\\\": 1.15,\\n      \\\"strength_mult\\\": 1.75,\\n      \\\"defense_mult\\\": 1.75,\\n      \\\"dexterity_mult\\\": 1.75,\\n      \\\"agility_mult\\\": 1.75\\n    },\\n    \\\"repreq\\\": 1250000,\\n    \\\"cost\\\": 4875000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"The Covenant\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"ECorp HVMind Implant\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_grow_mult\\\": 3\\n    },\\n    \\\"repreq\\\": 1500000,\\n    \\\"cost\\\": 5500000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"ECorp\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"CordiARC Fusion Reactor\\\": {\\n    \\\"stats\\\": {\\n      \\\"strength_mult\\\": 1.35,\\n      \\\"defense_mult\\\": 1.35,\\n      \\\"dexterity_mult\\\": 1.35,\\n      \\\"agility_mult\\\": 1.35,\\n      \\\"strength_exp_mult\\\": 1.35,\\n      \\\"defense_exp_mult\\\": 1.35,\\n      \\\"dexterity_exp_mult\\\": 1.35,\\n      \\\"agility_exp_mult\\\": 1.35\\n    },\\n    \\\"repreq\\\": 1125000,\\n    \\\"cost\\\": 5000000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"MegaCorp\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"SmartJaw\\\": {\\n    \\\"stats\\\": {\\n      \\\"charisma_mult\\\": 1.5,\\n      \\\"charisma_exp_mult\\\": 1.5,\\n      \\\"company_rep_mult\\\": 1.25,\\n      \\\"faction_rep_mult\\\": 1.25\\n    },\\n    \\\"repreq\\\": 375000,\\n    \\\"cost\\\": 2750000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"Bachman & Associates\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Neotra\\\": {\\n    \\\"stats\\\": {\\n      \\\"strength_mult\\\": 1.55,\\n      \\\"defense_mult\\\": 1.55\\n    },\\n    \\\"repreq\\\": 562500,\\n    \\\"cost\\\": 2875000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"Blade Industries\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Xanipher\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_mult\\\": 1.2,\\n      \\\"strength_mult\\\": 1.2,\\n      \\\"defense_mult\\\": 1.2,\\n      \\\"dexterity_mult\\\": 1.2,\\n      \\\"agility_mult\\\": 1.2,\\n      \\\"charisma_mult\\\": 1.2,\\n      \\\"hacking_exp_mult\\\": 1.15,\\n      \\\"strength_exp_mult\\\": 1.15,\\n      \\\"defense_exp_mult\\\": 1.15,\\n      \\\"dexterity_exp_mult\\\": 1.15,\\n      \\\"agility_exp_mult\\\": 1.15,\\n      \\\"charisma_exp_mult\\\": 1.15\\n    },\\n    \\\"repreq\\\": 875000,\\n    \\\"cost\\\": 4250000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"NWO\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"Hydroflame Left Arm\\\": {\\n    \\\"stats\\\": {\\n      \\\"strength_mult\\\": 2.7\\n    },\\n    \\\"repreq\\\": 1250000,\\n    \\\"cost\\\": 2500000000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"NWO\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"nextSENS Gene Modification\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_mult\\\": 1.2,\\n      \\\"strength_mult\\\": 1.2,\\n      \\\"defense_mult\\\": 1.2,\\n      \\\"dexterity_mult\\\": 1.2,\\n      \\\"agility_mult\\\": 1.2,\\n      \\\"charisma_mult\\\": 1.2\\n    },\\n    \\\"repreq\\\": 437500,\\n    \\\"cost\\\": 1925000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"Clarke Incorporated\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"OmniTek InfoLoad\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_mult\\\": 1.2,\\n      \\\"hacking_exp_mult\\\": 1.25\\n    },\\n    \\\"repreq\\\": 625000,\\n    \\\"cost\\\": 2875000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"OmniTek Incorporated\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"Photosynthetic Cells\\\": {\\n    \\\"stats\\\": {\\n      \\\"strength_mult\\\": 1.4,\\n      \\\"defense_mult\\\": 1.4,\\n      \\\"agility_mult\\\": 1.4\\n    },\\n    \\\"repreq\\\": 562500,\\n    \\\"cost\\\": 2750000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"KuaiGong International\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Graphene BrachiBlades Upgrade\\\": {\\n    \\\"stats\\\": {\\n      \\\"strength_mult\\\": 1.4,\\n      \\\"defense_mult\\\": 1.4,\\n      \\\"crime_money_mult\\\": 1.3,\\n      \\\"crime_success_mult\\\": 1.1\\n    },\\n    \\\"repreq\\\": 225000,\\n    \\\"cost\\\": 2500000000,\\n    \\\"prereqs\\\": [\\n      \\\"BrachiBlades\\\"\\n    ],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"Speakers for the Dead\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Graphene Bionic Arms Upgrade\\\": {\\n    \\\"stats\\\": {\\n      \\\"strength_mult\\\": 1.85,\\n      \\\"dexterity_mult\\\": 1.85\\n    },\\n    \\\"repreq\\\": 500000,\\n    \\\"cost\\\": 3750000000,\\n    \\\"prereqs\\\": [\\n      \\\"Bionic Arms\\\"\\n    ],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"The Dark Army\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"BrachiBlades\\\": {\\n    \\\"stats\\\": {\\n      \\\"strength_mult\\\": 1.15,\\n      \\\"defense_mult\\\": 1.15,\\n      \\\"crime_money_mult\\\": 1.15,\\n      \\\"crime_success_mult\\\": 1.1\\n    },\\n    \\\"repreq\\\": 12500,\\n    \\\"cost\\\": 90000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"The Syndicate\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Bionic Arms\\\": {\\n    \\\"stats\\\": {\\n      \\\"strength_mult\\\": 1.3,\\n      \\\"dexterity_mult\\\": 1.3\\n    },\\n    \\\"repreq\\\": 62500,\\n    \\\"cost\\\": 275000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"Tetrads\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"The Red Pill\\\": {\\n    \\\"stats\\\": {},\\n    \\\"repreq\\\": 2500000,\\n    \\\"cost\\\": 0,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Daedalus\\\"\\n    ],\\n    \\\"owned\\\": false\\n  }\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"servergrades.json.txt\",\"text\":\"[\\n  [\\n    \\\"SERVER\\\",\\n    \\\"Max $\\\",\\n    \\\"%h\\\",\\n    \\\"$/s\\\",\\n    \\\"RAM\\\",\\n    \\\"batchtime\\\",\\n    \\\"Score\\\"\\n  ],\\n  [\\n    \\\"clarkinc\\\",\\n    \\\"66.90b\\\",\\n    \\\"100.00%\\\",\\n    \\\"885.64k\\\",\\n    \\\"83.35GB\\\",\\n    \\\"14.735s\\\",\\n    \\\"42502.457\\\"\\n  ],\\n  [\\n    \\\"ecorp\\\",\\n    \\\"174.44b\\\",\\n    \\\"100.00%\\\",\\n    \\\"972.23k\\\",\\n    \\\"119.90GB\\\",\\n    \\\"35.804s\\\",\\n    \\\"32434.562\\\"\\n  ],\\n  [\\n    \\\"megacorp\\\",\\n    \\\"158.78b\\\",\\n    \\\"9.38%\\\",\\n    \\\"804.78k\\\",\\n    \\\"118.15GB\\\",\\n    \\\"38.954s\\\",\\n    \\\"27245.999\\\"\\n  ],\\n  [\\n    \\\"b-and-a\\\",\\n    \\\"65.55b\\\",\\n    \\\"100.00%\\\",\\n    \\\"487.85k\\\",\\n    \\\"106.05GB\\\",\\n    \\\"25.162s\\\",\\n    \\\"18400.719\\\"\\n  ],\\n  [\\n    \\\"kuai-gong\\\",\\n    \\\"83.74b\\\",\\n    \\\"30.10%\\\",\\n    \\\"508.20k\\\",\\n    \\\"112.95GB\\\",\\n    \\\"31.735s\\\",\\n    \\\"17997.315\\\"\\n  ],\\n  [\\n    \\\"4sigma\\\",\\n    \\\"60.78b\\\",\\n    \\\"100.00%\\\",\\n    \\\"464.37k\\\",\\n    \\\"106.05GB\\\",\\n    \\\"26.143s\\\",\\n    \\\"17515.022\\\"\\n  ],\\n  [\\n    \\\"blade\\\",\\n    \\\"86.28b\\\",\\n    \\\"100.00%\\\",\\n    \\\"516.18k\\\",\\n    \\\"121.70GB\\\",\\n    \\\"32.775s\\\",\\n    \\\"16965.654\\\"\\n  ],\\n  [\\n    \\\"nwo\\\",\\n    \\\"90.28b\\\",\\n    \\\"9.67%\\\",\\n    \\\"462.41k\\\",\\n    \\\"151.40GB\\\",\\n    \\\"38.594s\\\",\\n    \\\"12216.896\\\"\\n  ],\\n  [\\n    \\\"omnitek\\\",\\n    \\\"41.76b\\\",\\n    \\\"100.00%\\\",\\n    \\\"257.88k\\\",\\n    \\\"114.70GB\\\",\\n    \\\"30.915s\\\",\\n    \\\"8993.145\\\"\\n  ],\\n  [\\n    \\\"rho-construction\\\",\\n    \\\"1.46b\\\",\\n    \\\"100.00%\\\",\\n    \\\"44.93k\\\",\\n    \\\"85.15GB\\\",\\n    \\\"6.348s\\\",\\n    \\\"2110.548\\\"\\n  ],\\n  [\\n    \\\"zb-def\\\",\\n    \\\"3.05b\\\",\\n    \\\"100.00%\\\",\\n    \\\"40.95k\\\",\\n    \\\"90.40GB\\\",\\n    \\\"14.266s\\\",\\n    \\\"1811.886\\\"\\n  ],\\n  [\\n    \\\"zb-institute\\\",\\n    \\\"2.87b\\\",\\n    \\\"100.00%\\\",\\n    \\\"36.95k\\\",\\n    \\\"100.80GB\\\",\\n    \\\"15.498s\\\",\\n    \\\"1466.356\\\"\\n  ],\\n  [\\n    \\\"alpha-ent\\\",\\n    \\\"1.87b\\\",\\n    \\\"100.00%\\\",\\n    \\\"39.82k\\\",\\n    \\\"111.35GB\\\",\\n    \\\"9.347s\\\",\\n    \\\"1430.359\\\"\\n  ],\\n  [\\n    \\\"global-pharm\\\",\\n    \\\"4.23b\\\",\\n    \\\"100.00%\\\",\\n    \\\"40.73k\\\",\\n    \\\"116.50GB\\\",\\n    \\\"20.652s\\\",\\n    \\\"1398.571\\\"\\n  ],\\n  [\\n    \\\"unitalife\\\",\\n    \\\"2.96b\\\",\\n    \\\"100.00%\\\",\\n    \\\"33.66k\\\",\\n    \\\"97.35GB\\\",\\n    \\\"17.210s\\\",\\n    \\\"1383.234\\\"\\n  ],\\n  [\\n    \\\"nova-med\\\",\\n    \\\"3.25b\\\",\\n    \\\"100.00%\\\",\\n    \\\"34.36k\\\",\\n    \\\"107.80GB\\\",\\n    \\\"18.128s\\\",\\n    \\\"1275.009\\\"\\n  ],\\n  [\\n    \\\"galactic-cyber\\\",\\n    \\\"2.15b\\\",\\n    \\\"100.00%\\\",\\n    \\\"26.00k\\\",\\n    \\\"86.85GB\\\",\\n    \\\"15.560s\\\",\\n    \\\"1197.626\\\"\\n  ],\\n  [\\n    \\\"the-hub\\\",\\n    \\\"510.26m\\\",\\n    \\\"100.00%\\\",\\n    \\\"25.80k\\\",\\n    \\\"86.90GB\\\",\\n    \\\"3.938s\\\",\\n    \\\"1187.742\\\"\\n  ],\\n  [\\n    \\\"deltaone\\\",\\n    \\\"3.71b\\\",\\n    \\\"100.00%\\\",\\n    \\\"34.04k\\\",\\n    \\\"120.05GB\\\",\\n    \\\"20.445s\\\",\\n    \\\"1134.282\\\"\\n  ],\\n  [\\n    \\\"zeus-med\\\",\\n    \\\"3.69b\\\",\\n    \\\"78.20%\\\",\\n    \\\"32.99k\\\",\\n    \\\"121.75GB\\\",\\n    \\\"21.652s\\\",\\n    \\\"1083.857\\\"\\n  ],\\n  [\\n    \\\"fulcrumtech\\\",\\n    \\\"4.76b\\\",\\n    \\\"100.00%\\\",\\n    \\\"31.61k\\\",\\n    \\\"118.20GB\\\",\\n    \\\"29.544s\\\",\\n    \\\"1069.610\\\"\\n  ],\\n  [\\n    \\\"lexo-corp\\\",\\n    \\\"2.24b\\\",\\n    \\\"100.00%\\\",\\n    \\\"30.61k\\\",\\n    \\\"118.30GB\\\",\\n    \\\"14.534s\\\",\\n    \\\"1034.852\\\"\\n  ],\\n  [\\n    \\\"univ-energy\\\",\\n    \\\"3.23b\\\",\\n    \\\"100.00%\\\",\\n    \\\"27.25k\\\",\\n    \\\"114.75GB\\\",\\n    \\\"22.577s\\\",\\n    \\\"949.993\\\"\\n  ],\\n  [\\n    \\\"powerhouse-fitness\\\",\\n    \\\"2.53b\\\",\\n    \\\"100.00%\\\",\\n    \\\"27.37k\\\",\\n    \\\"116.55GB\\\",\\n    \\\"18.487s\\\",\\n    \\\"939.302\\\"\\n  ],\\n  [\\n    \\\"applied-energetics\\\",\\n    \\\"2.51b\\\",\\n    \\\"100.00%\\\",\\n    \\\"25.65k\\\",\\n    \\\"109.55GB\\\",\\n    \\\"18.879s\\\",\\n    \\\"936.465\\\"\\n  ],\\n  [\\n    \\\"stormtech\\\",\\n    \\\"3.32b\\\",\\n    \\\"100.00%\\\",\\n    \\\"24.83k\\\",\\n    \\\"109.50GB\\\",\\n    \\\"26.026s\\\",\\n    \\\"907.059\\\"\\n  ],\\n  [\\n    \\\"icarus\\\",\\n    \\\"2.79b\\\",\\n    \\\"66.89%\\\",\\n    \\\"22.76k\\\",\\n    \\\"102.55GB\\\",\\n    \\\"23.550s\\\",\\n    \\\"887.677\\\"\\n  ],\\n  [\\n    \\\"solaris\\\",\\n    \\\"2.15b\\\",\\n    \\\"100.00%\\\",\\n    \\\"24.18k\\\",\\n    \\\"109.55GB\\\",\\n    \\\"17.265s\\\",\\n    \\\"882.942\\\"\\n  ],\\n  [\\n    \\\"taiyang-digital\\\",\\n    \\\"2.34b\\\",\\n    \\\"100.00%\\\",\\n    \\\"21.18k\\\",\\n    \\\"106.05GB\\\",\\n    \\\"21.039s\\\",\\n    \\\"798.993\\\"\\n  ],\\n  [\\n    \\\"syscore\\\",\\n    \\\"1.40b\\\",\\n    \\\"100.00%\\\",\\n    \\\"20.42k\\\",\\n    \\\"104.35GB\\\",\\n    \\\"12.879s\\\",\\n    \\\"782.709\\\"\\n  ],\\n  [\\n    \\\"titan-labs\\\",\\n    \\\"2.36b\\\",\\n    \\\"100.00%\\\",\\n    \\\"24.58k\\\",\\n    \\\"128.80GB\\\",\\n    \\\"18.530s\\\",\\n    \\\"763.281\\\"\\n  ],\\n  [\\n    \\\"aerocorp\\\",\\n    \\\"3.30b\\\",\\n    \\\"66.91%\\\",\\n    \\\"27.11k\\\",\\n    \\\"149.75GB\\\",\\n    \\\"23.392s\\\",\\n    \\\"724.026\\\"\\n  ],\\n  [\\n    \\\"omega-net\\\",\\n    \\\"185.19m\\\",\\n    \\\"100.00%\\\",\\n    \\\"15.15k\\\",\\n    \\\"85.20GB\\\",\\n    \\\"2.326s\\\",\\n    \\\"711.372\\\"\\n  ],\\n  [\\n    \\\"microdyne\\\",\\n    \\\"1.87b\\\",\\n    \\\"100.00%\\\",\\n    \\\"19.23k\\\",\\n    \\\"111.30GB\\\",\\n    \\\"18.770s\\\",\\n    \\\"690.976\\\"\\n  ],\\n  [\\n    \\\"infocomm\\\",\\n    \\\"2.49b\\\",\\n    \\\"100.00%\\\",\\n    \\\"24.08k\\\",\\n    \\\"149.80GB\\\",\\n    \\\"19.861s\\\",\\n    \\\"643.067\\\"\\n  ],\\n  [\\n    \\\"snap-fitness\\\",\\n    \\\"1.27b\\\",\\n    \\\"100.00%\\\",\\n    \\\"18.84k\\\",\\n    \\\"118.35GB\\\",\\n    \\\"12.852s\\\",\\n    \\\"636.759\\\"\\n  ],\\n  [\\n    \\\"phantasy\\\",\\n    \\\"67.50m\\\",\\n    \\\"100.00%\\\",\\n    \\\"13.18k\\\",\\n    \\\"85.20GB\\\",\\n    \\\"1.018s\\\",\\n    \\\"618.817\\\"\\n  ],\\n  [\\n    \\\"rothman-uni\\\",\\n    \\\"507.67m\\\",\\n    \\\"100.00%\\\",\\n    \\\"16.70k\\\",\\n    \\\"111.40GB\\\",\\n    \\\"5.806s\\\",\\n    \\\"599.677\\\"\\n  ],\\n  [\\n    \\\"netlink\\\",\\n    \\\"773.44m\\\",\\n    \\\"100.00%\\\",\\n    \\\"16.78k\\\",\\n    \\\"113.10GB\\\",\\n    \\\"8.627s\\\",\\n    \\\"593.319\\\"\\n  ],\\n  [\\n    \\\"vitalife\\\",\\n    \\\"2.13b\\\",\\n    \\\"100.00%\\\",\\n    \\\"17.94k\\\",\\n    \\\"121.75GB\\\",\\n    \\\"23.082s\\\",\\n    \\\"589.523\\\"\\n  ],\\n  [\\n    \\\"omnia\\\",\\n    \\\"2.75b\\\",\\n    \\\"100.00%\\\",\\n    \\\"20.89k\\\",\\n    \\\"144.50GB\\\",\\n    \\\"25.132s\\\",\\n    \\\"578.167\\\"\\n  ],\\n  [\\n    \\\"catalyst\\\",\\n    \\\"1.08b\\\",\\n    \\\"100.00%\\\",\\n    \\\"22.60k\\\",\\n    \\\"170.85GB\\\",\\n    \\\"9.140s\\\",\\n    \\\"529.012\\\"\\n  ],\\n  [\\n    \\\"silver-helix\\\",\\n    \\\"126.56m\\\",\\n    \\\"100.00%\\\",\\n    \\\"13.89k\\\",\\n    \\\"106.20GB\\\",\\n    \\\"1.745s\\\",\\n    \\\"523.096\\\"\\n  ],\\n  [\\n    \\\"comptek\\\",\\n    \\\"628.49m\\\",\\n    \\\"100.00%\\\",\\n    \\\"16.43k\\\",\\n    \\\"127.10GB\\\",\\n    \\\"7.525s\\\",\\n    \\\"516.977\\\"\\n  ],\\n  [\\n    \\\"johnson-ortho\\\",\\n    \\\"223.27m\\\",\\n    \\\"100.00%\\\",\\n    \\\"11.51k\\\",\\n    \\\"90.40GB\\\",\\n    \\\"3.830s\\\",\\n    \\\"509.201\\\"\\n  ],\\n  [\\n    \\\"helios\\\",\\n    \\\"1.92b\\\",\\n    \\\"100.00%\\\",\\n    \\\"15.29k\\\",\\n    \\\"128.75GB\\\",\\n    \\\"23.886s\\\",\\n    \\\"475.142\\\"\\n  ],\\n  [\\n    \\\"defcomm\\\",\\n    \\\"2.40b\\\",\\n    \\\"80.98%\\\",\\n    \\\"18.65k\\\",\\n    \\\"160.25GB\\\",\\n    \\\"24.915s\\\",\\n    \\\"465.478\\\"\\n  ],\\n  [\\n    \\\"millenium-fitness\\\",\\n    \\\"703.13m\\\",\\n    \\\"100.00%\\\",\\n    \\\"17.00k\\\",\\n    \\\"148.10GB\\\",\\n    \\\"8.267s\\\",\\n    \\\"459.275\\\"\\n  ],\\n  [\\n    \\\"summit-uni\\\",\\n    \\\"662.03m\\\",\\n    \\\"100.00%\\\",\\n    \\\"13.11k\\\",\\n    \\\"118.35GB\\\",\\n    \\\"9.619s\\\",\\n    \\\"443.204\\\"\\n  ],\\n  [\\n    \\\"max-hardware\\\",\\n    \\\"28.13m\\\",\\n    \\\"100.00%\\\",\\n    \\\"6.98k\\\",\\n    \\\"88.75GB\\\",\\n    \\\"0.745s\\\",\\n    \\\"314.527\\\"\\n  ],\\n  [\\n    \\\"crush-fitness\\\",\\n    \\\"148.71m\\\",\\n    \\\"100.00%\\\",\\n    \\\"8.55k\\\",\\n    \\\"132.45GB\\\",\\n    \\\"3.193s\\\",\\n    \\\"258.203\\\"\\n  ],\\n  [\\n    \\\"iron-gym\\\",\\n    \\\"56.25m\\\",\\n    \\\"100.00%\\\",\\n    \\\"8.38k\\\",\\n    \\\"132.50GB\\\",\\n    \\\"1.290s\\\",\\n    \\\"253.103\\\"\\n  ],\\n  [\\n    \\\"zer0\\\",\\n    \\\"21.09m\\\",\\n    \\\"100.00%\\\",\\n    \\\"4.48k\\\",\\n    \\\"78.20GB\\\",\\n    \\\"0.927s\\\",\\n    \\\"229.379\\\"\\n  ],\\n  [\\n    \\\"aevum-police\\\",\\n    \\\"637.50m\\\",\\n    \\\"100.00%\\\",\\n    \\\"11.46k\\\",\\n    \\\"202.30GB\\\",\\n    \\\"10.850s\\\",\\n    \\\"226.566\\\"\\n  ],\\n  [\\n    \\\"harakiri-sushi\\\",\\n    \\\"11.25m\\\",\\n    \\\"100.00%\\\",\\n    \\\"3.71k\\\",\\n    \\\"73.00GB\\\",\\n    \\\"0.563s\\\",\\n    \\\"203.027\\\"\\n  ],\\n  [\\n    \\\"neo-net\\\",\\n    \\\"14.06m\\\",\\n    \\\"100.00%\\\",\\n    \\\"3.73k\\\",\\n    \\\"111.45GB\\\",\\n    \\\"0.745s\\\",\\n    \\\"133.769\\\"\\n  ],\\n  [\\n    \\\"nectar-net\\\",\\n    \\\"7.73m\\\",\\n    \\\"100.00%\\\",\\n    \\\"2.77k\\\",\\n    \\\"101.00GB\\\",\\n    \\\"0.509s\\\",\\n    \\\"109.540\\\"\\n  ],\\n  [\\n    \\\"hong-fang-tea\\\",\\n    \\\"8.44m\\\",\\n    \\\"100.00%\\\",\\n    \\\"3.03k\\\",\\n    \\\"123.75GB\\\",\\n    \\\"0.518s\\\",\\n    \\\"97.791\\\"\\n  ],\\n  [\\n    \\\"joesguns\\\",\\n    \\\"7.03m\\\",\\n    \\\"100.00%\\\",\\n    \\\"3.06k\\\",\\n    \\\"125.50GB\\\",\\n    \\\"0.427s\\\",\\n    \\\"97.628\\\"\\n  ],\\n  [\\n    \\\"sigma-cosmetics\\\",\\n    \\\"6.47m\\\",\\n    \\\"100.00%\\\",\\n    \\\"3.11k\\\",\\n    \\\"234.00GB\\\",\\n    \\\"0.395s\\\",\\n    \\\"53.167\\\"\\n  ],\\n  [\\n    \\\"foodnstuff\\\",\\n    \\\"5.63m\\\",\\n    \\\"100.00%\\\",\\n    \\\"2.78k\\\",\\n    \\\"447.50GB\\\",\\n    \\\"0.384s\\\",\\n    \\\"24.870\\\"\\n  ],\\n  [\\n    \\\"n00dles\\\",\\n    \\\"196.88k\\\",\\n    \\\"100.00%\\\",\\n    \\\"99.86\\\",\\n    \\\"22.25GB\\\",\\n    \\\"0.382s\\\",\\n    \\\"17.952\\\"\\n  ],\\n  [\\n    \\\"fulcrumassets\\\",\\n    \\\"2.81m\\\",\\n    \\\"9.69%\\\",\\n    \\\"14.93\\\",\\n    \\\"8.62TB\\\",\\n    \\\"37.394s\\\",\\n    \\\"0.007\\\"\\n  ]\\n]\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-839265.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":174558455,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"6.4.6.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"ecorp\",\"moduleSequenceNumber\":471,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":472,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":473,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"ecorp\",\"moduleSequenceNumber\":474,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":33,\"minDifficulty\":33,\"moneyAvailable\":174438313444.6875,\"moneyMax\":174438313444.6875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1181,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-764128.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[93,5,133,70,99,11,51,153,66,121,150,12,141,179,97,162,179,97,56,38,143,125,185,47,64,33,11,143,58,191,169],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"30.7.0.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"megacorp\",\"moduleSequenceNumber\":475,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":476,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":477,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"megacorp\",\"moduleSequenceNumber\":478,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":98.04999999999995,\"minDifficulty\":33,\"moneyAvailable\":42340903549.5,\"moneyMax\":158778388310.625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1286,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"13.8.1.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"b-and-a\",\"moduleSequenceNumber\":479,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":480,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":481,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"b-and-a\",\"moduleSequenceNumber\":482,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":70.45624999999993,\"minDifficulty\":24,\"moneyAvailable\":17480455398,\"moneyMax\":65551707742.5,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1136,\"serverGrowth\":75}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"2.0.0.6\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"h1.ns\",\"url\":\"blob:file:///fe879ce9-b1be-445f-876c-31105c41d036\",\"moduleSequenceNumber\":1623}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"blade\",\"moduleSequenceNumber\":483,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"w1.ns\",\"url\":\"blob:file:///12167bb5-f152-4634-9e28-425892af7ff7\",\"moduleSequenceNumber\":614}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":484,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"g1.ns\",\"url\":\"blob:file:///c3aeb49c-5151-46c0-b45e-817e6bcc517b\",\"moduleSequenceNumber\":2894}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":485,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"serverGrower.js\",\"url\":\"blob:file:///309a49f5-9c31-4f77-9ae3-05ad0e5b5249\",\"moduleSequenceNumber\":347574}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"blade\",\"moduleSequenceNumber\":486,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"4sigma\",\"fulcrumassets\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":30,\"minDifficulty\":30,\"moneyAvailable\":86277039941.25,\"moneyMax\":86277039941.25,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1188,\"serverGrowth\":84}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"30.1.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nwo\",\"moduleSequenceNumber\":487,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":488,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":489,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"nwo\",\"moduleSequenceNumber\":490,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\".\",\"megacorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":97.99062499999995,\"minDifficulty\":33,\"moneyAvailable\":24073963924.5,\"moneyMax\":90277364716.875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1274,\"serverGrowth\":72}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"17.9.0.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"clarkinc\",\"moduleSequenceNumber\":491,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":492,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":493,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"clarkinc\",\"moduleSequenceNumber\":494,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"kuai-gong\",\"ecorp\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":45.26874999999987,\"minDifficulty\":16,\"moneyAvailable\":17840217593.25,\"moneyMax\":66900815974.6875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":987,\"serverGrowth\":71}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-921916-Sector-12.cct\",\"type\":\"Total Ways to Sum\",\"data\":20,\"reward\":{\"name\":\"Sector-12\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-81623.cct\",\"type\":\"Total Ways to Sum\",\"data\":26,\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-455611.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[4,[123,94,161,74,190,37,15,15,33,68,151,187,39,95,117,51,98,112,77,173,138,95,7,60,97,181,27,82,4,109,40,139,164,97,198,147,22,8,6,56,100,137,38,27,83,3,78,120,193]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"73.2.8.0\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"h1.ns\",\"url\":\"blob:file:///6b92aa95-beb5-4aaa-af1e-03fa37d8d37c\",\"moduleSequenceNumber\":1621}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnitek\",\"moduleSequenceNumber\":495,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"w1.ns\",\"url\":\"blob:file:///8b45d3cc-32ea-491f-9dd4-8db7cd0920bb\",\"moduleSequenceNumber\":615}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":496,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"g1.ns\",\"url\":\"blob:file:///270dbb97-3ed5-400f-9162-b00b0404fff6\",\"moduleSequenceNumber\":2892}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":497,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"serverGrower.js\",\"url\":\"blob:file:///d5a7f25e-cc8d-4f1e-90a5-204d1b59cf76\",\"moduleSequenceNumber\":347564}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"omnitek\",\"moduleSequenceNumber\":498,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":33,\"minDifficulty\":33,\"moneyAvailable\":41760918416.25,\"moneyMax\":41760918416.25,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1018,\"serverGrowth\":97}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-614116.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"89651166427\",41],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"74.5.5.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"4sigma\",\"moduleSequenceNumber\":499,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":500,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":501,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"4sigma\",\"moduleSequenceNumber\":502,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"vitalife\",\"b-and-a\",\"blade\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":69.51562499999993,\"minDifficulty\":24,\"moneyAvailable\":16208918112,\"moneyMax\":60783442920,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1181,\"serverGrowth\":75}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"5.9.7.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":503,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":504,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":505,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":506,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"helios\",\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":93.81249999999994,\"minDifficulty\":32,\"moneyAvailable\":22329847753.5,\"moneyMax\":83736929075.625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1078,\"serverGrowth\":97}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"28.9.3.6\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"h1.ns\",\"url\":\"blob:file:///caf79f88-8905-409a-a81a-f8ea6a441234\",\"moduleSequenceNumber\":1618}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":507,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"w1.ns\",\"url\":\"blob:file:///b20ecf8a-513b-4761-9140-9da19752b175\",\"moduleSequenceNumber\":616}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":508,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"g1.ns\",\"url\":\"blob:file:///7dfeab25-1f2a-482b-8549-7b67a6ba6728\",\"moduleSequenceNumber\":2889}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":509,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"serverGrower.js\",\"url\":\"blob:file:///4081b1ef-4861-4e98-988e-9f580ef312e7\",\"moduleSequenceNumber\":347562}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":510,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"titan-labs\",\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":31,\"minDifficulty\":31,\"moneyAvailable\":4757623472.8125,\"moneyMax\":4757623472.8125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1035,\"serverGrowth\":91}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-26215.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[7],[7,8],[5,2,1],[8,3,6,7],[7,3,5,8,7],[8,1,9,2,8,5],[4,8,2,8,7,6,5],[7,8,2,8,8,8,6,2],[8,8,9,7,2,8,1,6,3],[4,6,3,1,8,3,1,9,2,3],[4,5,4,5,9,8,5,3,1,9,4],[1,4,7,8,5,6,2,4,2,5,5,1]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"37.0.5.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":511,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":512,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":513,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":514,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":97.99062499999995,\"minDifficulty\":33,\"moneyAvailable\":750000,\"moneyMax\":2812500,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1234,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"69.5.7.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"stormtech\",\"moduleSequenceNumber\":515,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":516,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":517,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"stormtech\",\"moduleSequenceNumber\":518,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":78.51562499999993,\"minDifficulty\":27,\"moneyAvailable\":886134676.5,\"moneyMax\":3323005036.875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1045,\"serverGrowth\":86}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-616276.cct\",\"type\":\"Total Ways to Sum\",\"data\":8,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"36.8.4.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"defcomm\",\"moduleSequenceNumber\":519,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":520,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":521,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"defcomm\",\"moduleSequenceNumber\":522,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omnia\",\"infocomm\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":83.45624999999993,\"minDifficulty\":28,\"moneyAvailable\":640755402.75,\"moneyMax\":2402832760.3125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":964,\"serverGrowth\":54}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-452092.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"3579080966\",68],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"22.1.7.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"infocomm\",\"moduleSequenceNumber\":523,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":524,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":525,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"infocomm\",\"moduleSequenceNumber\":526,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"defcomm\",\"microdyne\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":71.09999999999991,\"minDifficulty\":24,\"moneyAvailable\":664906997.25,\"moneyMax\":2493401239.6875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":893,\"serverGrowth\":49}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-75370-Sector-12.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[8,23],[15,40],[26,14],[17,22],[14,32]],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"56.9.3.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"h1.ns\",\"url\":\"blob:file:///98e8d07c-481a-49ca-9a57-7cd76c63d5dd\",\"moduleSequenceNumber\":1619}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"helios\",\"moduleSequenceNumber\":527,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"w1.ns\",\"url\":\"blob:file:///2a4bb2ef-9a94-48ca-8e14-fb92c26883e7\",\"moduleSequenceNumber\":617}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":528,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"g1.ns\",\"url\":\"blob:file:///e5240d8b-1d63-4422-b9ae-4a52c83d3108\",\"moduleSequenceNumber\":2890}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":529,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"serverGrower.js\",\"url\":\"blob:file:///eaf8f097-efc8-4d7b-ad17-59bcb65acdd7\",\"moduleSequenceNumber\":321052}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"helios\",\"moduleSequenceNumber\":530,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"titan-labs\",\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":30,\"minDifficulty\":30,\"moneyAvailable\":1923811568.4375,\"moneyMax\":1923811568.4375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":862,\"serverGrowth\":75}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"56.0.4.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"h1.ns\",\"url\":\"blob:file:///6265eddf-464a-411b-9a6e-95fce9dd1043\",\"moduleSequenceNumber\":1620}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"vitalife\",\"moduleSequenceNumber\":531,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"w1.ns\",\"url\":\"blob:file:///704f29d1-cf1c-4c0b-b393-fcf5ebae4374\",\"moduleSequenceNumber\":618}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":532,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"g1.ns\",\"url\":\"blob:file:///77ce1cef-1c78-4c0b-b2ad-e761d20d56b5\",\"moduleSequenceNumber\":2891}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":533,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"serverGrower.js\",\"url\":\"blob:file:///04e1c026-ac04-4ff6-947b-f67ea7cd0254\",\"moduleSequenceNumber\":321063}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"vitalife\",\"moduleSequenceNumber\":534,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"titan-labs\",\"4sigma\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":28,\"minDifficulty\":28,\"moneyAvailable\":2126882427.1875,\"moneyMax\":2126882427.1875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":892,\"serverGrowth\":76}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"75.8.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"icarus\",\"moduleSequenceNumber\":535,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":536,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":537,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"icarus\",\"moduleSequenceNumber\":538,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":86.39687499999992,\"minDifficulty\":29,\"moneyAvailable\":743314143,\"moneyMax\":2787428036.25,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":879,\"serverGrowth\":90}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-774776.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[13,23],[20,21],[8,10],[10,16],[21,23]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-967932-Sector-12.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[7,[119,74,58,39,71,175,136,86,187,55,95,157,12,80,163,157,15,144,33,123,148,41,120,11,100,161,182,121,108,131,69,186,164,113,160,55,127,139]],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"76.1.6.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"h1.ns\",\"url\":\"blob:file:///2fce40de-6e7a-4035-a811-a518006e2fdf\",\"moduleSequenceNumber\":1613}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"univ-energy\",\"moduleSequenceNumber\":539,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"w1.ns\",\"url\":\"blob:file:///3349e558-8568-496f-9c4e-cfc1cc76956a\",\"moduleSequenceNumber\":619}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":540,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"g1.ns\",\"url\":\"blob:file:///56856cbb-d6a9-49fc-9585-236e44726d93\",\"moduleSequenceNumber\":2884}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":541,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"serverGrower.js\",\"url\":\"blob:file:///56c062c4-c7bb-4803-9359-2d8d1552e6bd\",\"moduleSequenceNumber\":347587}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"univ-energy\",\"moduleSequenceNumber\":542,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"deltaone\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":30,\"minDifficulty\":30,\"moneyAvailable\":3225208356.5625,\"moneyMax\":3225208356.5625,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":814,\"serverGrowth\":87}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-193304.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[8,[74,173,189,51,22,171,15]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"31.1.2.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"h1.ns\",\"url\":\"blob:file:///40cb1441-e232-4316-bfae-ed84c40a2be8\",\"moduleSequenceNumber\":1617}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"titan-labs\",\"moduleSequenceNumber\":543,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"w1.ns\",\"url\":\"blob:file:///fc2b0357-28fb-4462-92b7-94befca9f0ce\",\"moduleSequenceNumber\":620}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":544,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"g1.ns\",\"url\":\"blob:file:///b649f919-a997-4ede-b4ed-a796cbfe036a\",\"moduleSequenceNumber\":2888}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":545,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"serverGrower.js\",\"url\":\"blob:file:///37d959b8-5270-40fe-acee-87f54f360e20\",\"moduleSequenceNumber\":347560}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"titan-labs\",\"moduleSequenceNumber\":546,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zb-def\",\"fulcrumtech\",\"helios\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":24,\"minDifficulty\":24,\"moneyAvailable\":2360028611.25,\"moneyMax\":2360028611.25,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":832,\"serverGrowth\":60}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-863625-Sector-12.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[9,[146,103,79,84,26,3,146,90,153,25,154,86,10,104,68,146,26,119,23,172,43,121,98,58,115,55,75,20,194]],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"0.4.3.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"h1.ns\",\"url\":\"blob:file:///b4cfe808-0297-48d5-9e83-d62f93217041\",\"moduleSequenceNumber\":1615}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"microdyne\",\"moduleSequenceNumber\":547,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"w1.ns\",\"url\":\"blob:file:///46b68658-e50a-4b9b-be29-c483ae2f93d1\",\"moduleSequenceNumber\":621}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":548,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"g1.ns\",\"url\":\"blob:file:///53f96aa0-c3c0-4577-958d-37ffa4de927e\",\"moduleSequenceNumber\":2886}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":549,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"serverGrower.js\",\"url\":\"blob:file:///254b5a24-6f04-4028-a625-50ff23d01f29\",\"moduleSequenceNumber\":347554}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"microdyne\",\"moduleSequenceNumber\":550,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":24,\"minDifficulty\":24,\"moneyAvailable\":1872096730.3125,\"moneyMax\":1872096730.3125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":843,\"serverGrowth\":72}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"62.2.6.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":551,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":552,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":553,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":554,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"univ-energy\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":69.15937499999991,\"minDifficulty\":24,\"moneyAvailable\":622838525.25,\"moneyMax\":2335644469.6875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":947,\"serverGrowth\":77}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-258858.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[3,-6,10,2,8,2,1,-2,-5,-9,0,-10,-1,10,-6,-10,-3,6,-9,-8,2,-9,-5,5,0,-8,-6],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"39.5.6.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":555,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":556,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":557,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":558,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"alpha-ent\",\"omnia\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":58.50624999999988,\"minDifficulty\":20,\"moneyAvailable\":572191664.25,\"moneyMax\":2145718740.9375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":835,\"serverGrowth\":79}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-808917-Sector-12.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[9],[3,7],[6,4,4],[3,7,6,4],[4,6,2,7,1],[3,2,3,9,6,7],[8,4,9,6,6,4,1],[9,9,3,6,8,9,6,3],[6,3,6,7,7,2,7,5,7]],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"65.9.6.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aerocorp\",\"moduleSequenceNumber\":559,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":560,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":561,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"aerocorp\",\"moduleSequenceNumber\":562,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":86.39687499999992,\"minDifficulty\":29,\"moneyAvailable\":878863293,\"moneyMax\":3295737348.75,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":873,\"serverGrowth\":61}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-501295.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[70,63,161,83,64,6,3,63,89,188,139,135,144,72,172,151,16,97,69,178,134,192,105,129,69,189,2,170,128,38,71,80],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"75.9.3.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"h1.ns\",\"url\":\"blob:file:///1067c677-b4be-4aaf-b02f-a1437feac188\",\"moduleSequenceNumber\":1611}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnia\",\"moduleSequenceNumber\":563,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"w1.ns\",\"url\":\"blob:file:///729da508-6526-4fae-a129-41aa22457185\",\"moduleSequenceNumber\":622}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":564,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"g1.ns\",\"url\":\"blob:file:///f0f67b1b-8f53-4c12-b3c8-085303010678\",\"moduleSequenceNumber\":2882}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":565,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"serverGrower.js\",\"url\":\"blob:file:///8483cfe3-95af-4800-bd60-a628367b2e11\",\"moduleSequenceNumber\":321026}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"omnia\",\"moduleSequenceNumber\":566,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"galactic-cyber\",\"defcomm\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":29,\"minDifficulty\":29,\"moneyAvailable\":2746129747.5,\"moneyMax\":2746129747.5,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":939,\"serverGrowth\":62}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"77.6.0.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-def\",\"moduleSequenceNumber\":567,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":568,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":569,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"zb-def\",\"moduleSequenceNumber\":570,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"defcomm\",\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":54.149999999999864,\"minDifficulty\":19,\"moneyAvailable\":813446174.25,\"moneyMax\":3050423153.4375,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":804,\"serverGrowth\":65}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-262939.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[11,8],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"81.2.8.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":571,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":572,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":573,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":574,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":69.9218749999999,\"minDifficulty\":24,\"moneyAvailable\":670148645.25,\"moneyMax\":2513057419.6875,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":848,\"serverGrowth\":73}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"41.0.3.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"h1.ns\",\"url\":\"blob:file:///f316c407-4650-446c-8280-a4c3d7b1ec6e\",\"moduleSequenceNumber\":1614}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"solaris\",\"moduleSequenceNumber\":575,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"w1.ns\",\"url\":\"blob:file:///5ea55845-7954-4d5a-92e2-af00f43c5a4d\",\"moduleSequenceNumber\":623}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":576,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"g1.ns\",\"url\":\"blob:file:///bd034cb1-d0d5-47d4-ac68-7ca1277daea5\",\"moduleSequenceNumber\":2885}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":577,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"serverGrower.js\",\"url\":\"blob:file:///98005242-4c1f-499c-af43-ae9cb8f2cb41\",\"moduleSequenceNumber\":347591}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"solaris\",\"moduleSequenceNumber\":578,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"deltaone\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":24,\"minDifficulty\":24,\"moneyAvailable\":2151294361.875,\"moneyMax\":2151294361.875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":774,\"serverGrowth\":74}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-721426.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,1,0],[1,0,1],[0,0,0],[0,0,0]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"75.1.5.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"deltaone\",\"moduleSequenceNumber\":579,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":580,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":581,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"deltaone\",\"moduleSequenceNumber\":582,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"global-pharm\",\"icarus\",\"univ-energy\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":76.09999999999991,\"minDifficulty\":26,\"moneyAvailable\":989379996.75,\"moneyMax\":3710174987.8125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":849,\"serverGrowth\":68}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-169326.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[23,27],[8,11],[7,10],[4,6],[5,9],[21,25],[14,16],[22,23],[8,13],[15,22]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"74.4.9.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"h1.ns\",\"url\":\"blob:file:///a2869236-d21d-45cf-9308-f2aac51ccff1\",\"moduleSequenceNumber\":1610}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"global-pharm\",\"moduleSequenceNumber\":583,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"w1.ns\",\"url\":\"blob:file:///96666eed-b52a-46af-8d83-cb0c9da7dfa3\",\"moduleSequenceNumber\":624}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":584,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"g1.ns\",\"url\":\"blob:file:///5920e066-a922-41e3-9cea-0f95a43d4d5d\",\"moduleSequenceNumber\":2881}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":585,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"serverGrower.js\",\"url\":\"blob:file:///8f0b9ee6-10bc-4e8b-805d-37b465d2bd0b\",\"moduleSequenceNumber\":751}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"global-pharm\",\"moduleSequenceNumber\":751,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"alpha-ent\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":27.024,\"minDifficulty\":27,\"moneyAvailable\":1229794656.9646764,\"moneyMax\":4233238368.75,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":826,\"serverGrowth\":80}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"67.6.9.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nova-med\",\"moduleSequenceNumber\":587,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":588,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":589,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"nova-med\",\"moduleSequenceNumber\":590,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":72.8624999999999,\"minDifficulty\":25,\"moneyAvailable\":867910737,\"moneyMax\":3254665263.75,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":781,\"serverGrowth\":78}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-695663-Sector-12.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[183,15,132,13,169,69,184,62,50,47,88,104,152,159,72,70,143,23,14,32,141,117,16,159,34,114,88,132,32,114,135,74,155,46,47,190,23,35,74,163,88,76,160,149,102],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"83.0.1.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zeus-med\",\"moduleSequenceNumber\":591,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":592,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":593,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"zeus-med\",\"moduleSequenceNumber\":594,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":84.15937499999991,\"minDifficulty\":29,\"moneyAvailable\":983745716.25,\"moneyMax\":3689046435.9375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":807,\"serverGrowth\":78}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"54.7.0.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"h1.ns\",\"url\":\"blob:file:///d2c35177-e2d9-401c-9293-798fa72f834f\",\"moduleSequenceNumber\":1612}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"unitalife\",\"moduleSequenceNumber\":595,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"w1.ns\",\"url\":\"blob:file:///3ec53a56-2074-4281-914a-2c4383fd87a6\",\"moduleSequenceNumber\":625}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":596,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"g1.ns\",\"url\":\"blob:file:///2d7ccc7b-e181-49df-85d6-94f727c2c25a\",\"moduleSequenceNumber\":2883}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":597,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"serverGrower.js\",\"url\":\"blob:file:///c4d85ccb-a823-4d00-b833-cc3d017f8121\",\"moduleSequenceNumber\":752}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"unitalife\",\"moduleSequenceNumber\":752,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"galactic-cyber\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":23,\"minDifficulty\":23,\"moneyAvailable\":2955427059.375,\"moneyMax\":2955427059.375,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":805,\"serverGrowth\":77}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-424944-Sector-12.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[48,85,5,55,151,72,110,65,32,126,40,36,30,28,30,106,160,59,175,46,115,153,176,167,81,180,81,22,69,38,179,57,77,6,76,165],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"48.8.9.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"h1.ns\",\"url\":\"blob:file:///00670708-fc75-4201-af2b-36843907fff6\",\"moduleSequenceNumber\":1606}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":599,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"w1.ns\",\"url\":\"blob:file:///f1d4e78e-4f40-4079-b977-e62c2622205b\",\"moduleSequenceNumber\":626}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":600,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"g1.ns\",\"url\":\"blob:file:///fea569e5-2a08-4824-9b5b-0f9f8afb9164\",\"moduleSequenceNumber\":2877}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":601,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"serverGrower.js\",\"url\":\"blob:file:///75d1601d-a999-4792-b3bd-9a904678a1c1\",\"moduleSequenceNumber\":347545}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":602,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"syscore\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":23,\"minDifficulty\":23,\"moneyAvailable\":2241246150,\"moneyMax\":2241246150,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":677,\"serverGrowth\":65}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"87.9.8.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"h1.ns\",\"url\":\"blob:file:///033c2e2d-d658-43a0-85c1-b5202ea34114\",\"moduleSequenceNumber\":1608}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rho-construction\",\"moduleSequenceNumber\":603,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"w1.ns\",\"url\":\"blob:file:///1f73a3e2-f28f-47dd-a2d5-14cdb09ef632\",\"moduleSequenceNumber\":627}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":604,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"g1.ns\",\"url\":\"blob:file:///15508cb7-7f5a-49aa-a6c0-286267e1cb2d\",\"moduleSequenceNumber\":2879}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":605,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"serverGrower.js\",\"url\":\"blob:file:///498d2a8e-12c3-4ee6-a556-d28aa5be4470\",\"moduleSequenceNumber\":347596}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"rho-construction\",\"moduleSequenceNumber\":606,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":13,\"minDifficulty\":13,\"moneyAvailable\":1459824862.5,\"moneyMax\":1459824862.5,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":505,\"serverGrowth\":55}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"82.9.5.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"h1.ns\",\"url\":\"blob:file:///9437dd18-4c97-48aa-a36b-fd143576c73d\",\"moduleSequenceNumber\":1607}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":607,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"w1.ns\",\"url\":\"blob:file:///f0efa633-43d1-4b63-81fe-3f4cdc7146e6\",\"moduleSequenceNumber\":628}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":608,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"g1.ns\",\"url\":\"blob:file:///0f4c00ad-3961-4d1c-8fa6-d1afca96eb6f\",\"moduleSequenceNumber\":2878}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":609,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"serverGrower.js\",\"url\":\"blob:file:///d6bbfdf1-ee34-4573-a811-2037e7d271a0\",\"moduleSequenceNumber\":347548}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":610,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"syscore\",\"galactic-cyber\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":18,\"minDifficulty\":18,\"moneyAvailable\":1873106659.6875,\"moneyMax\":1873106659.6875,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":548,\"serverGrowth\":55}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"56.9.4.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"h1.ns\",\"url\":\"blob:file:///e71ead8c-3f49-486b-a892-03d9ff577ebd\",\"moduleSequenceNumber\":1609}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aevum-police\",\"moduleSequenceNumber\":611,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"w1.ns\",\"url\":\"blob:file:///6e67e4b7-b7be-493b-83d6-99d4265d4ca5\",\"moduleSequenceNumber\":629}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":612,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"g1.ns\",\"url\":\"blob:file:///96f2870b-aa60-47ea-916a-8c1c99d3a8f8\",\"moduleSequenceNumber\":2880}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":613,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"serverGrower.js\",\"url\":\"blob:file:///d5f8fbb1-4379-490e-bfc4-a8300a39291e\",\"moduleSequenceNumber\":321124}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"aevum-police\",\"moduleSequenceNumber\":614,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zb-institute\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":26,\"minDifficulty\":26,\"moneyAvailable\":637498982.8125,\"moneyMax\":637498982.8125,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":443,\"serverGrowth\":38}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"9.5.0.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"h1.ns\",\"url\":\"blob:file:///6952e897-8292-4243-bf7c-ec2e835a55fe\",\"moduleSequenceNumber\":1601}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":615,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"w1.ns\",\"url\":\"blob:file:///07fe81ba-8ad3-4f50-b0c0-d21ab6b224cd\",\"moduleSequenceNumber\":630}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":616,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"g1.ns\",\"url\":\"blob:file:///da0aebf1-0a53-44c4-88f1-b1ecbb46c594\",\"moduleSequenceNumber\":2872}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":617,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"serverGrower.js\",\"url\":\"blob:file:///09d717a2-88ac-4adf-89ef-b4d8d9ab0a3a\",\"moduleSequenceNumber\":347534}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":618,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"comptek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":49,\"hackDifficulty\":16,\"minDifficulty\":16,\"moneyAvailable\":507667080.9375,\"moneyMax\":507667080.9375,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":373,\"serverGrowth\":45}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"31.8.2.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"h1.ns\",\"url\":\"blob:file:///f953b288-efea-4281-aad7-9975ee2dd190\",\"moduleSequenceNumber\":1604}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-institute\",\"moduleSequenceNumber\":619,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"w1.ns\",\"url\":\"blob:file:///6cbcbb12-682a-4d99-adf2-8e53d6b7d1f5\",\"moduleSequenceNumber\":631}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":620,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"g1.ns\",\"url\":\"blob:file:///76562111-9681-4a80-a86e-3fd3c7470da2\",\"moduleSequenceNumber\":2875}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":621,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"serverGrower.js\",\"url\":\"blob:file:///0efcf003-c114-415c-bb8d-35c3f7b8ddc6\",\"moduleSequenceNumber\":321121}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"zb-institute\",\"moduleSequenceNumber\":622,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"avmnite-02h\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":22,\"minDifficulty\":22,\"moneyAvailable\":2870319403.125,\"moneyMax\":2870319403.125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":756,\"serverGrowth\":79}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"64.3.9.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"h1.ns\",\"url\":\"blob:file:///afa37abb-c773-43bd-a50a-1df2b46761a2\",\"moduleSequenceNumber\":1600}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"summit-uni\",\"moduleSequenceNumber\":623,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"w1.ns\",\"url\":\"blob:file:///656c0ed9-b07c-4a85-8716-f1ea6c11308c\",\"moduleSequenceNumber\":632}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":624,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"g1.ns\",\"url\":\"blob:file:///f1b10cf7-f16a-4cea-b834-6eb8c28ee0a5\",\"moduleSequenceNumber\":2871}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":625,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"serverGrower.js\",\"url\":\"blob:file:///f4ccc650-e8c2-4366-a293-885c39ce9b1b\",\"moduleSequenceNumber\":347531}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"summit-uni\",\"moduleSequenceNumber\":626,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":22,\"minDifficulty\":22,\"moneyAvailable\":662028837.1875,\"moneyMax\":662028837.1875,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":462,\"serverGrowth\":58}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"39.2.6.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"syscore\",\"moduleSequenceNumber\":627,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":628,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":629,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"syscore\",\"moduleSequenceNumber\":630,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"johnson-ortho\",\"lexo-corp\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":62.85312499999985,\"minDifficulty\":22,\"moneyAvailable\":373765653.75,\"moneyMax\":1401621201.5625,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":625,\"serverGrowth\":68}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"3.5.3.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"h1.ns\",\"url\":\"blob:file:///452ab19f-ecb5-43ff-9d01-c5d8be028fb2\",\"moduleSequenceNumber\":1603}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"catalyst\",\"moduleSequenceNumber\":631,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"w1.ns\",\"url\":\"blob:file:///11b2fb30-5e84-4a36-9456-893dace774de\",\"moduleSequenceNumber\":633}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":632,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"g1.ns\",\"url\":\"blob:file:///52706ca5-31e6-44b2-93c9-4a0776ac623f\",\"moduleSequenceNumber\":2874}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":633,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"serverGrower.js\",\"url\":\"blob:file:///e022ba31-767d-43d0-b0e5-effe8ab13d30\",\"moduleSequenceNumber\":347594}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"catalyst\",\"moduleSequenceNumber\":634,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"johnson-ortho\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":22,\"minDifficulty\":22,\"moneyAvailable\":1081387153.125,\"moneyMax\":1081387153.125,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":438,\"serverGrowth\":38}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"39.5.0.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"h1.ns\",\"url\":\"blob:file:///2ab83ade-898d-43b7-a683-8b4a82ee645e\",\"moduleSequenceNumber\":1597}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"the-hub\",\"moduleSequenceNumber\":635,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"w1.ns\",\"url\":\"blob:file:///a6fd1cf0-a41b-4f48-a395-9c3952a1b0aa\",\"moduleSequenceNumber\":634}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":636,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"g1.ns\",\"url\":\"blob:file:///717b8ec9-8f84-4852-a1de-4f69ed655e2b\",\"moduleSequenceNumber\":2868}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":637,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"serverGrower.js\",\"url\":\"blob:file:///6170f02f-8be3-43f5-aa56-3249b146951b\",\"moduleSequenceNumber\":347529}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"the-hub\",\"moduleSequenceNumber\":638,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"neo-net\",\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":39,\"hackDifficulty\":13,\"minDifficulty\":13,\"moneyAvailable\":510264005.625,\"moneyMax\":510264005.625,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":301,\"serverGrowth\":54}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-156254.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[12,3],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":true,\"ip\":\"59.7.3.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"comptek\",\"moduleSequenceNumber\":639,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"moduleSequenceNumber\":640,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"moduleSequenceNumber\":641,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"comptek\",\"moduleSequenceNumber\":642,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"neo-net\",\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":54.29999999999973,\"minDifficulty\":20,\"moneyAvailable\":167596694.25,\"moneyMax\":628487603.4375,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":393,\"serverGrowth\":51}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"1.4.1.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"h1.ns\",\"url\":\"blob:file:///1e5d4d59-5658-4fb2-9ce6-279c9a13eb58\",\"moduleSequenceNumber\":1598}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"netlink\",\"moduleSequenceNumber\":643,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"w1.ns\",\"url\":\"blob:file:///f4de53f9-1b5b-44fc-a6ff-a0435ffd670d\",\"moduleSequenceNumber\":635}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":644,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"g1.ns\",\"url\":\"blob:file:///2051a232-7d9f-41f3-9c7d-31b49baa1c1c\",\"moduleSequenceNumber\":2869}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":645,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"serverGrower.js\",\"url\":\"blob:file:///0adde2ab-c0c2-47b4-accd-03a26dd4413f\",\"moduleSequenceNumber\":347538}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"netlink\",\"moduleSequenceNumber\":646,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"phantasy\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":24,\"minDifficulty\":24,\"moneyAvailable\":773437500,\"moneyMax\":773437500,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":378,\"serverGrowth\":66}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-575626.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-2,3,-1,5,-8,-3,-5,-9,-10,4,2,7,-4,8,10,2,-8,10,5,-3,-4,-1,3,-5,0,-9,3,-8,-9,5,-3,-9,-7,6,-1,-7,0,-6,3,9],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-12836-Sector-12.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(a)()))a))a()))\",\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"96.6.8.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":647,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":648,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":649,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":650,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"phantasy\",\"syscore\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":41,\"hackDifficulty\":27.343749999999627,\"minDifficulty\":14,\"moneyAvailable\":59538796.5,\"moneyMax\":223270486.875,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":271,\"serverGrowth\":54}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-557215-Sector-12.cct\",\"type\":\"Total Ways to Sum\",\"data\":47,\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"7.1.8.3\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"h1.ns\",\"url\":\"blob:file:///3fb0420b-71c9-4d21-8a9f-e9c8b4ab59e4\",\"moduleSequenceNumber\":1582}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":651,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"w1.ns\",\"url\":\"blob:file:///5d06fa35-183a-4e9b-81e5-ad6543139ffc\",\"moduleSequenceNumber\":636}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":652,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"g1.ns\",\"url\":\"blob:file:///b55e85e1-ec59-45d7-82f9-bfff42e774ca\",\"moduleSequenceNumber\":2853}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":653,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"serverGrower.js\",\"url\":\"blob:file:///93f203e6-198e-4e73-9537-f8c28b5fa298\",\"moduleSequenceNumber\":347521}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"n00dles\",\"moduleSequenceNumber\":654,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\",\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":196875,\"moneyMax\":196875,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"19.0.1.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"h1.ns\",\"url\":\"blob:file:///77cc0bfc-a0a7-4bcc-bbd7-8c5ec21701a5\",\"moduleSequenceNumber\":1583}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":655,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"w1.ns\",\"url\":\"blob:file:///80a9a617-5a43-4bb3-a222-15d03b93de49\",\"moduleSequenceNumber\":637}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":656,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"g1.ns\",\"url\":\"blob:file:///29884be6-8261-48d9-9db1-57ee08ca28a9\",\"moduleSequenceNumber\":2854}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":657,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"serverGrower.js\",\"url\":\"blob:file:///5d826894-f240-4a8a-8bbd-2fb56e07c405\",\"moduleSequenceNumber\":347605}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":658,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3,\"minDifficulty\":3,\"moneyAvailable\":5625000,\"moneyMax\":5625000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"31.4.2.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"h1.ns\",\"url\":\"blob:file:///2e27957b-1838-45cf-b47f-f0cfc4754fba\",\"moduleSequenceNumber\":1584}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":659,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"w1.ns\",\"url\":\"blob:file:///5e145bf7-73d7-4301-a8ba-410fbe06efe5\",\"moduleSequenceNumber\":638}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":660,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"g1.ns\",\"url\":\"blob:file:///34471553-bac4-4a05-9e10-61e1ba7a93c1\",\"moduleSequenceNumber\":2855}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":661,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"serverGrower.js\",\"url\":\"blob:file:///8195072a-beac-4fbf-a7dc-7b9eaeb70bdc\",\"moduleSequenceNumber\":347607}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":662,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3,\"minDifficulty\":3,\"moneyAvailable\":6468750,\"moneyMax\":6468750,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-465619.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"1631216132\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"59.4.0.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"h1.ns\",\"url\":\"blob:file:///d88ee332-5d9d-4f8b-9184-62a7b1fb517e\",\"moduleSequenceNumber\":1585}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":663,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"w1.ns\",\"url\":\"blob:file:///164e3717-5f56-40f6-8a37-1737751a86ca\",\"moduleSequenceNumber\":639}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":664,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"g1.ns\",\"url\":\"blob:file:///e56caada-3a5a-4de9-ab4d-02ecb0e68859\",\"moduleSequenceNumber\":2856}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":665,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"serverGrower.js\",\"url\":\"blob:file:///3a93fa1f-c223-40f4-8681-ad35078d3c55\",\"moduleSequenceNumber\":347609}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"joesguns\",\"moduleSequenceNumber\":666,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":7031250,\"moneyMax\":7031250,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-862144-Sector-12.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[4,[178,63,199,4,87,22,132,136,187,161,23,103,110,18,133,199,18,95,47,31,145]],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"85.5.1.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"h1.ns\",\"url\":\"blob:file:///959aaca1-4ebd-4c89-80c9-657ed11756b3\",\"moduleSequenceNumber\":1592}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"moduleSequenceNumber\":667,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"w1.ns\",\"url\":\"blob:file:///1288a09a-634a-4554-a8b6-14da9b61999a\",\"moduleSequenceNumber\":640}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":668,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"g1.ns\",\"url\":\"blob:file:///4a63a6bc-0786-4c95-9202-375b47338048\",\"moduleSequenceNumber\":2863}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":669,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"serverGrower.js\",\"url\":\"blob:file:///512df24c-0401-45f3-9d72-b48d692503ca\",\"moduleSequenceNumber\":347622}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"zer0\",\"moduleSequenceNumber\":670,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"iron-gym\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":8,\"minDifficulty\":8,\"moneyAvailable\":21093750,\"moneyMax\":21093750,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-628522.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[169,191,191,186,182,76,182,192,117,173,27,53,20,171,71,176,94,165,40,149],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"2.8.7.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"h1.ns\",\"url\":\"blob:file:///02e8b7d1-cf53-48c7-9daa-63e22986351e\",\"moduleSequenceNumber\":1589}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":671,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"w1.ns\",\"url\":\"blob:file:///0a0a5fda-ed97-4e89-935d-20cdee2e4e94\",\"moduleSequenceNumber\":641}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":672,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"g1.ns\",\"url\":\"blob:file:///665108b7-002d-4f00-b4f9-8950052f1316\",\"moduleSequenceNumber\":2860}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":673,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"serverGrower.js\",\"url\":\"blob:file:///9d72b7fe-10af-4fa4-8a15-c26c270331a9\",\"moduleSequenceNumber\":347523}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"nectar-net\",\"moduleSequenceNumber\":674,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"n00dles\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7,\"minDifficulty\":7,\"moneyAvailable\":7734375,\"moneyMax\":7734375,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-447108.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"50696597975\",72],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-988236.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[8],[2,6],[5,6,5],[6,3,3,7],[9,5,5,2,9],[7,8,9,8,4,6]],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-990628.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[3,[156,163,64,177,149,187,178,166,51,200,33,156,100,79,108,60,159,13,186,175,1,47,9,86,17,73,43,19,2,138,129,188,127,68,169,40,64,108,18,97,165,83,70,57,153]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"90.3.3.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"h1.ns\",\"url\":\"blob:file:///ed64f4b5-bbf1-4229-b205-31ba8d5d2a61\",\"moduleSequenceNumber\":1593}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":675,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"w1.ns\",\"url\":\"blob:file:///469009a1-8da8-4ab7-aa62-e0b90d68f8b8\",\"moduleSequenceNumber\":642}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":676,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"g1.ns\",\"url\":\"blob:file:///79979b4b-c410-449d-b904-53ce17a7a4e5\",\"moduleSequenceNumber\":2864}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":677,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"serverGrower.js\",\"url\":\"blob:file:///45cf8670-0082-4b7e-a8f9-3540449c14bb\",\"moduleSequenceNumber\":347527}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"neo-net\",\"moduleSequenceNumber\":678,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"max-hardware\",\"the-hub\",\"comptek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":8,\"minDifficulty\":8,\"moneyAvailable\":14062500,\"moneyMax\":14062500,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-688124.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"44140220206\",\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-879743-Sector-12.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[4,9],[12,21],[21,23],[1,8],[24,26],[7,9],[11,19],[13,17],[10,15],[1,8],[1,6],[16,22],[23,29]],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-578879.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"124773542609\",32],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-709348.cct\",\"type\":\"Total Ways to Sum\",\"data\":98,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"31.9.5.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"h1.ns\",\"url\":\"blob:file:///ffac66cd-8cf0-4a00-8758-93339683fd65\",\"moduleSequenceNumber\":1596}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":679,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"w1.ns\",\"url\":\"blob:file:///2d6d43d0-eac7-43a7-9396-3fc8c013222c\",\"moduleSequenceNumber\":643}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":680,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"g1.ns\",\"url\":\"blob:file:///0074063f-369e-4072-9c4c-c95f06fec10b\",\"moduleSequenceNumber\":2867}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":681,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"serverGrower.js\",\"url\":\"blob:file:///73bd5091-10a3-487d-91fa-9f3cc7860650\",\"moduleSequenceNumber\":347615}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"silver-helix\",\"moduleSequenceNumber\":682,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"CSEC\",\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":126562500,\"moneyMax\":126562500,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"24.1.4.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"h1.ns\",\"url\":\"blob:file:///37648691-a4f2-401d-a2f5-409feed8fbb1\",\"moduleSequenceNumber\":1586}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":683,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"w1.ns\",\"url\":\"blob:file:///e7131f6c-8034-4cd8-9611-59fa193c75d7\",\"moduleSequenceNumber\":644}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":684,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"g1.ns\",\"url\":\"blob:file:///0be0a72e-1757-4cdb-b97a-7b98feb6727a\",\"moduleSequenceNumber\":2857}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":685,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"serverGrower.js\",\"url\":\"blob:file:///f78dafb5-face-47bc-aef9-f4a01943c28f\",\"moduleSequenceNumber\":347611}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":686,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":8437500,\"moneyMax\":8437500,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-78492-Sector-12.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[18,26],[10,20],[18,28],[17,27],[13,19],[21,22],[20,30],[11,17],[23,26],[17,26],[19,20],[14,24],[2,11],[18,28],[17,25],[18,26],[10,12],[8,15]],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-441962.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"33397546\",51],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"77.2.1.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"h1.ns\",\"url\":\"blob:file:///13c37292-4cf2-49a8-9dcf-d460af3a837e\",\"moduleSequenceNumber\":1587}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":687,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"w1.ns\",\"url\":\"blob:file:///73c1c211-5ee2-4d2d-ac4a-70e1ee3d3745\",\"moduleSequenceNumber\":645}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":688,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"g1.ns\",\"url\":\"blob:file:///9487f4cf-bdd6-4031-94b4-52a5ccaafc4f\",\"moduleSequenceNumber\":2858}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":689,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"serverGrower.js\",\"url\":\"blob:file:///a4c82a9e-c7df-4fcd-ac3c-ecf4ece9a5f5\",\"moduleSequenceNumber\":347618}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":690,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":11250000,\"moneyMax\":11250000,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"56.0.2.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"h1.ns\",\"url\":\"blob:file:///707aebc4-09be-4d1e-8924-698b5dbe72a8\",\"moduleSequenceNumber\":1594}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":691,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"w1.ns\",\"url\":\"blob:file:///93ffefaa-8adc-41bd-af23-3ea17ced595f\",\"moduleSequenceNumber\":646}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":692,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"g1.ns\",\"url\":\"blob:file:///0969f063-0ae4-4544-966a-78fc705f1b90\",\"moduleSequenceNumber\":2865}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":693,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"serverGrower.js\",\"url\":\"blob:file:///023ebadc-7f01-4e72-9eca-8b22e37367f6\",\"moduleSequenceNumber\":347536}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"phantasy\",\"moduleSequenceNumber\":694,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"max-hardware\",\"netlink\",\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7,\"minDifficulty\":7,\"moneyAvailable\":67500000,\"moneyMax\":67500000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"51.9.4.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"h1.ns\",\"url\":\"blob:file:///b38e4611-6eaa-44e2-8dfb-341403d567c5\",\"moduleSequenceNumber\":1590}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":695,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"w1.ns\",\"url\":\"blob:file:///685b2484-e739-49db-8d33-da3975c0343e\",\"moduleSequenceNumber\":647}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":696,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"g1.ns\",\"url\":\"blob:file:///32981f6b-263f-4b40-934c-417a1615d52d\",\"moduleSequenceNumber\":2861}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":697,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"serverGrower.js\",\"url\":\"blob:file:///59eb18c2-9055-44bc-89be-6793ea832c47\",\"moduleSequenceNumber\":347525}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"max-hardware\",\"moduleSequenceNumber\":698,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"n00dles\",\"neo-net\",\"phantasy\",\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":28125000,\"moneyMax\":28125000,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"86.7.8.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"h1.ns\",\"url\":\"blob:file:///0b2465cb-725f-4a5e-927c-879359b950c8\",\"moduleSequenceNumber\":1595}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":699,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"w1.ns\",\"url\":\"blob:file:///180726d2-4d9e-4d11-862c-7748c4270f90\",\"moduleSequenceNumber\":648}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":700,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"g1.ns\",\"url\":\"blob:file:///a9a19a8c-0b7b-4e2f-920c-07734145777e\",\"moduleSequenceNumber\":2866}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":701,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"serverGrower.js\",\"url\":\"blob:file:///18f7da9d-94cb-4d28-a9d5-8b03aa5352cd\",\"moduleSequenceNumber\":347598}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"omega-net\",\"moduleSequenceNumber\":702,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"max-hardware\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":29,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":185191045.3125,\"moneyMax\":185191045.3125,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":214,\"serverGrowth\":39}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-189717-Sector-12.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[47,181,98,162,47,147,55,114,72,118,39,166,199,44,131,73,78],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-313873.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[12,17],[15,16],[18,23],[12,15],[13,21],[10,11],[4,6],[13,23],[4,7],[2,7],[21,31],[2,7]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"16.6.8.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":703,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":704,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":705,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":706,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":39,\"hackDifficulty\":21.484374999999794,\"minDifficulty\":13,\"moneyAvailable\":39656010.75,\"moneyMax\":148710040.3125,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":238,\"serverGrowth\":28}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"43.1.8.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"h1.ns\",\"url\":\"blob:file:///dd33b83f-fe4b-4da3-91b5-92fee336eaa0\",\"moduleSequenceNumber\":1588}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":707,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"w1.ns\",\"url\":\"blob:file:///0b4d35c6-3ebc-4e33-8b5e-0fb8d7730b6c\",\"moduleSequenceNumber\":649}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":708,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"g1.ns\",\"url\":\"blob:file:///51715ee4-7a63-48ed-9a6f-9d147e079f73\",\"moduleSequenceNumber\":2859}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":709,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"serverGrower.js\",\"url\":\"blob:file:///d70917fb-0408-403b-b081-0b87a505e655\",\"moduleSequenceNumber\":347620}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"iron-gym\",\"moduleSequenceNumber\":710,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":56250000,\"moneyMax\":56250000,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":true,\"ip\":\"16.9.5.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"h1.ns\",\"url\":\"blob:file:///bb3101a7-2327-4735-8a81-80ed84cee0ac\",\"moduleSequenceNumber\":1605}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":711,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"w1.ns\",\"url\":\"blob:file:///9ad19eb6-b74e-499e-a345-216f2099cf4b\",\"moduleSequenceNumber\":650}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":712,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"g1.ns\",\"url\":\"blob:file:///95254be8-04f0-456b-9455-8fe8067332f6\",\"moduleSequenceNumber\":2876}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":713,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"serverGrower.js\",\"url\":\"blob:file:///95062d08-954c-4205-bfa6-63e7bed73f1d\",\"moduleSequenceNumber\":321009}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":714,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":18,\"minDifficulty\":18,\"moneyAvailable\":703125000,\"moneyMax\":703125000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":482,\"serverGrowth\":39}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-589795-Sector-12.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0],[0,0,0,0,0],[0,0,1,0,0],[0,0,0,0,0],[1,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0]],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"44.0.5.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"h1.ns\",\"url\":\"blob:file:///b6945ded-9319-43f4-8e51-a764835d0e1b\",\"moduleSequenceNumber\":1624}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":715,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"w1.ns\",\"url\":\"blob:file:///9908a1f1-76e0-4afb-91d2-a71521182d71\",\"moduleSequenceNumber\":651}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":716,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"g1.ns\",\"url\":\"blob:file:///af089bd5-b044-431e-8ad8-2433eee5d887\",\"moduleSequenceNumber\":2895}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":717,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"serverGrower.js\",\"url\":\"blob:file:///037cf253-bfff-44fa-94a5-aa34023b1bf9\",\"moduleSequenceNumber\":753}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":753,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":20,\"minDifficulty\":20,\"moneyAvailable\":2531250000,\"moneyMax\":2531250000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":996,\"serverGrowth\":58}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-875800.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[11,9],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-618191.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[15,162,189,32,85,13],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"42.4.1.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":719,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":720,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":721,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":722,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":56.85312499999985,\"minDifficulty\":20,\"moneyAvailable\":337500000,\"moneyMax\":1265625000,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":686,\"serverGrowth\":53}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"8.0.4.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"h1.ns\",\"url\":\"blob:file:///15ddf20b-1442-4055-a937-cdc9f40af869\",\"moduleSequenceNumber\":1616}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":723,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"w1.ns\",\"url\":\"blob:file:///f58ba04f-f9bd-4588-8f2d-ca09d4c876ff\",\"moduleSequenceNumber\":652}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":724,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"g1.ns\",\"url\":\"blob:file:///464e89f4-51f4-426e-964e-f7b078e21665\",\"moduleSequenceNumber\":2887}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":725,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"serverGrower.js\",\"url\":\"blob:file:///1f6ea0d7-1fa6-4db4-a18f-49dc7ab7e571\",\"moduleSequenceNumber\":347556}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":726,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"infocomm\",\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":543,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-659185-Sector-12.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(aa)))((a)\",\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"3.6.3.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"h1.ns\",\"url\":\"blob:file:///ebff80a5-7ca0-421a-b003-aa40fb1c372e\",\"moduleSequenceNumber\":1602}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":727,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"w1.ns\",\"url\":\"blob:file:///118d39b1-5a03-4ed7-9937-075d5d8250ea\",\"moduleSequenceNumber\":653}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":728,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"g1.ns\",\"url\":\"blob:file:///6f784ba1-33b2-47e8-96e9-9985d03c3d27\",\"moduleSequenceNumber\":2873}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":729,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"serverGrower.js\",\"url\":\"blob:file:///c6cffc9e-4f46-493e-ac77-3581d0dc67ca\",\"moduleSequenceNumber\":347540}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":730,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"netlink\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":345,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"98.7.7.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"h1.ns\",\"url\":\"blob:file:///87a6ed18-813f-4c5b-bb72-e2d618745f51\",\"moduleSequenceNumber\":1599}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":731,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"w1.ns\",\"url\":\"blob:file:///8f4e0c8b-dff7-426a-8ff0-4f8321ae8fd6\",\"moduleSequenceNumber\":654}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":732,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"g1.ns\",\"url\":\"blob:file:///30da36ee-9f8f-46e9-9824-bab1a640a54e\",\"moduleSequenceNumber\":2870}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":733,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"serverGrower.js\",\"url\":\"blob:file:///1b1f519e-585f-4d74-8a6d-232c9fe75765\",\"moduleSequenceNumber\":347600}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":734,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omega-net\",\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":214,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-561395.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,3,0,10],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"28.0.4.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"h1.ns\",\"url\":\"blob:file:///0cd0c93e-f000-4bfa-a4e8-ab0b369afbdf\",\"moduleSequenceNumber\":1622}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\".\",\"moduleSequenceNumber\":735,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"w1.ns\",\"url\":\"blob:file:///383e95f9-effd-40a1-80a0-0cd11e61d95e\",\"moduleSequenceNumber\":655}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":736,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"g1.ns\",\"url\":\"blob:file:///255b4acb-c8ee-4351-afbc-5f66a2b327eb\",\"moduleSequenceNumber\":2893}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":737,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"serverGrower.js\",\"url\":\"blob:file:///a4dc6e25-ec16-414c-9f74-1710cc4a23c3\",\"moduleSequenceNumber\":347578}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\".\",\"moduleSequenceNumber\":738,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"vitalife\",\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":547,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-785368.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[4,4],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"46.5.3.8\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"h1.ns\",\"url\":\"blob:file:///93bdfaef-10e3-486a-871b-3d70a42093a3\",\"moduleSequenceNumber\":1591}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"CSEC\",\"moduleSequenceNumber\":739,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"w1.ns\",\"url\":\"blob:file:///0497fd74-cadf-4f4b-988a-b596ff513fdc\",\"moduleSequenceNumber\":656}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":740,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"g1.ns\",\"url\":\"blob:file:///8333d648-5c03-4719-9c61-49412d53586d\",\"moduleSequenceNumber\":2862}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":741,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"serverGrower.js\",\"url\":\"blob:file:///bc4fcbcf-963b-4431-a68f-923b9a1540e8\",\"moduleSequenceNumber\":347613}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"CSEC\",\"moduleSequenceNumber\":742,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"hong-fang-tea\",\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":55,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-107226.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[8,14,2,36,25,20,7,50,8,44,24,42,30,50],[15,26,22,5,18,24,18,21,35,47,39,24,27,29],[12,14,35,24,37,47,47,11,47,41,3,6,7,27],[42,16,37,47,24,17,16,32,36,7,2,26,9,3]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-755167-Sector-12.cct\",\"type\":\"Total Ways to Sum\",\"data\":56,\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"20.1.7.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"The-Cave\",\"moduleSequenceNumber\":743,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":744,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":745,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"The-Cave\",\"moduleSequenceNumber\":746,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"93.6.4.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":9000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-398560-Sector-12.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,1,0,0,0,0,0],[0,1,0,1,1,1,0],[1,0,0,1,0,0,0],[0,0,1,1,0,0,0],[0,1,0,0,0,1,0],[0,0,0,0,0,0,0],[0,0,0,1,1,0,0],[0,0,0,0,0,0,0]],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-136439.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,1,0,0,1,0,0,0],[0,0,0,0,0,0,1,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,0,0],[0,1,0,1,0,0,0,1,0,0,0,0],[0,0,0,0,0,1,1,0,0,0,0,0],[1,0,0,0,0,0,1,0,0,0,1,0],[1,0,1,0,1,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0],[1,0,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,1,0]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"55.1.9.1\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.hack(ns.args[0]);\\n    }\\n}\",\"filename\":\"h1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"darkweb\",\"moduleSequenceNumber\":747,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"w1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"darkweb\",\"moduleSequenceNumber\":748,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.grow(ns.args[0]);\\n    }\\n}\",\"filename\":\"g1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"darkweb\",\"moduleSequenceNumber\":749,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"darkweb\",\"moduleSequenceNumber\":750,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":34.857299999999995,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":13632172.553976707}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":404.8526,\"isBanned\":false,\"isMember\":true,\"name\":\"Slum Snakes\",\"playerReputation\":64727539.88673215}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"CyberSec\",\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{\"map\":\"run map.js\"}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":true}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":true,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":1,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":true,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-1,\"y\":0,\"opened\":true}}","VersionSave":"10","AllGangsSave":"{\"Slum Snakes\":{\"power\":202700.0516665878,\"territory\":0.9999999999999968},\"Tetrads\":{\"power\":10420.668202994353,\"territory\":0},\"The Syndicate\":{\"power\":10248.341407480837,\"territory\":0},\"The Dark Army\":{\"power\":10074.784570503236,\"territory\":0},\"Speakers for the Dead\":{\"power\":9430.074932598649,\"territory\":0},\"NiteSec\":{\"power\":10185.319833433461,\"territory\":0},\"The Black Hand\":{\"power\":9171.35438673716,\"territory\":0}}","LastExportBonus":"1644442852320","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}","SaveTimestamp":"1644442852341"}}