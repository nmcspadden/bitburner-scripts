{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":1,\"hp\":15,\"max_hp\":15,\"strength\":100,\"defense\":59,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":1,\"hacking_chance_mult\":1.28,\"hacking_speed_mult\":1.28,\"hacking_money_mult\":1.28,\"hacking_grow_mult\":1.28,\"hacking_exp\":0,\"strength_exp\":5417.4719999996305,\"defense_exp\":1675.2640000000013,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":0,\"intelligence_exp\":5.29,\"hacking_mult\":1.28,\"strength_mult\":1.28,\"defense_mult\":1.28,\"dexterity_mult\":1.28,\"agility_mult\":1.28,\"charisma_mult\":1.5872,\"hacking_exp_mult\":1.28,\"strength_exp_mult\":1.28,\"defense_exp_mult\":1.28,\"dexterity_exp_mult\":1.28,\"agility_exp_mult\":1.28,\"charisma_exp_mult\":1.28,\"company_rep_mult\":1.28,\"faction_rep_mult\":1.28,\"money\":-1660760,\"city\":\"Sector-12\",\"location\":\"Powerhouse Gym\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"home\",\"purchasedServers\":[],\"hacknetNodes\":[],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[],\"factionInvitations\":[],\"queuedAugmentations\":[],\"augmentations\":[],\"sourceFiles\":[{\"lvl\":3,\"n\":1},{\"lvl\":3,\"n\":4},{\"lvl\":1,\"n\":2}],\"numPeopleKilled\":0,\"karma\":0,\"crime_money_mult\":1.5872,\"crime_success_mult\":1.5872,\"isWorking\":true,\"focus\":false,\"workType\":\"Studying or Taking a class at university\",\"workCostMult\":20,\"workExpMult\":10,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":2.56,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":480,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":1675.2640000000013,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":-314112,\"createProgramName\":\"\",\"createProgramReqLvl\":100,\"className\":\"training your defense at a gym\",\"crimeType\":\"\",\"timeWorked\":163600,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.28,\"hacknet_node_money_mult\":1.28,\"hacknet_node_purchase_cost_mult\":0.72,\"hacknet_node_ram_cost_mult\":0.72,\"hacknet_node_core_cost_mult\":0.72,\"hacknet_node_level_cost_mult\":0.72,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":5,\"lastUpdate\":1644446861325,\"totalPlaytime\":4295878600,\"playtimeSinceLastAug\":814200,\"playtimeSinceLastBitnode\":814200,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-1661760,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":0,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":-1661760,\"work\":0,\"servers\":0,\"other\":0,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-1661760,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":0,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":-1661760,\"work\":0,\"servers\":0,\"other\":0,\"augmentations\":0}},\"scriptProdSinceLastAug\":0,\"exploits\":[],\"achievements\":[{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1641776360683},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1641776360705},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1641776360713},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1641776360717},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1641776360722},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1641776360727},{\"ID\":\"SF1.1\",\"unlockedOn\":1641776360733},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1641776360738},{\"ID\":\"NS2\",\"unlockedOn\":1641776360743},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1641776360749},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1641776360754},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1641776360758},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1641776360762},{\"ID\":\"TRAVEL\",\"unlockedOn\":1641776360765},{\"ID\":\"TOR\",\"unlockedOn\":1641776360769},{\"ID\":\"4S\",\"unlockedOn\":1641776360773},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1641776960709},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1641828623180},{\"ID\":\"FROZE\",\"unlockedOn\":1641832652219},{\"ID\":\"DONATION\",\"unlockedOn\":1641850134958},{\"ID\":\"NITESEC\",\"unlockedOn\":1641850494972},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1641850494977},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1641850554968},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1641850554973},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1642090596493},{\"ID\":\"WORKOUT\",\"unlockedOn\":1642788923297},{\"ID\":\"SF4.1\",\"unlockedOn\":1643385845617},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1643385845623},{\"ID\":\"GANG\",\"unlockedOn\":1643388305625},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1643388965617},{\"ID\":\"FULL_GANG\",\"unlockedOn\":1643428925823},{\"ID\":\"GANG_MEMBER_POWER\",\"unlockedOn\":1643447105810},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1643467325817},{\"ID\":\"GANG_TERRITORY\",\"unlockedOn\":1643471645822},{\"ID\":\"FAST_BN\",\"unlockedOn\":1643524758928},{\"ID\":\"SF2.1\",\"unlockedOn\":1643525898928}],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"88.9.0.9\",\"isConnectedTo\":true,\"maxRam\":32,\"messages\":[\"hackers-starting-handbook.lit\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"Formulas.exe\"],\"ramUsed\":26.65,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"startinggameplan.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":675.2100000000166,\"pid\":2,\"ramUsage\":26.65,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/utils/crimes.js\",\"url\":\"blob:file:///23b105f2-ceca-4b63-96fc-c2a84d91f776\",\"moduleSequenceNumber\":3139},{\"filename\":\"startinggameplan.js\",\"url\":\"blob:file:///3026ba07-cd1d-41a6-87ec-ea1ecc731c9c\",\"moduleSequenceNumber\":3442}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// How much RAM each purchased server will have. In this case, it'll\\n// be 8GB.\\nvar ram = 8;\\n\\n// Iterator we'll use for our loop\\nvar i = 0;\\n\\n// Continuously try to purchase servers until we've reached the maximum\\n// amount of servers\\nwhile (i < getPurchasedServerLimit()) {\\n    // Check if we have enough money to purchase a server\\n    if (getServerMoneyAvailable(\\\"home\\\") > getPurchasedServerCost(ram)) {\\n        // If we have enough money, then:\\n        //  1. Purchase the server\\n        //  2. Copy our hacking script onto the newly-purchased server\\n        //  3. Run our hacking script on the newly-purchased server with 3 threads\\n        //  4. Increment our iterator to indicate that we've bought a new server\\n        var hostname = purchaseServer(\\\"pserv-\\\" + i, ram);\\n        scp(\\\"early-hack-template.script\\\", hostname);\\n        exec(\\\"early-hack-template.script\\\", hostname, 3);\\n        ++i;\\n    }\\n}\",\"filename\":\"/UNUSED/purchase-server-8gb.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.15,\"server\":\"home\",\"moduleSequenceNumber\":3058,\"_hash\":\"1aa960f0d835f49f36658f8f4ed4b51d72dceee24c688d40bb62bf1b1c452ec7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var scriptname = args[0];\\nvar n = args[1];\\nvar destination_prefix = args[2];\\nfor (i = 0; i < n; i = i + 1) {\\n\\tscp(scriptname, destination_prefix + '-' + i);\\n\\texec(scriptname, destination_prefix + '-' + i, 3);\\n}\",\"filename\":\"/UNUSED/copyrun.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.5,\"server\":\"home\",\"moduleSequenceNumber\":3059,\"_hash\":\"c91f6cffaa2201e6f883531587281a23088dc6674989718c373d5c14a787ad0d\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//if no arguments provided tell the user how to use script.\\n\\tif (ns.args.length === 0) {\\n\\t\\tns.alert(\\\"Please include one or more arguments as server names to hack. The script will propogate across all servers and grow, weaken and hack the specified targets. As you get new hacking tools, kill all scripts and rerun from home.\\\");\\n\\t\\treturn;\\n\\t}\\n\\tvar ogArgs = ns.args;\\n\\tns.toast('Running worm on ' + ns.getHostname());\\n\\tvar hostservers = ns.scan(ns.getHostname());                                                             //get all servers you can connect to\\n\\tvar scriptram = ns.getScriptRam('worm.ns', 'home');                                                      //get ram for this script\\n\\tvar hackscriptram = ns.getScriptRam('hackservers.ns', 'home');                                           //get ram for hack script\\n\\tvar avsram = ns.getServerMaxRam(ns.getHostname()) - ns.getServerUsedRam(ns.getHostname()) + scriptram;   //get available server ram for this server\\n\\tvar hsthreads = Math.floor(avsram / hackscriptram);                                                      //calculate usethreads for hack script for this server\\n\\n\\n\\tawait attackAll(hostservers, ns.getHostname());\\n\\n\\tif (hsthreads) {                                                                                          //if usethreads exists for this script, build args array of parameters based on this scripts args\\n\\t\\tvar hsargs = [];\\n\\t\\tfor (const argument of ns.args) {\\n\\t\\t\\thsargs.push(argument);\\n\\t\\t\\thsargs.push(ns.getServerMinSecurityLevel(argument));\\n\\t\\t\\thsargs.push(ns.getServerMaxMoney(argument));\\n\\t\\t\\thsargs.push(ns.getServerRequiredHackingLevel(argument));\\n\\t\\t}\\n\\t\\tif (ns.getHostname() != 'home') {                                                                       //copy hack script to this server and spawn script with threads and arguments as a single string\\n\\t\\t\\tawait ns.scp('hackservers.ns', 'home', ns.getHostname());\\n\\t\\t}\\n\\t\\tns.spawn('hackservers.ns', hsthreads, hsargs.toString());\\n\\t}\\n\\n\\n\\tasync function attack(server) {\\n\\t\\tvar hacktoolnum = 0;                                                                                   //count and use hack tools owned if you don't have root\\n\\t\\tif (!ns.hasRootAccess(server)) {\\n\\t\\t\\tns.toast('Opening ports on ' + server);\\n\\t\\t\\tif (ns.fileExists('BruteSSH.exe', 'home')) {\\n\\t\\t\\t\\tns.brutessh(server);\\n\\t\\t\\t\\thacktoolnum++;\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists('FTPCrack.exe', 'home')) {\\n\\t\\t\\t\\tns.ftpcrack(server);\\n\\t\\t\\t\\thacktoolnum++;\\n\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists('relaySMTP.exe', 'home')) {\\n\\t\\t\\t\\tns.relaysmtp(server);\\n\\t\\t\\t\\thacktoolnum++;\\n\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists('HTTPWorm.exe', 'home')) {\\n\\t\\t\\t\\tns.httpworm(server);\\n\\t\\t\\t\\thacktoolnum++;\\n\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists('SQLInject.exe', 'home')) {\\n\\t\\t\\t\\tns.sqlinject(server);\\n\\t\\t\\t\\thacktoolnum++;\\n\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif (ns.getServerNumPortsRequired(server) <= hacktoolnum && !ns.hasRootAccess(server)) {\\n\\t\\t\\tns.toast(\\\"nuking \\\" + server);\\n\\t\\t\\tns.nuke(server);\\n\\t\\t}\\n\\t\\tif (!ns.hasRootAccess(server)) {\\n\\t\\t\\tns.toast(\\\"unable to gain root to \\\" + server, \\\"error\\\");\\n\\t\\t}\\n\\t}\\n\\n\\tasync function worm(server) {\\n\\t\\t//copy WORM script to server and run\\n\\t\\tif (!ns.fileExists('worm.ns', server)) {\\n\\t\\t\\tns.print('worm.ns being copied to ' + server);\\n\\t\\t\\tawait ns.scp('worm.ns', 'home', server);\\n\\t\\t}\\n\\t\\t//if you don't see either script running on target server, run worm on it.\\n\\t\\tif (!ns.scriptRunning('worm.ns', server) && !ns.scriptRunning('hackservers.ns', server)) {\\n\\t\\t\\tns.print('running worm on ' + server);\\n\\t\\t\\tawait ns.sleep(11000);\\n\\t\\t\\tawait ns.scp('worm.ns', 'home', server);\\n\\t\\t\\tns.exec('worm.ns', server, 1, ...ogArgs);\\n\\t\\t}\\n\\t}\\n\\n\\tasync function attackAll(servers, host) {\\n\\t\\tfor (const server of servers) {\\n\\t\\t\\tawait attack(server);\\n\\t\\t\\tif (ns.getServerMaxRam(server) >= ns.getServerUsedRam(server) + scriptram) {                           //if the server has enough ram to run the worm script\\n\\t\\t\\t\\tawait worm(server);\\n\\t\\t\\t} else {                                                                                               //if server can't run script, look at servers it can connect to, gain root, and run script there\\n\\t\\t\\t\\tvar moreservs = ns.scan(server);\\n\\t\\t\\t\\tmoreservs.splice(moreservs.indexOf(host), 1);\\n\\t\\t\\t\\tawait attackAll(moreservs, server);\\n\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n}\",\"filename\":\"/UNUSED/worm.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"worm.ns\",\"url\":\"blob:file:///fd632e20-64d4-488e-8ad2-6e929a5e34be\"}],\"dependents\":[],\"ramUsage\":7.8,\"server\":\"home\",\"moduleSequenceNumber\":3060,\"_hash\":\"7f8a66a3fb4bc77f0cd3372df659dba630ebf3406ba72260dc5c6d661eea071b\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n   //split single argument into multiple and instantiate arrays\\n   var myargs = ns.args[0].split(',');\\n   var servers = [];\\n   var minSecLevs = [];\\n   var maxMoneys = [];\\n   var reqHackLev = [];\\n   var counter = 0;\\n   //for each pair of 4 (1 server and its parameters)\\n   for (let i = 0; (myargs.length / 4) > i; i++) {\\n      //calculate and push to appropriate array\\n      servers.push(myargs[4 * i]);\\n      minSecLevs.push(Number(myargs[(3 * counter) + (i + 1)]));\\n      maxMoneys.push(Number(myargs[(3 * counter) + (i + 2)]));\\n      reqHackLev.push(Number(myargs[(3 * counter) + (i + 3)]));\\n      counter++;\\n   }\\n   while (true) {\\n      var count = 0;\\n      //begin hack analyze\\n      for (const server of servers) {\\n         var security = minSecLevs[count] + 5;\\n         var money = maxMoneys[count] * .75;\\n         //weaken if server is too strong\\n         ns.print(security);\\n         if (reqHackLev[count] <= ns.getHackingLevel()) {\\n            if (ns.getServerSecurityLevel(server) > security) {\\n               ns.print(\\\"weakening...\\\");\\n               await ns.weaken(server)\\n            }\\n            //grow money if not enough money\\n            else if (ns.getServerMoneyAvailable(server) < money) {\\n               ns.print(\\\"growing...\\\");\\n               await ns.grow(server);\\n            }\\n            else {\\n               //hack it\\n               ns.print(\\\"hacking...\\\");\\n               await ns.hack(server);\\n            }\\n         }\\n         count++;\\n      }\\n      await ns.sleep(1000);\\n   }\\n}\",\"filename\":\"/UNUSED/hackservers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hackservers.js\",\"url\":\"blob:file:///c3385f02-797c-4823-a9e0-67482fab8286\"}],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"home\",\"moduleSequenceNumber\":3061,\"_hash\":\"8cb3e761f73a770c577cbebdaaef810873156dd2955004c13d1f31faa07e8ba5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet seenList = [];\\n\\tScanServer(ns, \\\"home\\\", seenList, 1);\\n}\\n\\nfunction ScanServer(ns, serverName, seenList, indent){\\n\\tif(seenList.includes(serverName)) return;\\n\\tseenList.push(serverName);\\n\\tvar serverList = ns.scan(serverName);\\n\\tfor(var i = 0; i < serverList.length; i++){\\n\\t\\tvar newServer = serverList[i];\\n\\t\\tif(seenList.includes(newServer)) continue;\\n\\t\\tPrintServerInfo(ns, newServer, indent)\\n\\t\\tScanServer(ns, newServer, seenList, indent + 1);\\n\\t}\\n}\\n\\nfunction PrintServerInfo(ns, serverName, indent){\\n\\tvar indentString = \\\"\\\";\\n\\tif(ns.hasRootAccess(serverName)){\\n\\t\\tindentString = \\\"▄▄▄▄\\\".repeat(indent);\\n\\t}else{\\n\\t\\tindentString = \\\"_ _ \\\".repeat(indent);\\n\\t}\\n\\tvar serverHackingLevel = ns.getServerRequiredHackingLevel(serverName);\\n\\tvar canHackIndicator = \\\"\\\";\\n\\n\\tif(ns.getHackingLevel() >= serverHackingLevel && !ns.hasRootAccess(serverName))\\n\\t\\tcanHackIndicator = \\\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\\\";\\n\\tns.tprint (indentString + serverName + \\\" (\\\" + serverHackingLevel + \\\")\\\" + canHackIndicator);\\n}\",\"filename\":\"map.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"map.js\",\"url\":\"blob:file:///d860d5e8-591d-4e12-9d7d-d1e79ed794d7\",\"moduleSequenceNumber\":314403}],\"dependents\":[],\"ramUsage\":2,\"server\":\"home\",\"moduleSequenceNumber\":3062,\"_hash\":\"f3aa989500a6647fb41f7d9982307ed84363e5dc0b726613dd96ae72352a6758\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// hyperBatcher Hack script (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner\\n// Not intended for direct use; run hyperBatcher.js instead.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true){\\n        await ns.weaken(ns.args[0]);\\n    }\\n}\",\"filename\":\"/batch/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batch/weaken.js\",\"url\":\"blob:file:///7317a820-a307-4a9b-a01a-9aa36894f102\",\"moduleSequenceNumber\":361639}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":3063,\"_hash\":\"990ca4f09c50c1c3abd4d19fd2d41ba6c62757e5d793e85898483b0caef3bf83\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// hyperBatcher Hack script (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner\\n// Not intended for direct use; run hyperBatcher.js instead.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let affectStocks = ns.args[2] ? ns.args[2] : false;\\n\\n    await ns.grow(ns.args[0], { stock: affectStocks });\\n}\",\"filename\":\"/batch/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batch/grow.js\",\"url\":\"blob:file:///427812bf-6161-4a66-9a3f-87f6da49f85f\",\"moduleSequenceNumber\":361640}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":3064,\"_hash\":\"3c031fa2f501c8a47fa799fca3b018be09a00b47e51d15f1f4f8c198ad891079\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Finds the optimal server to hack and hacks it from all possible servers except home.\\n * Only run from home server\\n * @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar allServers = await findAllServers(ns);  // finds all servers and clones grow hack and weaken files\\n\\tvar multiarray = await findHackable(ns, allServers);    // finds and nukes optimal, hackable, and rootale servers.\\n\\tvar optimalServer = multiarray[2];\\n\\n\\tns.tprint('[STARTED] @ ' + optimalServer);\\n}\\n\\n/**\\n* Copies files in file list to all servers and returns an array of all servers\\n*/\\nasync function findAllServers(ns) {\\n\\tvar q = [];\\n\\tvar serverDiscovered = [];\\n\\n\\tq.push(\\\"home\\\");\\n\\tserverDiscovered[\\\"home\\\"] = true;\\n\\n\\twhile (q.length) {\\n\\t\\tlet v = q.shift();\\n\\n\\t\\tlet edges = ns.scan(v);\\n\\n\\t\\tfor (let i = 0; i < edges.length; i++) {\\n\\t\\t\\tif (!serverDiscovered[edges[i]]) {\\n\\t\\t\\t\\tserverDiscovered[edges[i]] = true;\\n\\t\\t\\t\\tq.push(edges[i]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Object.keys(serverDiscovered);\\n}\\n\\n/**\\n* Finds list of all hackable and all rootable servers. Also finds optimal server to hack.\\n* A hackable server is one which you can hack, grow, and weaken.\\n* A rootable server is one which you can nuke.\\n* Returns a 2d array with list of hackable, rootable, and the optimal server to hack\\n*/\\nasync function findHackable(ns, allServers) {\\n\\tvar hackableServers = [];\\n\\tvar rootableServers = [];\\n\\tvar numPortsPossible = 0;\\n\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\tnumPortsPossible += 1;\\n\\t}\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\tnumPortsPossible += 1;\\n\\t}\\n\\tif (ns.fileExists(\\\"RelaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\tnumPortsPossible += 1;\\n\\t}\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\tnumPortsPossible += 1;\\n\\t}\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\tnumPortsPossible += 1;\\n\\t}\\n\\n\\n\\tfor (let i = 0; i < allServers.length; i++) {\\n\\t\\t//if your hacking level is high enough and you can open enough ports, add it to hackable servers list\\n\\t\\tif (ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(allServers[i]) && numPortsPossible >= ns.getServerNumPortsRequired(allServers[i])) {\\n\\t\\t\\thackableServers.push(allServers[i]);\\n\\t\\t}\\n\\t\\t//if it isn't home(this makes sure that you don't kill this script) and you either \\n\\t\\t//already have root access(this is useful for servers bought by the player as you have access to those even if the security is higher than you can nuke)\\n\\t\\t//  or you can open enough ports\\n\\t\\tif (allServers[i] != \\\"home\\\" && (ns.hasRootAccess(allServers[i]) || (numPortsPossible >= ns.getServerNumPortsRequired(allServers[i])))) {\\n\\t\\t\\trootableServers.push(allServers[i]);\\n\\t\\t\\t//if you don't have root access, open ports and nuke it\\n\\t\\t\\tif (!ns.hasRootAccess(allServers[i])) {\\n\\t\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\")) {\\n\\t\\t\\t\\t\\tns.brutessh(allServers[i]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\")) {\\n\\t\\t\\t\\t\\tns.ftpcrack(allServers[i]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"RelaySMTP.exe\\\")) {\\n\\t\\t\\t\\t\\tns.relaysmtp(allServers[i]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\")) {\\n\\t\\t\\t\\t\\tns.httpworm(allServers[i]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\")) {\\n\\t\\t\\t\\t\\tns.sqlinject(allServers[i]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.nuke(allServers[i]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t//finds optimal server to hack\\n\\tlet optimalServer = await findOptimal(ns, hackableServers);\\n\\n\\treturn [hackableServers, rootableServers, optimalServer];\\n}\\n\\n/** \\n * Finds the best server to hack.\\n * The algorithm works by assigning a value to each server and returning the max value server.\\n * The value is the serverMaxMoney divided by the sum of the server's weaken time, grow time, and hack time.\\n * You can easily change this function to choose a server based on whatever optimizing algorithm you want,\\n *  just return the server name to hack.\\n*/\\nasync function findOptimal(ns, hackableServers) {\\n\\tlet optimalServer = \\\"n00dles\\\";\\n\\tlet optimalVal = 0;\\n\\tlet currVal;\\n\\tlet currTime;\\n\\n\\tfor (let i = 0; i < hackableServers.length; i++) {\\n\\t\\tcurrVal = ns.getServerMaxMoney(hackableServers[i]);\\n\\t\\tcurrTime = ns.getWeakenTime(hackableServers[i]) + ns.getGrowTime(hackableServers[i]) + ns.getHackTime(hackableServers[i]);\\n\\t\\tcurrVal /= currTime;\\n\\t\\tif (currVal >= optimalVal) {\\n\\t\\t\\toptimalVal = currVal;\\n\\t\\t\\toptimalServer = hackableServers[i];\\n\\t\\t}\\n\\t}\\n\\n\\treturn optimalServer;\\n}\",\"filename\":\"locateOptimal.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"locateOptimal.js\",\"url\":\"blob:file:///29b21670-2ad3-46a7-8fbd-4e6de0eeaf8f\",\"moduleSequenceNumber\":205153}],\"dependents\":[],\"ramUsage\":2.75,\"server\":\"home\",\"moduleSequenceNumber\":3065,\"_hash\":\"f4295d2294e1b8370b2d356f5f6558a1aed09145a3d172aa223152a407b74311\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"let functions = { buyNode, upgradeNodes, buyNodes, help };\\nlet maxNodeCost;\\n/*\\n * Time to get some Hacknet Nodes!\\n * You can call this script with the options\\n * buyNode - purchase and upgrade one new node\\n * upgradeNodes - upgrade your existing network to max\\n * buyNodes - buy as many nodes as you can afford\\n * help - help with the command\\n */\\nexport async function main(ns) {\\n\\tlet result;\\n\\tif (!Object.keys(functions).includes(ns.args[0])) {\\n\\t\\tresult = 'Not Found';\\n\\t\\thelp(ns);\\n\\t} else {\\n\\t\\tresult = functions[ns.args[0]](ns);\\n\\t}\\n\\tresponse(ns, ns.args[0], result);\\n}\\n\\nfunction help(ns) {\\n\\tns.tprint(\\\"This script helps you manage your Hacknet Nodes. \\\" +\\n\\t\\t\\\"You can purchase new nodes by running `run buyHacknet.js buyNode` \\\" +\\n\\t\\t\\\"or `run buyHacknet.js buyNodes`. It will purchase as many nodes as you can afford. \\\" +\\n\\t\\t\\\"You can automatically upgrade your existing hacknet nodes by running \\\" +\\n\\t\\t\\\"`run buyHacknet.js upgradeNodes`\\\");\\n\\treturn '';\\n}\\n\\nfunction response(ns, func, result) {\\n\\tswitch (func) {\\n\\t\\tcase 'buyNode':\\n\\t\\t\\tns.tprint(result ? '✔️Purchased one node' : 'You cannot afford a node.😢');\\n\\t\\t\\tbreak;\\n\\t\\tcase 'buyNodes':\\n\\t\\t\\tns.tprint(result > 0 ? `✔️Purchased ${result} nodes.` : 'You cannot afford a node.😢');\\n\\t\\t\\tbreak;\\n\\t\\tcase 'upgradeNodes':\\n\\t\\t\\tns.tprint(result ? '✔️Nodes Upgraded' : '⭐You are already upgraded as much as you can afford.');\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tif (result === 'Not Found') { ns.tprint(`${func} is not a valid option`); }\\n\\t}\\n}\\n\\nfunction buyNode(ns) {\\n\\tlet index = ns.hacknet.purchaseNode();\\n\\tif (index < 0) {\\n\\t\\treturn false;\\n\\t}\\n\\tmaxNodeCost = maxNodeCost || getMaxNodeCost(ns, index);\\n\\n\\tif (ns.getServerMoneyAvailable('home') >= maxNodeCost) {\\n\\t\\tns.hacknet.upgradeLevel(index, 200);\\n\\t\\tns.hacknet.upgradeRam(index, 6);\\n\\t\\tns.hacknet.upgradeCore(index, 16);\\n\\t} else {\\n\\t\\tupgradeNode(ns, index);\\n\\t}\\n\\treturn true;\\n}\\n\\nfunction buyNodes(ns) {\\n\\tlet purchaseNodes = true;\\n\\tlet i = 0;\\n\\twhile (purchaseNodes) {\\n\\t\\tpurchaseNodes = buyNode(ns);\\n\\t\\tif (purchaseNodes) { i++; }\\n\\t}\\n\\treturn i;\\n}\\n\\nfunction getMaxNodeCost(ns, index) {\\n\\tns.tprint('Fetching cost');\\n\\treturn ns.hacknet.getLevelUpgradeCost(index, 200) +\\n\\t\\tns.hacknet.getRamUpgradeCost(index, 6) +\\n\\t\\tns.hacknet.getCoreUpgradeCost(index, 16);\\n}\\n\\nfunction upgradeNodes(ns) {\\n\\tlet upgrade = false;\\n\\tlet nodes = ns.hacknet.numNodes();\\n\\tfor (let i = 0; i < nodes; i++) {\\n\\t\\tupgrade = upgradeNode(ns, i) || upgrade;\\n\\t}\\n\\treturn upgrade;\\n}\\n\\nfunction upgradeNode(ns, index) {\\n\\tlet level = upgradeNodePart(ns, index, 'Level', 10);\\n\\tlet node = upgradeNodePart(ns, index, 'Ram', 2);\\n\\tlet core = upgradeNodePart(ns, index, 'Core', 1);\\n\\treturn level || node || core;\\n}\\n\\nfunction upgradeNodePart(ns, nodeIndex, upgradePart, increment) {\\n\\tlet upgrade = false;\\n\\tlet costFunction = `get${upgradePart}UpgradeCost`;\\n\\tlet upgradeFunction = `upgrade${upgradePart}`;\\n\\tlet cost = ns.hacknet[costFunction](nodeIndex, increment);\\n\\twhile (isFinite(cost) && ns.getServerMoneyAvailable('home') >= cost) {\\n\\t\\tns.hacknet[upgradeFunction](nodeIndex, increment);\\n\\t\\tcost = ns.hacknet[costFunction](nodeIndex, increment);\\n\\t\\tupgrade = true;\\n\\t}\\n\\treturn upgrade;\\n}\",\"filename\":\"buyHacknet.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"buyHacknet.js\",\"url\":\"blob:file:///8d277bd6-6589-45a5-82a4-f7290c8de451\",\"moduleSequenceNumber\":933}],\"dependents\":[],\"ramUsage\":5.7,\"server\":\"home\",\"moduleSequenceNumber\":3066,\"_hash\":\"a85ee026ea2f2f618c0bff63699f0770b6d8d55e7d2d12c57e213a3b5870c02a\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"let maxServers;\\nlet servers;\\n\\n/*\\n * Purchases the best server available with the\\n * user's current money. If the server limit is\\n * reached, replaces the worst server. Repeatable.\\n */\\nexport async function main(ns) {\\n\\t// Default Values\\n\\tmaxServers = ns.getPurchasedServerLimit();\\n\\tservers = ns.getPurchasedServers(true);\\n\\tserverInfo(ns);\\n\\tawait buyServers(ns);\\n}\\n\\nfunction serverInfo(ns) {\\n\\tns.tprint(`You have ${servers.length}/${maxServers} servers`);\\n\\tObject.entries(groupServers(ns)).map((ramServers) => {\\n\\t\\tns.tprint(`${ramServers[0]}GB: ${ramServers[1]}`);\\n\\t});\\n}\\n\\nfunction groupServers(ns) {\\n\\tlet groupedServers = {};\\n\\tservers.forEach((server) => {\\n\\t\\tlet ram = ns.getServerRam(server)[0];\\n\\t\\tgroupedServers[ram] = groupedServers[ram] || [];\\n\\t\\tgroupedServers[ram].push(server);\\n\\t});\\n\\treturn groupedServers;\\n}\\n\\nasync function buyServers(ns) {\\n\\tlet ram = ns.getPurchasedServerMaxRam();\\n\\tlet shopServer = true;\\n\\twhile (shopServer) {\\n\\t\\tlet myMoney = ns.getServerMoneyAvailable('home');\\n\\t\\tlet serverCost = ns.getPurchasedServerCost(ram);\\n\\t\\twhile (serverCost > myMoney && ram > 2) {\\n\\t\\t\\tram = ram / 2;\\n\\t\\t\\tserverCost = ns.getPurchasedServerCost(ram);\\n\\t\\t}\\n\\t\\tshopServer = await ns.prompt(`Would you like to buy a ${ram}GB server for ${ns.nFormat(serverCost, \\\"$0.00a\\\")}`);\\n\\t\\tif (shopServer) { shopServer = buyServer(ns, ram); }\\n\\t}\\n}\\n\\nfunction buyServer(ns, ram) {\\n\\tif (servers.length == maxServers) {\\n\\t\\tlet success = removeWeakestServer(ns, ram);\\n\\t\\tif (!success) { return false; }\\n\\t}\\n\\tlet server = ns.purchaseServer(`pserv-${ram}GB`, ram);\\n\\tservers.push(server);\\n\\tns.tprint(`Purchased ${server}: ${ram}GB`);\\n\\treturn true;\\n}\\n\\nfunction removeWeakestServer(ns, newRam) {\\n\\tlet groupedServers = groupServers(ns);\\n\\tlet min = Math.min(...Object.keys(groupedServers));\\n\\tif (min >= newRam) {\\n\\t\\tns.tprint(`Your smallest server has ${min}GB RAM and you wanted to purchase ${newRam}GB server`);\\n\\t\\treturn false;\\n\\t}\\n\\tlet smallest_server = groupedServers[min][0];\\n\\tns.killall(smallest_server);\\n\\tlet result = ns.deleteServer(smallest_server);\\n\\tservers = ns.getPurchasedServers(true);\\n\\treturn true;\\n}\",\"filename\":\"purchase-servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"purchase-servers.js\",\"url\":\"blob:file:///6ff1468c-5e79-440e-b10a-206095179cf6\",\"moduleSequenceNumber\":460238}],\"dependents\":[],\"ramUsage\":9.4,\"server\":\"home\",\"moduleSequenceNumber\":3067,\"_hash\":\"fce836c9326ad63843c1b0b06dac8bf71182e84c221b95e1eff103239186ad6d\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//*********PARAMS FOR SCRIPT ************//\\n\\tvar maxSharePer = 0.45                  // maximum percent of a symbol's total stock to buy\\n\\tvar stockBuyPer = 0.6                  //  percent probablity to buy symbol\\n\\tvar stockVolPer = .03                 //   percent stock will move to buy\\n\\tvar moneyKeep = 1000000000           //    min money to keep on hand\\n\\tvar minSharePer = 5                 //     min shares to buy\\n\\tvar orderMax = 1000000000000           //      max money to spend on a single order\\n\\tvar profPer = 0.05                //       min profit percentage to sell\\n\\tvar panicPer = 0.15              //        percentage loss to panic sell at\\n\\t//******************************//\\n\\twhile (true) {\\n\\t\\tns.disableLog('disableLog');\\n\\t\\tns.disableLog('sleep');\\n\\t\\tns.disableLog('getServerMoneyAvailable')\\n\\t\\tvar stocks = ns.stock.getSymbols();\\n\\t\\tfor (const stock of stocks) {\\n\\t\\t\\tvar position = ns.stock.getPosition(stock)\\n\\t\\t\\tvar forecast = ns.stock.getForecast(stock);\\n\\t\\t\\tif (position[0]) {\\n\\t\\t\\t\\tns.print('Position: ' + stock + \\\", \\\" + position[0] + \\\" Profit: \\\" + ns.nFormat(Math.round(ns.stock.getSaleGain(stock, position[0], \\\"Long\\\") - (position[0] * position[1])), '0,0', \\\"Long\\\") + ' % ' + ns.nFormat(ns.stock.getSaleGain(stock, position[0], \\\"Long\\\") / (position[0] * position[1]), \\\"0%\\\"));\\n\\t\\t\\t\\tsellPositions(stock);\\n\\t\\t\\t}\\n\\t\\t\\tbuyPositions(stock);\\n\\n\\t\\t}\\n\\t\\tawait ns.sleep(6000);\\n\\t}\\n\\tfunction sellPositions(stock) {\\n\\t\\t//sell if only 40% chance increase\\n\\t\\tif (ns.stock.getForecast(stock) < 0.4) {\\n\\t\\t\\t//sell stock\\n\\t\\t\\tns.toast(\\\"SOLD STOCK \\\" + stock + \\\" for \\\" + ns.nFormat(Math.round(ns.stock.getSaleGain(stock, position[0], \\\"Long\\\") - (position[0] * position[1])), '0,0') + \\\" profit!\\\");\\n\\t\\t\\tns.stock.sell(stock, position[0]);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction buyPositions(stock) {\\n\\t\\tvar maxShares = (ns.stock.getMaxShares(stock) * maxSharePer) - position[0];\\n\\t\\tvar askPrice = ns.stock.getAskPrice(stock);\\n\\t\\tvar forecast = ns.stock.getForecast(stock);\\n\\t\\tvar volPer = ns.stock.getVolatility(stock);\\n\\t\\tvar minBuy = 10000000;\\n\\t\\tvar playerMoney = ns.getServerMoneyAvailable('home');\\n\\t\\t//if the stock will move positive by stockbuyper or more and it will grow stockvolper or more\\n\\t\\tif (forecast >= stockBuyPer && volPer <= stockVolPer) {\\n\\t\\t\\t//check money for one share\\n\\t\\t\\tif (playerMoney - moneyKeep > ns.stock.getPurchaseCost(stock, minSharePer, \\\"Long\\\")) {\\n\\t\\t\\t\\tvar shares = Math.min((playerMoney - moneyKeep - 100000) / askPrice, orderMax / askPrice);\\n\\t\\t\\t\\tif (shares * askPrice > minBuy) {\\n\\t\\t\\t\\t\\tns.stock.buy(stock, Math.min(shares, maxShares));\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n}\",\"filename\":\"stocks.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"stocks.js\",\"url\":\"blob:file:///d95c970e-19c8-4447-846b-b3680b6cd504\",\"moduleSequenceNumber\":440506}],\"dependents\":[],\"ramUsage\":23.7,\"server\":\"home\",\"moduleSequenceNumber\":3068,\"_hash\":\"f3f5d99d7d20dd900da97f58d1de206c9cdfab0c192d8adfa6e7a17620f22125\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getSaleGain\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getVolatility\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stock.getPurchaseCost\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar q = [];\\n\\tvar serverDiscovered = [];\\n\\tvar codingContracts = new Map();\\n\\tvar file_list = [];\\n\\n\\tq.push(\\\"home\\\");\\n\\tserverDiscovered[\\\"home\\\"] = true;\\n\\n\\twhile (q.length) {\\n\\t\\tlet v = q.shift();\\n\\n\\t\\tlet edges = ns.scan(v);\\n\\n\\t\\tfor (let i = 0; i < edges.length; i++) {\\n\\t\\t\\tif (!serverDiscovered[edges[i]]) {\\n\\t\\t\\t\\tserverDiscovered[edges[i]] = true;\\n\\t\\t\\t\\t// q.push(edges[i]);\\n\\t\\t\\t\\t// await ns.scp(fileList, \\\"home\\\", edges[i]);\\n\\t\\t\\t\\tfile_list = ns.ls(edges[i], \\\"cct\\\")\\n\\t\\t\\t\\tif (file_list.length > 0) {\\n\\t\\t\\t\\t\\tns.tprint(\\\"Found \\\" + file_list + \\\" on \\\" + edges[i]);\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n}\",\"filename\":\"/UNUSED/look_for_contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"look-for-contracts.ns\",\"url\":\"blob:file:///6c5ea00f-f458-4160-8f3b-76620f619255\",\"moduleSequenceNumber\":554335}],\"dependents\":[],\"ramUsage\":2,\"server\":\"home\",\"moduleSequenceNumber\":3069,\"_hash\":\"9230e63dd20dfd7083696926f7ca087c2201364db9b2a2d30635607b661c7b3b\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { locateServer, crackServer } from \\\"utils/networkmap.js\\\";\\n\\n\\nconst factionMap = {\\n\\t\\\"CyberSec\\\": \\\"CSEC\\\",\\n\\t\\\"NiteSec\\\": \\\"avmnite-02h\\\",\\n\\t\\\"The Black Hand\\\": \\\"I.I.I.I\\\",\\n\\t\\\"BitRunners\\\": \\\"run4theh111z\\\",\\n\\t\\\"Fulcrum Secret Technologies\\\": \\\"fulcrumassets\\\",\\n}\\n\\n/**\\n * Finds the faction servers and hacks them\\n * Only run from home server\\n * @param {NS} ns \\n**/\\nexport async function main(ns) {\\n\\tif (ns.getHostname() != 'home') {\\n\\t\\tns.tprint(\\\"This script can only be run from home.\\\");\\n\\t\\treturn\\n\\t}\\n\\n\\tlet player = ns.getPlayer()\\n\\tlet my_factions = player.factions;\\n\\tns.tprint(\\\"Current factions: \\\" + my_factions.join(\\\", \\\"));\\n\\tlet my_level = player.hacking\\n\\n\\tfor (const [faction, server] of Object.entries(factionMap)) {\\n\\t\\t// Skip ones we've already joined\\n\\t\\tif (my_factions.includes(faction)) { continue }\\n\\t\\tns.tprint(\\\"Considering \\\" + faction);\\n\\t\\t//this_server is a server object\\n\\t\\t//server is a string of the current target server's name\\n\\t\\tlet this_server = ns.getServer(server);\\n\\t\\tlet req_hacking = ns.getServerRequiredHackingLevel(server);\\n\\t\\tif (my_level <= req_hacking) {\\n\\t\\t\\tns.tprint(`Oh noez, we're ${my_level} but need ${req_hacking}`);\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\t\\tlet nuked = crackServer(ns, server);\\n\\t\\tif (!nuked) {\\n\\t\\t\\tns.tprint(`Still need to open ports on ${server}!`);\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\t\\tlet map_to_server = await locateServer(ns, server);  // this will be a reverse-ordered list from home to target\\n\\t\\tns.tprint(map_to_server.join(\\\" -> \\\"));\\n\\t\\tif (!this_server.backdoorInstalled) {\\n\\t\\t\\tfor (const step of map_to_server) {\\n\\t\\t\\t\\t// ns.tprint(\\\"Connecting to: \\\" + step)\\n\\t\\t\\t\\tns.connect(step);\\n\\t\\t\\t}\\n\\t\\t\\tns.tprint(`Installing backdoor on ${server}`);\\n\\t\\t\\tawait ns.installBackdoor();\\n\\t\\t}\\n\\t}\\n\\tns.connect('home');\\n\\t// Check our faction invites\\n\\tlet invited_factions = ns.checkFactionInvitations();\\n\\tfor (const faction of invited_factions) {\\n\\t\\tif (factionMap.has(faction)) {\\n\\t\\t\\tlet did_join = ns.joinFaction(faction);\\n\\t\\t\\tif (did_join) ns.tprint(\\\"Joined \\\" + faction)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"joinFactions.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/networkmap.js\",\"url\":\"blob:file:///87cc182f-4b03-4ced-a860-d63143a0345c\",\"moduleSequenceNumber\":537358},{\"filename\":\"joinFactions.js\",\"url\":\"blob:file:///c5fa0dee-5cb1-4d84-8810-e2c569e460de\",\"moduleSequenceNumber\":537359}],\"dependents\":[],\"ramUsage\":18.05,\"server\":\"home\",\"moduleSequenceNumber\":3070,\"_hash\":\"cd27b9d4b9391d5ac98862d39e83c768d55eac3aa88edb7cd6e1f4993643bb0e\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"checkFactionInvitations\",\"cost\":3},{\"type\":\"fn\",\"name\":\"joinFaction\",\"cost\":3},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\nusage: run repNeededForFavor.js Faction\\n    returns how much reputation you need in total with a faction or company to reach 150 favor.\\n\\nformula adapted from Faction.js/getFavorGain(), Company.js/getFavorGain() and Constants.js:\\n    https://github.com/danielyxie/bitburner/blob/master/src/Faction.js\\n    \\n    Originally inspired by:\\n     also available as netscript 1.0 script (running in Firefox)\\n     https://github.com/sschmidTU/BitBurnerScripts/\\n     @author sschmidTU\\n*/\\n\\nconst FAVOR_TO_DONATE = 150;\\n\\nfunction repNeededForFavor(targetFavor) {\\n\\n    let favorGain = 0;\\n    let rep = 0;\\n\\n    let ReputationToFavorBase = 500;\\n    let ReputationToFavorMult = 1.02;\\n\\n    let reqdRep = ReputationToFavorBase;\\n    while (favorGain < targetFavor) {\\n        rep += reqdRep;\\n        ++favorGain;\\n        reqdRep *= ReputationToFavorMult;\\n    }\\n\\n    return rep;\\n}\\n\\n/**\\n * Run standalone\\n * @param {NS} ns \\n**/\\nexport async function main(ns) {\\n    // let faction = ns.args[0];\\n    // ns.tprint('You need ' + calculateRepNeededForFavor(ns, faction).toLocaleString() + ' total reputation with faction ' + faction\\n    //     + ' to get to 150 favor.');\\n    let repreq = ns.args[0];\\n    ns.tprint(donationAmountForRep(ns, 'Daedalus', 2500000));\\n}\\n\\n/**\\n * Return the rep needed for 150 favor for a given faction\\n * @param {NS} ns \\n * @param {string} faction The faction you want 150 favor in \\n**/\\nexport function calculateRepNeededForFavor(ns, faction) {\\n    let startingFavor = ns.getFactionFavor(faction);\\n    if (startingFavor >= 150) {\\n        ns.tprint(\\\"Current favor is already \\\" + startingFavor);\\n        return 0\\n    }\\n    const repToFavour = (rep) => Math.ceil(25500 * 1.02 ** (rep - 1) - 25000);\\n    return Math.max(0, repNeededForFavor(FAVOR_TO_DONATE) - repToFavour(startingFavor));\\n}\\n\\n/**\\n * Work for a faction until you have enough rep to get 150 favor\\n * @param {NS} ns \\n * @param {string} faction The faction you want 150 favor in \\n * @param {boolean} donate If True, do the donation at the end\\n**/\\nexport async function workUntilDonate(ns, faction) {\\n    let started_working = false;\\n    // If we're already at 150, we're done\\n    if (ns.getFactionFavor(faction) >= FAVOR_TO_DONATE) return\\n    let rep_needed = calculateRepNeededForFavor(ns, faction)\\n    while (ns.getFactionRep(faction) < rep_needed) {\\n        //TODO: Calculate how long this will take\\n        // This intentionally stops working after a time and re-starts to update the rep\\n        started_working = ns.workForFaction(faction, \\\"Hacking Contracts\\\");\\n        await ns.sleep(60000);\\n    }\\n    // We have enough rep to buy now, stop working\\n    if (started_working) {\\n        ns.stopAction();\\n        started_working = false;\\n    }\\n}\\n\\n/**\\n * Return the amount of money needed to donate to hit a specific rep amount\\n * @param {NS} ns \\n * @param {string} faction Name of faction to calculate \\n * @param {number} repreq Amount of rep we want to reach \\n */\\nexport function donationAmountForRep(ns, faction, repreq) {\\n    // Assuming we already have 150 favor for donation\\n    let current_rep = ns.getFactionRep(faction);\\n    let faction_rep_mult = ns.getPlayer().faction_rep_mult;\\n    return Math.ceil(1e6 * (Math.max(0, repreq - current_rep) / faction_rep_mult));\\n}\",\"filename\":\"/utils/repNeededForFavor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/repNeededForFavor.js\",\"url\":\"blob:file:///5fa7d4e1-32d7-44d3-9a84-bf43ec27a54e\",\"moduleSequenceNumber\":583099}],\"dependents\":[],\"ramUsage\":8.1,\"server\":\"home\",\"moduleSequenceNumber\":3071,\"_hash\":\"42bc08c7a8d43df440cc38547af8727cf8ac77ed6c55dbd835637e656c5ded1d\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getFactionFavor\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getFactionRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"workForFaction\",\"cost\":3},{\"type\":\"fn\",\"name\":\"stopAction\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { readNetworkMap } from \\\"utils/networkmap.js\\\";\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    let network_map = await readNetworkMap(ns);\\n    let contractList = [];\\n    let contracts = [];\\n    for (const server of Object.keys(network_map)) {\\n        // ns.tprint(`Server: ${server}`)\\n        contracts = ns.ls(server, \\\".cct\\\");\\n        for (const contract of contracts) {\\n            contractList.push(contract);\\n            // ns.tprint(`Contract: ${server}`)\\n            const type = ns.codingcontract.getContractType(contract, server);\\n            const data = ns.codingcontract.getData(contract, server);\\n            const didSolve = solve(type, data, server, contract, ns);\\n            ns.tprint(`${server} - ${contract} - ${type} - ${didSolve || \\\"FAILED!\\\"}`);\\n        }\\n    }\\n    ns.tprint(`Found ${contractList.length} contracts`);\\n    contracts.forEach((contract) => void ns.tprint(contract));\\n}\\n\\nfunction solve(type, data, server, contract, ns) {\\n    let solution = \\\"\\\";\\n    // ns.tprint(type);\\n    switch (type) {\\n        case \\\"Algorithmic Stock Trader I\\\":\\n            solution = maxProfit([1, data]);\\n            break;\\n        case \\\"Algorithmic Stock Trader II\\\":\\n            solution = maxProfit([Math.ceil(data.length / 2), data]);\\n            break;\\n        case \\\"Algorithmic Stock Trader III\\\":\\n            solution = maxProfit([2, data]);\\n            break;\\n        case \\\"Algorithmic Stock Trader IV\\\":\\n            solution = maxProfit(data);\\n            break;\\n        case \\\"Minimum Path Sum in a Triangle\\\":\\n            solution = solveTriangleSum(data, ns);\\n            break;\\n        case \\\"Unique Paths in a Grid I\\\":\\n            solution = uniquePathsI(data);\\n            break;\\n        case \\\"Unique Paths in a Grid II\\\":\\n            solution = uniquePathsII(data);\\n            break;\\n        case \\\"Generate IP Addresses\\\":\\n            solution = generateIps(data);\\n            break;\\n        case \\\"Find Largest Prime Factor\\\":\\n            solution = factor(data);\\n            break;\\n        case \\\"Spiralize Matrix\\\":\\n            solution = spiral(data);\\n            break;\\n        case \\\"Merge Overlapping Intervals\\\":\\n            solution = mergeOverlap(data);\\n            break;\\n        case \\\"Total Ways to Sum\\\":\\n            solution = solverWaysToSum(data);\\n            break;\\n        default:\\n            // If we can't solve it, delete it\\n            ns.tprint(`Deleting ${type} from ${server}`)\\n            ns.rm(contract, server)\\n    }\\n    return (solution != \\\"\\\") ? ns.codingcontract.attempt(solution, contract, server, [true]) : \\\"\\\";\\n}\\n\\n//ALGORITHMIC STOCK TRADER\\n\\nfunction maxProfit(arrayData) {\\n    let i, j, k;\\n\\n    let maxTrades = arrayData[0];\\n    let stockPrices = arrayData[1];\\n\\n    // WHY?\\n    let tempStr = \\\"[0\\\";\\n    for (i = 0; i < stockPrices.length; i++) {\\n        tempStr += \\\",0\\\";\\n    }\\n    tempStr += \\\"]\\\";\\n    let tempArr = \\\"[\\\" + tempStr;\\n    for (i = 0; i < maxTrades - 1; i++) {\\n        tempArr += \\\",\\\" + tempStr;\\n    }\\n    tempArr += \\\"]\\\";\\n\\n    let highestProfit = JSON.parse(tempArr);\\n\\n    for (i = 0; i < maxTrades; i++) {\\n        for (j = 0; j < stockPrices.length; j++) { // Buy / Start\\n            for (k = j; k < stockPrices.length; k++) { // Sell / End\\n                if (i > 0 && j > 0 && k > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i][k - 1], highestProfit[i - 1][j - 1] + stockPrices[k] - stockPrices[j]);\\n                } else if (i > 0 && j > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i - 1][j - 1] + stockPrices[k] - stockPrices[j]);\\n                } else if (i > 0 && k > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i][k - 1], stockPrices[k] - stockPrices[j]);\\n                } else if (j > 0 && k > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i][k - 1], stockPrices[k] - stockPrices[j]);\\n                } else {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], stockPrices[k] - stockPrices[j]);\\n                }\\n            }\\n        }\\n    }\\n    return highestProfit[maxTrades - 1][stockPrices.length - 1];\\n}\\n\\n//SMALLEST TRIANGLE SUM\\n\\nfunction solveTriangleSum(arrayData, ns) {\\n    let triangle = arrayData;\\n    let nextArray;\\n    let previousArray = triangle[0];\\n\\n    for (let i = 1; i < triangle.length; i++) {\\n        nextArray = [];\\n        for (let j = 0; j < triangle[i].length; j++) {\\n            if (j == 0) {\\n                nextArray.push(previousArray[j] + triangle[i][j]);\\n            } else if (j == triangle[i].length - 1) {\\n                nextArray.push(previousArray[j - 1] + triangle[i][j]);\\n            } else {\\n                nextArray.push(Math.min(previousArray[j], previousArray[j - 1]) + triangle[i][j]);\\n            }\\n\\n        }\\n\\n        previousArray = nextArray;\\n    }\\n\\n    return Math.min.apply(null, nextArray);\\n}\\n\\n//UNIQUE PATHS IN A GRID\\n\\nfunction uniquePathsI(grid) {\\n    const rightMoves = grid[0] - 1;\\n    const downMoves = grid[1] - 1;\\n\\n    return Math.round(factorialDivision(rightMoves + downMoves, rightMoves) / (factorial(downMoves)));\\n}\\n\\nfunction factorial(n) {\\n    return factorialDivision(n, 1);\\n}\\n\\nfunction factorialDivision(n, d) {\\n    if (n == 0 || n == 1 || n == d)\\n        return 1;\\n    return factorialDivision(n - 1, d) * n;\\n}\\n\\nfunction uniquePathsII(grid, ignoreFirst = false, ignoreLast = false) {\\n    const rightMoves = grid[0].length - 1;\\n    const downMoves = grid.length - 1;\\n\\n    let totalPossiblePaths = Math.round(factorialDivision(rightMoves + downMoves, rightMoves) / (factorial(downMoves)));\\n\\n    for (let i = 0; i < grid.length; i++) {\\n        for (let j = 0; j < grid[i].length; j++) {\\n\\n            if (grid[i][j] == 1 && (!ignoreFirst || (i != 0 || j != 0)) && (!ignoreLast || (i != grid.length - 1 || j != grid[i].length - 1))) {\\n                const newArray = [];\\n                for (let k = i; k < grid.length; k++) {\\n                    newArray.push(grid[k].slice(j, grid[i].length));\\n                }\\n\\n                let removedPaths = uniquePathsII(newArray, true, ignoreLast);\\n                removedPaths *= uniquePathsI([i + 1, j + 1]);\\n\\n                totalPossiblePaths -= removedPaths;\\n            }\\n        }\\n\\n    }\\n\\n    return totalPossiblePaths;\\n}\\n\\n//GENERATE IP ADDRESSES\\n\\nfunction generateIps(num) {\\n    num = num.toString();\\n\\n    const length = num.length;\\n\\n    const ips = [];\\n\\n    for (let i = 1; i < length - 2; i++) {\\n        for (let j = i + 1; j < length - 1; j++) {\\n            for (let k = j + 1; k < length; k++) {\\n                const ip = [\\n                    num.slice(0, i),\\n                    num.slice(i, j),\\n                    num.slice(j, k),\\n                    num.slice(k, num.length)\\n                ];\\n                let isValid = true;\\n\\n                ip.forEach(seg => {\\n                    isValid = isValid && isValidIpSegment(seg);\\n                });\\n\\n                if (isValid) ips.push(ip.join(\\\".\\\"));\\n\\n            }\\n\\n        }\\n    }\\n\\n    return ips;\\n\\n}\\n\\nfunction isValidIpSegment(segment) {\\n    if (segment[0] == \\\"0\\\" && segment != \\\"0\\\") return false;\\n    segment = Number(segment);\\n    if (segment < 0 || segment > 255) return false;\\n    return true;\\n}\\n\\n//GREATEST FACTOR\\n\\nfunction factor(num) {\\n    for (let div = 2; div <= Math.sqrt(num); div++) {\\n        if (num % div != 0) {\\n            continue;\\n        }\\n        num = num / div;\\n        div = 2;\\n    }\\n    return num;\\n}\\n\\n//SPIRALIZE Matrix\\n\\nfunction spiral(arr, accum = []) {\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat(arr.shift());\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat(column(arr, arr[0].length - 1));\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat(arr.pop().reverse());\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat(column(arr, 0).reverse());\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    return spiral(arr, accum);\\n}\\n\\nfunction column(arr, index) {\\n    const res = [];\\n    for (let i = 0; i < arr.length; i++) {\\n        const elm = arr[i].splice(index, 1)[0];\\n        if (elm) {\\n            res.push(elm);\\n        }\\n    }\\n    return res;\\n}\\n\\n// Merge Overlapping Intervals\\n\\nfunction mergeOverlap(intervals) {\\n    intervals.sort(([minA], [minB]) => minA - minB);\\n    for (let i = 0; i < intervals.length; i++) {\\n        for (let j = i + 1; j < intervals.length; j++) {\\n            const [min, max] = intervals[i];\\n            const [laterMin, laterMax] = intervals[j];\\n            if (laterMin <= max) {\\n                const newMax = laterMax > max ? laterMax : max;\\n                const newInterval = [min, newMax];\\n                intervals[i] = newInterval;\\n                intervals.splice(j, 1);\\n                j = i;\\n            }\\n        }\\n    }\\n    return intervals;\\n}\\n\\n// Total Ways To Sum\\nfunction solverWaysToSum(arrayData) {\\n    var ways = [];\\n    ways[0] = 1;\\n\\n    for (var a = 1; a <= arrayData; a++) {\\n        ways[a] = 0;\\n    }\\n\\n    for (var i = 1; i <= arrayData - 1; i++) {\\n        for (var j = i; j <= arrayData; j++) {\\n            ways[j] += ways[j - i];\\n        }\\n    }\\n\\n    return ways[arrayData];\\n}\",\"filename\":\"contractSolver.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/networkmap.js\",\"url\":\"blob:file:///58198a9a-8ce1-48ec-b39f-479547669c10\",\"moduleSequenceNumber\":537358},{\"filename\":\"contractSolver.js\",\"url\":\"blob:file:///6fb2f425-89c3-4629-b884-af4a080d7d82\",\"moduleSequenceNumber\":539246}],\"dependents\":[],\"ramUsage\":26.5,\"server\":\"home\",\"moduleSequenceNumber\":3072,\"_hash\":\"666ae3291e6968d107c3581524f1f1b999dfa626f405dcc3d275d7c6dc3f6747\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"let crimes = [\\n\\t\\\"heist\\\",\\n\\t\\\"assassination\\\",\\n\\t\\\"kidnap\\\",\\n\\t\\\"grand theft auto\\\",\\n\\t\\\"homicide\\\",\\n\\t\\\"larceny\\\",\\n\\t\\\"mug someone\\\",\\n\\t\\\"rob store\\\",\\n\\t\\\"shoplift\\\",\\n];\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst flagdata = ns.flags([\\n\\t\\t[\\\"murder\\\", false],\\n\\t\\t[\\\"help\\\", false],\\n\\t])\\n\\tif (flagdata.help) {\\n\\t\\tns.tprint(\\n\\t\\t\\t`Pass in --murder to only do homicides to earn the -54k karma to start a gang.`\\n\\t\\t);\\n\\t\\treturn\\n\\t}\\n\\tif (flagdata.murder) {\\n\\t\\t// Only commit homicide for people\\n\\t\\tcrimes = [\\\"homicide\\\"];\\n\\t}\\n\\t// First, work out a bit to build up stats\\n\\tconst MIN_STAT = 30;\\n\\tconst STATS = [\\n\\t\\t\\\"strength\\\",\\n\\t\\t\\\"defense\\\",\\n\\t\\t\\\"dexterity\\\",\\n\\t\\t\\\"agility\\\",\\n\\t]\\n\\tlet me = ns.getPlayer();\\n    for (let stat of STATS) {\\n        while (me[stat] < MIN_STAT) {\\n            if (!ns.isBusy()) {\\n\\t\\t\\t\\tns.toast(\\\"Training \\\" + stat);\\n                ns.gymWorkout('Powerhouse Gym', stat, false)\\n            }\\n            await ns.sleep(100)\\n            me = ns.getPlayer()\\n        }\\n        ns.stopAction()\\n    }\\n\\t// Disable the log\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\tns.tail(); // Open a window to view the status of the script\\n\\tlet timeout = 250; // In ms - too low of a time will result in a lockout/hang\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(timeout); // Wait it out first\\n\\t\\tif (ns.isBusy()) continue;\\n\\t\\t/** Calculate the risk value of all crimes */\\n\\t\\tlet choices = crimes.map((crime) => {\\n\\t\\t\\tlet crimeStats = ns.getCrimeStats(crime); // Let us look at the important bits\\n\\t\\t\\tlet crimeChance = ns.getCrimeChance(crime); // We need to calculate if its worth it\\n\\t\\t\\t/** Using probabilty(odds) to calculate the \\\"risk\\\" to get the best reward\\n\\t\\t\\t * Risk Value = Money Earned * Odds of Success(P(A) / ~P(A)) / Time taken\\n\\t\\t\\t *\\n\\t\\t\\t * Larger risk values indicate a better choice\\n\\t\\t\\t */\\n\\t\\t\\tlet crimeRiskValue =\\n\\t\\t\\t\\t(crimeStats.money * Math.log10(crimeChance / (1 - crimeChance + Number.EPSILON))) /\\n\\t\\t\\t\\tcrimeStats.time;\\n\\t\\t\\treturn [crime, crimeRiskValue];\\n\\t\\t});\\n\\n\\t\\tlet bestCrime = choices.reduce((prev, current) => {\\n\\t\\t\\treturn prev[1] > current[1] ? prev : current;\\n\\t\\t});\\n\\n\\t\\tns.commitCrime(bestCrime[0]);\\n\\t\\tns.print(\\n\\t\\t\\t`Crime: ${bestCrime[0]} Risk Value: ${bestCrime[1].toPrecision(3)} Cash to Earn: \\\\$${ns\\n\\t\\t\\t\\t.getCrimeStats(bestCrime[0])\\n\\t\\t\\t\\t.money.toPrecision(4)}; Current karma: ${ns.heart.break()}`\\n\\t\\t);\\n\\t}\\n}\",\"filename\":\"crimeSpree.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"crimeSpree.js\",\"url\":\"blob:file:///08c12b8d-9b28-4266-b54b-f1001bfe946a\",\"moduleSequenceNumber\":610560}],\"dependents\":[],\"ramUsage\":20.6,\"server\":\"home\",\"moduleSequenceNumber\":3073,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"gymWorkout\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stopAction\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getCrimeStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getCrimeChance\",\"cost\":5},{\"type\":\"fn\",\"name\":\"commitCrime\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tobtainPrograms(ns);\\n}\\n\\n/** @param {NS} ns **/\\nexport function obtainPrograms(ns) {\\n\\tconst programs = [\\n\\t\\t\\\"BruteSSH.exe\\\",\\n\\t\\t\\\"AutoLink.exe\\\",\\n\\t\\t\\\"FTPCrack.exe\\\",\\n\\t\\t\\\"relaySMTP.exe\\\",\\n\\t\\t\\\"HTTPWorm.exe\\\",\\n\\t\\t\\\"ServerProfiler.exe\\\",\\n\\t\\t\\\"DeepscanV1.exe\\\",\\n\\t\\t\\\"DeepscanV2.exe\\\",\\n\\t\\t\\\"SQLInject.exe\\\",\\n\\t\\t\\\"Formulas.exe\\\",\\n\\t];\\n\\t// First, get TOR\\n\\tns.tprint(\\\"Checking for TOR...\\\")\\n\\tlet gotTor = ns.purchaseTor();\\n\\tif (gotTor) {\\n\\t\\tns.tprint(\\\"Purchased TOR access\\\");\\n\\t}\\n\\t// Go buy shit\\n\\tfor (let program of programs) {\\n\\t\\tif (ns.ls('home', program).length > 0) continue\\n\\t\\tns.tprint(\\\"Considering \\\" + program);\\n\\t\\tlet purchased = ns.purchaseProgram(program);\\n\\t\\tif (purchased) {\\n\\t\\t\\tns.tprint(\\\"Purchased \\\" + program);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"obtainPrograms.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"obtainPrograms.js\",\"url\":\"blob:file:///6f60e23d-8507-442b-99cb-425a2893aeaf\",\"moduleSequenceNumber\":2170}],\"dependents\":[],\"ramUsage\":5.8,\"server\":\"home\",\"moduleSequenceNumber\":3074,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait ns.share();\\n\\t}\\n}\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///95339615-5dd9-46eb-86e7-823a245f17e8\",\"moduleSequenceNumber\":752}],\"dependents\":[],\"ramUsage\":4,\"server\":\"home\",\"moduleSequenceNumber\":3075,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// https://github.com/InfinityBMX/bitburner-scripts/blob/master/utils.js\\n/** @param {NS} ns **/\\nconst specialHostnames = ['CSEC', 'I.I.I.I', 'avmnite-02h', 'run4theh111z'];\\nconst homeCores = 5;\\n\\nexport function output(ns) {\\n\\tns.tprint('Export called');\\n}\\n\\nexport function getHostnames(ns, findSpecial = false) {\\n\\tlet serverChecked = [];\\n\\tlet checkList = [];\\n\\tcheckList.push(\\\"home\\\");\\n\\tserverChecked[\\\"home\\\"] = true;\\n\\n\\twhile (checkList.length) {\\n\\t\\tlet server = checkList.shift();\\n\\t\\tlet edges = ns.scan(server);\\n\\t\\tif (findSpecial && specialHostnames.includes(server)) {\\n\\t\\t\\tns.tprint(`${server} found!`);\\n\\t\\t}\\n\\n\\t\\tfor (let i = 0; i < edges.length; i++) {\\n\\t\\t\\tif (!serverChecked[edges[i]]) {\\n\\t\\t\\t\\tserverChecked[edges[i]] = true;\\n\\t\\t\\t\\tcheckList.push(edges[i]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn Object.keys(serverChecked);\\n}\\n\\nexport function getHostnamesWithDetails(ns) {\\n\\tconst hostnames = getHostnames(ns);\\n\\tlet servers = [];\\n\\tfor (const hostname of hostnames) {\\n\\t\\tif (hostname !== 'home' && !hostname.startsWith('pserv')) {\\n\\t\\t\\tservers.push({\\n\\t\\t\\t\\thostname,\\n\\t\\t\\t\\tsecRequired: ns.getServerRequiredHackingLevel(hostname),\\n\\t\\t\\t\\thacked: ns.hasRootAccess(hostname),\\n\\t\\t\\t\\tmaxMoney: ns.getServerMaxMoney(hostname)\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\treturn servers;\\n}\\n\\nexport function calculateGrowthThreads(ns, target, start, end) {\\n\\tif (end <= start) {\\n\\t\\treturn 0;\\n\\t}\\n\\n\\tvar threads = 1;\\n\\tvar needed = 1;\\n\\tif (start > 0)\\n\\t\\tneeded = 1 + ((end - start) / start);\\n\\telse // Probably doesn't work\\n\\t\\tneeded = 1 + ((end) / 0.01);\\n\\n\\t//    console.log(start, end, needed, threads);\\n\\twhile (ns.growthAnalyze(target, needed, ns.getServer().cpuCores) > threads) {\\n\\t\\tthreads++;\\n\\t}\\n\\treturn threads;\\n}\\n\\nexport function calculateWeakenThreads(ns, secLevel, minSecLevel) {\\n\\tif (secLevel <= minSecLevel) {\\n\\t\\treturn 0;\\n\\t}\\n\\n\\tvar threads = 1\\n\\tvar needed = secLevel - minSecLevel;\\n\\t//    console.log('calcWeaken: ', secLevel, minSecLevel, needed);\\n\\twhile (ns.weakenAnalyze(threads, ns.getServer().cpuCores) < needed) { threads++; }\\n\\treturn threads;\\n}\\n\\nexport function calculateHackThreads(ns, hostname, percent) {\\n\\t//console.log('Percent: ', percent );\\n\\tconst perThread = ns.hackAnalyze(hostname);\\n\\t//console.log('Per thread: ', perThread, ' Total: ', Math.floor(percent/perThread));\\n\\treturn Math.floor(percent / perThread);\\n}\\n\\nexport function getUsefulServerInfo(ns, hostname) {\\n\\tconst maxMoney = ns.getServerMaxMoney(hostname);\\n\\tconst currentMoney = ns.getServerMoneyAvailable(hostname);\\n\\tconst minSecurity = ns.getServerMinSecurityLevel(hostname);\\n\\tconst currentSecurity = ns.getServerSecurityLevel(hostname);\\n\\treturn {\\n\\t\\tmaxMoney,\\n\\t\\tcurrentMoney,\\n\\t\\tminSecurity,\\n\\t\\tcurrentSecurity\\n\\t};\\n}\\n\\nexport function getTimingsForHostname(ns, hostname) {\\n\\tconst hackTime = Math.ceil(ns.getHackTime(hostname));\\n\\tconst weakTime = Math.ceil(ns.getWeakenTime(hostname));\\n\\tconst growTime = Math.ceil(ns.getGrowTime(hostname));\\n\\tconst timing = Math.max(Math.ceil(hackTime / 5000) * 5000, Math.ceil(weakTime / 5000) * 5000, Math.ceil(growTime / 5000) * 5000) + 2000;\\n\\t//ns.tprint(`Timing for ${hostname} is ${timing} based on ${hackTime} hack, ${weakTime} weak and ${growTime} grow.`);\\n\\treturn {\\n\\t\\ttiming,\\n\\t\\thackTime,\\n\\t\\tgrowTime,\\n\\t\\tweakTime\\n\\t};\\n}\\n\\nexport async function backdoorServer(ns, hostname) {\\n\\tlet serverChecked = {};\\n\\tlet checkList = [];\\n\\tlet found = false;\\n\\tcheckList.push(\\\"home\\\");\\n\\tserverChecked[\\\"home\\\"] = { parent: null };\\n\\n\\n\\twhile (checkList.length && !found) {\\n\\t\\tconst server = checkList.shift();\\n\\t\\t// Build the tree from home while looking for the target\\n\\t\\t// Once found, move to backdooring\\n\\t\\tif (hostname === server) {\\n\\t\\t\\tfound = true;\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\t// Scan server and add all edges\\n\\t\\tlet edges = ns.scan(server);\\n\\t\\tfor (let i = 0; i < edges.length; i++) {\\n\\t\\t\\tif (!serverChecked[edges[i]]) {\\n\\t\\t\\t\\tserverChecked[edges[i]] = { parent: server };\\n\\t\\t\\t\\tcheckList.push(edges[i]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tif (found) {\\n\\t\\tlet path = [];\\n\\t\\tpath.push(hostname);\\n\\t\\tlet next = serverChecked[hostname].parent;\\n\\t\\twhile (next) {\\n\\t\\t\\tpath.push(next);\\n\\t\\t\\tnext = serverChecked[next].parent;\\n\\t\\t}\\n\\t\\tpath.reverse();\\n\\t\\tfor (const server of path) {\\n\\t\\t\\tns.connect(server);\\n\\t\\t\\tif (server === hostname) {\\n\\t\\t\\t\\tawait ns.installBackdoor();\\n\\t\\t\\t\\tns.tprint(`Backdoor installed on ${hostname}`);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Get back home\\n\\t\\tpath.reverse();\\n\\t\\tfor (const server of path) {\\n\\t\\t\\tns.connect(server);\\n\\t\\t}\\n\\t} else { // If we ran out of edges without finding the server, we're done\\n\\t\\tns.tprint(`Path to ${hostname} not found.`);\\n\\t}\\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":11.5,\"server\":\"home\",\"moduleSequenceNumber\":3076,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, getNsDataThroughFile, getActiveSourceFiles, runCommand, tryGetBitNodeMultipliers } from './helpers.js'\\n\\n// Global constants\\nconst updateInterval = 200;\\nconst maxSpendPerTickTransientEquipment = 0.01;\\nconst maxSpendPerTickPermanentEquipment = 0.5; // Spend up to this percent of non-reserved cash on permanent member upgrades\\nconst wantedPenaltyThreshold = 0.0001; // Don't let the wanted penalty get worse than this\\n\\n// Territory-related variables\\nconst gangsByPower = [\\\"Speakers for the Dead\\\", \\\"The Dark Army\\\", \\\"The Syndicate\\\", \\\"Slum Snakes\\\", /* Hack gangs don't scale as far */ \\\"The Black Hand\\\", /* \\\"NiteSec\\\" Been there, not fun. */]\\nconst territoryEngageThreshold = 0.70; // Minimum average win chance (of gangs with territory) before we engage other clans\\nlet territoryTickDetected = false;\\nlet territoryTickTime = 20000; // Est. milliseconds until territory *ticks*. Can vary if processing offline time\\nlet territoryNextTick = null; // The next time territory will tick\\nlet isReadyForNextTerritoryTick = false;\\nlet warfareFinished = false;\\nlet lastTerritoryPower = 0;\\nlet lastOtherGangInfo = null;\\n\\n// Crime activity-related variables TODO all tasks list to evaluate\\nconst crimes = [\\\"Mug People\\\", \\\"Deal Drugs\\\", \\\"Strongarm Civilians\\\", \\\"Run a Con\\\", \\\"Armed Robbery\\\", \\\"Traffick Illegal Arms\\\", \\\"Threaten & Blackmail\\\", \\\"Human Trafficking\\\", \\\"Terrorism\\\",\\n    \\\"Ransomware\\\", \\\"Phishing\\\", \\\"Identity Theft\\\", \\\"DDoS Attacks\\\", \\\"Plant Virus\\\", \\\"Fraud & Counterfeiting\\\", \\\"Money Laundering\\\", \\\"Cyberterrorism\\\"];\\nlet pctTraining = 0.20;\\nlet multGangSoftcap;\\nlet allTaskNames;\\nlet allTaskStats;\\nlet assignedTasks = {}; // Each member will independently attempt to scale up the crime they perform until they are ineffective or we start generating wanted levels\\nlet lastMemberReset = {}; // Tracks when each member last ascended\\n\\n// Global state\\nlet ownedSourceFiles;\\nlet myGangFaction = \\\"\\\";\\nlet isHackGang = false;\\nlet requiredRep = 0;\\nlet myGangMembers = [];\\nlet equipments = [];\\nlet importantStats = [];\\n\\nlet options;\\nconst argsSchema = [\\n    ['training-percentage', 0.20], // Spend this percent of time training gang members versus doing crime\\n    ['no-training', false], // Don't train unless all other tasks generate no gains\\n    ['no-auto-ascending', false], // Don't ascend members\\n    ['ascend-multi-threshold', 1.05], // Ascend member #12 if a primary stat multi would increase by more than this amount\\n    ['ascend-multi-threshold-spacing', 0.05], // Members will space their acention multis by this amount to ensure they are ascending at different rates \\n    // Note: given the above two defaults, members would ascend at multis [1.6, 1.55, 1.50, ..., 1.1, 1.05] once you have 12 members.\\n    ['min-training-ticks', 20], // Require this many ticks of training after ascending or recruiting\\n];\\n\\nexport function autocomplete(data, _) {\\n    data.flags(argsSchema);\\n    return [];\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ownedSourceFiles = await getActiveSourceFiles(ns);\\n    const sf2Level = ownedSourceFiles[2] || 0;\\n    if (sf2Level == 0)\\n        return log(ns, \\\"ERROR: You have no yet unlocked gangs. Script should not be run...\\\");\\n\\n    await initialize(ns);\\n    log(ns, \\\"Starting main loop...\\\");\\n    while (true) {\\n        try { await mainLoop(ns); }\\n        catch (err) { log(ns, `ERROR: Caught an unhandled error in the main loop: ${String(err)}`, 'error', true); }\\n        await ns.sleep(updateInterval);\\n    }\\n}\\n\\n/** @param {NS} ns \\n * One-time setup actions. **/\\nasync function initialize(ns) {\\n    ns.disableLog('ALL');\\n    options = ns.flags(argsSchema);\\n    pctTraining = options['no-training'] ? 0 : options['training-percentage'];\\n\\n    let loggedWaiting = false;\\n    while (!(await getNsDataThroughFile(ns, 'ns.gang.inGang()', '/Temp/player-gang-joined.txt'))) {\\n        if (!loggedWaiting) {\\n            log(ns, `Waiting to be in a gang. Will create the highest faction gang as soon as it is available...`);\\n            loggedWaiting = true;\\n        }\\n        await runCommand(ns, `${JSON.stringify(gangsByPower)}.forEach(g => ns.gang.createGang(g))`, '/Temp/gang-createGang.js');\\n        await ns.sleep(1000); // Wait for our human to join a gang\\n    }\\n    log(ns, \\\"Collecting gang information...\\\");\\n    const myGangInfo = ns.gang.getGangInformation(); //await getNsDataThroughFile(ns, 'ns.gang.getGangInformation()', '/Temp/gang-info.txt');\\n    myGangFaction = myGangInfo.faction;\\n    if (loggedWaiting) log(ns, `SUCCESS: Created gang ${myGangFaction}`, 'success', true);\\n    isHackGang = myGangInfo.isHacking;\\n    importantStats = isHackGang ? [\\\"hack\\\"] : [\\\"str\\\", \\\"def\\\", \\\"dex\\\", \\\"agi\\\"];\\n    lastTerritoryPower = myGangInfo.power;\\n    territoryNextTick = Date.now() + territoryTickTime; // Expect to miss be \\\"caught unaware\\\" by the first territory tick\\n    territoryTickDetected = isReadyForNextTerritoryTick = warfareFinished = false;\\n    lastOtherGangInfo = null;\\n\\n    // If possible, determine how much rep we would need to get the most expensive unowned augmentation\\n    const sf4Level = ownedSourceFiles[4] || 0;\\n    requiredRep = -1;\\n    if (sf4Level == 0)\\n        log(ns, `INFO: SF4 required to get gang augmentation info. Defaulting to assuming ~2.5 million rep is desired.`);\\n    else {\\n        try {\\n            if (sf4Level < 3)\\n                log(ns, `WARNING: This script makes heavy use of singularity functions, which are quite expensive before you have SF4.3. ` +\\n                    `Unless you have a lot of free RAM for temporary scripts, you may get runtime errors.`);\\n            const augmentationNames = await getNsDataThroughFile(ns, `ns.getAugmentationsFromFaction('${myGangFaction}')`, '/Temp/gang-augs.txt');\\n            const ownedAugmentations = await getNsDataThroughFile(ns, `ns.getOwnedAugmentations(true)`, '/Temp/player-augs-purchased.txt');\\n            const dictAugRepReqs = await getDict(ns, augmentationNames, 'getAugmentationRepReq', '/Temp/aug-repreqs.txt');\\n            // Due to a bug, gangs appear to provide \\\"The Red Pill\\\" even when it's unavailable (outside of BN2), so ignore this one.\\n            requiredRep = augmentationNames.filter(aug => !ownedAugmentations.includes(aug) && aug != \\\"The Red Pill\\\").reduce((max, aug) => Math.max(max, dictAugRepReqs[aug]), -1);\\n            log(ns, `Highest augmentation reputation cost is ${formatNumberShort(requiredRep)}`);\\n        } catch {\\n            log(ns, `WARNING: Failed to get augmentation info despite having SF4.${sf4Level}. This may be due to you having insufficient RAM to launch the temporary scripts. ` +\\n                `Proceeding with the default assumption that ~2.5 million rep is desired.`);\\n        }\\n    }\\n    if (requiredRep == -1)\\n        requiredRep = 2.5e6\\n\\n    // Initialize equipment information\\n    const equipmentNames = await getNsDataThroughFile(ns, 'ns.gang.getEquipmentNames()', '/Temp/gang-equipment-names.txt');\\n    const dictEquipmentTypes = await getGangInfoDict(ns, equipmentNames, 'getEquipmentType');\\n    const dictEquipmentCosts = await getGangInfoDict(ns, equipmentNames, 'getEquipmentCost');\\n    const dictEquipmentStats = await getGangInfoDict(ns, equipmentNames, 'getEquipmentStats');\\n    equipments = equipmentNames.map((equipmentName) => ({\\n        name: equipmentName,\\n        type: dictEquipmentTypes[equipmentName],\\n        cost: dictEquipmentCosts[equipmentName],\\n        stats: dictEquipmentStats[equipmentName],\\n    })).sort((a, b) => a.cost - b.cost);\\n    //log(ns, JSON.stringify(equipments));\\n    // Initialize information about gang members and crimes\\n    allTaskNames = await getNsDataThroughFile(ns, 'ns.gang.getTaskNames()', '/Temp/gang-task-names.txt')\\n    allTaskStats = await getGangInfoDict(ns, allTaskNames, 'getTaskStats');\\n    multGangSoftcap = (await tryGetBitNodeMultipliers(ns))?.GangSoftcap || 1;\\n    myGangMembers = await getNsDataThroughFile(ns, 'ns.gang.getMemberNames()', '/Temp/gang-member-names.txt');\\n    const dictMembers = await getGangInfoDict(ns, myGangMembers, 'getMemberInformation');\\n    for (const member of Object.values(dictMembers)) // Initialize the current activity of each member\\n        assignedTasks[member.name] = (member.task && member.task !== \\\"Unassigned\\\") ? member.task : (\\\"Train \\\" + (isHackGang ? \\\"Hacking\\\" : \\\"Combat\\\"));\\n    while (myGangMembers.length < 3) await doRecruitMember(ns); // We should be able to recruit our first three members immediately (for free)\\n    await optimizeGangCrime(ns, myGangInfo);\\n}\\n\\n/** @param {NS} ns \\n * Executed every `interval` **/\\nasync function mainLoop(ns) {\\n    // Update gang information (specifically monitoring gang power to see when territory ticks)\\n    const myGangInfo = ns.gang.getGangInformation(); //await getNsDataThroughFile(ns, 'ns.gang.getGangInformation()', '/Temp/gang-info.txt');\\n    // If territory is about to tick, quick - set everyone to do \\\"territory warfare\\\"!\\n    if (!isReadyForNextTerritoryTick && territoryTickDetected && (Date.now() + updateInterval >= territoryNextTick)) {\\n        isReadyForNextTerritoryTick = true;\\n        await updateMemberActivities(ns, null, \\\"Territory Warfare\\\");\\n    } else if (!territoryTickDetected) { // Detect the first territory tick by watching for other gang's territory power to update.\\n        const otherGangInfo = await getNsDataThroughFile(ns, 'ns.gang.getOtherGangInformation()', '/Temp/gang-other-gang-info.txt'); // Returns dict of { [gangName]: { \\\"power\\\": Number, \\\"territory\\\": Number } }\\n        if (lastOtherGangInfo != null && Object.keys(otherGangInfo).some(g => otherGangInfo[g].power != lastOtherGangInfo[g].power)) {\\n            territoryNextTick = Date.now() - updateInterval;\\n            territoryTickDetected = true;\\n        }\\n        lastOtherGangInfo = otherGangInfo;\\n    }\\n    // Detect if territory power has been updated in the last tick (or if we have no power, assume it has ticked and we just haven't generated power yet)\\n    if ((isReadyForNextTerritoryTick && myGangInfo.power != lastTerritoryPower) || (Date.now() > territoryNextTick + 5 * updateInterval)) {\\n        await onTerritoryTick(ns, myGangInfo); //Do most things only once per territory tick\\n        lastTerritoryPower = myGangInfo.power;\\n    }\\n}\\n\\n/** @param {NS} ns \\n * Do some things only once per territory tick **/\\nasync function onTerritoryTick(ns, myGangInfo) {\\n    territoryNextTick = Date.now() - updateInterval + territoryTickTime; // Reset the time the next tick will occur\\n    if (lastTerritoryPower != myGangInfo.power)\\n        log(ns, `Territory power updated from ${formatNumberShort(lastTerritoryPower)} to ${formatNumberShort(myGangInfo.power)}.`)\\n    if (!isReadyForNextTerritoryTick) log(ns, `WARNING: Territory tick happend before we were ready!`, 'warning');\\n    if (!warfareFinished) // Once we hit 100% territory, there's no need to keep swapping members to warfare\\n        isReadyForNextTerritoryTick = false;\\n\\n    // Update gang members in case someone died in a clash\\n    myGangMembers = await getNsDataThroughFile(ns, 'ns.gang.getMemberNames()', '/Temp/gang-member-names.txt');\\n    const nextMemberCost = Math.pow(5, myGangMembers.length - (3 /*numFreeMembers*/ - 1));\\n    if (myGangMembers.length < 12 /* Game Max */ && myGangInfo.respect * 0.75 > nextMemberCost) // Don't spend more than 75% of our respect on new members.\\n        await doRecruitMember(ns) // Recruit new members if available\\n    const dictMembers = await getGangInfoDict(ns, myGangMembers, 'getMemberInformation');\\n    if (!options['no-auto-ascending']) await tryAscendMembers(ns); // Ascend members if we deem it a good time\\n    await tryUpgradeMembers(ns, dictMembers); // Upgrade members if possible\\n    await enableOrDisableWarfare(ns, myGangInfo); // Update whether we should be participating in gang warfare\\n    // There's a chance we do training instead of work for this next tick. If training, we primarily train our main stat, with a small chance to train less-important stats\\n    const task = Math.random() >= pctTraining ? null : \\\"Train \\\" + (Math.random() < 0.1 ? \\\"Charisma\\\" : Math.random() < (isHackGang ? 0.1 : 0.9) ? \\\"Combat\\\" : \\\"Hacking\\\")\\n    await updateMemberActivities(ns, dictMembers, task); // Set everyone working on the next activity\\n    if (!task) await optimizeGangCrime(ns, await waitForGameUpdate(ns, myGangInfo));  // Finally, see if we can improve rep gain rates by micro-optimizing individual member crimes\\n}\\n\\n/** @param {NS} ns \\n * Consolidated logic for telling members what to do **/\\nasync function updateMemberActivities(ns, dictMemberInfo = null, forceTask = null) {\\n    const dictMembers = dictMemberInfo || (await getGangInfoDict(ns, myGangMembers, 'getMemberInformation'));\\n    const workOrders = [];\\n    for (const member of Object.values(dictMembers)) { // Set the desired activity of each member\\n        let task = forceTask ? forceTask : assignedTasks[member.name];\\n        if (member.task != task) workOrders.push({ name: member.name, task }); // Only bother with the API call if this isn't their current task\\n    }\\n    if (workOrders.length == 0) return;\\n    // Set the activities in bulk using a ram-dodging script\\n    if (await getNsDataThroughFile(ns, `${JSON.stringify(workOrders)}.reduce((success, m) => success && ns.gang.setMemberTask(m.name, m.task), true)`, '/Temp/gang-set-member-tasks.txt'))\\n        log(ns, `INFO: Assigned ${workOrders.length} gang member tasks! (${workOrders.map(o => o.task).filter((v, i, self) => self.indexOf(v) === i).join(\\\", \\\")})`)\\n    else\\n        log(ns, `ERROR: Failed to set member task of one or more members: ` + JSON.stringify(workOrders), 'error');\\n}\\n\\n/** @param {NS} ns \\n * Logic to assign tasks that maximize rep gain rate without wanted gain getting out of control **/\\nasync function optimizeGangCrime(ns, myGangInfo) {\\n    const dictMembers = await getGangInfoDict(ns, myGangMembers, 'getMemberInformation');\\n    // Tolerate our wanted level increasing, as long as reputation increases several orders of magnitude faster and we do not currently have a penalty more than -0.01%\\n    let currentWantedPenalty = getWantedPenalty(myGangInfo) - 1;\\n    // Note, until we have ~200 respect, the best way to recover from wanted penalty is to focus on gaining respect, rather than doing vigilante work.\\n    let wantedGainTolerance = currentWantedPenalty < -1.1 * wantedPenaltyThreshold && myGangInfo.wantedLevel >= (1.1 + myGangInfo.respect / 1000) &&\\n        myGangInfo.respect > 200 ? -0.01 * myGangInfo.wantedLevel /* Recover from wanted penalty */ :\\n        currentWantedPenalty < -0.9 * wantedPenaltyThreshold && myGangInfo.wantedLevel >= (1.1 + myGangInfo.respect / 10000) ? 0 /* Sustain */ :\\n            Math.max(myGangInfo.respectGainRate / 1000, myGangInfo.wantedLevel / 10) /* Allow wanted to increase at a manageable rate */;\\n    const playerData = await getNsDataThroughFile(ns, 'ns.getPlayer()', '/Temp/player-info.txt');\\n    // Find out how much reputation we need, without SF4, we estimate gang faction rep based on current gang rep\\n    let factionRep = -1;\\n    if (ownedSourceFiles[4] > 0) {\\n        try { factionRep = await getNsDataThroughFile(ns, `ns.getFactionRep('${myGangFaction}')`, `/Temp/gang-faction-rep.txt`); }\\n        catch { log(ns, 'INFO: Error suppressed. Falling back to estimating current gang faction rep.'); }\\n    }\\n    if (factionRep == -1) // Estimate current gang rep based on respect. Game gives 1/75 rep / respect. This is an underestimate, because it doesn't take into account spent/lost respect on ascend/recruit/death. \\n        factionRep = myGangInfo.respect / 75;\\n    const optStat = factionRep > requiredRep ? \\\"money\\\" : (playerData.money > 1E11 || myGangInfo.respect) < 9000 ? \\\"respect\\\" : \\\"both money and respect\\\"; // Change priority based on achieved rep/money\\n    // Pre-compute how every gang member will perform at every task\\n    const memberTaskRates = Object.fromEntries(Object.values(dictMembers).map(m => [m.name, allTaskNames.map(taskName => ({\\n        name: taskName,\\n        respect: computeRepGains(myGangInfo, taskName, m),\\n        money: calculateMoneyGains(myGangInfo, taskName, m),\\n        wanted: computeWantedGains(myGangInfo, taskName, m),\\n    })).filter(task => task.wanted <= 0 || task.money > 0 || task.respect > 0)])); // Completely remove tasks that offer no gains, but would generate wanted levels\\n    // Sort tasks by best gain rate\\n    if (optStat == \\\"both money and respect\\\") {\\n        Object.values(memberTaskRates).flat().forEach(v => v[optStat] = v.money / 1000 + v.respect); // Hack to support a \\\"optimized total\\\" stat when trying to balance both money and wanted\\n        Object.values(memberTaskRates).forEach((tasks, idx) => tasks.sort((a, b) => idx % 2 == 0 ? b.respect - a.respect : b.money - a.money)); // Hack: Even members prioritize respect, odd money\\n    } else {\\n        Object.values(memberTaskRates).forEach(tasks => tasks.sort((a, b) => b[optStat] - a[optStat]));\\n    }\\n    //ns.print(memberTaskRates);\\n\\n    // Run \\\"the algorithm\\\"\\n    const start = Date.now(); // Time the algorithms\\n    let bestTaskAssignments = null, bestWanted = 0;\\n    let bestTotalGain = myGangInfo.wantedLevelGainRate > wantedGainTolerance ? 0 : // Forget our past achievements, we're gaining wanted levels too fast right now\\n        optStat == \\\"respect\\\" ? myGangInfo.respectGainRate : myGangInfo.moneyGainRate; // Must do better than the current gain rate if it's within our wanted threshold\\n    for (let shuffle = 0; shuffle < 1000; shuffle++) { // We can discover more optimal results by greedy-optimizing gang members in a different order. Try a few.\\n        let proposedTasks = {}, totalWanted = 0, totalGain = 0;\\n        shuffleArray(myGangMembers.slice()).forEach((member, index) => {\\n            const taskRates = memberTaskRates[member];\\n            // \\\"Greedy\\\" optimize one member at a time, but as we near the end of the list, we can no longer expect future members to make for wanted increases\\n            const sustainableTasks = (index < myGangMembers.length - 2) ? taskRates : taskRates.filter(c => (totalWanted + c.wanted) <= wantedGainTolerance);\\n            // Find the crime with the best gain (If we can't generate value for any tasks, then we should only be training)\\n            const bestTask = taskRates[0][optStat] == 0 || (Date.now() - (lastMemberReset[member] || 0) < options['min-training-ticks'] * territoryTickTime) ?\\n                taskRates.find(t => t.name === (\\\"Train \\\" + (isHackGang ? \\\"Hacking\\\" : \\\"Combat\\\"))) :\\n                (totalWanted > wantedGainTolerance || sustainableTasks.length == 0) ? taskRates.find(t => t.name === \\\"Vigilante Justice\\\") : sustainableTasks[0];\\n            [proposedTasks[member], totalWanted, totalGain] = [bestTask, totalWanted + bestTask.wanted, totalGain + bestTask[optStat]];\\n        });\\n        // Following the above attempted optimization, if we're above our wanted gain threshold, downgrade the task of the greatest generators of wanted until within our limit\\n        let infiniteLoop = 9999;\\n        while (totalWanted > wantedGainTolerance && Object.values(proposedTasks).some(t => t.name !== \\\"Vigilante Justice\\\")) {\\n            const mostWanted = Object.keys(proposedTasks).reduce((t, c) => proposedTasks[c].name !== \\\"Vigilante Justice\\\" && (t == null || proposedTasks[t].wanted < proposedTasks[c].wanted) ? c : t, null);\\n            const nextBestTask = memberTaskRates[mostWanted].filter(c => c.wanted < proposedTasks[mostWanted].wanted)[0] ?? memberTaskRates[mostWanted].find(t => t.name === \\\"Vigilante Justice\\\");\\n            [proposedTasks[mostWanted], totalWanted, totalGain] = [nextBestTask, totalWanted + nextBestTask.wanted - proposedTasks[mostWanted].wanted, totalGain + nextBestTask[optStat] - proposedTasks[mostWanted][optStat]];\\n            if (infiniteLoop-- <= 0) throw \\\"Infinite Loop!\\\";\\n        }\\n        //log(ns, `Optimal task assignments:. Wanted: ${totalWanted.toPrecision(3)}, Gain: ${formatNumberShort(totalGain)}`);\\n        // Save the new new task assignments only if it's the best gain result we've seen for the value we're trying to optimize, or the closest we've come to meeting our wanted tolerance\\n        if (totalWanted <= wantedGainTolerance && totalGain > bestTotalGain || totalWanted > wantedGainTolerance && totalWanted < bestWanted)\\n            [bestTaskAssignments, bestTotalGain, bestWanted] = [proposedTasks, totalGain, totalWanted];\\n    }\\n    const elapsed = Date.now() - start;\\n    // Determine whether any changes need to be made\\n    if (bestTaskAssignments != null && myGangMembers.some(m => assignedTasks[m] !== bestTaskAssignments[m].name)) {\\n        myGangMembers.forEach(m => assignedTasks[m] = bestTaskAssignments[m].name); // Update work orders for all members\\n        const oldGangInfo = myGangInfo;\\n        await updateMemberActivities(ns, dictMembers);\\n        const [optWanted, optRespect, optMoney] = myGangMembers.map(m => assignedTasks[m]).reduce(([w, r, m], t) => [w + t.wanted, r + t.respect, m + t.money], [0, 0, 0]);\\n        if (optWanted != oldGangInfo.wantedLevelGainRate || optRespect != oldGangInfo.respectGainRate || optMoney != oldGangInfo.moneyGainRate)\\n            myGangInfo = await waitForGameUpdate(ns, oldGangInfo);\\n        log(ns, `SUCCESS: Optimized gang member crimes for ${optStat} with wanted gain tolerance ${wantedGainTolerance.toPrecision(2)} (${elapsed} ms). ` +\\n            `Wanted: ${oldGangInfo.wantedLevelGainRate.toPrecision(3)} -> ${myGangInfo.wantedLevelGainRate.toPrecision(3)}, ` +\\n            `Rep: ${formatNumberShort(oldGangInfo.respectGainRate)} -> ${formatNumberShort(myGangInfo.respectGainRate)}, Money: ${formatMoney(oldGangInfo.moneyGainRate)} -> ${formatMoney(myGangInfo.moneyGainRate)}`);\\n        // Sanity check that our calculations (which we stole from game source code) are about right\\n        if ((Math.abs(myGangInfo.wantedLevelGainRate - optWanted) / optWanted > 0.01) || (Math.abs(myGangInfo.respectGainRate - optRespect) / optRespect > 0.01) || (Math.abs(myGangInfo.moneyGainRate - optMoney) / optMoney > 0.01))\\n            log(ns, `WARNING: Calculated new rates would be Rep:${formatNumberShort(optRespect)} Wanted: ${optWanted.toPrecision(3)} Money: ${formatMoney(optMoney)}` +\\n                `but they are Rep:${formatNumberShort(myGangInfo.respectGainRate)} Wanted: ${myGangInfo.wantedLevelGainRate.toPrecision(3)} Money: ${formatMoney(myGangInfo.moneyGainRate)}`, 'warning');\\n    } else\\n        log(ns, `INFO: Determined all gang member assignments are already optimal for ${optStat} with wanted gain tolerance ${wantedGainTolerance.toPrecision(2)} (${elapsed} ms).`);\\n    // Fail-safe: If we somehow over-shot and are generating wanted levels, start randomly assigning members to vigilante to fix it\\n    if (myGangInfo.wantedLevelGainRate > wantedGainTolerance) await fixWantedGainRate(ns, myGangInfo, wantedGainTolerance);\\n}\\n\\n/** @param {NS} ns \\n * Logic to reduce crime tiers when we're generating a wanted level **/\\nasync function fixWantedGainRate(ns, myGangInfo, wantedGainTolerance = 0) {\\n    // TODO: steal actual wanted level calcs and strategically pick the member(s) who can bridge the gap while losing the least rep/sec\\n    let lastWantedLevelGainRate = myGangInfo.wantedLevelGainRate;\\n    log(ns, `WARNING: Generating wanted levels (${lastWantedLevelGainRate.toPrecision(3)}/sec > ${wantedGainTolerance.toPrecision(3)}/sec), temporarily assigning random members to Vigilante Justice...`, 'warning');\\n    for (const member of shuffleArray(myGangMembers.slice())) {\\n        if (!crimes.includes(assignedTasks[member])) continue; // This member isn't doing crime, so they aren't contributing to wanted\\n        assignedTasks[member] = \\\"Vigilante Justice\\\";\\n        await updateMemberActivities(ns);\\n        const wantedLevelGainRate = (myGangInfo = await waitForGameUpdate(ns, myGangInfo)).wantedLevelGainRate;\\n        if (wantedLevelGainRate < wantedGainTolerance) return;\\n        if (lastWantedLevelGainRate == wantedLevelGainRate)\\n            log(ns, `Warning: Attempt to rollback crime of ${member} to ${assignedTasks[member]} resulted in no change in wanted level gain rate ` +\\n                `(${lastWantedLevelGainRate.toPrecision(3)})`, 'warning');\\n    }\\n}\\n\\n/** @param {NS} ns \\n * Recruit new members if available **/\\nasync function doRecruitMember(ns) {\\n    let i = 0, newMemberName;\\n    // do { newMemberName = `Thug ${++i}`; } while (myGangMembers.includes(newMemberName) || myGangMembers.includes(newMemberName + \\\" Understudy\\\"));\\n    // do { newMemberName = getRandomName(ns); } while (myGangMembers.includes(newMemberName) || myGangMembers.includes(newMemberName + \\\" Understudy\\\"));\\n    newMemberName = getRandomName(ns); // already has built in protection against duplicates\\n    // if (i < myGangMembers.length) newMemberName += \\\" Understudy\\\"; // Pay our respects to the deceased\\n    if (await getNsDataThroughFile(ns, `ns.gang.canRecruitMember() && ns.gang.recruitMember('${newMemberName}')`, '/Temp/gang-recruit-member.txt')) {\\n        myGangMembers.push(newMemberName);\\n        assignedTasks[newMemberName] = \\\"Train \\\" + (isHackGang ? \\\"Hacking\\\" : \\\"Combat\\\");\\n        lastMemberReset[newMemberName] = Date.now();\\n        log(ns, `SUCCESS: Recruited a new gang member \\\"${newMemberName}\\\"!`, 'success');\\n    } else {\\n        log(ns, `ERROR: Failed to recruit a new gang member \\\"${newMemberName}\\\"!`, 'error');\\n    }\\n}\\n\\n/** @param {NS} ns \\n * Check if any members are deemed worth ascending to increase a stat multiplier **/\\nasync function tryAscendMembers(ns) {\\n    const dictAscensionResults = await getGangInfoDict(ns, myGangMembers, 'getAscensionResult');\\n    for (let i = 0; i < myGangMembers.length; i++) {\\n        const member = myGangMembers[i];\\n        // First members are given the largest threshold, so that early on when they are our only members, they are more stable\\n        const ascMultiThreshold = options['ascend-multi-threshold'] + (11 - i) * options['ascend-multi-threshold-spacing'];\\n        const ascResult = dictAscensionResults[member];\\n        if (!ascResult || !importantStats.some(stat => ascResult[stat] >= ascMultiThreshold))\\n            continue;\\n        if (undefined !== (await getNsDataThroughFile(ns, `ns.gang.ascendMember('${member}')`, '/Temp/gang-ascend-member.txt'))) {\\n            log(ns, `SUCCESS: Ascended member ${member} to increase multis by ${importantStats.map(s => `${s} -> ${ascResult[s].toFixed(2)}x`).join(\\\", \\\")}`, 'success');\\n            lastMemberReset[member] = Date.now();\\n        }\\n        else\\n            log(ns, `ERROR: Attempt to ascended member ${member} failed. Go investigate!`, 'error');\\n    }\\n}\\n\\n/** @param {NS} ns \\n * Upgrade any missing equipment / augmentations of members if we have the budget for it **/\\nasync function tryUpgradeMembers(ns, dictMembers) {\\n    // Update equipment costs to take into account discounts\\n    const dictEquipmentCosts = await getGangInfoDict(ns, equipments.map(e => e.name), 'getEquipmentCost');\\n    equipments.forEach(e => e.cost = dictEquipmentCosts[e.name])\\n    // Upgrade members, spending no more than x% of our money per tick (and respecting the global reseve)\\n    const purchaseOrder = [];\\n    const playerData = await getNsDataThroughFile(ns, 'ns.getPlayer()', '/Temp/player-info.txt');\\n    const homeMoney = playerData.money - (Number.parseFloat(ns.read(\\\"reserve.txt\\\")) || 0);\\n    let budget = maxSpendPerTickTransientEquipment * homeMoney;\\n    let augBudget = maxSpendPerTickPermanentEquipment * homeMoney;\\n    // Hack: Budget is cut by 1/100 if we don't yet own the Stockmarket 4S API (main source of income early BN)\\n    if (!playerData.has4SDataTixApi) budget /= 100, augBudget /= 100;\\n    if (budget <= 0) return;\\n    // Find out what outstanding equipment can be bought within our budget\\n    for (const equip of equipments) {\\n        for (const member of Object.values(dictMembers)) { // Get this equip for each member before considering the next most expensive equip\\n            // Bit of a hack: Inflate the \\\"cost\\\" of equipment that doesn't contribute to our main stats so that we don't purchase them unless we have ample cash\\n            let percievedCost = equip.cost * (Object.keys(equip.stats).some(stat => importantStats.some(i => stat.includes(i))) ? 1 : 50);\\n            if (percievedCost > augBudget) continue;\\n            if (equip.type != \\\"Augmentation\\\" && percievedCost > budget) continue;\\n            if (!member.upgrades.includes(equip.name) && !member.augmentations.includes(equip.name)) {\\n                purchaseOrder.push({ member: member.name, type: equip.type, equipmentName: equip.name, cost: equip.cost });\\n                budget -= equip.cost;\\n                augBudget -= equip.cost;\\n            }\\n        }\\n    }\\n    await doUpgradePurchases(ns, purchaseOrder);\\n}\\n\\n/** @param {NS} ns \\n * Spawn a temporary taask to upgrade members. **/\\nasync function doUpgradePurchases(ns, purchaseOrder) {\\n    if (purchaseOrder.length == 0) return;\\n    const orderSummary = purchaseOrder.map(o => `${o.member} ${o.type}: \\\"${o.equipmentName}\\\"`).join(\\\", \\\");\\n    if (await getNsDataThroughFile(ns, `${JSON.stringify(purchaseOrder)}.reduce((success, o) => success && ns.gang.purchaseEquipment(o.member, o.equipmentName), true)`, '/Temp/gang-upgrade-members.txt'))\\n        log(ns, `SUCCESS: Purchased ${purchaseOrder.length} gang member upgrades for ${formatMoney(purchaseOrder.reduce((t, e) => t + e.cost, 0))}. (${orderSummary})`, 'success')\\n    else\\n        log(ns, `ERROR: Failed to purchase one or more gang member upgrades. (${orderSummary})`, 'error');\\n}\\n\\n/** @param {NS} ns \\n * Helper to wait for the game to update stats (typically 2 seconds per cycle) **/\\nasync function waitForGameUpdate(ns, oldGangInfo) {\\n    if (!myGangMembers.some(member => !assignedTasks[member].includes(\\\"Train\\\")))\\n        return oldGangInfo; // Ganginfo will never change if all members are training, so don't wait for an update\\n    const maxWaitTime = 2500;\\n    const waitInterval = 100;\\n    const start = Date.now()\\n    while (Date.now() < start + maxWaitTime) {\\n        var latestGangInfo = ns.gang.getGangInformation();\\n        if (JSON.stringify(latestGangInfo) != JSON.stringify(oldGangInfo))\\n            return latestGangInfo;\\n        await ns.sleep(Math.min(waitInterval, start + maxWaitTime - Date.now()));\\n    }\\n    log(ns, `WARNING: Max wait time ${maxWaitTime} exceeded while waiting for old gang info to update.\\\\n${JSON.stringify(oldGangInfo)}\\\\n===\\\\n${JSON.stringify(latestGangInfo)}`, 'warning');\\n    territoryTickDetected = false;\\n    return latestGangInfo;\\n}\\n\\n/** @param {NS} ns \\n * Checks whether we should be engaging in warfare based on our gang power and that of other gangs. **/\\nasync function enableOrDisableWarfare(ns, myGangInfo) {\\n    warfareFinished = Math.round(myGangInfo.territory * 2 ** 20) / 2 ** 20 /* Handle API imprecision */ >= 1;\\n    if (warfareFinished && !myGangInfo.territoryWarfareEngaged) return; // No need to engage once we hit 100%\\n    const otherGangs = await getNsDataThroughFile(ns, 'ns.gang.getOtherGangInformation()', '/Temp/gang-other-gang-info.txt'); // Returns dict of { [gangName]: { \\\"power\\\": Number, \\\"territory\\\": Number } }\\n    let lowestWinChance = 1, totalWinChance = 0, totalActiveGangs = 0;\\n    let lowestWinChanceGang = \\\"\\\";\\n    for (const otherGang in otherGangs) {\\n        if (otherGangs[otherGang].territory == 0 || otherGang == myGangFaction) continue; // *New* Don't have to worry about battling a gang if it has 0 territory\\n        const winChance = myGangInfo.power / (myGangInfo.power + otherGangs[otherGang].power)\\n        if (winChance <= lowestWinChance) lowestWinChanceGang = otherGang;\\n        totalActiveGangs++, totalWinChance += winChance, lowestWinChance = Math.min(lowestWinChance, winChance);\\n    }\\n    // Turn on territory warfare only if we have a better than <territoryEngageThreshold>% chance of beating our random opponent\\n    const averageWinChance = totalWinChance / totalActiveGangs;\\n    const shouldEngage = !warfareFinished && territoryEngageThreshold <= averageWinChance;\\n    if (shouldEngage != myGangInfo.territoryWarfareEngaged) {\\n        log(ns, (warfareFinished ? 'SUCCESS' : 'INFO') + `: Toggling participation in territory warfare to ${shouldEngage}. Our power: ${formatNumberShort(myGangInfo.power)}. ` +\\n            (!warfareFinished ? `Lowest win chance is ${(100 * lowestWinChance).toFixed(2)}% with ${lowestWinChanceGang} (power ${formatNumberShort(otherGangs[lowestWinChanceGang]?.power)}). ` +\\n                `Average win chance ${(100 * averageWinChance).toFixed(2)}% across ${totalActiveGangs} active gangs.` :\\n                'We have destroyed all other gangs and earned 100% territory'), warfareFinished ? 'info' : 'success');\\n        await runCommand(ns, `ns.gang.setTerritoryWarfare(${shouldEngage})`, '/Temp/gang-set-warfare.js');\\n    }\\n}\\n\\n// Ram-dodging helper to get gang information for each item in a list\\nconst getGangInfoDict = async (ns, elements, gangFunction) => await getDict(ns, elements, `gang.${gangFunction}`, `/Temp/gang-${gangFunction}.txt`);\\nconst getDict = async (ns, elements, nsFunction, fileName) => await getNsDataThroughFile(ns, `Object.fromEntries(${JSON.stringify(elements)}.map(e => [e, ns.${nsFunction}(e)]))`, fileName);\\n\\n/** Gang calcs shamefully stolen from https://github.com/danielyxie/bitburner/blob/dev/src/Gang/GangMember.ts **/\\nlet getStatWeight = (task, memberInfo) =>\\n    (task.hackWeight / 100) * memberInfo[\\\"hack\\\"] + // Need to quote to avoid paying RAM for ns.hack -_-\\n    (task.strWeight / 100) * memberInfo.str +\\n    (task.defWeight / 100) * memberInfo.def +\\n    (task.dexWeight / 100) * memberInfo.dex +\\n    (task.agiWeight / 100) * memberInfo.agi +\\n    (task.chaWeight / 100) * memberInfo.cha;\\n\\nlet getWantedPenalty = myGangInfo => myGangInfo.respect / (myGangInfo.respect + myGangInfo.wantedLevel);\\nlet getTerritoryPenalty = myGangInfo => (0.2 * myGangInfo.territory + 0.8) * multGangSoftcap;\\n\\nfunction computeRepGains(myGangInfo, currentTask, memberInfo) {\\n    const task = allTaskStats[currentTask];\\n    const statWeight = getStatWeight(task, memberInfo) - 4 * task.difficulty;\\n    if (task.baseRespect === 0 || statWeight <= 0) return 0;\\n    const territoryMult = Math.max(0.005, Math.pow(myGangInfo.territory * 100, task.territory.respect) / 100);\\n    if (isNaN(territoryMult) || territoryMult <= 0) return 0;\\n    const respectMult = getWantedPenalty(myGangInfo);\\n    const territoryPenalty = getTerritoryPenalty(myGangInfo);\\n    //console.log(`statWeight: ${statWeight} task.difficulty: ${task.difficulty} territoryMult: ${territoryMult} territoryPenalty: ${territoryPenalty} myGangInfo.respect ${myGangInfo.respect} myGangInfo.wanted ${myGangInfo.wanted} respectMult: ${respectMult}`);\\n    return Math.pow(11 * task.baseRespect * statWeight * territoryMult * respectMult, territoryPenalty);\\n}\\n\\nfunction computeWantedGains(myGangInfo, currentTask, memberInfo) {\\n    const task = allTaskStats[currentTask];\\n    const statWeight = getStatWeight(task, memberInfo) - 3.5 * task.difficulty;\\n    if (task.baseWanted === 0 || statWeight <= 0) return 0;\\n    const territoryMult = Math.max(0.005, Math.pow(myGangInfo.territory * 100, task.territory.wanted) / 100);\\n    if (isNaN(territoryMult) || territoryMult <= 0) return 0;\\n    return (task.baseWanted < 0) ? 0.4 * task.baseWanted * statWeight * territoryMult :\\n        Math.min(100, (7 * task.baseWanted) / Math.pow(3 * statWeight * territoryMult, 0.8));\\n}\\n\\nfunction calculateMoneyGains(myGangInfo, currentTask, memberInfo) {\\n    const task = allTaskStats[currentTask];\\n    const statWeight = getStatWeight(task, memberInfo) - 3.2 * task.difficulty;\\n    if (task.baseMoney === 0 || statWeight <= 0) return 0;\\n    const territoryMult = Math.max(0.005, Math.pow(myGangInfo.territory * 100, task.territory.money) / 100);\\n    if (isNaN(territoryMult) || territoryMult <= 0) return 0;\\n    const respectMult = getWantedPenalty(myGangInfo);\\n    const territoryPenalty = getTerritoryPenalty(myGangInfo);\\n    return Math.pow(5 * task.baseMoney * statWeight * territoryMult * respectMult, territoryPenalty);\\n}\\n\\n/** @param {NS} ns **/\\nfunction log(ns, message, toastStyle, terminal = undefined) {\\n    ns.print(message);\\n    if (terminal === true || (terminal === undefined && toastStyle === 'error')) ns.tprint(message);\\n    if (toastStyle) ns.toast(message, toastStyle);\\n}\\n\\n/** Helps us not get caught in cycles by reducing gang member crime tiers in a random order */\\nfunction shuffleArray(array) {\\n    for (let i = array.length - 1; i > 0; i--) {\\n        const j = Math.floor(Math.random() * (i + 1));\\n        [array[i], array[j]] = [array[j], array[i]];\\n    }\\n    return array;\\n}\\n\\n/** Pick a random name for the Thugs \\n * @param {NS} ns\\n*/\\nfunction getRandomName(ns) {\\n    const possible_names = [\\n        \\\"nVidia\\\",\\n        \\\"Apple\\\",\\n        \\\"Oculus\\\",\\n        \\\"Instagram\\\",\\n        \\\"Facebook\\\",\\n        \\\"WhatsApp\\\",\\n        \\\"Oomnitza\\\",\\n        \\\"Imgur\\\",\\n        \\\"Reddit\\\",\\n        \\\"Uber\\\",\\n        \\\"Salesforce\\\",\\n        \\\"Slack\\\",\\n        \\\"LinkedIn\\\",\\n        \\\"GitHub\\\",\\n        \\\"IBM\\\",\\n        \\\"Google\\\",\\n        \\\"Netflix\\\",\\n        \\\"DropBox\\\",\\n        \\\"Microsoft\\\",\\n        \\\"Valve\\\",\\n    ]\\n    let existing_names = ns.gang.getMemberNames();\\n    let name = \\\"\\\";\\n    do {\\n        name = possible_names[Math.floor(Math.random() * possible_names.length)];\\n    } while (existing_names.includes(name))\\n    return name\\n}\",\"filename\":\"gangs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///0b4561c5-224c-4aa5-94fb-9eeade1fb345\",\"moduleSequenceNumber\":2093},{\"filename\":\"gangs.js\",\"url\":\"blob:file:///ff04fa0c-0b3d-4afe-a42f-3fe1975cdc4b\",\"moduleSequenceNumber\":2169}],\"dependents\":[],\"ramUsage\":5.7,\"server\":\"home\",\"moduleSequenceNumber\":3077,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Return a formatted representation of the monetary amount using scale sympols (e.g. $6.50M)\\n * @param {number} num - The number to format\\n * @param {number=} maxSignificantFigures - (default: 6) The maximum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} maxDecimalPlaces - (default: 3) The maximum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatMoney(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {\\n    let numberShort = formatNumberShort(num, maxSignificantFigures, maxDecimalPlaces);\\n    return num >= 0 ? \\\"$\\\" + numberShort : numberShort.replace(\\\"-\\\", \\\"-$\\\");\\n}\\n\\nconst symbols = [\\\"\\\", \\\"k\\\", \\\"m\\\", \\\"b\\\", \\\"t\\\", \\\"q\\\", \\\"Q\\\", \\\"s\\\", \\\"S\\\", \\\"o\\\", \\\"n\\\", \\\"e33\\\", \\\"e36\\\", \\\"e39\\\"];\\n\\n/**\\n * Return a formatted representation of the monetary amount using scale sympols (e.g. 6.50M) \\n * @param {number} num - The number to format\\n * @param {number=} maxSignificantFigures - (default: 6) The maximum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} maxDecimalPlaces - (default: 3) The maximum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatNumberShort(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {\\n    for (var i = 0, sign = Math.sign(num), num = Math.abs(num); num >= 1000 && i < symbols.length; i++) num /= 1000;\\n    // TODO: A number like 9.999 once rounted to show 3 sig figs, will become 10.00, which is now 4 sig figs.\\n    return ((sign < 0) ? \\\"-\\\" : \\\"\\\") + num.toFixed(Math.max(0, Math.min(maxDecimalPlaces, maxSignificantFigures - Math.floor(1 + Math.log10(num))))) + symbols[i];\\n}\\n\\n/** Convert a shortened number back into a value */\\nexport function parseShortNumber(text = \\\"0\\\") {\\n    let parsed = Number(text);\\n    if (!isNaN(parsed)) return parsed;\\n    for (const sym of symbols.slice(1))\\n        if (text.toLowerCase().endsWith(sym))\\n            return Number.parseFloat(text.slice(0, text.length - sym.length)) * Math.pow(10, 3 * symbols.indexOf(sym));\\n    return Number.NaN;\\n}\\n\\n/**\\n * Return a number formatted with the specified number of significatnt figures or decimal places, whichever is more limiting.\\n * @param {number} num - The number to format\\n * @param {number=} minSignificantFigures - (default: 6) The minimum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} minDecimalPlaces - (default: 3) The minimum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatNumber(num, minSignificantFigures = 3, minDecimalPlaces = 1) {\\n    return num == 0.0 ? num : num.toFixed(Math.max(minDecimalPlaces, Math.max(0, minSignificantFigures - Math.ceil(Math.log10(num)))));\\n}\\n\\n/** Formats some RAM amount as a round number of GB with thousands separators e.g. `1,028 GB` */\\nexport function formatRam(num) { return `${Math.round(num).toLocaleString()} GB`; }\\n\\n/** Return a datatime in ISO format */\\nexport function formatDateTime(datetime) { return datetime.toISOString(); }\\n\\n/** Format a duration (in milliseconds) as e.g. '1h 21m 6s' for big durations or e.g '12.5s' / '23ms' for small durations */\\nexport function formatDuration(duration) {\\n    if (duration < 1000) return `${duration.toFixed(0)}ms`\\n    const portions = [];\\n    const msInHour = 1000 * 60 * 60;\\n    const hours = Math.trunc(duration / msInHour);\\n    if (hours > 0) {\\n        portions.push(hours + 'h');\\n        duration -= (hours * msInHour);\\n    }\\n    const msInMinute = 1000 * 60;\\n    const minutes = Math.trunc(duration / msInMinute);\\n    if (minutes > 0) {\\n        portions.push(minutes + 'm');\\n        duration -= (minutes * msInMinute);\\n    }\\n    let seconds = (duration / 1000.0)\\n    // Include millisecond precision if we're on the order of seconds\\n    seconds = (hours == 0 && minutes == 0) ? seconds.toPrecision(3) : seconds.toFixed(0);\\n    if (seconds > 0) {\\n        portions.push(seconds + 's');\\n        duration -= (minutes * 1000);\\n    }\\n    return portions.join(' ');\\n}\\n\\n/** Generate a hashCode for a string that is pretty unique most of the time */\\nexport function hashCode(s) { return s.split(\\\"\\\").reduce(function (a, b) { a = ((a << 5) - a) + b.charCodeAt(0); return a & a }, 0); }\\n\\n/** @param {NS} ns **/\\nexport function disableLogs(ns, listOfLogs) { ['disableLog'].concat(...listOfLogs).forEach(log => checkNsInstance(ns, '\\\"disableLogs\\\"').disableLog(log)); }\\n\\n/** Joins all arguments as components in a path, e.g. pathJoin(\\\"foo\\\", \\\"bar\\\", \\\"/baz\\\") = \\\"foo/bar/baz\\\" **/\\nexport function pathJoin(...args) {\\n    return args.filter(s => !!s).join('/').replace(/\\\\/\\\\/+/g, '/');\\n}\\n\\n/** Gets the path for the given local file, taking into account optional subfolder relocation via git-pull.js **/\\nexport function getFilePath(file) {\\n    const subfolder = '';  // git-pull.js optionally modifies this when downloading\\n    return pathJoin(subfolder, file);\\n}\\n\\n// FUNCTIONS THAT PROVIDE ALTERNATIVE IMPLEMENTATIONS TO EXPENSIVE NS FUNCTIONS\\n// VARIATIONS ON NS.RUN\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.run in your script **/\\nexport function getFnRunViaNsRun(ns) { return checkNsInstance(ns, '\\\"getFnRunViaNsRun\\\"').run; }\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.exec in your script **/\\nexport function getFnRunViaNsExec(ns, host = \\\"home\\\") {\\n    checkNsInstance(ns, '\\\"getFnRunViaNsExec\\\"');\\n    return function (scriptPath, ...args) { return ns.exec(scriptPath, host, ...args); }\\n}\\n// VARIATIONS ON NS.ISRUNNING\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.run in your script  */\\nexport function getFnIsAliveViaNsIsRunning(ns) { return checkNsInstance(ns, '\\\"getFnIsAliveViaNsIsRunning\\\"').isRunning; }\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.exec in your script  */\\nexport function getFnIsAliveViaNsPs(ns) {\\n    checkNsInstance(ns, '\\\"getFnIsAliveViaNsPs\\\"');\\n    return function (pid, host) { return ns.ps(host).some(process => process.pid === pid); }\\n}\\n\\n/**\\n * Retrieve the result of an ns command by executing it in a temporary .js script, writing the result to a file, then shuting it down\\n * Importing incurs a maximum of 1.1 GB RAM (0 GB for ns.read, 1 GB for ns.run, 0.1 GB for ns.isRunning).\\n * Has the capacity to retry if there is a failure (e.g. due to lack of RAM available). Not recommended for performance-critical code.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fName - (default \\\"/Temp/{commandhash}-data.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {bool=} verbose - (default false) If set to true, pid and result of command are logged.\\n **/\\nexport async function getNsDataThroughFile(ns, command, fName, verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"getNsDataThroughFile\\\"');\\n    if (!verbose) disableLogs(ns, ['run', 'isRunning']);\\n    return await getNsDataThroughFile_Custom(ns, ns.run, ns.isRunning, command, fName, verbose, maxRetries, retryDelayMs);\\n}\\n\\n/**\\n * An advanced version of getNsDataThroughFile that lets you pass your own \\\"fnRun\\\" and \\\"fnIsAlive\\\" implementations to reduce RAM requirements\\n * Importing incurs no RAM (now that ns.read is free) plus whatever fnRun / fnIsAlive you provide it\\n * Has the capacity to retry if there is a failure (e.g. due to lack of RAM available). Not recommended for performance-critical code.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {function} fnRun - A single-argument function used to start the new sript, e.g. `ns.run` or `(f,...args) => ns.exec(f, \\\"home\\\", ...args)`\\n * @param {function} fnIsAlive - A single-argument function used to start the new sript, e.g. `ns.isRunning` or `pid => ns.ps(\\\"home\\\").some(process => process.pid === pid)`\\n **/\\nexport async function getNsDataThroughFile_Custom(ns, fnRun, fnIsAlive, command, fName, verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"getNsDataThroughFile_Custom\\\"');\\n    if (!verbose) disableLogs(ns, ['read']);\\n    const commandHash = hashCode(command);\\n    fName = fName || `/Temp/${commandHash}-data.txt`;\\n    const fNameCommand = (fName || `/Temp/${commandHash}-command`) + '.js'\\n    // Prepare a command that will write out a new file containing the results of the command\\n    // unless it already exists with the same contents (saves time/ram to check first)\\n    // If an error occurs, it will write an empty file to avoid old results being misread.\\n    const commandToFile = `let result = \\\"\\\"; try { result = JSON.stringify(${command}); } catch { }\\n        if (ns.read(\\\"${fName}\\\") != result) await ns.write(\\\"${fName}\\\", result, 'w')`;\\n    // Run the command with auto-retries if it fails\\n    const pid = await runCommand_Custom(ns, fnRun, commandToFile, fNameCommand, false, maxRetries, retryDelayMs);\\n    // Wait for the process to complete\\n    await waitForProcessToComplete_Custom(ns, fnIsAlive, pid, verbose);\\n    if (verbose) ns.print(`Process ${pid} is done. Reading the contents of ${fName}...`);\\n    // Read the file, with auto-retries if it fails\\n    const fileData = await autoRetry(ns, () => ns.read(fName), f => f !== undefined && f !== \\\"\\\",\\n        () => `ns.read('${fName}') somehow returned undefined or an empty string`,\\n        maxRetries, retryDelayMs, undefined, verbose);\\n    if (verbose) ns.print(`Read the following data for command ${command}:\\\\n${fileData}`);\\n    return JSON.parse(fileData); // Deserialize it back into an object/array and return\\n}\\n\\n/** Evaluate an arbitrary ns command by writing it to a new script and then running or executing it.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fileName - (default \\\"/Temp/{commandhash}-data.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {bool=} verbose - (default false) If set to true, the evaluation result of the command is printed to the terminal\\n * @param {...args} args - args to be passed in as arguments to command being run as a new script.\\n */\\nexport async function runCommand(ns, command, fileName, verbose = false, maxRetries = 5, retryDelayMs = 50, ...args) {\\n    checkNsInstance(ns, '\\\"runCommand\\\"');\\n    if (!verbose) disableLogs(ns, ['run', 'sleep']);\\n    return await runCommand_Custom(ns, ns.run, command, fileName, verbose, maxRetries, retryDelayMs, ...args);\\n}\\n\\n/**\\n * An advanced version of runCommand that lets you pass your own \\\"isAlive\\\" test to reduce RAM requirements (e.g. to avoid referencing ns.isRunning)\\n * Importing incurs 0 GB RAM (assuming fnRun, fnWrite are implemented using another ns function you already reference elsewhere like ns.exec)\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {function} fnRun - A single-argument function used to start the new sript, e.g. `ns.run` or `(f,...args) => ns.exec(f, \\\"home\\\", ...args)`\\n **/\\nexport async function runCommand_Custom(ns, fnRun, command, fileName, verbose = false, maxRetries = 5, retryDelayMs = 50, ...args) {\\n    checkNsInstance(ns, '\\\"runCommand_Custom\\\"');\\n    let script = `import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } fr` + `om '${getFilePath('helpers.js')}'\\\\n` +\\n        `export async function main(ns) { try { ` +\\n        (verbose ? `let output = ${command}; ns.tprint(output)` : command) +\\n        `; } catch(err) { ns.tprint(String(err)); throw(err); } }`;\\n    fileName = fileName || `/Temp/${hashCode(command)}-command.js`;\\n    // To improve performance and save on garbage collection, we can skip writing this exact same script was previously written (common for repeatedly-queried data)\\n    if (ns.read(fileName) != script) await ns.write(fileName, script, \\\"w\\\");\\n    return await autoRetry(ns, () => fnRun(fileName, ...args), temp_pid => temp_pid !== 0,\\n        () => `Run command returned no pid. Destination: ${fileName} Command: ${command}\\\\nEnsure you have sufficient free RAM to run this temporary script.`,\\n        maxRetries, retryDelayMs, undefined, verbose);\\n}\\n\\n/**\\n * Wait for a process id to complete running\\n * Importing incurs a maximum of 0.1 GB RAM (for ns.isRunning) \\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {int} pid - The process id to monitor\\n * @param {bool=} verbose - (default false) If set to true, pid and result of command are logged.\\n **/\\nexport async function waitForProcessToComplete(ns, pid, verbose) {\\n    checkNsInstance(ns, '\\\"waitForProcessToComplete\\\"');\\n    if (!verbose) disableLogs(ns, ['isRunning']);\\n    return await waitForProcessToComplete_Custom(ns, ns.isRunning, pid, verbose);\\n}\\n/**\\n * An advanced version of waitForProcessToComplete that lets you pass your own \\\"isAlive\\\" test to reduce RAM requirements (e.g. to avoid referencing ns.isRunning)\\n * Importing incurs 0 GB RAM (assuming fnIsAlive is implemented using another ns function you already reference elsewhere like ns.ps) \\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {function} fnIsAlive - A single-argument function used to start the new sript, e.g. `ns.isRunning` or `pid => ns.ps(\\\"home\\\").some(process => process.pid === pid)`\\n **/\\nexport async function waitForProcessToComplete_Custom(ns, fnIsAlive, pid, verbose) {\\n    checkNsInstance(ns, '\\\"waitForProcessToComplete_Custom\\\"');\\n    if (!verbose) disableLogs(ns, ['sleep']);\\n    // Wait for the PID to stop running (cheaper than e.g. deleting (rm) a possibly pre-existing file and waiting for it to be recreated)\\n    for (var retries = 0; retries < 1000; retries++) {\\n        if (!fnIsAlive(pid)) break; // Script is done running\\n        if (verbose && retries % 100 === 0) ns.print(`Waiting for pid ${pid} to complete... (${retries})`);\\n        await ns.sleep(10);\\n    }\\n    // Make sure that the process has shut down and we haven't just stopped retrying\\n    if (fnIsAlive(pid)) {\\n        let errorMessage = `run-command pid ${pid} is running much longer than expected. Max retries exceeded.`;\\n        ns.print(errorMessage);\\n        throw errorMessage;\\n    }\\n}\\n\\n/** Helper to retry something that failed temporarily (can happen when e.g. we temporarily don't have enough RAM to run)\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport async function autoRetry(ns, fnFunctionThatMayFail, fnSuccessCondition, errorContext = \\\"Success condition not met\\\",\\n    maxRetries = 5, initialRetryDelayMs = 50, backoffRate = 3, verbose = false) {\\n    checkNsInstance(ns, '\\\"autoRetry\\\"');\\n    let retryDelayMs = initialRetryDelayMs;\\n    while (maxRetries-- > 0) {\\n        try {\\n            const result = await fnFunctionThatMayFail()\\n            if (!fnSuccessCondition(result)) throw typeof errorContext === 'string' ? errorContext : errorContext();\\n            return result;\\n        }\\n        catch (error) {\\n            const fatal = maxRetries === 0;\\n            const errorLog = `${fatal ? 'FAIL' : 'WARN'}: (${maxRetries} retries remaining): ${String(error)}`\\n            log(ns, errorLog, fatal, !verbose ? undefined : (fatal ? 'error' : 'warning'))\\n            if (fatal) throw error;\\n            await ns.sleep(retryDelayMs);\\n            retryDelayMs *= backoffRate;\\n        }\\n    }\\n}\\n\\n/** Helper to log a message, and optionally also tprint it and toast it\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport function log(ns, message = \\\"\\\", alsoPrintToTerminal = false, toastStyle = \\\"\\\", maxToastLength = 100) {\\n    checkNsInstance(ns, '\\\"log\\\"');\\n    ns.print(message);\\n    if (alsoPrintToTerminal) ns.tprint(message);\\n    if (toastStyle) ns.toast(message.length <= maxToastLength ? message : message.substring(0, maxToastLength - 3) + \\\"...\\\", toastStyle);\\n    return message;\\n}\\n\\n/** Helper to get a list of all hostnames on the network\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport function scanAllServers(ns) {\\n    checkNsInstance(ns, '\\\"scanAllServers\\\"');\\n    let discoveredHosts = []; // Hosts (a.k.a. servers) we have scanned\\n    let hostsToScan = [\\\"home\\\"]; // Hosts we know about, but have no yet scanned\\n    let infiniteLoopProtection = 9999; // In case you mess with this code, this should save you from getting stuck\\n    while (hostsToScan.length > 0 && infiniteLoopProtection-- > 0) { // Loop until the list of hosts to scan is empty\\n        let hostName = hostsToScan.pop(); // Get the next host to be scanned\\n        for (const connectedHost of ns.scan(hostName)) // \\\"scan\\\" (list all hosts connected to this one)\\n            if (!discoveredHosts.includes(connectedHost)) // If we haven't already scanned this host\\n                hostsToScan.push(connectedHost); // Add it to the queue of hosts to be scanned\\n        discoveredHosts.push(hostName); // Mark this host as \\\"scanned\\\"\\n    }\\n    return discoveredHosts; // The list of scanned hosts should now be the set of all hosts in the game!\\n}\\n\\n/** @param {NS} ns \\n * Get a dictionary of active source files, taking into account the current active bitnode as well. **/\\nexport async function getActiveSourceFiles(ns) {\\n    return await getActiveSourceFiles_Custom(ns, getNsDataThroughFile);\\n}\\n\\n/** @param {NS} ns \\n * getActiveSourceFiles Helper that allows the user to pass in their chosen implementation of getNsDataThroughFile to minimize RAM usage **/\\nexport async function getActiveSourceFiles_Custom(ns, fnGetNsDataThroughFile) {\\n    checkNsInstance(ns, '\\\"getActiveSourceFiles\\\"');\\n    let tempFile = '/Temp/owned-source-files.txt';\\n    // Find out what source files the user has unlocked\\n    let dictSourceFiles;\\n    try { await fnGetNsDataThroughFile(ns, `Object.fromEntries(ns.getOwnedSourceFiles().map(sf => [sf.n, sf.lvl]))`, tempFile); } catch { }\\n    if (!dictSourceFiles) { // Bit of a hack, but if RAM is so low that this fails, we can fallback to using an older version of this file, and even assuming we have no source files.\\n        dictSourceFiles = ns.read(tempFile)\\n        dictSourceFiles = dictSourceFiles ? JSON.parse(dictSourceFiles) : {};\\n    }\\n    // If the user is currently in a given bitnode, they will have its features unlocked\\n    dictSourceFiles[(await fnGetNsDataThroughFile(ns, 'ns.getPlayer()', '/Temp/player-info.txt')).bitNodeN] = 3;\\n    return dictSourceFiles;\\n}\\n\\n/** @param {NS} ns \\n * Return bitnode multiplers, or null if they cannot be accessed. **/\\nexport async function tryGetBitNodeMultipliers(ns) {\\n    return await tryGetBitNodeMultipliers_Custom(ns, getNsDataThroughFile);\\n}\\n\\n/** @param {NS} ns\\n * tryGetBitNodeMultipliers Helper that allows the user to pass in their chosen implementation of getNsDataThroughFile to minimize RAM usage **/\\nexport async function tryGetBitNodeMultipliers_Custom(ns, fnGetNsDataThroughFile) {\\n    checkNsInstance(ns, '\\\"tryGetBitNodeMultipliers\\\"');\\n    let canGetBitNodeMultipliers = false;\\n    try { canGetBitNodeMultipliers = 5 in (await getActiveSourceFiles_Custom(ns, fnGetNsDataThroughFile)); } catch { }\\n    if (!canGetBitNodeMultipliers) return null;\\n    try { return await fnGetNsDataThroughFile(ns, 'ns.getBitNodeMultipliers()', '/Temp/bitnode-multipliers.txt'); } catch { }\\n    return null;\\n}\\n\\n/** @param {NS} ns \\n * Returns a helpful error message if we forgot to pass the ns instance to a function */\\nexport function checkNsInstance(ns, fnName = \\\"this function\\\") { if (!ns.print) throw `The first argument to ${fnName} should be a 'ns' instance.`; return ns; }\",\"filename\":\"helpers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.4,\"server\":\"home\",\"moduleSequenceNumber\":3078,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries(ns.getOwnedSourceFiles().map(sf => [sf.n, sf.lvl]))); } catch { }\\n        if (ns.read(\\\"/Temp/owned-source-files.txt\\\") != result) await ns.write(\\\"/Temp/owned-source-files.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/owned-source-files.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///68ea827d-8df2-4eee-b237-3292608f46c4\",\"moduleSequenceNumber\":2093},{\"filename\":\"/Temp/owned-source-files.txt.js\",\"url\":\"blob:file:///4374b535-e258-49f5-b45a-b34b13aeb4ae\",\"moduleSequenceNumber\":2171}],\"dependents\":[],\"ramUsage\":6.6,\"server\":\"home\",\"moduleSequenceNumber\":3079,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.getPlayer()); } catch { }\\n        if (ns.read(\\\"/Temp/player-info.txt\\\") != result) await ns.write(\\\"/Temp/player-info.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/player-info.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///54871537-bd3f-41fc-938d-260b95897394\",\"moduleSequenceNumber\":2093},{\"filename\":\"/Temp/player-info.txt.js\",\"url\":\"blob:file:///5bb64700-41b4-4ac4-8bc6-36491b1ed913\",\"moduleSequenceNumber\":2172}],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"home\",\"moduleSequenceNumber\":3080,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.gang.inGang()); } catch { }\\n        if (ns.read(\\\"/Temp/player-gang-joined.txt\\\") != result) await ns.write(\\\"/Temp/player-gang-joined.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/player-gang-joined.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///88c58ef5-e4b7-4121-b352-fbea4bfa60c1\",\"moduleSequenceNumber\":2093},{\"filename\":\"/Temp/player-gang-joined.txt.js\",\"url\":\"blob:file:///10d33aca-34c3-4985-a984-4554069526d2\",\"moduleSequenceNumber\":2173}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":3081,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.inGang\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.getAugmentationsFromFaction('Slum Snakes')); } catch { }\\n        if (ns.read(\\\"/Temp/gang-augs.txt\\\") != result) await ns.write(\\\"/Temp/gang-augs.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-augs.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///13dc5a40-5c70-4ad3-a244-0114f0bc12b1\",\"moduleSequenceNumber\":2093},{\"filename\":\"/Temp/gang-augs.txt.js\",\"url\":\"blob:file:///6e2a4f92-1f87-4305-85dd-814f36f3007b\",\"moduleSequenceNumber\":2174}],\"dependents\":[],\"ramUsage\":6.6,\"server\":\"home\",\"moduleSequenceNumber\":3082,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getAugmentationsFromFaction\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.gang.getEquipmentNames()); } catch { }\\n        if (ns.read(\\\"/Temp/gang-equipment-names.txt\\\") != result) await ns.write(\\\"/Temp/gang-equipment-names.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-equipment-names.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///f45430c6-55a8-453e-901b-870358665e42\",\"moduleSequenceNumber\":2093},{\"filename\":\"/Temp/gang-equipment-names.txt.js\",\"url\":\"blob:file:///89997c88-4c30-4408-b30d-1e77c9b7c365\",\"moduleSequenceNumber\":2177}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":3083,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([\\\"Baseball Bat\\\",\\\"Katana\\\",\\\"Glock 18C\\\",\\\"P90C\\\",\\\"Steyr AUG\\\",\\\"AK-47\\\",\\\"M15A10 Assault Rifle\\\",\\\"AWM Sniper Rifle\\\",\\\"Bulletproof Vest\\\",\\\"Full Body Armor\\\",\\\"Liquid Body Armor\\\",\\\"Graphene Plating Armor\\\",\\\"Ford Flex V20\\\",\\\"ATX1070 Superbike\\\",\\\"Mercedes-Benz S9001\\\",\\\"White Ferrari\\\",\\\"NUKE Rootkit\\\",\\\"Soulstealer Rootkit\\\",\\\"Demon Rootkit\\\",\\\"Hmap Node\\\",\\\"Jack the Ripper\\\",\\\"Bionic Arms\\\",\\\"Bionic Legs\\\",\\\"Bionic Spine\\\",\\\"BrachiBlades\\\",\\\"Nanofiber Weave\\\",\\\"Synthetic Heart\\\",\\\"Synfibril Muscle\\\",\\\"BitWire\\\",\\\"Neuralstimulator\\\",\\\"DataJack\\\",\\\"Graphene Bone Lacings\\\"].map(e => [e, ns.gang.getEquipmentType(e)]))); } catch { }\\n        if (ns.read(\\\"/Temp/gang-getEquipmentType.txt\\\") != result) await ns.write(\\\"/Temp/gang-getEquipmentType.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-getEquipmentType.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///2d569f56-4c03-4dbf-a71b-22303ab64b9a\",\"moduleSequenceNumber\":2093},{\"filename\":\"/Temp/gang-getEquipmentType.txt.js\",\"url\":\"blob:file:///3b1aa56e-e94d-44d8-9d57-e975e43f6aca\",\"moduleSequenceNumber\":2178}],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":3084,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getEquipmentType\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([\\\"Baseball Bat\\\",\\\"Bulletproof Vest\\\",\\\"Ford Flex V20\\\",\\\"Full Body Armor\\\",\\\"NUKE Rootkit\\\",\\\"ATX1070 Superbike\\\",\\\"Katana\\\",\\\"Mercedes-Benz S9001\\\",\\\"Glock 18C\\\",\\\"Liquid Body Armor\\\",\\\"Soulstealer Rootkit\\\",\\\"White Ferrari\\\",\\\"Graphene Plating Armor\\\",\\\"Hmap Node\\\",\\\"P90C\\\",\\\"Steyr AUG\\\",\\\"Demon Rootkit\\\",\\\"Jack the Ripper\\\",\\\"AK-47\\\",\\\"M15A10 Assault Rifle\\\",\\\"AWM Sniper Rifle\\\",\\\"BitWire\\\",\\\"DataJack\\\",\\\"Bionic Arms\\\",\\\"Bionic Legs\\\",\\\"Neuralstimulator\\\",\\\"Nanofiber Weave\\\",\\\"Bionic Spine\\\",\\\"Synfibril Muscle\\\",\\\"BrachiBlades\\\",\\\"Synthetic Heart\\\",\\\"Graphene Bone Lacings\\\"].map(e => [e, ns.gang.getEquipmentCost(e)]))); } catch { }\\n        if (ns.read(\\\"/Temp/gang-getEquipmentCost.txt\\\") != result) await ns.write(\\\"/Temp/gang-getEquipmentCost.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-getEquipmentCost.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///d777f29c-8266-43c8-949c-77fcd201a530\",\"moduleSequenceNumber\":2093},{\"filename\":\"/Temp/gang-getEquipmentCost.txt.js\",\"url\":\"blob:file:///bbdf10aa-0d6a-434b-a864-c5b2983fc290\",\"moduleSequenceNumber\":2713}],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":3085,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getEquipmentCost\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([\\\"Baseball Bat\\\",\\\"Katana\\\",\\\"Glock 18C\\\",\\\"P90C\\\",\\\"Steyr AUG\\\",\\\"AK-47\\\",\\\"M15A10 Assault Rifle\\\",\\\"AWM Sniper Rifle\\\",\\\"Bulletproof Vest\\\",\\\"Full Body Armor\\\",\\\"Liquid Body Armor\\\",\\\"Graphene Plating Armor\\\",\\\"Ford Flex V20\\\",\\\"ATX1070 Superbike\\\",\\\"Mercedes-Benz S9001\\\",\\\"White Ferrari\\\",\\\"NUKE Rootkit\\\",\\\"Soulstealer Rootkit\\\",\\\"Demon Rootkit\\\",\\\"Hmap Node\\\",\\\"Jack the Ripper\\\",\\\"Bionic Arms\\\",\\\"Bionic Legs\\\",\\\"Bionic Spine\\\",\\\"BrachiBlades\\\",\\\"Nanofiber Weave\\\",\\\"Synthetic Heart\\\",\\\"Synfibril Muscle\\\",\\\"BitWire\\\",\\\"Neuralstimulator\\\",\\\"DataJack\\\",\\\"Graphene Bone Lacings\\\"].map(e => [e, ns.gang.getEquipmentStats(e)]))); } catch { }\\n        if (ns.read(\\\"/Temp/gang-getEquipmentStats.txt\\\") != result) await ns.write(\\\"/Temp/gang-getEquipmentStats.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-getEquipmentStats.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///25ed6b5a-60b1-4d07-b814-05413a6a2029\",\"moduleSequenceNumber\":2093},{\"filename\":\"/Temp/gang-getEquipmentStats.txt.js\",\"url\":\"blob:file:///d3c20f43-9c45-4f98-b361-65e88e005939\",\"moduleSequenceNumber\":2181}],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":3086,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getEquipmentStats\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.gang.getTaskNames()); } catch { }\\n        if (ns.read(\\\"/Temp/gang-task-names.txt\\\") != result) await ns.write(\\\"/Temp/gang-task-names.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-task-names.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///da56ceff-414c-44e5-a3ff-961ebd1da3ad\",\"moduleSequenceNumber\":2093},{\"filename\":\"/Temp/gang-task-names.txt.js\",\"url\":\"blob:file:///374ed707-59c1-4d36-badf-9051c75a8591\",\"moduleSequenceNumber\":2182}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":3087,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getTaskNames\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([\\\"Unassigned\\\",\\\"Mug People\\\",\\\"Deal Drugs\\\",\\\"Strongarm Civilians\\\",\\\"Run a Con\\\",\\\"Armed Robbery\\\",\\\"Traffick Illegal Arms\\\",\\\"Threaten & Blackmail\\\",\\\"Human Trafficking\\\",\\\"Terrorism\\\",\\\"Vigilante Justice\\\",\\\"Train Combat\\\",\\\"Train Hacking\\\",\\\"Train Charisma\\\",\\\"Territory Warfare\\\"].map(e => [e, ns.gang.getTaskStats(e)]))); } catch { }\\n        if (ns.read(\\\"/Temp/gang-getTaskStats.txt\\\") != result) await ns.write(\\\"/Temp/gang-getTaskStats.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-getTaskStats.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///95170921-84fb-435e-b738-a95ecca5f473\",\"moduleSequenceNumber\":2093},{\"filename\":\"/Temp/gang-getTaskStats.txt.js\",\"url\":\"blob:file:///64e8d2c2-0573-447a-813b-099444f5c829\",\"moduleSequenceNumber\":2183}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":3088,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getTaskStats\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.gang.getMemberNames()); } catch { }\\n        if (ns.read(\\\"/Temp/gang-member-names.txt\\\") != result) await ns.write(\\\"/Temp/gang-member-names.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-member-names.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///eeb79ce3-a528-486a-bf51-f1736c56547f\",\"moduleSequenceNumber\":2093},{\"filename\":\"/Temp/gang-member-names.txt.js\",\"url\":\"blob:file:///96ec415c-9053-429a-a1cb-1b68eec7c77f\",\"moduleSequenceNumber\":2184}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":3089,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([\\\"Instagram\\\",\\\"Netflix\\\",\\\"Facebook\\\",\\\"Imgur\\\",\\\"Apple\\\",\\\"Microsoft\\\",\\\"GitHub\\\",\\\"DropBox\\\",\\\"Oomnitza\\\",\\\"Google\\\",\\\"WhatsApp\\\",\\\"Salesforce\\\"].map(e => [e, ns.gang.getMemberInformation(e)]))); } catch { }\\n        if (ns.read(\\\"/Temp/gang-getMemberInformation.txt\\\") != result) await ns.write(\\\"/Temp/gang-getMemberInformation.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-getMemberInformation.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///409bd2a7-c82f-4a1e-9a12-782f2768aa10\",\"moduleSequenceNumber\":2093},{\"filename\":\"/Temp/gang-getMemberInformation.txt.js\",\"url\":\"blob:file:///f01dda6a-70c3-4598-963a-5e6a461ba08d\",\"moduleSequenceNumber\":2185}],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":3090,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberInformation\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.getFactionRep('Slum Snakes')); } catch { }\\n        if (ns.read(\\\"/Temp/gang-faction-rep.txt\\\") != result) await ns.write(\\\"/Temp/gang-faction-rep.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-faction-rep.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///5719d0bd-f633-4646-8155-ba5539fe28fb\",\"moduleSequenceNumber\":2093},{\"filename\":\"/Temp/gang-faction-rep.txt.js\",\"url\":\"blob:file:///b220daef-067f-4768-a51e-f8fdc51e7bfc\",\"moduleSequenceNumber\":2186}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":3091,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getFactionRep\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify([{\\\"name\\\":\\\"Instagram\\\",\\\"task\\\":\\\"Traffick Illegal Arms\\\"},{\\\"name\\\":\\\"Netflix\\\",\\\"task\\\":\\\"Traffick Illegal Arms\\\"},{\\\"name\\\":\\\"Facebook\\\",\\\"task\\\":\\\"Traffick Illegal Arms\\\"},{\\\"name\\\":\\\"Imgur\\\",\\\"task\\\":\\\"Traffick Illegal Arms\\\"},{\\\"name\\\":\\\"Apple\\\",\\\"task\\\":\\\"Traffick Illegal Arms\\\"},{\\\"name\\\":\\\"Microsoft\\\",\\\"task\\\":\\\"Traffick Illegal Arms\\\"},{\\\"name\\\":\\\"GitHub\\\",\\\"task\\\":\\\"Traffick Illegal Arms\\\"},{\\\"name\\\":\\\"DropBox\\\",\\\"task\\\":\\\"Traffick Illegal Arms\\\"},{\\\"name\\\":\\\"Oomnitza\\\",\\\"task\\\":\\\"Traffick Illegal Arms\\\"},{\\\"name\\\":\\\"Google\\\",\\\"task\\\":\\\"Traffick Illegal Arms\\\"},{\\\"name\\\":\\\"WhatsApp\\\",\\\"task\\\":\\\"Traffick Illegal Arms\\\"},{\\\"name\\\":\\\"Salesforce\\\",\\\"task\\\":\\\"Traffick Illegal Arms\\\"}].reduce((success, m) => success && ns.gang.setMemberTask(m.name, m.task), true)); } catch { }\\n        if (ns.read(\\\"/Temp/gang-set-member-tasks.txt\\\") != result) await ns.write(\\\"/Temp/gang-set-member-tasks.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-set-member-tasks.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///68727537-67b6-4944-b17e-be96db834c65\",\"moduleSequenceNumber\":2093},{\"filename\":\"/Temp/gang-set-member-tasks.txt.js\",\"url\":\"blob:file:///b16dc716-e81e-4aa6-bbfa-c1aaff9bf1ad\",\"moduleSequenceNumber\":3057}],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":3092,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.gang.getOtherGangInformation()); } catch { }\\n        if (ns.read(\\\"/Temp/gang-other-gang-info.txt\\\") != result) await ns.write(\\\"/Temp/gang-other-gang-info.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-other-gang-info.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///9396d7f3-ebf4-497b-b018-17810f7aef65\",\"moduleSequenceNumber\":2093},{\"filename\":\"/Temp/gang-other-gang-info.txt.js\",\"url\":\"blob:file:///755e65e9-fb94-4720-8163-3c1a2b849048\",\"moduleSequenceNumber\":2189}],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":3093,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getOtherGangInformation\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.gang.canRecruitMember() && ns.gang.recruitMember('Salesforce')); } catch { }\\n        if (ns.read(\\\"/Temp/gang-recruit-member.txt\\\") != result) await ns.write(\\\"/Temp/gang-recruit-member.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-recruit-member.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///0c52da91-3629-4fea-b1d9-e36d00c37d45\",\"moduleSequenceNumber\":520271},{\"filename\":\"/Temp/gang-recruit-member.txt.js\",\"url\":\"blob:file:///34cebc19-1f19-4705-a76f-ab25d0d591c3\",\"moduleSequenceNumber\":607265}],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"home\",\"moduleSequenceNumber\":3094,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.canRecruitMember\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.recruitMember\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([\\\"Instagram\\\",\\\"Netflix\\\",\\\"Facebook\\\",\\\"Imgur\\\",\\\"Apple\\\",\\\"Microsoft\\\",\\\"GitHub\\\",\\\"DropBox\\\",\\\"Oomnitza\\\",\\\"Google\\\",\\\"WhatsApp\\\",\\\"Salesforce\\\"].map(e => [e, ns.gang.getAscensionResult(e)]))); } catch { }\\n        if (ns.read(\\\"/Temp/gang-getAscensionResult.txt\\\") != result) await ns.write(\\\"/Temp/gang-getAscensionResult.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-getAscensionResult.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///39e475e2-2f68-473e-b8a7-2a91ab7b9065\",\"moduleSequenceNumber\":2093},{\"filename\":\"/Temp/gang-getAscensionResult.txt.js\",\"url\":\"blob:file:///21a0bdff-0dcc-4dc4-96ae-0a5cd1a25b23\",\"moduleSequenceNumber\":2711}],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":3095,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getAscensionResult\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.getOwnedAugmentations(true)); } catch { }\\n        if (ns.read(\\\"/Temp/player-augs-purchased.txt\\\") != result) await ns.write(\\\"/Temp/player-augs-purchased.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/player-augs-purchased.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///8916f5d3-3687-4f36-8ae2-0549f4a4084f\",\"moduleSequenceNumber\":2093},{\"filename\":\"/Temp/player-augs-purchased.txt.js\",\"url\":\"blob:file:///f39fe5f9-9962-4f23-8141-e2aa1bf18895\",\"moduleSequenceNumber\":2175}],\"dependents\":[],\"ramUsage\":6.6,\"server\":\"home\",\"moduleSequenceNumber\":3096,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getOwnedAugmentations\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(Object.fromEntries([\\\"Unstable Circadian Modulator\\\",\\\"HemoRecirculator\\\",\\\"Augmented Targeting I\\\",\\\"Augmented Targeting II\\\",\\\"Augmented Targeting III\\\",\\\"Synthetic Heart\\\",\\\"Synfibril Muscle\\\",\\\"Combat Rib I\\\",\\\"Combat Rib II\\\",\\\"Combat Rib III\\\",\\\"Nanofiber Weave\\\",\\\"NEMEAN Subdermal Weave\\\",\\\"Wired Reflexes\\\",\\\"Graphene Bone Lacings\\\",\\\"Bionic Spine\\\",\\\"Graphene Bionic Spine Upgrade\\\",\\\"Bionic Legs\\\",\\\"Graphene Bionic Legs Upgrade\\\",\\\"Speech Processor Implant\\\",\\\"TITN-41 Gene-Modification Injection\\\",\\\"Enhanced Social Interaction Implant\\\",\\\"BitWire\\\",\\\"Artificial Bio-neural Network Implant\\\",\\\"Artificial Synaptic Potentiation\\\",\\\"Enhanced Myelin Sheathing\\\",\\\"Synaptic Enhancement Implant\\\",\\\"Neural-Retention Enhancement\\\",\\\"DataJack\\\",\\\"Embedded Netburner Module\\\",\\\"Embedded Netburner Module Core Implant\\\",\\\"Embedded Netburner Module Core V2 Upgrade\\\",\\\"Embedded Netburner Module Core V3 Upgrade\\\",\\\"Embedded Netburner Module Analyze Engine\\\",\\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\\"Neuralstimulator\\\",\\\"Neural Accelerator\\\",\\\"Cranial Signal Processors - Gen I\\\",\\\"Cranial Signal Processors - Gen II\\\",\\\"Cranial Signal Processors - Gen III\\\",\\\"Cranial Signal Processors - Gen IV\\\",\\\"Cranial Signal Processors - Gen V\\\",\\\"Neuronal Densification\\\",\\\"Nuoptimal Nootropic Injector Implant\\\",\\\"Speech Enhancement\\\",\\\"FocusWire\\\",\\\"PC Direct-Neural Interface\\\",\\\"PC Direct-Neural Interface Optimization Submodule\\\",\\\"PC Direct-Neural Interface NeuroNet Injector\\\",\\\"ADR-V1 Pheromone Gene\\\",\\\"ADR-V2 Pheromone Gene\\\",\\\"The Shadow's Simulacrum\\\",\\\"Hacknet Node CPU Architecture Neural-Upload\\\",\\\"Hacknet Node Cache Architecture Neural-Upload\\\",\\\"Hacknet Node NIC Architecture Neural-Upload\\\",\\\"Hacknet Node Kernel Direct-Neural Interface\\\",\\\"Hacknet Node Core Direct-Neural Interface\\\",\\\"Neurotrainer I\\\",\\\"Neurotrainer II\\\",\\\"Neurotrainer III\\\",\\\"HyperSight Corneal Implant\\\",\\\"LuminCloaking-V1 Skin Implant\\\",\\\"LuminCloaking-V2 Skin Implant\\\",\\\"SmartSonar Implant\\\",\\\"Power Recirculation Core\\\",\\\"QLink\\\",\\\"SPTN-97 Gene Modification\\\",\\\"ECorp HVMind Implant\\\",\\\"CordiARC Fusion Reactor\\\",\\\"SmartJaw\\\",\\\"Neotra\\\",\\\"Xanipher\\\",\\\"Hydroflame Left Arm\\\",\\\"nextSENS Gene Modification\\\",\\\"OmniTek InfoLoad\\\",\\\"Photosynthetic Cells\\\",\\\"BitRunners Neurolink\\\",\\\"The Black Hand\\\",\\\"CRTX42-AA Gene Modification\\\",\\\"Neuregen Gene Modification\\\",\\\"CashRoot Starter Kit\\\",\\\"NutriGen Implant\\\",\\\"PCMatrix\\\",\\\"INFRARET Enhancement\\\",\\\"DermaForce Particle Barrier\\\",\\\"Graphene BrachiBlades Upgrade\\\",\\\"Graphene Bionic Arms Upgrade\\\",\\\"BrachiBlades\\\",\\\"Bionic Arms\\\",\\\"Social Negotiation Assistant (S.N.A)\\\",\\\"Neuroreceptor Management Implant\\\"].map(e => [e, ns.getAugmentationRepReq(e)]))); } catch { }\\n        if (ns.read(\\\"/Temp/aug-repreqs.txt\\\") != result) await ns.write(\\\"/Temp/aug-repreqs.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/aug-repreqs.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///22d2f048-f9f3-4097-9f9f-bfee5568e5ae\",\"moduleSequenceNumber\":2093},{\"filename\":\"/Temp/aug-repreqs.txt.js\",\"url\":\"blob:file:///85911d47-0d3b-4332-a4a3-fde5511bc5ba\",\"moduleSequenceNumber\":2176}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"home\",\"moduleSequenceNumber\":3097,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getAugmentationRepReq\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify(ns.gang.ascendMember('Salesforce')); } catch { }\\n        if (ns.read(\\\"/Temp/gang-ascend-member.txt\\\") != result) await ns.write(\\\"/Temp/gang-ascend-member.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-ascend-member.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///3e296e09-a6aa-4974-ab06-d4ae7d9a751b\",\"moduleSequenceNumber\":1596},{\"filename\":\"/Temp/gang-ascend-member.txt.js\",\"url\":\"blob:file:///d089a3ca-6b67-44a0-afc3-95f081a7673f\",\"moduleSequenceNumber\":1715}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"home\",\"moduleSequenceNumber\":3098,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.ascendMember\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { let result = \\\"\\\"; try { result = JSON.stringify([{\\\"member\\\":\\\"Instagram\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"Baseball Bat\\\",\\\"cost\\\":9.05072761508517},{\\\"member\\\":\\\"Netflix\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"Baseball Bat\\\",\\\"cost\\\":9.05072761508517},{\\\"member\\\":\\\"Facebook\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"Baseball Bat\\\",\\\"cost\\\":9.05072761508517},{\\\"member\\\":\\\"Imgur\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"Baseball Bat\\\",\\\"cost\\\":9.05072761508517},{\\\"member\\\":\\\"Apple\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"Baseball Bat\\\",\\\"cost\\\":9.05072761508517},{\\\"member\\\":\\\"GitHub\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"Baseball Bat\\\",\\\"cost\\\":9.05072761508517},{\\\"member\\\":\\\"DropBox\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"Baseball Bat\\\",\\\"cost\\\":9.05072761508517},{\\\"member\\\":\\\"Oomnitza\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"Baseball Bat\\\",\\\"cost\\\":9.05072761508517},{\\\"member\\\":\\\"Google\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"Baseball Bat\\\",\\\"cost\\\":9.05072761508517},{\\\"member\\\":\\\"WhatsApp\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"Baseball Bat\\\",\\\"cost\\\":9.05072761508517},{\\\"member\\\":\\\"Salesforce\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"Baseball Bat\\\",\\\"cost\\\":9.05072761508517},{\\\"member\\\":\\\"Instagram\\\",\\\"type\\\":\\\"Armor\\\",\\\"equipmentName\\\":\\\"Bulletproof Vest\\\",\\\"cost\\\":18.10145523017034},{\\\"member\\\":\\\"Netflix\\\",\\\"type\\\":\\\"Armor\\\",\\\"equipmentName\\\":\\\"Bulletproof Vest\\\",\\\"cost\\\":18.10145523017034},{\\\"member\\\":\\\"Facebook\\\",\\\"type\\\":\\\"Armor\\\",\\\"equipmentName\\\":\\\"Bulletproof Vest\\\",\\\"cost\\\":18.10145523017034},{\\\"member\\\":\\\"Imgur\\\",\\\"type\\\":\\\"Armor\\\",\\\"equipmentName\\\":\\\"Bulletproof Vest\\\",\\\"cost\\\":18.10145523017034},{\\\"member\\\":\\\"Apple\\\",\\\"type\\\":\\\"Armor\\\",\\\"equipmentName\\\":\\\"Bulletproof Vest\\\",\\\"cost\\\":18.10145523017034},{\\\"member\\\":\\\"GitHub\\\",\\\"type\\\":\\\"Armor\\\",\\\"equipmentName\\\":\\\"Bulletproof Vest\\\",\\\"cost\\\":18.10145523017034},{\\\"member\\\":\\\"DropBox\\\",\\\"type\\\":\\\"Armor\\\",\\\"equipmentName\\\":\\\"Bulletproof Vest\\\",\\\"cost\\\":18.10145523017034},{\\\"member\\\":\\\"Oomnitza\\\",\\\"type\\\":\\\"Armor\\\",\\\"equipmentName\\\":\\\"Bulletproof Vest\\\",\\\"cost\\\":18.10145523017034},{\\\"member\\\":\\\"Google\\\",\\\"type\\\":\\\"Armor\\\",\\\"equipmentName\\\":\\\"Bulletproof Vest\\\",\\\"cost\\\":18.10145523017034},{\\\"member\\\":\\\"WhatsApp\\\",\\\"type\\\":\\\"Armor\\\",\\\"equipmentName\\\":\\\"Bulletproof Vest\\\",\\\"cost\\\":18.10145523017034},{\\\"member\\\":\\\"Salesforce\\\",\\\"type\\\":\\\"Armor\\\",\\\"equipmentName\\\":\\\"Bulletproof Vest\\\",\\\"cost\\\":18.10145523017034},{\\\"member\\\":\\\"Instagram\\\",\\\"type\\\":\\\"Vehicle\\\",\\\"equipmentName\\\":\\\"Ford Flex V20\\\",\\\"cost\\\":27.152182845255513},{\\\"member\\\":\\\"Netflix\\\",\\\"type\\\":\\\"Vehicle\\\",\\\"equipmentName\\\":\\\"Ford Flex V20\\\",\\\"cost\\\":27.152182845255513},{\\\"member\\\":\\\"Facebook\\\",\\\"type\\\":\\\"Vehicle\\\",\\\"equipmentName\\\":\\\"Ford Flex V20\\\",\\\"cost\\\":27.152182845255513},{\\\"member\\\":\\\"Imgur\\\",\\\"type\\\":\\\"Vehicle\\\",\\\"equipmentName\\\":\\\"Ford Flex V20\\\",\\\"cost\\\":27.152182845255513},{\\\"member\\\":\\\"Apple\\\",\\\"type\\\":\\\"Vehicle\\\",\\\"equipmentName\\\":\\\"Ford Flex V20\\\",\\\"cost\\\":27.152182845255513},{\\\"member\\\":\\\"GitHub\\\",\\\"type\\\":\\\"Vehicle\\\",\\\"equipmentName\\\":\\\"Ford Flex V20\\\",\\\"cost\\\":27.152182845255513},{\\\"member\\\":\\\"DropBox\\\",\\\"type\\\":\\\"Vehicle\\\",\\\"equipmentName\\\":\\\"Ford Flex V20\\\",\\\"cost\\\":27.152182845255513},{\\\"member\\\":\\\"Oomnitza\\\",\\\"type\\\":\\\"Vehicle\\\",\\\"equipmentName\\\":\\\"Ford Flex V20\\\",\\\"cost\\\":27.152182845255513},{\\\"member\\\":\\\"Google\\\",\\\"type\\\":\\\"Vehicle\\\",\\\"equipmentName\\\":\\\"Ford Flex V20\\\",\\\"cost\\\":27.152182845255513},{\\\"member\\\":\\\"WhatsApp\\\",\\\"type\\\":\\\"Vehicle\\\",\\\"equipmentName\\\":\\\"Ford Flex V20\\\",\\\"cost\\\":27.152182845255513},{\\\"member\\\":\\\"Salesforce\\\",\\\"type\\\":\\\"Vehicle\\\",\\\"equipmentName\\\":\\\"Ford Flex V20\\\",\\\"cost\\\":27.152182845255513},{\\\"member\\\":\\\"Instagram\\\",\\\"type\\\":\\\"Armor\\\",\\\"equipmentName\\\":\\\"Full Body Armor\\\",\\\"cost\\\":45.253638075425854},{\\\"member\\\":\\\"Netflix\\\",\\\"type\\\":\\\"Armor\\\",\\\"equipmentName\\\":\\\"Full Body Armor\\\",\\\"cost\\\":45.253638075425854},{\\\"member\\\":\\\"Facebook\\\",\\\"type\\\":\\\"Armor\\\",\\\"equipmentName\\\":\\\"Full Body Armor\\\",\\\"cost\\\":45.253638075425854},{\\\"member\\\":\\\"Imgur\\\",\\\"type\\\":\\\"Armor\\\",\\\"equipmentName\\\":\\\"Full Body Armor\\\",\\\"cost\\\":45.253638075425854},{\\\"member\\\":\\\"Apple\\\",\\\"type\\\":\\\"Armor\\\",\\\"equipmentName\\\":\\\"Full Body Armor\\\",\\\"cost\\\":45.253638075425854},{\\\"member\\\":\\\"GitHub\\\",\\\"type\\\":\\\"Armor\\\",\\\"equipmentName\\\":\\\"Full Body Armor\\\",\\\"cost\\\":45.253638075425854},{\\\"member\\\":\\\"DropBox\\\",\\\"type\\\":\\\"Armor\\\",\\\"equipmentName\\\":\\\"Full Body Armor\\\",\\\"cost\\\":45.253638075425854},{\\\"member\\\":\\\"Oomnitza\\\",\\\"type\\\":\\\"Armor\\\",\\\"equipmentName\\\":\\\"Full Body Armor\\\",\\\"cost\\\":45.253638075425854},{\\\"member\\\":\\\"Google\\\",\\\"type\\\":\\\"Armor\\\",\\\"equipmentName\\\":\\\"Full Body Armor\\\",\\\"cost\\\":45.253638075425854},{\\\"member\\\":\\\"WhatsApp\\\",\\\"type\\\":\\\"Armor\\\",\\\"equipmentName\\\":\\\"Full Body Armor\\\",\\\"cost\\\":45.253638075425854},{\\\"member\\\":\\\"Salesforce\\\",\\\"type\\\":\\\"Armor\\\",\\\"equipmentName\\\":\\\"Full Body Armor\\\",\\\"cost\\\":45.253638075425854},{\\\"member\\\":\\\"Instagram\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"NUKE Rootkit\\\",\\\"cost\\\":45.253638075425854},{\\\"member\\\":\\\"Netflix\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"NUKE Rootkit\\\",\\\"cost\\\":45.253638075425854},{\\\"member\\\":\\\"Facebook\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"NUKE Rootkit\\\",\\\"cost\\\":45.253638075425854},{\\\"member\\\":\\\"Imgur\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"NUKE Rootkit\\\",\\\"cost\\\":45.253638075425854},{\\\"member\\\":\\\"Apple\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"NUKE Rootkit\\\",\\\"cost\\\":45.253638075425854},{\\\"member\\\":\\\"Microsoft\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"NUKE Rootkit\\\",\\\"cost\\\":45.253638075425854},{\\\"member\\\":\\\"GitHub\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"NUKE Rootkit\\\",\\\"cost\\\":45.253638075425854},{\\\"member\\\":\\\"DropBox\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"NUKE Rootkit\\\",\\\"cost\\\":45.253638075425854},{\\\"member\\\":\\\"Oomnitza\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"NUKE Rootkit\\\",\\\"cost\\\":45.253638075425854},{\\\"member\\\":\\\"Google\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"NUKE Rootkit\\\",\\\"cost\\\":45.253638075425854},{\\\"member\\\":\\\"WhatsApp\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"NUKE Rootkit\\\",\\\"cost\\\":45.253638075425854},{\\\"member\\\":\\\"Salesforce\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"NUKE Rootkit\\\",\\\"cost\\\":45.253638075425854},{\\\"member\\\":\\\"Instagram\\\",\\\"type\\\":\\\"Vehicle\\\",\\\"equipmentName\\\":\\\"ATX1070 Superbike\\\",\\\"cost\\\":81.45654853576654},{\\\"member\\\":\\\"Netflix\\\",\\\"type\\\":\\\"Vehicle\\\",\\\"equipmentName\\\":\\\"ATX1070 Superbike\\\",\\\"cost\\\":81.45654853576654},{\\\"member\\\":\\\"Facebook\\\",\\\"type\\\":\\\"Vehicle\\\",\\\"equipmentName\\\":\\\"ATX1070 Superbike\\\",\\\"cost\\\":81.45654853576654},{\\\"member\\\":\\\"Imgur\\\",\\\"type\\\":\\\"Vehicle\\\",\\\"equipmentName\\\":\\\"ATX1070 Superbike\\\",\\\"cost\\\":81.45654853576654},{\\\"member\\\":\\\"Apple\\\",\\\"type\\\":\\\"Vehicle\\\",\\\"equipmentName\\\":\\\"ATX1070 Superbike\\\",\\\"cost\\\":81.45654853576654},{\\\"member\\\":\\\"GitHub\\\",\\\"type\\\":\\\"Vehicle\\\",\\\"equipmentName\\\":\\\"ATX1070 Superbike\\\",\\\"cost\\\":81.45654853576654},{\\\"member\\\":\\\"DropBox\\\",\\\"type\\\":\\\"Vehicle\\\",\\\"equipmentName\\\":\\\"ATX1070 Superbike\\\",\\\"cost\\\":81.45654853576654},{\\\"member\\\":\\\"Oomnitza\\\",\\\"type\\\":\\\"Vehicle\\\",\\\"equipmentName\\\":\\\"ATX1070 Superbike\\\",\\\"cost\\\":81.45654853576654},{\\\"member\\\":\\\"Google\\\",\\\"type\\\":\\\"Vehicle\\\",\\\"equipmentName\\\":\\\"ATX1070 Superbike\\\",\\\"cost\\\":81.45654853576654},{\\\"member\\\":\\\"WhatsApp\\\",\\\"type\\\":\\\"Vehicle\\\",\\\"equipmentName\\\":\\\"ATX1070 Superbike\\\",\\\"cost\\\":81.45654853576654},{\\\"member\\\":\\\"Salesforce\\\",\\\"type\\\":\\\"Vehicle\\\",\\\"equipmentName\\\":\\\"ATX1070 Superbike\\\",\\\"cost\\\":81.45654853576654},{\\\"member\\\":\\\"Instagram\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"Katana\\\",\\\"cost\\\":108.60873138102205},{\\\"member\\\":\\\"Netflix\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"Katana\\\",\\\"cost\\\":108.60873138102205},{\\\"member\\\":\\\"Facebook\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"Katana\\\",\\\"cost\\\":108.60873138102205},{\\\"member\\\":\\\"Imgur\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"Katana\\\",\\\"cost\\\":108.60873138102205},{\\\"member\\\":\\\"Apple\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"Katana\\\",\\\"cost\\\":108.60873138102205},{\\\"member\\\":\\\"GitHub\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"Katana\\\",\\\"cost\\\":108.60873138102205},{\\\"member\\\":\\\"DropBox\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"Katana\\\",\\\"cost\\\":108.60873138102205},{\\\"member\\\":\\\"Oomnitza\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"Katana\\\",\\\"cost\\\":108.60873138102205},{\\\"member\\\":\\\"Google\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"Katana\\\",\\\"cost\\\":108.60873138102205},{\\\"member\\\":\\\"WhatsApp\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"Katana\\\",\\\"cost\\\":108.60873138102205},{\\\"member\\\":\\\"Salesforce\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"Katana\\\",\\\"cost\\\":108.60873138102205},{\\\"member\\\":\\\"Instagram\\\",\\\"type\\\":\\\"Vehicle\\\",\\\"equipmentName\\\":\\\"Mercedes-Benz S9001\\\",\\\"cost\\\":162.9130970715331},{\\\"member\\\":\\\"Netflix\\\",\\\"type\\\":\\\"Vehicle\\\",\\\"equipmentName\\\":\\\"Mercedes-Benz S9001\\\",\\\"cost\\\":162.9130970715331},{\\\"member\\\":\\\"Facebook\\\",\\\"type\\\":\\\"Vehicle\\\",\\\"equipmentName\\\":\\\"Mercedes-Benz S9001\\\",\\\"cost\\\":162.9130970715331},{\\\"member\\\":\\\"Imgur\\\",\\\"type\\\":\\\"Vehicle\\\",\\\"equipmentName\\\":\\\"Mercedes-Benz S9001\\\",\\\"cost\\\":162.9130970715331},{\\\"member\\\":\\\"Apple\\\",\\\"type\\\":\\\"Vehicle\\\",\\\"equipmentName\\\":\\\"Mercedes-Benz S9001\\\",\\\"cost\\\":162.9130970715331},{\\\"member\\\":\\\"GitHub\\\",\\\"type\\\":\\\"Vehicle\\\",\\\"equipmentName\\\":\\\"Mercedes-Benz S9001\\\",\\\"cost\\\":162.9130970715331},{\\\"member\\\":\\\"DropBox\\\",\\\"type\\\":\\\"Vehicle\\\",\\\"equipmentName\\\":\\\"Mercedes-Benz S9001\\\",\\\"cost\\\":162.9130970715331},{\\\"member\\\":\\\"Oomnitza\\\",\\\"type\\\":\\\"Vehicle\\\",\\\"equipmentName\\\":\\\"Mercedes-Benz S9001\\\",\\\"cost\\\":162.9130970715331},{\\\"member\\\":\\\"Google\\\",\\\"type\\\":\\\"Vehicle\\\",\\\"equipmentName\\\":\\\"Mercedes-Benz S9001\\\",\\\"cost\\\":162.9130970715331},{\\\"member\\\":\\\"WhatsApp\\\",\\\"type\\\":\\\"Vehicle\\\",\\\"equipmentName\\\":\\\"Mercedes-Benz S9001\\\",\\\"cost\\\":162.9130970715331},{\\\"member\\\":\\\"Salesforce\\\",\\\"type\\\":\\\"Vehicle\\\",\\\"equipmentName\\\":\\\"Mercedes-Benz S9001\\\",\\\"cost\\\":162.9130970715331},{\\\"member\\\":\\\"Instagram\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"Glock 18C\\\",\\\"cost\\\":226.2681903771293},{\\\"member\\\":\\\"Netflix\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"Glock 18C\\\",\\\"cost\\\":226.2681903771293},{\\\"member\\\":\\\"Facebook\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"Glock 18C\\\",\\\"cost\\\":226.2681903771293},{\\\"member\\\":\\\"Imgur\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"Glock 18C\\\",\\\"cost\\\":226.2681903771293},{\\\"member\\\":\\\"Apple\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"Glock 18C\\\",\\\"cost\\\":226.2681903771293},{\\\"member\\\":\\\"GitHub\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"Glock 18C\\\",\\\"cost\\\":226.2681903771293},{\\\"member\\\":\\\"DropBox\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"Glock 18C\\\",\\\"cost\\\":226.2681903771293},{\\\"member\\\":\\\"Oomnitza\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"Glock 18C\\\",\\\"cost\\\":226.2681903771293},{\\\"member\\\":\\\"Google\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"Glock 18C\\\",\\\"cost\\\":226.2681903771293},{\\\"member\\\":\\\"WhatsApp\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"Glock 18C\\\",\\\"cost\\\":226.2681903771293},{\\\"member\\\":\\\"Salesforce\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"Glock 18C\\\",\\\"cost\\\":226.2681903771293},{\\\"member\\\":\\\"Instagram\\\",\\\"type\\\":\\\"Armor\\\",\\\"equipmentName\\\":\\\"Liquid Body Armor\\\",\\\"cost\\\":226.2681903771293},{\\\"member\\\":\\\"Netflix\\\",\\\"type\\\":\\\"Armor\\\",\\\"equipmentName\\\":\\\"Liquid Body Armor\\\",\\\"cost\\\":226.2681903771293},{\\\"member\\\":\\\"Facebook\\\",\\\"type\\\":\\\"Armor\\\",\\\"equipmentName\\\":\\\"Liquid Body Armor\\\",\\\"cost\\\":226.2681903771293},{\\\"member\\\":\\\"Imgur\\\",\\\"type\\\":\\\"Armor\\\",\\\"equipmentName\\\":\\\"Liquid Body Armor\\\",\\\"cost\\\":226.2681903771293},{\\\"member\\\":\\\"Apple\\\",\\\"type\\\":\\\"Armor\\\",\\\"equipmentName\\\":\\\"Liquid Body Armor\\\",\\\"cost\\\":226.2681903771293},{\\\"member\\\":\\\"GitHub\\\",\\\"type\\\":\\\"Armor\\\",\\\"equipmentName\\\":\\\"Liquid Body Armor\\\",\\\"cost\\\":226.2681903771293},{\\\"member\\\":\\\"DropBox\\\",\\\"type\\\":\\\"Armor\\\",\\\"equipmentName\\\":\\\"Liquid Body Armor\\\",\\\"cost\\\":226.2681903771293},{\\\"member\\\":\\\"Oomnitza\\\",\\\"type\\\":\\\"Armor\\\",\\\"equipmentName\\\":\\\"Liquid Body Armor\\\",\\\"cost\\\":226.2681903771293},{\\\"member\\\":\\\"Google\\\",\\\"type\\\":\\\"Armor\\\",\\\"equipmentName\\\":\\\"Liquid Body Armor\\\",\\\"cost\\\":226.2681903771293},{\\\"member\\\":\\\"WhatsApp\\\",\\\"type\\\":\\\"Armor\\\",\\\"equipmentName\\\":\\\"Liquid Body Armor\\\",\\\"cost\\\":226.2681903771293},{\\\"member\\\":\\\"Salesforce\\\",\\\"type\\\":\\\"Armor\\\",\\\"equipmentName\\\":\\\"Liquid Body Armor\\\",\\\"cost\\\":226.2681903771293},{\\\"member\\\":\\\"Instagram\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"Soulstealer Rootkit\\\",\\\"cost\\\":226.2681903771293},{\\\"member\\\":\\\"Netflix\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"Soulstealer Rootkit\\\",\\\"cost\\\":226.2681903771293},{\\\"member\\\":\\\"Facebook\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"Soulstealer Rootkit\\\",\\\"cost\\\":226.2681903771293},{\\\"member\\\":\\\"Imgur\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"Soulstealer Rootkit\\\",\\\"cost\\\":226.2681903771293},{\\\"member\\\":\\\"Apple\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"Soulstealer Rootkit\\\",\\\"cost\\\":226.2681903771293},{\\\"member\\\":\\\"Microsoft\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"Soulstealer Rootkit\\\",\\\"cost\\\":226.2681903771293},{\\\"member\\\":\\\"GitHub\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"Soulstealer Rootkit\\\",\\\"cost\\\":226.2681903771293},{\\\"member\\\":\\\"DropBox\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"Soulstealer Rootkit\\\",\\\"cost\\\":226.2681903771293},{\\\"member\\\":\\\"Oomnitza\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"Soulstealer Rootkit\\\",\\\"cost\\\":226.2681903771293},{\\\"member\\\":\\\"Google\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"Soulstealer Rootkit\\\",\\\"cost\\\":226.2681903771293},{\\\"member\\\":\\\"WhatsApp\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"Soulstealer Rootkit\\\",\\\"cost\\\":226.2681903771293},{\\\"member\\\":\\\"Salesforce\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"Soulstealer Rootkit\\\",\\\"cost\\\":226.2681903771293},{\\\"member\\\":\\\"Instagram\\\",\\\"type\\\":\\\"Vehicle\\\",\\\"equipmentName\\\":\\\"White Ferrari\\\",\\\"cost\\\":271.52182845255516},{\\\"member\\\":\\\"Netflix\\\",\\\"type\\\":\\\"Vehicle\\\",\\\"equipmentName\\\":\\\"White Ferrari\\\",\\\"cost\\\":271.52182845255516},{\\\"member\\\":\\\"Facebook\\\",\\\"type\\\":\\\"Vehicle\\\",\\\"equipmentName\\\":\\\"White Ferrari\\\",\\\"cost\\\":271.52182845255516},{\\\"member\\\":\\\"Imgur\\\",\\\"type\\\":\\\"Vehicle\\\",\\\"equipmentName\\\":\\\"White Ferrari\\\",\\\"cost\\\":271.52182845255516},{\\\"member\\\":\\\"Apple\\\",\\\"type\\\":\\\"Vehicle\\\",\\\"equipmentName\\\":\\\"White Ferrari\\\",\\\"cost\\\":271.52182845255516},{\\\"member\\\":\\\"GitHub\\\",\\\"type\\\":\\\"Vehicle\\\",\\\"equipmentName\\\":\\\"White Ferrari\\\",\\\"cost\\\":271.52182845255516},{\\\"member\\\":\\\"DropBox\\\",\\\"type\\\":\\\"Vehicle\\\",\\\"equipmentName\\\":\\\"White Ferrari\\\",\\\"cost\\\":271.52182845255516},{\\\"member\\\":\\\"Oomnitza\\\",\\\"type\\\":\\\"Vehicle\\\",\\\"equipmentName\\\":\\\"White Ferrari\\\",\\\"cost\\\":271.52182845255516},{\\\"member\\\":\\\"Google\\\",\\\"type\\\":\\\"Vehicle\\\",\\\"equipmentName\\\":\\\"White Ferrari\\\",\\\"cost\\\":271.52182845255516},{\\\"member\\\":\\\"WhatsApp\\\",\\\"type\\\":\\\"Vehicle\\\",\\\"equipmentName\\\":\\\"White Ferrari\\\",\\\"cost\\\":271.52182845255516},{\\\"member\\\":\\\"Salesforce\\\",\\\"type\\\":\\\"Vehicle\\\",\\\"equipmentName\\\":\\\"White Ferrari\\\",\\\"cost\\\":271.52182845255516},{\\\"member\\\":\\\"Instagram\\\",\\\"type\\\":\\\"Armor\\\",\\\"equipmentName\\\":\\\"Graphene Plating Armor\\\",\\\"cost\\\":362.02910460340684},{\\\"member\\\":\\\"Netflix\\\",\\\"type\\\":\\\"Armor\\\",\\\"equipmentName\\\":\\\"Graphene Plating Armor\\\",\\\"cost\\\":362.02910460340684},{\\\"member\\\":\\\"Facebook\\\",\\\"type\\\":\\\"Armor\\\",\\\"equipmentName\\\":\\\"Graphene Plating Armor\\\",\\\"cost\\\":362.02910460340684},{\\\"member\\\":\\\"Imgur\\\",\\\"type\\\":\\\"Armor\\\",\\\"equipmentName\\\":\\\"Graphene Plating Armor\\\",\\\"cost\\\":362.02910460340684},{\\\"member\\\":\\\"Apple\\\",\\\"type\\\":\\\"Armor\\\",\\\"equipmentName\\\":\\\"Graphene Plating Armor\\\",\\\"cost\\\":362.02910460340684},{\\\"member\\\":\\\"GitHub\\\",\\\"type\\\":\\\"Armor\\\",\\\"equipmentName\\\":\\\"Graphene Plating Armor\\\",\\\"cost\\\":362.02910460340684},{\\\"member\\\":\\\"DropBox\\\",\\\"type\\\":\\\"Armor\\\",\\\"equipmentName\\\":\\\"Graphene Plating Armor\\\",\\\"cost\\\":362.02910460340684},{\\\"member\\\":\\\"Oomnitza\\\",\\\"type\\\":\\\"Armor\\\",\\\"equipmentName\\\":\\\"Graphene Plating Armor\\\",\\\"cost\\\":362.02910460340684},{\\\"member\\\":\\\"Google\\\",\\\"type\\\":\\\"Armor\\\",\\\"equipmentName\\\":\\\"Graphene Plating Armor\\\",\\\"cost\\\":362.02910460340684},{\\\"member\\\":\\\"WhatsApp\\\",\\\"type\\\":\\\"Armor\\\",\\\"equipmentName\\\":\\\"Graphene Plating Armor\\\",\\\"cost\\\":362.02910460340684},{\\\"member\\\":\\\"Salesforce\\\",\\\"type\\\":\\\"Armor\\\",\\\"equipmentName\\\":\\\"Graphene Plating Armor\\\",\\\"cost\\\":362.02910460340684},{\\\"member\\\":\\\"Instagram\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"Hmap Node\\\",\\\"cost\\\":362.02910460340684},{\\\"member\\\":\\\"Netflix\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"Hmap Node\\\",\\\"cost\\\":362.02910460340684},{\\\"member\\\":\\\"Facebook\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"Hmap Node\\\",\\\"cost\\\":362.02910460340684},{\\\"member\\\":\\\"Imgur\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"Hmap Node\\\",\\\"cost\\\":362.02910460340684},{\\\"member\\\":\\\"Apple\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"Hmap Node\\\",\\\"cost\\\":362.02910460340684},{\\\"member\\\":\\\"Microsoft\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"Hmap Node\\\",\\\"cost\\\":362.02910460340684},{\\\"member\\\":\\\"GitHub\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"Hmap Node\\\",\\\"cost\\\":362.02910460340684},{\\\"member\\\":\\\"DropBox\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"Hmap Node\\\",\\\"cost\\\":362.02910460340684},{\\\"member\\\":\\\"Oomnitza\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"Hmap Node\\\",\\\"cost\\\":362.02910460340684},{\\\"member\\\":\\\"Google\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"Hmap Node\\\",\\\"cost\\\":362.02910460340684},{\\\"member\\\":\\\"WhatsApp\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"Hmap Node\\\",\\\"cost\\\":362.02910460340684},{\\\"member\\\":\\\"Salesforce\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"Hmap Node\\\",\\\"cost\\\":362.02910460340684},{\\\"member\\\":\\\"Instagram\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"P90C\\\",\\\"cost\\\":452.5363807542586},{\\\"member\\\":\\\"Netflix\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"P90C\\\",\\\"cost\\\":452.5363807542586},{\\\"member\\\":\\\"Facebook\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"P90C\\\",\\\"cost\\\":452.5363807542586},{\\\"member\\\":\\\"Imgur\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"P90C\\\",\\\"cost\\\":452.5363807542586},{\\\"member\\\":\\\"Apple\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"P90C\\\",\\\"cost\\\":452.5363807542586},{\\\"member\\\":\\\"GitHub\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"P90C\\\",\\\"cost\\\":452.5363807542586},{\\\"member\\\":\\\"DropBox\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"P90C\\\",\\\"cost\\\":452.5363807542586},{\\\"member\\\":\\\"Oomnitza\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"P90C\\\",\\\"cost\\\":452.5363807542586},{\\\"member\\\":\\\"Google\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"P90C\\\",\\\"cost\\\":452.5363807542586},{\\\"member\\\":\\\"WhatsApp\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"P90C\\\",\\\"cost\\\":452.5363807542586},{\\\"member\\\":\\\"Salesforce\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"P90C\\\",\\\"cost\\\":452.5363807542586},{\\\"member\\\":\\\"Instagram\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"Steyr AUG\\\",\\\"cost\\\":543.0436569051103},{\\\"member\\\":\\\"Netflix\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"Steyr AUG\\\",\\\"cost\\\":543.0436569051103},{\\\"member\\\":\\\"Facebook\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"Steyr AUG\\\",\\\"cost\\\":543.0436569051103},{\\\"member\\\":\\\"Imgur\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"Steyr AUG\\\",\\\"cost\\\":543.0436569051103},{\\\"member\\\":\\\"Apple\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"Steyr AUG\\\",\\\"cost\\\":543.0436569051103},{\\\"member\\\":\\\"Microsoft\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"Steyr AUG\\\",\\\"cost\\\":543.0436569051103},{\\\"member\\\":\\\"GitHub\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"Steyr AUG\\\",\\\"cost\\\":543.0436569051103},{\\\"member\\\":\\\"DropBox\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"Steyr AUG\\\",\\\"cost\\\":543.0436569051103},{\\\"member\\\":\\\"Oomnitza\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"Steyr AUG\\\",\\\"cost\\\":543.0436569051103},{\\\"member\\\":\\\"Google\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"Steyr AUG\\\",\\\"cost\\\":543.0436569051103},{\\\"member\\\":\\\"WhatsApp\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"Steyr AUG\\\",\\\"cost\\\":543.0436569051103},{\\\"member\\\":\\\"Salesforce\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"Steyr AUG\\\",\\\"cost\\\":543.0436569051103},{\\\"member\\\":\\\"Instagram\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"Demon Rootkit\\\",\\\"cost\\\":678.8045711313878},{\\\"member\\\":\\\"Netflix\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"Demon Rootkit\\\",\\\"cost\\\":678.8045711313878},{\\\"member\\\":\\\"Facebook\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"Demon Rootkit\\\",\\\"cost\\\":678.8045711313878},{\\\"member\\\":\\\"Imgur\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"Demon Rootkit\\\",\\\"cost\\\":678.8045711313878},{\\\"member\\\":\\\"Apple\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"Demon Rootkit\\\",\\\"cost\\\":678.8045711313878},{\\\"member\\\":\\\"Microsoft\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"Demon Rootkit\\\",\\\"cost\\\":678.8045711313878},{\\\"member\\\":\\\"GitHub\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"Demon Rootkit\\\",\\\"cost\\\":678.8045711313878},{\\\"member\\\":\\\"DropBox\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"Demon Rootkit\\\",\\\"cost\\\":678.8045711313878},{\\\"member\\\":\\\"Oomnitza\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"Demon Rootkit\\\",\\\"cost\\\":678.8045711313878},{\\\"member\\\":\\\"Google\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"Demon Rootkit\\\",\\\"cost\\\":678.8045711313878},{\\\"member\\\":\\\"WhatsApp\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"Demon Rootkit\\\",\\\"cost\\\":678.8045711313878},{\\\"member\\\":\\\"Salesforce\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"Demon Rootkit\\\",\\\"cost\\\":678.8045711313878},{\\\"member\\\":\\\"Instagram\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"Jack the Ripper\\\",\\\"cost\\\":678.8045711313878},{\\\"member\\\":\\\"Netflix\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"Jack the Ripper\\\",\\\"cost\\\":678.8045711313878},{\\\"member\\\":\\\"Facebook\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"Jack the Ripper\\\",\\\"cost\\\":678.8045711313878},{\\\"member\\\":\\\"Imgur\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"Jack the Ripper\\\",\\\"cost\\\":678.8045711313878},{\\\"member\\\":\\\"Apple\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"Jack the Ripper\\\",\\\"cost\\\":678.8045711313878},{\\\"member\\\":\\\"Microsoft\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"Jack the Ripper\\\",\\\"cost\\\":678.8045711313878},{\\\"member\\\":\\\"GitHub\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"Jack the Ripper\\\",\\\"cost\\\":678.8045711313878},{\\\"member\\\":\\\"DropBox\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"Jack the Ripper\\\",\\\"cost\\\":678.8045711313878},{\\\"member\\\":\\\"Oomnitza\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"Jack the Ripper\\\",\\\"cost\\\":678.8045711313878},{\\\"member\\\":\\\"Google\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"Jack the Ripper\\\",\\\"cost\\\":678.8045711313878},{\\\"member\\\":\\\"WhatsApp\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"Jack the Ripper\\\",\\\"cost\\\":678.8045711313878},{\\\"member\\\":\\\"Salesforce\\\",\\\"type\\\":\\\"Rootkit\\\",\\\"equipmentName\\\":\\\"Jack the Ripper\\\",\\\"cost\\\":678.8045711313878},{\\\"member\\\":\\\"Instagram\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"AK-47\\\",\\\"cost\\\":905.0727615085171},{\\\"member\\\":\\\"Netflix\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"AK-47\\\",\\\"cost\\\":905.0727615085171},{\\\"member\\\":\\\"Facebook\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"AK-47\\\",\\\"cost\\\":905.0727615085171},{\\\"member\\\":\\\"Imgur\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"AK-47\\\",\\\"cost\\\":905.0727615085171},{\\\"member\\\":\\\"Apple\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"AK-47\\\",\\\"cost\\\":905.0727615085171},{\\\"member\\\":\\\"Microsoft\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"AK-47\\\",\\\"cost\\\":905.0727615085171},{\\\"member\\\":\\\"GitHub\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"AK-47\\\",\\\"cost\\\":905.0727615085171},{\\\"member\\\":\\\"DropBox\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"AK-47\\\",\\\"cost\\\":905.0727615085171},{\\\"member\\\":\\\"Oomnitza\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"AK-47\\\",\\\"cost\\\":905.0727615085171},{\\\"member\\\":\\\"Google\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"AK-47\\\",\\\"cost\\\":905.0727615085171},{\\\"member\\\":\\\"WhatsApp\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"AK-47\\\",\\\"cost\\\":905.0727615085171},{\\\"member\\\":\\\"Salesforce\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"AK-47\\\",\\\"cost\\\":905.0727615085171},{\\\"member\\\":\\\"Instagram\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"M15A10 Assault Rifle\\\",\\\"cost\\\":1357.6091422627755},{\\\"member\\\":\\\"Netflix\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"M15A10 Assault Rifle\\\",\\\"cost\\\":1357.6091422627755},{\\\"member\\\":\\\"Facebook\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"M15A10 Assault Rifle\\\",\\\"cost\\\":1357.6091422627755},{\\\"member\\\":\\\"Imgur\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"M15A10 Assault Rifle\\\",\\\"cost\\\":1357.6091422627755},{\\\"member\\\":\\\"Apple\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"M15A10 Assault Rifle\\\",\\\"cost\\\":1357.6091422627755},{\\\"member\\\":\\\"Microsoft\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"M15A10 Assault Rifle\\\",\\\"cost\\\":1357.6091422627755},{\\\"member\\\":\\\"GitHub\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"M15A10 Assault Rifle\\\",\\\"cost\\\":1357.6091422627755},{\\\"member\\\":\\\"DropBox\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"M15A10 Assault Rifle\\\",\\\"cost\\\":1357.6091422627755},{\\\"member\\\":\\\"Oomnitza\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"M15A10 Assault Rifle\\\",\\\"cost\\\":1357.6091422627755},{\\\"member\\\":\\\"Google\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"M15A10 Assault Rifle\\\",\\\"cost\\\":1357.6091422627755},{\\\"member\\\":\\\"WhatsApp\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"M15A10 Assault Rifle\\\",\\\"cost\\\":1357.6091422627755},{\\\"member\\\":\\\"Salesforce\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"M15A10 Assault Rifle\\\",\\\"cost\\\":1357.6091422627755},{\\\"member\\\":\\\"Instagram\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"AWM Sniper Rifle\\\",\\\"cost\\\":2036.4137133941636},{\\\"member\\\":\\\"Netflix\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"AWM Sniper Rifle\\\",\\\"cost\\\":2036.4137133941636},{\\\"member\\\":\\\"Facebook\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"AWM Sniper Rifle\\\",\\\"cost\\\":2036.4137133941636},{\\\"member\\\":\\\"Imgur\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"AWM Sniper Rifle\\\",\\\"cost\\\":2036.4137133941636},{\\\"member\\\":\\\"Apple\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"AWM Sniper Rifle\\\",\\\"cost\\\":2036.4137133941636},{\\\"member\\\":\\\"Microsoft\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"AWM Sniper Rifle\\\",\\\"cost\\\":2036.4137133941636},{\\\"member\\\":\\\"GitHub\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"AWM Sniper Rifle\\\",\\\"cost\\\":2036.4137133941636},{\\\"member\\\":\\\"DropBox\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"AWM Sniper Rifle\\\",\\\"cost\\\":2036.4137133941636},{\\\"member\\\":\\\"Oomnitza\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"AWM Sniper Rifle\\\",\\\"cost\\\":2036.4137133941636},{\\\"member\\\":\\\"Google\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"AWM Sniper Rifle\\\",\\\"cost\\\":2036.4137133941636},{\\\"member\\\":\\\"WhatsApp\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"AWM Sniper Rifle\\\",\\\"cost\\\":2036.4137133941636},{\\\"member\\\":\\\"Salesforce\\\",\\\"type\\\":\\\"Weapon\\\",\\\"equipmentName\\\":\\\"AWM Sniper Rifle\\\",\\\"cost\\\":2036.4137133941636}].reduce((success, o) => success && ns.gang.purchaseEquipment(o.member, o.equipmentName), true)); } catch { }\\n        if (ns.read(\\\"/Temp/gang-upgrade-members.txt\\\") != result) await ns.write(\\\"/Temp/gang-upgrade-members.txt\\\", result, 'w'); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-upgrade-members.txt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///4bb0c357-1647-4c08-a090-5eca2a0d6345\",\"moduleSequenceNumber\":2093},{\"filename\":\"/Temp/gang-upgrade-members.txt.js\",\"url\":\"blob:file:///a2751a50-54f2-4b8f-8633-8ec280d067a5\",\"moduleSequenceNumber\":2715}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"home\",\"moduleSequenceNumber\":3099,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { ns.gang.setTerritoryWarfare(false); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-set-warfare.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///42cbdf11-13dc-41ef-867d-5bd8c2b2edbb\",\"moduleSequenceNumber\":328},{\"filename\":\"/Temp/gang-set-warfare.js\",\"url\":\"blob:file:///888cdb53-d453-44b6-aa7f-bb6f95ca7300\",\"moduleSequenceNumber\":1675}],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":3100,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.setTerritoryWarfare\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const factionList = [\\n\\t/* basic factions */\\n\\t\\\"CyberSec\\\",\\n\\t\\\"Tian Di Hui\\\",\\n\\t\\\"Netburners\\\",\\n\\t\\\"NiteSec\\\",\\n\\t\\\"The Black Hand\\\",\\n\\t\\\"BitRunners\\\",\\n];\\n\\nconst locationFactionList = [\\n\\t\\\"Sector-12\\\",\\n\\t\\\"Chongqing\\\",\\n\\t\\\"New Tokyo\\\",\\n\\t\\\"Ishima\\\",\\n\\t\\\"Aevum\\\",\\n\\t\\\"Volhaven\\\",\\n\\n];\\n\\nconst gangList = [\\n\\t\\\"Slum Snakes\\\",\\n\\t\\\"Tetrads\\\",\\n\\t\\\"Silhouette\\\",\\n\\t\\\"Speakers for the Dead\\\",\\n\\t\\\"The Dark Army\\\",\\n\\t\\\"The Syndicate\\\",\\n];\\n\\nconst endgameFactionList = [\\n\\t\\\"The Covenant\\\",\\n\\t\\\"Daedalus\\\",\\n\\t\\\"Illuminati\\\",\\n];\\n\\nconst corpList = [\\n\\t\\\"ECorp\\\",\\n\\t\\\"MegaCorp\\\",\\n\\t\\\"KuaiGong International\\\",\\n\\t\\\"Four Sigma\\\",\\n\\t\\\"NWO\\\",\\n\\t\\\"Blade Industries\\\",\\n\\t\\\"OmniTek Incorporated\\\",\\n\\t\\\"Bachman & Associates\\\",\\n\\t\\\"Clarke Incorporated\\\",\\n\\t\\\"Fulcrum Secret Technologies\\\",\\n];\\n\\nconst aug_bonus_types = {\\n\\thack: [\\\"hacking_mult\\\", \\\"hacking_exp_mult\\\", \\\"hacking_speed_mult\\\", \\\"hacking_chance_mult\\\", \\\"hacking_grow_mult\\\", \\\"hacking_money_mult\\\"],\\n\\tfaction: [\\\"faction_rep_mult\\\"],\\n\\tcompany: [\\\"company_rep_mult\\\", \\\"work_money_mult\\\"],\\n\\tcrime: [\\\"crime_success_mult\\\", \\\"crime_money_mult\\\"],\\n\\tcombat: [\\\"agility_exp_mult\\\", \\\"agility_mult\\\", \\\"defense_exp_mult\\\", \\\"defense_mult\\\", \\\"dexterity_exp_mult\\\", \\\"dexterity_mult\\\", \\\"strength_exp_mult\\\", \\\"strength_mult\\\"],\\n\\tcharisma: [\\\"charisma_exp_mult\\\", \\\"charisma_mult\\\"]\\n};\\n\\nconst augs_to_ignore = [\\n\\t\\\"NeuroFlux Governor\\\",\\n\\t\\\"The Red Pill\\\",\\n];\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst flagdata = ns.flags([\\n\\t\\t[\\\"factions\\\", false],\\n\\t\\t[\\\"locations\\\", false],\\n\\t\\t[\\\"gangs\\\", false],\\n\\t\\t[\\\"endgame\\\", false],\\n\\t\\t[\\\"corps\\\", false],\\n\\t\\t[\\\"all\\\", false],\\n\\t\\t[\\\"faction\\\", \\\"\\\"],\\n\\t\\t[\\\"help\\\", false],\\n\\t\\t[\\\"type\\\", []],\\n\\t\\t[\\\"ask\\\", false],\\n\\t\\t[\\\"buy\\\", false],\\n\\t])\\n\\tlet factions_to_consider = [];\\n\\tlet types_to_consider = [];\\n\\tif (flagdata.help) {\\n\\t\\tns.tprint(\\n\\t\\t\\t`Pass in any of: --factions, --locations, --gangs, --corps, --endgame; or --all for factions. Use --faction X for a specific faction.\\n\\t\\t\\t   --type can be: ${Object.keys(aug_bonus_types).join(\\\", \\\")} or all.\\n\\t\\t\\t   --ask prompts to buy; --buy autobuys any augs. If neither are specified, no purchasing will happen.`\\n\\t\\t);\\n\\t\\treturn\\n\\t}\\n\\t// If they didn't pass in a valid type, yell\\n\\tif (!flagdata.type == \\\"all\\\" && !Object.keys(aug_bonus_types).some(items => flagdata.type.includes(items))) {\\n\\t\\tns.tprint(\\\"you dun goofed\\\");\\n\\t\\treturn\\n\\t}\\n\\tconst pattern = [\\n\\t\\t[data => { return data.factions || data.all }, () => factions_to_consider.push(...factionList)],\\n\\t\\t[data => { return data.locations || data.all }, () => factions_to_consider.push(...locationFactionList)],\\n\\t\\t[data => { return data.gangs || data.all }, () => factions_to_consider.push(...gangList)],\\n\\t\\t[data => { return data.corps || data.all }, () => factions_to_consider.push(...corpList)],\\n\\t\\t[data => { return data.endgame || data.all }, () => factions_to_consider.push(...endgameFactionList)],\\n\\t\\t[data => { return data.faction }, (data) => { factions_to_consider.push(data.faction) }],\\n\\t\\t[data => { return data.type }, (data) => { (data.type == \\\"all\\\" ? types_to_consider.push(Object.keys(aug_bonus_types)) : types_to_consider.push(data.type)) }],\\n\\n\\t]\\n\\tfor (const [condition, action] of pattern) {\\n\\t\\tif (condition(flagdata)) action(flagdata)\\n\\t}\\n\\t// Build the map of possible augs\\n\\tlet aug_map = buildAugMap(ns, factions_to_consider, true);\\n\\t// Map the shorthand type arguments to actual aug stats we want\\n\\tlet aug_stat_types = getStatsFromTypes(types_to_consider.flat());\\n\\t// Now let's take a look at the rep requirements, and costs...\\n\\tlet desired_aug_names = filterAugsByStats(ns, aug_map, aug_stat_types);\\n\\t// Narrow it down to +exp first...\\n\\tlet desired_augs = Object.entries(aug_map).filter(([key, value]) => desired_aug_names.includes(key));\\n\\tlet exp_augs = filterByExp(desired_augs);\\n\\t// Now prompt\\n\\tif (flagdata.ask || flagdata.buy) {\\n\\t\\tif (exp_augs.length > 0) {\\n\\t\\t\\tawait promptForAugs(ns, aug_map, exp_augs, flagdata.ask, flagdata.buy)\\n\\t\\t} else {\\n\\t\\t\\tawait promptForAugs(ns, aug_map, Object.fromEntries(desired_augs), flagdata.ask, flagdata.buy)\\n\\t\\t}\\n\\t} else {\\n\\t\\tlet sorted_exp_augs = Object.keys(exp_augs).sort((a, b) => a[\\\"cost\\\"] - b[\\\"cost\\\"]).reverse();\\n\\t\\tns.tprint(\\\"Augs with +exp stats sorted by cost: \\\" + sorted_exp_augs.join(\\\", \\\"));\\n\\t\\tlet sorted_desired_augs = Object.entries(Object.fromEntries(desired_augs)).sort(([,a], [,b]) => a[\\\"cost\\\"] - b[\\\"cost\\\"]).reverse()[0];\\n\\t\\tns.tprint(\\\"Augs to aim for with your desired stats: \\\" + sorted_desired_augs.join(\\\", \\\"));\\n\\t\\tns.tprint(`Most expensive aug is ${sorted_desired_augs[0]} at ${ns.nFormat(Object.fromEntries(desired_augs)[sorted_desired_augs[0]][\\\"cost\\\"], '$0.00a')}`);\\n\\t\\tlet most_rep_aug = Object.entries(Object.fromEntries(desired_augs)).sort(([,a], [,b]) => a[\\\"repreq\\\"] - b[\\\"repreq\\\"]).reverse()[0][0];\\n\\t\\tns.tprint(`Most rep-required aug is ${most_rep_aug} at ${ns.nFormat(aug_map[most_rep_aug][\\\"repreq\\\"], '0.000a')}`);\\n\\t}\\n}\\n\\n/**\\n * Build up a map of augmentations available everywhere for future slicing\\n * @param {NS} ns\\n * @param {array} factions_to_consider A list of factions to search through \\n * @param {boolean} skip_nf Skip NeuroFlux Governor \\n */\\nfunction buildAugMap(ns, factions_to_consider, skip_nf) {\\n\\t// ns.tprint(`Factions to consider: ${factions_to_consider}`);\\n\\tlet aug_map = {};\\n\\t// Keys: augmentation name; Values: an object aug_model = {\\\"factions\\\": [], \\\"repreq\\\": 0, \\\"cost\\\": 0};\\n\\t// Now get all augs matching multipliers\\n\\tfor (const faction of factions_to_consider) {\\n\\t\\tlet avail_augs = ns.getAugmentationsFromFaction(faction).filter(item => !augs_to_ignore.includes(item));\\n\\t\\tfor (const aug of avail_augs) {\\n\\t\\t\\t// ns.tprint(`Considering ${aug} from ${faction}`)\\n\\t\\t\\t// Don't care about the infinitely-upgrading Governor\\n\\t\\t\\tif (aug == \\\"NeuroFlux Governor\\\" && skip_nf) continue\\n\\t\\t\\t// Get the stats, and cost\\n\\t\\t\\tlet aug_stats = ns.getAugmentationStats(aug);\\n\\t\\t\\tlet repreq = ns.getAugmentationRepReq(aug);\\n\\t\\t\\tlet cost = ns.getAugmentationPrice(aug);\\n\\t\\t\\tlet prereq = ns.getAugmentationPrereq(aug);\\n\\t\\t\\t// Add to the list of factions already found for a given aug\\n\\t\\t\\tlet augs_factions = [];\\n\\t\\t\\tif (aug in aug_map) {\\n\\t\\t\\t\\taugs_factions = aug_map[aug][\\\"factions\\\"];\\n\\t\\t\\t}\\n\\t\\t\\taugs_factions.push(faction);\\n\\t\\t\\taug_map[aug] = { \\\"factions\\\": augs_factions, \\\"repreq\\\": repreq, \\\"prereq\\\": prereq, \\\"cost\\\": cost, \\\"stats\\\": aug_stats };\\n\\t\\t}\\n\\t}\\n\\treturn aug_map;\\n}\\n\\n/** \\n * Return a list of aug names filtered by stats\\n * @param {NS} ns\\n * @param {map} aug_map Map of all augmentations generated by buildAugMap()\\n * @param {array} desired_stats A list of stats to search for \\n */\\nfunction filterAugsByStats(ns, aug_map, desired_stats) {\\n\\tlet desired_augs = [];\\n\\t// Get my augs first\\n\\tlet my_augs = ns.getOwnedAugmentations(true);\\n\\t// Brute force it:\\n\\tfor (let [aug, model] of Object.entries(aug_map)) {\\n\\t\\t// Filter out my already installed augs\\n\\t\\tif (my_augs.includes(aug)) continue\\n\\t\\t/*\\n\\t\\t * Basic filtering code:\\n\\t\\t * desired_stats = [\\\"hacking_exp_mult\\\", \\\"hacking_money_mult\\\"]\\n\\t\\t * Object.keys(item[\\\"stats\\\"]) = [\\\"hacking_mult\\\", \\\"hacking_exp_mult\\\", \\\"hacking_speed_mult\\\"]\\n\\t\\t * let matches = desired_stats.filter( items => actual_stats.includes(items) );\\n\\t\\t */\\n\\t\\t// Look for matching stats\\n\\t\\tlet matching_stats = desired_stats.filter(items => Object.keys(model[\\\"stats\\\"]).includes(items));\\n\\t\\tif (matching_stats.length > 0) {\\n\\t\\t\\tdesired_augs.push(aug);\\n\\t\\t\\t// ns.tprint(`${aug} from [${model[\\\"factions\\\"].join(\\\", \\\")}]: ${matching_stats.join(\\\", \\\")}`);\\n\\t\\t}\\n\\t}\\n\\treturn desired_augs.flat();\\n}\\n\\n/**\\n * Return a list of aug stats from the passed in types\\n * @param {array} types Shorthand types passed in to ns.flags\\n */\\nfunction getStatsFromTypes(types) {\\n\\tlet stat_list = [];\\n\\tfor (let type of types) {\\n\\t\\tstat_list.push(aug_bonus_types[type]);\\n\\t}\\n\\treturn stat_list.flat()\\n}\\n\\n/**\\n * Return a dictionary of augs containing +exp bonuses\\n * @param aug_map Object of augmentations\\n */\\nfunction filterByExp(aug_map) {\\n\\t// Prioritize exp gain first\\n\\tlet fixed_aug_map = Object.fromEntries(Object.values(aug_map));\\n\\tlet exp_augs = {};\\n\\tfor (const [aug, aug_model] of Object.entries(fixed_aug_map)) {\\n\\t\\tfor (const stat of Object.keys(aug_model[\\\"stats\\\"])) {\\n\\t\\t\\tif (stat.includes(\\\"exp\\\")) {\\n\\t\\t\\t\\texp_augs[aug] = aug_model\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn exp_augs\\n}\\n\\n/** @param {NS} ns **/\\nasync function promptForAugs(ns, aug_map, desired_augs, should_prompt, should_autobuy) {\\n\\t// Sort by cost, then prompt to buy\\n\\tlet sorted_augs = Object.fromEntries(Object.entries(desired_augs).sort((a, b) => a[\\\"cost\\\"] - b[\\\"cost\\\"]).reverse());\\n\\tns.tprint(\\\"Augs to aim for: \\\" + Object.keys(sorted_augs).join(\\\", \\\"));\\n\\t// ns.tprint(JSON.stringify(Object.keys(sorted_augs), null, 4));\\n\\tfor (const [aug, aug_model] of Object.entries(sorted_augs)) {\\n\\t\\tawait purchaseAug(ns, aug, aug_map, should_prompt, should_autobuy);\\n\\t}\\n\\t// Object.keys(sorted_augs).forEach(aug => await purchaseAug(ns, aug, aug_map, should_prompt, should_autobuy));\\n}\\n\\nfunction getCommonFaction(player_factions, faction_list) {\\n\\treturn faction_list.filter(faction => player_factions.includes(faction))\\n}\\n\\n/** \\n * Purchase an aug. Return true if succeeded, otherwise false.\\n * @param {NS} ns \\n * @param {string} aug Name of augmentation \\n * @param aug_model Model of stats about augmentation\\n**/\\nasync function purchaseAug(ns, aug, aug_map, should_prompt, should_autobuy) {\\n\\t// So, you want to buy an augmentation.\\n\\t// ns.tprint(`Considering ${aug}`);\\n\\t// Do I have the rep?\\n\\tlet repAvail = augRepAvailable(ns, aug_map[aug][\\\"repreq\\\"], aug_map[aug][\\\"factions\\\"]);\\n\\t// ns.tprint(\\\"Rep: \\\" + repAvail);\\n\\t// Do I have the money?\\n\\tlet costAvail = augCostAvailable(ns, aug_map[aug][\\\"cost\\\"]);\\n\\t// ns.tprint(\\\"Cost: \\\" + costAvail);\\n\\t// Do I satisfy pre-reqs?\\n\\tlet prereqsAvail = augPreReqsAvailable(ns, aug_map[aug][\\\"prereq\\\"])\\n\\t// ns.tprint(\\\"PreReqs: \\\" + prereqsAvail);\\n\\tif (prereqsAvail) {\\n\\t\\tfor (const pre of prereqsAvail) await purchaseAug(ns, pre, aug_map, should_prompt, should_autobuy)\\n\\t}\\n\\t// If all of those are true, let's do it\\n\\tif (repAvail && costAvail && (prereqsAvail.length == 0)) {\\n\\t\\tlet should_buy = false;\\n\\t\\tlet did_buy = false;\\n\\t\\tif (should_prompt) {\\n\\t\\t\\tshould_buy = await ns.prompt(`Buy ${aug}?`);\\n\\t\\t}\\n\\t\\tif (should_autobuy || should_buy) {\\n\\t\\t\\tdid_buy = ns.purchaseAugmentation(repAvail, aug);\\n\\t\\t\\tif (did_buy) ns.tprint(`Purchased ${aug}!`)\\n\\t\\t\\tawait ns.sleep(5);\\n\\t\\t} else {\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\t}\\n}\\n\\n/** \\n * Return list of factions I have enough rep to buy from\\n * @param {NS} ns \\n * @param {string} aug Name of augmentation \\n * @param {number} repreq Amount of rep required \\n * @param {array} factions List of factions to check \\n**/\\nfunction augRepAvailable(ns, repreq, factions) {\\n\\t// Is this aug available to purchase right now?\\n\\tlet player = ns.getPlayer();\\n\\tlet myfactions = player.factions;\\n\\tlet commonFaction = getCommonFaction(myfactions, factions);\\n\\treturn commonFaction.find(faction => repreq <= ns.getFactionRep(faction))\\n}\\n\\n/** \\n * Return true if I have enough money to buy a faction\\n * @param {NS} ns \\n * @param {string} aug Name of augmentation \\n * @param {number} price Cost of aug\\n**/\\nfunction augCostAvailable(ns, price) {\\n\\t// Is this aug available to purchase right now?\\n\\tlet my_money = ns.getPlayer().money;\\n\\treturn (my_money >= price)\\n}\\n\\n/** \\n * Return a list of prereqs I do NOT satisfy; otherwise empty list\\n * @param {NS} ns \\n * @param {string} aug Name of augmentation \\n * @param {number} prereqs List of aug prereqs\\n**/\\nfunction augPreReqsAvailable(ns, prereqs) {\\n\\t// Do I meet all the pre-reqs?\\n\\tlet my_augs = ns.getOwnedAugmentations(true);\\n\\tlet unsatisfied = prereqs.filter(item => !my_augs.includes(item));\\n\\treturn unsatisfied\\n}\\n\\n\\n// function printCheckbox(condition, label) {\\n//   return `[${!!condition ? 'x' : ' '}] ${label}`\\n// }\",\"filename\":\"/UNUSED/AugmentMe.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"AugmentMe.js\",\"url\":\"blob:file:///9b8430c0-5f46-495e-928c-cef4ed8a0789\",\"moduleSequenceNumber\":730307}],\"dependents\":[],\"ramUsage\":35.6,\"server\":\"home\",\"moduleSequenceNumber\":3101,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getAugmentationRepReq\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getAugmentationPrice\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getAugmentationPrereq\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"purchaseAugmentation\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getFactionRep\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const repoParams = {\\n    baseUrl: \\\"https://raw.githubusercontent.com/HtheChemist/BitBurnerCentralManager/master/build\\\",\\n    //baseUrl: \\\"http://localhost:9182\\\", // Dev version\\n    manifest: \\\"/resources/manifest.txt\\\",\\n    helpers: \\\"/lib/Helpers.js\\\",\\n    pullFiles: \\\"/Orchestrator/utils/pullFiles.js\\\"\\n};\\nasync function pullFile(ns, file) {\\n    const manifestUrl = `${repoParams.baseUrl}${file}`;\\n    ns.tprintf(`INFO   > Downloading ${manifestUrl} -> ${file}`);\\n    if (ns.fileExists(file))\\n        ns.rm(file);\\n    if (!(await ns.wget(manifestUrl, file, \\\"home\\\"))) {\\n        ns.tprintf(`ERROR  > ${manifestUrl} -> ${file} failed.`);\\n        ns.exit();\\n    }\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const files = [repoParams.helpers, repoParams.manifest, repoParams.pullFiles];\\n    for (let file of files) {\\n        await pullFile(ns, file);\\n    }\\n    ns.tprintf(`INFO   > Successfully pulled initial files!`);\\n    ns.tprintf(`INFO   > Running download script...`);\\n    await ns.sleep(250);\\n    ns.run(repoParams.pullFiles);\\n}\\n\",\"filename\":\"/Orchestrator/utils/initRepo.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Orchestrator/utils/initRepo.js\",\"url\":\"blob:file:///e48556aa-204c-4228-ac3b-00887cfc9e2f\",\"moduleSequenceNumber\":2630287}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"home\",\"moduleSequenceNumber\":3102,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { repoParams } from \\\"/Orchestrator/utils/initRepo\\\";\\nconst ReadText = {\\n    readLines(ns, file) {\\n        return ns.read(file).split(/\\\\r?\\\\n/);\\n    },\\n    readNonEmptyLines(ns, file) {\\n        return ReadText.readLines(ns, file).filter((x) => x.trim() != \\\"\\\");\\n    },\\n};\\nconst DownloadFiles = {\\n    async getfileToHome(ns, source, dest) {\\n        const logger = new TermLogger(ns);\\n        logger.info(`Downloading ${source} -> ${dest}`);\\n        if (!(await ns.wget(source, dest, \\\"home\\\"))) {\\n            logger.err(`\\\\tFailed retrieving ${source} -> ${dest}`);\\n        }\\n    },\\n};\\nclass TermLogger {\\n    constructor(ns) {\\n        this.ns = ns;\\n    }\\n    info(msg, ...args) {\\n        this.ns.tprintf(`${TermLogger.INFO_LITERAL} ${msg}`, ...args);\\n    }\\n    warn(msg, ...args) {\\n        this.ns.tprintf(`${TermLogger.WARN_LITERAL} ${msg}`, ...args);\\n    }\\n    err(msg, ...args) {\\n        this.ns.tprintf(`${TermLogger.ERR_LITERAL} ${msg}`, ...args);\\n    }\\n    log(msg, ...args) {\\n        this.ns.tprintf(`${TermLogger.TRACE_LITERAL} ${msg}`, ...args);\\n    }\\n}\\nTermLogger.INFO_LITERAL = \\\"INFO   >\\\";\\nTermLogger.WARN_LITERAL = \\\"WARN   >\\\";\\nTermLogger.ERR_LITERAL = \\\"ERROR  >\\\";\\nTermLogger.TRACE_LITERAL = \\\"TRACE  >\\\";\\nclass RepoInit {\\n    constructor(ns, logger = new TermLogger(ns)) {\\n        this.ns = ns;\\n        this.logger = logger;\\n    }\\n    static getSourceDestPair(line) {\\n        return line.startsWith(\\\"./\\\")\\n            ? {\\n                source: `${repoParams.baseUrl}${line.substring(1)}`,\\n                dest: line.substring(1),\\n            }\\n            : null;\\n    }\\n    async pullScripts() {\\n        await this.getManifest();\\n        await this.downloadAllFiles();\\n    }\\n    async getManifest() {\\n        const manifestUrl = `${repoParams.baseUrl}${repoParams.manifest}`;\\n        this.logger.info(`Getting manifest...`);\\n        await DownloadFiles.getfileToHome(this.ns, manifestUrl, repoParams.manifest);\\n    }\\n    async downloadAllFiles() {\\n        const files = ReadText.readNonEmptyLines(this.ns, repoParams.manifest);\\n        this.logger.info(`Contents of manifest:`);\\n        this.logger.info(`\\\\t${files}`);\\n        for (let file of files) {\\n            const pair = RepoInit.getSourceDestPair(file);\\n            if (!pair) {\\n                this.logger.err(`Could not read line ${file}`);\\n            }\\n            else {\\n                await DownloadFiles.getfileToHome(this.ns, pair.source, pair.dest);\\n            }\\n        }\\n    }\\n}\\nexport { ReadText, TermLogger, RepoInit, DownloadFiles };\\n\",\"filename\":\"/lib/Helpers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":3103,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { RepoInit } from \\\"/lib/Helpers\\\";\\nexport async function main(ns) {\\n    const initRepo = new RepoInit(ns);\\n    await initRepo.pullScripts();\\n}\\n\",\"filename\":\"/Orchestrator/utils/pullFiles.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/Orchestrator/utils/initRepo.js\",\"url\":\"blob:file:///f70a5928-31dc-4ca3-b37b-a3956fd8a86c\",\"moduleSequenceNumber\":2630287},{\"filename\":\"/lib/Helpers.js\",\"url\":\"blob:file:///8112737d-7bbb-46cc-969f-f2b5fa6de401\",\"moduleSequenceNumber\":2630289},{\"filename\":\"/Orchestrator/utils/pullFiles.js\",\"url\":\"blob:file:///7bb38d7e-52f2-4da9-a1c2-f51c4b09d37c\",\"moduleSequenceNumber\":2630292}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":3104,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { DEBUG } from \\\"/Orchestrator/Config/Debug\\\";\\nexport function dprint(ns, message) {\\n    if (DEBUG) {\\n        const now = new Date(Date.now());\\n        const hour = now.getHours();\\n        const minute = now.getMinutes();\\n        const second = now.getSeconds();\\n        const timestamp = hour + \\\":\\\" + minute + \\\":\\\" + second;\\n        ns.print(timestamp + \\\": \\\" + message);\\n    }\\n}\\n\",\"filename\":\"/Orchestrator/Common/Dprint.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":3105,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Action, ChannelName } from \\\"/Orchestrator/MessageManager/enum\\\";\\nimport { Payload } from \\\"/Orchestrator/MessageManager/class\\\";\\nimport { KILL_MESSAGE } from \\\"/Orchestrator/Config/Config\\\";\\nimport { freeThreads } from \\\"/Orchestrator/ThreadManager/common\\\";\\nimport { dprint } from \\\"/Orchestrator/Common/Dprint\\\";\\nexport async function copyFile(ns, fileList, host) {\\n    for (let j = 0; j < fileList.length; j++) {\\n        const script = fileList[j];\\n        ns.fileExists(script, host) && ns.rm(script, host);\\n        await ns.scp(script, \\\"home\\\", host);\\n    }\\n}\\nexport async function executeScript(ns, script, threads, hack, messageHandler, id) {\\n    dprint(ns, \\\"Executing scripts: \\\" + script);\\n    let executedScript = 0;\\n    for (const host of Object.keys(threads)) {\\n        if (threads[host] === 0)\\n            continue;\\n        const pid = ns.exec(script, host, threads[host], hack.host, id, executedScript);\\n        if (pid > 0) {\\n            executedScript++;\\n        }\\n        else {\\n            dprint(ns, \\\"Hack \\\" + id + \\\" targeting \\\" + hack.host + \\\" could not start script on \\\" + host + \\\" with \\\" + threads[host] + \\\" threads.\\\");\\n            await freeThreads(ns, { [host]: threads[host] }, messageHandler);\\n        }\\n    }\\n    return executedScript;\\n}\\nexport async function checkForKill(ns, messageHandler) {\\n    const killMessage = await messageHandler.getMessagesInQueue(KILL_MESSAGE);\\n    if (killMessage.length > 0) {\\n        dprint(ns, \\\"Kill request\\\");\\n        await messageHandler.sendMessage(ChannelName.hackManager, new Payload(Action.hackDone, \\\"Killed\\\"));\\n        return true;\\n    }\\n    return false;\\n}\\nexport function formatMoney(n, decimalPlaces = 3) {\\n    const levels = [1e30, 1e27, 1e24, 1e21, 1e18, 1e15, 1e12, 1e9, 1e6, 1e3];\\n    const notations = [\\\"n\\\", \\\"o\\\", \\\"S\\\", \\\"s\\\", \\\"Q\\\", \\\"q\\\", \\\"t\\\", \\\"b\\\", \\\"m\\\", \\\"k\\\"];\\n    if (n === Infinity)\\n        return \\\"∞\\\";\\n    for (const [index, level] of levels.entries()) {\\n        if (n >= level) {\\n            const number = Math.round((n / level) * (Math.pow(10, decimalPlaces))) / (10 * decimalPlaces);\\n            return number + notations[index] + \\\"$\\\";\\n        }\\n    }\\n    return n + \\\"$\\\";\\n}\\n\",\"filename\":\"/Orchestrator/Common/GenericFunctions.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.75,\"server\":\"home\",\"moduleSequenceNumber\":3106,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { HackMode, HackType, RequiredScript } from \\\"/Orchestrator/HackManager/enum\\\";\\nimport { Action, ChannelName } from \\\"/Orchestrator/MessageManager/enum\\\";\\nexport const MANAGING_SERVER = \\\"home\\\";\\nexport const HACKING_SERVER = \\\"home\\\";\\nexport const THREAD_SERVER = \\\"home\\\";\\nexport const BASE_DIR = \\\"/Orchestrator/\\\";\\nexport const HACKING_SCRIPTS = {\\n    [RequiredScript.hack]: \\\"/Orchestrator/HackManager/script/hack.js\\\",\\n    [RequiredScript.weaken]: \\\"/Orchestrator/HackManager/script/weaken.js\\\",\\n    [RequiredScript.grow]: \\\"/Orchestrator/HackManager/script/grow.js\\\",\\n    [RequiredScript.xp]: \\\"/Orchestrator/HackManager/script/xp.js\\\",\\n};\\nexport const SHARING_SCRIPT = \\\"/Orchestrator/ThreadManager/script/share.js\\\";\\nexport const MANAGER_SCRIPTS = {\\n    [ChannelName.messageManager]: {\\n        script: \\\"/Orchestrator/MessageManager/manager.js\\\",\\n        server: MANAGING_SERVER\\n    },\\n    [ChannelName.threadManager]: {\\n        script: \\\"/Orchestrator/ThreadManager/manager.js\\\",\\n        server: THREAD_SERVER\\n    },\\n    [ChannelName.hackManager]: {\\n        script: \\\"/Orchestrator/HackManager/manager.js\\\",\\n        server: MANAGING_SERVER\\n    },\\n    [ChannelName.targetManager]: {\\n        script: \\\"/Orchestrator/TargetManager/manager.js\\\",\\n        server: MANAGING_SERVER\\n    },\\n    [ChannelName.serverManager]: {\\n        script: \\\"/Orchestrator/ServerManager/manager.js\\\",\\n        server: MANAGING_SERVER\\n    }\\n};\\nexport const HACKING_CONDUCTOR = {\\n    [HackType.growWeakenHack]: \\\"/Orchestrator/HackManager/conductor/GrowWeakenConductor.js\\\",\\n    [HackType.moneyHack]: \\\"/Orchestrator/HackManager/conductor/MoneyHackConductor.js\\\",\\n    [HackType.xpHack]: \\\"/Orchestrator/HackManager/conductor/XpHackConductor.js\\\",\\n};\\nexport const HACK_MODE = {\\n    [HackMode.money]: [HackType.moneyHack, HackType.growWeakenHack],\\n    [HackMode.xp]: [HackType.xpHack]\\n};\\nexport const IMPORT_TO_COPY = [\\n    \\\"/Orchestrator/MessageManager/class.js\\\",\\n    \\\"/Orchestrator/MessageManager/enum.js\\\",\\n    \\\"/Orchestrator/Common/Dprint.js\\\",\\n    \\\"/Orchestrator/Config/Debug.js\\\",\\n    \\\"/Orchestrator/HackManager/enum.js\\\",\\n    SHARING_SCRIPT\\n];\\nexport const DEFAULT_HACKING_MODE = HackMode.money;\\nexport const HACK_TYPE_PARTIAL_THREAD = [HackType.growWeakenHack];\\nexport const SERVER_INITIAL_RAM = 8;\\nexport const BOOT_SCRIPTS = [\\n    ChannelName.messageManager,\\n    ChannelName.threadManager,\\n    ChannelName.hackManager,\\n    ChannelName.targetManager,\\n    ChannelName.serverManager\\n];\\nexport const KILL_MESSAGE = m => m.payload.action === Action.kill;\\nexport const PORT_CRACKER = (ns) => [\\n    { file: \\\"BruteSSH.exe\\\", function: ns.brutessh },\\n    { file: \\\"FTPCrack.exe\\\", function: ns.ftpcrack },\\n    { file: \\\"relaySMTP.exe\\\", function: ns.relaysmtp },\\n    { file: \\\"HTTPWorm.exe\\\", function: ns.httpworm },\\n    { file: \\\"SQLInject.exe\\\", function: ns.sqlinject },\\n];\\nexport const MIN_HACK_CHANCE = 0.5;\\nexport const MIN_SERVER_FOR_UPDATE = 1;\\nexport const MAX_SERVER_RAM = -1;\\nexport const MONEY_HACKING_TARGET_PERCENT = 0.95;\\nexport const USE_LOGISTIC_PROBABILITY = true;\\nexport const TIMEOUT_THRESHOLD = 180 * 1000; // 3 minutes seems to be the sweet spot\\nexport const USE_SHARE = true;\\n\",\"filename\":\"/Orchestrator/Config/Config.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.75,\"server\":\"home\",\"moduleSequenceNumber\":3107,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const DEBUG = true;\\n\",\"filename\":\"/Orchestrator/Config/Debug.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":3108,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const PROGRAMS = [\\n    { name: \\\"tor\\\", price: 200000 },\\n    { name: \\\"brutessh.exe\\\", price: 500e3 },\\n    { name: \\\"ftpcrack.exe\\\", price: 1500e3 },\\n    { name: \\\"relaysmtp.exe\\\", price: 5e6 },\\n    { name: \\\"httpworm.exe\\\", price: 30e6 },\\n    { name: \\\"sqlinject.exe\\\", price: 250e6 }\\n];\\nexport const COMMIT_CRIME = true;\\n\",\"filename\":\"/Orchestrator/Config/Singularity.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":3109,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function calculateThreadsRatio(availableThreads, currentSecurity, minSecurity, growThreads, weakenThreads) {\\n    if ((growThreads + weakenThreads) <= availableThreads) {\\n        return { weakenThreads: weakenThreads, growThreads: growThreads };\\n    }\\n    const threadsForMinSecurity = (currentSecurity - minSecurity) / 0.05;\\n    const threadsLeft = availableThreads - threadsForMinSecurity;\\n    if (threadsForMinSecurity >= availableThreads) {\\n        return { weakenThreads: availableThreads, growThreads: 0 };\\n    }\\n    const calcWeakenThreads = Math.round(Math.ceil(threadsLeft / 13.5));\\n    const calcGrowThreads = Math.round(Math.ceil(threadsLeft - weakenThreads));\\n    if (calcGrowThreads < 0) {\\n        return { weakenThreads: availableThreads, growThreads: 0 };\\n    }\\n    return { weakenThreads: calcWeakenThreads + threadsForMinSecurity, growThreads: calcGrowThreads };\\n}\\n\",\"filename\":\"/Orchestrator/HackManager/algorithm/Common/CalculateThreadsRatio.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":3110,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { USE_LOGISTIC_PROBABILITY } from \\\"/Orchestrator/Config/Config\\\";\\nexport function helpers(availableThreads, currentSecurity, minSecurity, growThreads, weakenThreads) {\\n    if ((growThreads + weakenThreads) <= availableThreads) {\\n        return { weakenThreads: weakenThreads, growThreads: growThreads };\\n    }\\n    const threadsForMinSecurity = (currentSecurity - minSecurity) / 0.05;\\n    const threadsLeft = availableThreads - threadsForMinSecurity;\\n    if (threadsForMinSecurity >= availableThreads) {\\n        return { weakenThreads: availableThreads, growThreads: 0 };\\n    }\\n    const calcWeakenThreads = Math.round(Math.ceil(threadsLeft / 13.5));\\n    const calcGrowThreads = Math.round(Math.ceil(threadsLeft - weakenThreads));\\n    if (calcGrowThreads < 0) {\\n        return { weakenThreads: availableThreads, growThreads: 0 };\\n    }\\n    return { weakenThreads: calcWeakenThreads + threadsForMinSecurity, growThreads: calcGrowThreads };\\n}\\nexport function calculateProbabilty(hackChance) {\\n    if (!USE_LOGISTIC_PROBABILITY) {\\n        return hackChance;\\n    }\\n    return Math.log10(hackChance / (1 - hackChance + Number.EPSILON));\\n}\\n\",\"filename\":\"/Orchestrator/HackManager/algorithm/Common/helpers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.75,\"server\":\"home\",\"moduleSequenceNumber\":3111,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { MONEY_HACKING_TARGET_PERCENT } from \\\"/Orchestrator/Config/Config\\\";\\nimport { Hack } from \\\"/Orchestrator/HackManager/hack\\\";\\nimport { HackType } from \\\"/Orchestrator/HackManager/enum\\\";\\nimport { calculateProbabilty, helpers } from \\\"/Orchestrator/HackManager/algorithm/Common/helpers\\\";\\nexport function GrowWeakenAlgorithm(ns, currentHack, hackedHost, availableThreads) {\\n    //DEBUG && ns.print(\\\"Calculating hacks\\\")\\n    let potentialHack = [];\\n    for (let host of hackedHost) {\\n        if (host.maxMoney === 0) {\\n            continue;\\n        }\\n        if (currentHack.find(h => h.host == host.name)) {\\n            continue;\\n        }\\n        const hostCurMoney = ns.getServerMoneyAvailable(host.name);\\n        const hostCurSecurity = ns.getServerSecurityLevel(host.name);\\n        const baseHackChance = ((1.75 * ns.getHackingLevel()) - host.hackingRequired) / (1.75 * ns.getHackingLevel());\\n        const moneyToMax = host.maxMoney - hostCurMoney;\\n        // We check if the server is almost fully grown/fully weaken and skip those that are close to the limit\\n        // if ((hostCurSecurity/host.minSecurity)-1 < 0.25 && hostCurMoney/host.maxMoney < 0.75) {\\n        //     continue\\n        // }\\n        // Thread required to grow to max:\\n        // max = old*(rate)^thread\\n        // The \\\"rate\\\" (serverGrowth) is dependant on the current server security level when the grow finish.\\n        // In situation where multiple host are hacking concurrently, the race condition make the final growth amount to\\n        // be less than expected since the security level of the host constantly increase.\\n        // One workaround would be to always assume max security, however this would increase drastically the amount\\n        // of required threads.\\n        const serverGrowth = Math.min(1 + 0.03 / hostCurSecurity, 1.0035);\\n        const growThreads = Math.ceil((Math.log(host.maxMoney / hostCurMoney) / (Math.log(serverGrowth)) * host.growRate));\\n        // We skip those who return NaN orr Infinite\\n        if (!Number.isFinite(growThreads)) {\\n            continue;\\n        }\\n        // Calculate Total Security, considering Grow\\n        const weakenThread = Math.ceil(((hostCurSecurity - host.minSecurity) + (growThreads * 0.004)) / 0.05);\\n        // Calculate Hacked Amount per thread\\n        //const percentHacked = ns.hackAnalyze(hackedHost[i].name)\\n        const threadsRatio = helpers(availableThreads, hostCurSecurity, host.minSecurity, growThreads, weakenThread);\\n        const percentGrown = growThreads ? threadsRatio.growThreads / growThreads : 1;\\n        const hackAmount = hostCurMoney + (moneyToMax * percentGrown) * MONEY_HACKING_TARGET_PERCENT;\\n        const hackTime = host.hackTime * 5; // We need to consider the time of the grow/weaken + the time of the hack\\n        const percentHackedPerThread = ns.hackAnalyze(host.name);\\n        const hackingThreadRequired = MONEY_HACKING_TARGET_PERCENT / percentHackedPerThread;\\n        // We also want to skip the hack that would require too few threads\\n        if (threadsRatio.weakenThreads <= 1 && threadsRatio.growThreads <= 1) {\\n            continue;\\n        }\\n        // Save grow/weaken hack\\n        potentialHack.push(new Hack(host.name, hackTime, hackAmount, 0, threadsRatio.growThreads, threadsRatio.weakenThreads, ((hackAmount * percentHackedPerThread) / hackTime) * calculateProbabilty(baseHackChance), HackType.growWeakenHack, baseHackChance));\\n    }\\n    // Sort potentialHack by value.\\n    //DEBUG && ns.print(\\\"Got \\\" + potentialHack.length + \\\" hacks\\\")\\n    return potentialHack;\\n}\\n\",\"filename\":\"/Orchestrator/HackManager/algorithm/GrowWeakenAlgorithm.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.5,\"server\":\"home\",\"moduleSequenceNumber\":3112,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { MONEY_HACKING_TARGET_PERCENT } from \\\"/Orchestrator/Config/Config\\\";\\nimport { Hack } from \\\"/Orchestrator/HackManager/hack\\\";\\nimport { HackType } from \\\"/Orchestrator/HackManager/enum\\\";\\nimport { calculateProbabilty } from \\\"/Orchestrator/HackManager/algorithm/Common/helpers\\\";\\nexport function MoneyHackAlgorithm(ns, currentHack, hackedHost, availableThreads) {\\n    //DEBUG && ns.print(\\\"Calculating hacks\\\")\\n    let potentialHack = [];\\n    for (const host of hackedHost) {\\n        if (host.maxMoney === 0) {\\n            continue;\\n        }\\n        if (currentHack.find(h => h.host == host.name)) {\\n            continue;\\n        }\\n        // Quick hack\\n        const hostCurMoney = ns.getServerMoneyAvailable(host.name);\\n        const hostCurSecurity = ns.getServerSecurityLevel(host.name);\\n        const maxHackAmount = hostCurMoney * MONEY_HACKING_TARGET_PERCENT;\\n        const hackThreads = Math.ceil(ns.hackAnalyzeThreads(host.name, maxHackAmount));\\n        const finalHackThreads = Math.min(hackThreads, availableThreads);\\n        const hackPercentage = hackThreads / availableThreads > 1 ? 1 : hackThreads / availableThreads;\\n        const hackAmount = maxHackAmount * hackPercentage;\\n        const baseHackChance = ((1.75 * ns.getHackingLevel()) - host.hackingRequired) / (1.75 * ns.getHackingLevel());\\n        const hackChance = (100 - hostCurSecurity) / 100 * baseHackChance;\\n        const hackPerThread = ns.hackAnalyze(host.name);\\n        // We skip those that are not high enough\\n        // if (hostCurMoney/host.maxMoney < 0.75) {\\n        //     continue\\n        // }\\n        // We need to ensure that it return a valid number of thread for the hack\\n        if (Number.isFinite(finalHackThreads) && hackThreads > 0) {\\n            potentialHack.push(new Hack(host.name, host.hackTime, hackAmount, finalHackThreads, 0, 0, (hackAmount * hackPerThread) / host.hackTime * calculateProbabilty(hackChance), HackType.moneyHack, hackChance));\\n        }\\n    }\\n    // Sort potentialHack by value.\\n    //potentialHack.sort(hackSorter)\\n    //DEBUG && ns.print(\\\"Got \\\" + potentialHack.length + \\\" quick hacks\\\")\\n    return potentialHack;\\n}\\n\",\"filename\":\"/Orchestrator/HackManager/algorithm/MoneyHackAlgorithm.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"home\",\"moduleSequenceNumber\":3113,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Hack, hackSorter } from \\\"/Orchestrator/HackManager/hack\\\";\\nimport { HackType } from \\\"/Orchestrator/HackManager/enum\\\";\\nexport function XPHackAlgorithm(ns, currentHack, hackedHost) {\\n    let potentialHack = [];\\n    for (let host of hackedHost) {\\n        if (host.maxMoney === 0) {\\n            continue;\\n        }\\n        if (currentHack.find(h => h.host === host.name)) {\\n            continue;\\n        }\\n        potentialHack.push(new Hack(host.name, 1, 100, 0, 0, -1, (3 + (host.minSecurity * 0.3)) / host.weakenTime, HackType.xpHack, 0));\\n    }\\n    // Sort potentialHack by value.\\n    potentialHack.sort(hackSorter);\\n    // XP hack need only one hack\\n    potentialHack = potentialHack[0] ? [potentialHack[0]] : [];\\n    return potentialHack;\\n}\\n\",\"filename\":\"/Orchestrator/HackManager/algorithm/XpHackAlgorithm.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"home\",\"moduleSequenceNumber\":3114,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { MessageHandler, Payload } from \\\"/Orchestrator/MessageManager/class\\\";\\nimport { Action, ChannelName } from \\\"/Orchestrator/MessageManager/enum\\\";\\nimport { HACKING_SCRIPTS, TIMEOUT_THRESHOLD } from \\\"/Orchestrator/Config/Config\\\";\\nimport { Hack } from \\\"/Orchestrator/HackManager/hack\\\";\\nimport { executeScript } from \\\"/Orchestrator/Common/GenericFunctions\\\";\\nimport { freeThreads, getThreads } from \\\"/Orchestrator/ThreadManager/common\\\";\\nimport { dprint } from \\\"/Orchestrator/Common/Dprint\\\";\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('exec');\\n    const myId = ns.args[1];\\n    const mySelf = ChannelName.hackConductor;\\n    const messageHandler = new MessageHandler(ns, mySelf, myId);\\n    const hack = Hack.fromJSON(ns.args[0]);\\n    dprint(ns, \\\"Starting hack: \\\" + myId);\\n    let allocatedThreads = await getThreads(ns, hack.growThreads + hack.weakenThreads, messageHandler, { time: Math.max(hack.weakenTime, hack.growTime) });\\n    let numOfHost = Object.keys(allocatedThreads).length;\\n    if (!numOfHost) {\\n        dprint(ns, \\\"Hack lack required threads\\\");\\n        await freeThreads(ns, allocatedThreads, messageHandler);\\n        return messageHandler.sendMessage(ChannelName.hackManager, new Payload(Action.hackReady, -1));\\n    }\\n    let growAllocatedThreads = {};\\n    let growThreadsAmountRequired = hack.growThreads;\\n    for (const host of Object.keys(allocatedThreads)) {\\n        if (growThreadsAmountRequired === 0) {\\n            break;\\n        }\\n        else if (allocatedThreads[host] <= growThreadsAmountRequired) {\\n            growAllocatedThreads[host] = allocatedThreads[host];\\n            growThreadsAmountRequired -= allocatedThreads[host];\\n            delete allocatedThreads[host];\\n        }\\n        else if (allocatedThreads[host] > growThreadsAmountRequired) {\\n            growAllocatedThreads[host] = growThreadsAmountRequired;\\n            allocatedThreads[host] -= growThreadsAmountRequired;\\n            growThreadsAmountRequired = 0;\\n        }\\n    }\\n    let weakenAllocatedThreads = { ...allocatedThreads };\\n    let growResponseReceived = 0;\\n    let weakenResponseReceived = 0;\\n    dprint(ns, 'Hack ready');\\n    await messageHandler.sendMessage(ChannelName.hackManager, new Payload(Action.hackReady));\\n    dprint(ns, \\\"Starting weaken script\\\");\\n    dprint(ns, \\\"Starting grow script\\\");\\n    let numOfWeakenHost = await executeScript(ns, HACKING_SCRIPTS.weaken, weakenAllocatedThreads, hack, messageHandler, myId);\\n    let numOfGrowHost = await executeScript(ns, HACKING_SCRIPTS.grow, growAllocatedThreads, hack, messageHandler, myId);\\n    const hackStartTime = Date.now();\\n    const timeOutTime = hackStartTime + hack.hackTime + TIMEOUT_THRESHOLD;\\n    const timeOutHour = new Date(timeOutTime).getHours();\\n    const timeOutMinute = new Date(timeOutTime).getMinutes();\\n    const timeOutSecond = new Date(timeOutTime).getSeconds();\\n    dprint(ns, \\\"Awaiting grow/weaken confirmation\\\");\\n    dprint(ns, \\\"Hack will timeout at: \\\" + timeOutHour + \\\":\\\" + timeOutMinute + \\\":\\\" + timeOutSecond);\\n    while (timeOutTime > Date.now()) {\\n        //const filter = m => (m.payload.action === Action.weakenScriptDone || m.payload.action === Action.growScriptDone)\\n        //if(await checkForKill()) return\\n        const responses = await messageHandler.getMessagesInQueue();\\n        for (const response of responses) {\\n            switch (response.payload.action) {\\n                case Action.growScriptDone:\\n                    growResponseReceived++;\\n                    dprint(ns, \\\"Received \\\" + growResponseReceived + \\\"/\\\" + numOfGrowHost + \\\" grow results\\\");\\n                    break;\\n                case Action.weakenScriptDone:\\n                    // Weaken takes longer than grow\\n                    weakenResponseReceived++;\\n                    dprint(ns, \\\"Received \\\" + weakenResponseReceived + \\\"/\\\" + numOfWeakenHost + \\\" weaken results\\\");\\n                    break;\\n                default:\\n                    break;\\n            }\\n        }\\n        // if (Date.now()>hackStartTime+hack.weakenTime+TIMEOUT_THRESHOLD) {\\n        //     ns.tprint(\\\"HACK \\\" + hack.host + \\\" IS OVERTIME\\\")\\n        //     ns.tprint(\\\"G: \\\" + growResponseReceived + \\\"/\\\" + numOfGrowHost)\\n        //     ns.tprint(\\\"W: \\\" + weakenResponseReceived + \\\"/\\\" + numOfWeakenHost)\\n        // }\\n        if ((weakenResponseReceived >= numOfWeakenHost && growResponseReceived >= numOfGrowHost)) {\\n            break;\\n        }\\n        await ns.sleep(100);\\n    }\\n    dprint(ns, \\\"Weaken and grow completed.\\\");\\n    await freeThreads(ns, growAllocatedThreads, messageHandler);\\n    await freeThreads(ns, weakenAllocatedThreads, messageHandler);\\n    const results = \\\"$: \\\" + Math.round(ns.getServerMoneyAvailable(hack.host) / ns.getServerMaxMoney(hack.host) * 100000) / 1000 + \\\"%, Sec: \\\" + Math.round(((ns.getServerSecurityLevel(hack.host) / ns.getServerMinSecurityLevel(hack.host)) - 1) * 100000) / 1000;\\n    await messageHandler.sendMessage(ChannelName.hackManager, new Payload(Action.hackDone, results));\\n    await messageHandler.clearMyMessage();\\n    dprint(ns, \\\"Exiting\\\");\\n}\\n\",\"filename\":\"/Orchestrator/HackManager/conductor/GrowWeakenConductor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.75,\"server\":\"home\",\"moduleSequenceNumber\":3115,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { MessageHandler, Payload } from \\\"/Orchestrator/MessageManager/class\\\";\\nimport { Action, ChannelName } from \\\"/Orchestrator/MessageManager/enum\\\";\\nimport { HACKING_SCRIPTS, TIMEOUT_THRESHOLD } from \\\"/Orchestrator/Config/Config\\\";\\nimport { Hack } from \\\"/Orchestrator/HackManager/hack\\\";\\nimport { executeScript, formatMoney } from \\\"/Orchestrator/Common/GenericFunctions\\\";\\nimport { freeThreads, getThreads } from \\\"/Orchestrator/ThreadManager/common\\\";\\nimport { dprint } from \\\"/Orchestrator/Common/Dprint\\\";\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('exec');\\n    const myId = ns.args[1];\\n    const mySelf = ChannelName.hackConductor;\\n    const messageHandler = new MessageHandler(ns, mySelf, myId);\\n    const hack = Hack.fromJSON(ns.args[0]);\\n    dprint(ns, \\\"Starting hack: \\\" + myId);\\n    const hackAllocatedThreads = await getThreads(ns, hack.hackThreads, messageHandler, { time: hack.hackTime });\\n    let numOfHackHost = Object.keys(hackAllocatedThreads).length;\\n    let hackResponseReceived = 0;\\n    let hackValue = 0;\\n    if (!numOfHackHost) {\\n        dprint(ns, \\\"Hack lack required threads\\\");\\n        hackAllocatedThreads && await freeThreads(ns, hackAllocatedThreads, messageHandler);\\n        return messageHandler.sendMessage(ChannelName.hackManager, new Payload(Action.hackReady, -1));\\n    }\\n    dprint(ns, 'Hack ready');\\n    await messageHandler.sendMessage(ChannelName.hackManager, new Payload(Action.hackReady));\\n    dprint(ns, \\\"Starting hack script\\\");\\n    numOfHackHost = await executeScript(ns, HACKING_SCRIPTS.hack, hackAllocatedThreads, hack, messageHandler, myId);\\n    const hackStartTime = Date.now();\\n    const timeOutTime = hackStartTime + hack.weakenTime + TIMEOUT_THRESHOLD;\\n    const timeOutHour = new Date(timeOutTime).getHours();\\n    const timeOutMinute = new Date(timeOutTime).getMinutes();\\n    const timeOutSecond = new Date(timeOutTime).getSeconds();\\n    dprint(ns, \\\"Awaiting hack confirmation\\\");\\n    dprint(ns, \\\"Hack will timeout at: \\\" + timeOutHour + \\\":\\\" + timeOutMinute + \\\":\\\" + timeOutSecond);\\n    while (timeOutTime > Date.now()) {\\n        //if(await checkForKill()) return\\n        const responses = await messageHandler.getMessagesInQueue();\\n        for (const response of responses) {\\n            if (response.payload.action === Action.hackScriptDone) {\\n                hackResponseReceived++;\\n                hackValue += response.payload.info;\\n                dprint(ns, \\\"Received \\\" + hackResponseReceived + \\\"/\\\" + numOfHackHost + \\\" hack results\\\");\\n            }\\n        }\\n        if (hackResponseReceived >= numOfHackHost) {\\n            break;\\n        }\\n        await ns.sleep(100);\\n    }\\n    dprint(ns, \\\"Hack script completed\\\");\\n    await freeThreads(ns, hackAllocatedThreads, messageHandler);\\n    await messageHandler.sendMessage(ChannelName.hackManager, new Payload(Action.hackDone, formatMoney(hackValue)));\\n    await messageHandler.clearMyMessage();\\n    dprint(ns, \\\"Exiting\\\");\\n}\\n\",\"filename\":\"/Orchestrator/HackManager/conductor/MoneyHackConductor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.55,\"server\":\"home\",\"moduleSequenceNumber\":3116,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { MessageHandler, Payload } from \\\"/Orchestrator/MessageManager/class\\\";\\nimport { Action, ChannelName } from \\\"/Orchestrator/MessageManager/enum\\\";\\nimport { HACKING_SCRIPTS } from \\\"/Orchestrator/Config/Config\\\";\\nimport { Hack } from \\\"/Orchestrator/HackManager/hack\\\";\\nimport { executeScript } from \\\"/Orchestrator/Common/GenericFunctions\\\";\\nimport { freeThreads, getThreads } from \\\"/Orchestrator/ThreadManager/common\\\";\\nimport { dprint } from \\\"/Orchestrator/Common/Dprint\\\";\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('exec');\\n    const myId = ns.args[1];\\n    const mySelf = ChannelName.hackConductor;\\n    const messageHandler = new MessageHandler(ns, mySelf, myId);\\n    const hack = Hack.fromJSON(ns.args[0]);\\n    dprint(ns, \\\"Starting hack: \\\" + myId);\\n    let cycle = 0;\\n    dprint(ns, 'Hack ready');\\n    await messageHandler.sendMessage(ChannelName.hackManager, new Payload(Action.hackReady));\\n    const weakenAllocatedThreads = await getThreads(ns, hack.weakenThreads, messageHandler, { time: hack.weakenTime });\\n    const numOfWeakenHost = await executeScript(ns, HACKING_SCRIPTS.xp, weakenAllocatedThreads, hack, messageHandler, myId);\\n    let stopRequest = false;\\n    dprint(ns, \\\"Starting XP script\\\");\\n    while (!stopRequest) {\\n        let weakenResponseReceived = 0;\\n        const responses = await messageHandler.getMessagesInQueue();\\n        for (const response of responses) {\\n            switch (response.payload.action) {\\n                case Action.weakenScriptDone:\\n                    weakenResponseReceived++;\\n                    dprint(ns, \\\"Received \\\" + weakenResponseReceived + \\\"/\\\" + numOfWeakenHost + \\\" weaken results\\\");\\n                    if (weakenResponseReceived >= numOfWeakenHost) {\\n                        cycle++;\\n                        weakenResponseReceived = 0;\\n                        dprint(ns, \\\"Weaken cycle complete. Starting cycle: \\\" + cycle);\\n                    }\\n                    break;\\n                case Action.stop:\\n                    dprint(ns, \\\"Received stop request\\\");\\n                    stopRequest = true;\\n                    break;\\n                default:\\n                    break;\\n            }\\n        }\\n        await ns.sleep(100);\\n    }\\n    dprint(ns, \\\"Stop requested\\\");\\n    for (let i = 0; i < numOfWeakenHost; i++) {\\n        await messageHandler.sendMessage(ChannelName.bootScript, new Payload(Action.stop), (myId * 1000) + i);\\n    }\\n    await freeThreads(ns, weakenAllocatedThreads, messageHandler);\\n    await messageHandler.sendMessage(ChannelName.hackManager, new Payload(Action.hackDone, \\\"Stop request\\\"));\\n    await messageHandler.clearMyMessage();\\n    dprint(ns, \\\"Exiting\\\");\\n}\\n\",\"filename\":\"/Orchestrator/HackManager/conductor/XpHackConductor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.55,\"server\":\"home\",\"moduleSequenceNumber\":3117,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var RequiredScript;\\n(function (RequiredScript) {\\n    RequiredScript[\\\"hack\\\"] = \\\"hack\\\";\\n    RequiredScript[\\\"weaken\\\"] = \\\"weaken\\\";\\n    RequiredScript[\\\"grow\\\"] = \\\"grow\\\";\\n    RequiredScript[\\\"xp\\\"] = \\\"xp\\\";\\n})(RequiredScript || (RequiredScript = {}));\\nexport var HackType;\\n(function (HackType) {\\n    HackType[\\\"growWeakenHack\\\"] = \\\"growWeakenHack\\\";\\n    HackType[\\\"moneyHack\\\"] = \\\"moneyHack\\\";\\n    HackType[\\\"xpHack\\\"] = \\\"xpHack\\\";\\n})(HackType || (HackType = {}));\\nexport var HackMode;\\n(function (HackMode) {\\n    HackMode[\\\"money\\\"] = \\\"money\\\";\\n    HackMode[\\\"xp\\\"] = \\\"xp\\\";\\n})(HackMode || (HackMode = {}));\\n\",\"filename\":\"/Orchestrator/HackManager/enum.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":3118,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class Hack {\\n    constructor(host, hackTime, hackValue, hackThreads, growThreads, weakenThreads, relativeValue, hackType, hackChance) {\\n        this.host = host;\\n        this.hackTime = hackTime;\\n        this.hackValue = hackValue;\\n        this.hackThreads = Math.round(hackThreads);\\n        this.growThreads = Math.round(growThreads);\\n        this.weakenThreads = Math.round(weakenThreads);\\n        this.relativeValue = relativeValue;\\n        this.hackType = hackType;\\n        this.hackChance = hackChance;\\n        this.id = null;\\n        this.startTime = null;\\n        this.pid = null;\\n    }\\n    get growTime() {\\n        return this.hackTime * 3.2;\\n    }\\n    get weakenTime() {\\n        return this.hackTime * 4;\\n    }\\n    static fromJSON(json) {\\n        const { host, hackTime, hackValue, hackThreads, growThreads, weakenThreads, relativeValue, hackType, hackChance } = JSON.parse(json);\\n        return new Hack(host, hackTime, hackValue, hackThreads, growThreads, weakenThreads, relativeValue, hackType, hackChance);\\n    }\\n}\\nexport class HackedHost {\\n    constructor(ns, host) {\\n        this.name = host;\\n        this.hackTime = ns.getHackTime(host);\\n        this.growRate = ns.getServerGrowth(host) / 100;\\n        this.minSecurity = ns.getServerMinSecurityLevel(host);\\n        this.maxMoney = ns.getServerMaxMoney(host);\\n        this.ram = ns.getServerMaxRam(host);\\n        this.hackingRequired = ns.getServerRequiredHackingLevel(host);\\n    }\\n    get growTime() {\\n        return this.hackTime * 3.2;\\n    }\\n    get weakenTime() {\\n        return this.hackTime * 4;\\n    }\\n}\\nexport const hackSorter = (a, b) => {\\n    if (a.relativeValue < b.relativeValue) {\\n        return 1;\\n    }\\n    if (a.relativeValue > b.relativeValue) {\\n        return -1;\\n    }\\n    return 0;\\n};\\n\",\"filename\":\"/Orchestrator/HackManager/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"home\",\"moduleSequenceNumber\":3119,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { MessageHandler, Payload, } from \\\"/Orchestrator/MessageManager/class\\\";\\nimport { DEFAULT_HACKING_MODE, HACK_MODE, HACKING_CONDUCTOR, HACKING_SERVER, } from \\\"/Orchestrator/Config/Config\\\";\\nimport { HackedHost, hackSorter } from \\\"/Orchestrator/HackManager/hack\\\";\\nimport { GrowWeakenAlgorithm } from \\\"/Orchestrator/HackManager/algorithm/GrowWeakenAlgorithm\\\";\\nimport { Action, ChannelName } from \\\"/Orchestrator/MessageManager/enum\\\";\\nimport { HackMode, HackType } from \\\"/Orchestrator/HackManager/enum\\\";\\nimport { XPHackAlgorithm } from \\\"/Orchestrator/HackManager/algorithm/XpHackAlgorithm\\\";\\nimport { MoneyHackAlgorithm } from \\\"/Orchestrator/HackManager/algorithm/MoneyHackAlgorithm\\\";\\nimport { dprint } from \\\"/Orchestrator/Common/Dprint\\\";\\nconst HackAlgorithm = {\\n    [HackType.growWeakenHack]: GrowWeakenAlgorithm,\\n    [HackType.moneyHack]: MoneyHackAlgorithm,\\n    [HackType.xpHack]: XPHackAlgorithm,\\n};\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('exec');\\n    ns.disableLog('getHackTime');\\n    ns.disableLog('getServerGrowth');\\n    ns.disableLog('getServerMinSecurityLevel');\\n    ns.disableLog('getServerSecurityLevel');\\n    ns.disableLog('getServerMaxMoney');\\n    ns.disableLog('getServerMoneyAvailable');\\n    ns.disableLog('getServerMaxRam');\\n    ns.disableLog('getServerRequiredHackingLevel');\\n    ns.disableLog('getServerUsedRam');\\n    ns.disableLog('getHackingLevel');\\n    const mySelf = ChannelName.hackManager;\\n    const messageHandler = new MessageHandler(ns, mySelf);\\n    const messageActions = {\\n        [Action.hackDone]: hackDone,\\n        [Action.addHost]: addHost,\\n        [Action.pause]: requestPause,\\n        [Action.kill]: kill,\\n        [Action.printHacks]: printHacks,\\n        [Action.printRunningHacks]: printRunningHacks,\\n        [Action.switchHackMode]: switchHackRequest\\n    };\\n    //const messageFilter = message => [Action.hackDone, Action.addHost, Action.pause, Action.kill, Action.printHacks, Action.printRunningHacks].includes(message.payload.action)\\n    const hackedHost = [];\\n    let currentHackMode = DEFAULT_HACKING_MODE;\\n    let currentHackId = 1;\\n    let currentHack = [];\\n    let pauseRequested = false;\\n    let killRequested = false;\\n    let switchRequested = false;\\n    while (true) {\\n        // This is a 1 second \\\"sleep\\\"\\n        for (let i = 0; i < 10; i++) {\\n            let responses = await messageHandler.getMessagesInQueue();\\n            if (responses.length > 0) {\\n                for (const response of responses) {\\n                    await messageActions[response.payload.action]?.(response);\\n                }\\n            }\\n            await ns.sleep(100);\\n        }\\n        if (!pauseRequested && !(currentHackMode === HackMode.xp && currentHack.length > 1)) {\\n            await pickHack();\\n        }\\n        // if (currentHack.length === 0 && pauseRequested) {\\n        //     dprint(ns, \\\"Manager paused\\\")\\n        //     await messageHandler.sendMessage(ChannelName.serverManager, new Payload(Action.hackPaused))\\n        //     await messageHandler.waitForAnswer(m => m.payload.action === Action.hackResume)\\n        //     pauseRequested = false\\n        //     dprint(ns, \\\"Manager resumed\\\")\\n        // }\\n        if (currentHack.length === 0 && switchRequested) {\\n            switchHackMode();\\n        }\\n        if (currentHack.length < 1 && killRequested) {\\n            dprint(ns, \\\"Manager kill\\\");\\n            return;\\n        }\\n        //await cleanup()\\n        await ns.sleep(100);\\n    }\\n    async function cleanup() {\\n        for (const hack of currentHack) {\\n            const maxTime = Math.max(hack.hackTime, hack.weakenTime, hack.growTime);\\n            const startTime = hack.startTime || 0;\\n            if (startTime + maxTime * 1.5 < Date.now()) {\\n                dprint(ns, \\\"Orphan hack detected, killing hack id: \\\" + hack.id);\\n                ns.kill(hack.pid);\\n            }\\n        }\\n    }\\n    async function switchHackRequest(message) {\\n        switchRequested = true;\\n        await requestPause();\\n    }\\n    function switchHackMode() {\\n        currentHackMode === HackMode.money ? currentHackMode = HackMode.xp : currentHackMode = HackMode.money;\\n        dprint(ns, \\\"Hack switching hacking mode to \\\" + currentHackMode);\\n        pauseRequested = false;\\n        switchRequested = false;\\n    }\\n    async function printHacks(message) {\\n        const availableThreads = await getAvailableThreads();\\n        if (availableThreads <= 0) {\\n            ns.tprint(\\\"No threads available, no hacks available.\\\");\\n            return;\\n        }\\n        let potentialHack = [];\\n        for (const hackType of HACK_MODE[currentHackMode]) {\\n            potentialHack.push(...HackAlgorithm[hackType](ns, currentHack, hackedHost, availableThreads));\\n        }\\n        potentialHack.sort(hackSorter);\\n        if (potentialHack.length === 0) {\\n            ns.tprint(\\\"No hack available.\\\");\\n        }\\n        let id = 0;\\n        for (let hack of potentialHack) {\\n            ns.tprint(\\\"Hack number \\\" + id + \\\": \\\");\\n            ns.tprint(\\\" - Target: \\\" + hack.host);\\n            ns.tprint(\\\" - Relative Value: \\\" + hack.relativeValue);\\n            ns.tprint(\\\" - Hack Type: \\\" + hack.hackType);\\n            ns.tprint(\\\" - Hack Threads: \\\" + hack.hackThreads);\\n            ns.tprint(\\\" - Weaken Threads: \\\" + hack.weakenThreads);\\n            ns.tprint(\\\" - Grow Threads: \\\" + hack.growThreads);\\n            id++;\\n        }\\n        ns.tprint(\\\"Calculated hack total: \\\" + potentialHack.length);\\n    }\\n    async function printRunningHacks(message) {\\n        if (currentHack.length === 0) {\\n            ns.tprint(\\\"No hack currently running.\\\");\\n        }\\n        for (let hack of currentHack) {\\n            ns.tprint(\\\"Hack number \\\" + hack.id + \\\": \\\");\\n            ns.tprint(\\\" - Target: \\\" + hack.host);\\n            ns.tprint(\\\" - Relative Value: \\\" + hack.relativeValue);\\n            ns.tprint(\\\" - Hack Type: \\\" + hack.hackType);\\n            ns.tprint(\\\" - Hack Threads: \\\" + hack.hackThreads);\\n            ns.tprint(\\\" - Weaken Threads: \\\" + hack.weakenThreads);\\n            ns.tprint(\\\" - Grow Threads: \\\" + hack.growThreads);\\n        }\\n        ns.tprint(\\\"Running hacks: \\\" + currentHack.length);\\n    }\\n    async function hackDone(message) {\\n        const hack = currentHack.find(h => h.id == message.originId);\\n        if (hack) {\\n            dprint(ns, \\\"<= \\\" + hack.hackType + \\\" \\\" + hack.id + \\\" from \\\" + hack.host + \\\": \\\" + message.payload.info);\\n            currentHack = currentHack.filter(h => h.id !== message.originId);\\n        }\\n        else {\\n            dprint(ns, \\\"Finished hack cannot be found!\\\");\\n        }\\n    }\\n    async function addHost(message) {\\n        let host = message.payload.info;\\n        dprint(ns, \\\"Received new host: \\\" + host);\\n        hackedHost.push(new HackedHost(ns, host));\\n    }\\n    function enoughRam(hackType) {\\n        return (ns.getServerMaxRam(HACKING_SERVER) - ns.getServerUsedRam(HACKING_SERVER) - ns.getScriptRam(HACKING_CONDUCTOR[hackType], HACKING_SERVER)) > 0;\\n    }\\n    async function pickHack() {\\n        dprint(ns, \\\"Sending hacks.\\\");\\n        //while (true) {\\n        // We limit to 50 iteration before returning to the main loop, with a high thread count, we may get stuck\\n        // where the hack finish too fast and it eventually clog up the queue\\n        for (let i = 0; i < 50; i++) {\\n            const availableThreads = await getAvailableThreads();\\n            let hackSentSuccess = false;\\n            if (availableThreads <= 0) {\\n                //dprint(ns, \\\"No threads available\\\")\\n                break;\\n            }\\n            let potentialHack = [];\\n            for (const hackType of HACK_MODE[currentHackMode]) {\\n                potentialHack.push(...HackAlgorithm[hackType](ns, currentHack, hackedHost, availableThreads));\\n            }\\n            potentialHack.sort(hackSorter);\\n            for (const topHack of potentialHack) {\\n                if (!enoughRam(topHack.hackType))\\n                    continue;\\n                if (currentHack.filter(h => h.host === topHack.host).length > 0)\\n                    continue;\\n                // Start the hack\\n                if (await startHack(topHack)) {\\n                    hackSentSuccess = true;\\n                    break;\\n                }\\n                //}\\n            }\\n            if (!hackSentSuccess) {\\n                dprint(ns, \\\"No more hack\\\");\\n                break;\\n            }\\n            await ns.sleep(100);\\n        }\\n        dprint(ns, \\\"Hack sending loop done.\\\");\\n        if (currentHack.length < 1) {\\n            dprint(ns, \\\"No hack successfully started\\\");\\n        }\\n    }\\n    async function getAvailableThreads() {\\n        // Get available threads amount\\n        const messageFilter = m => m.payload.action === Action.threadsAvailable;\\n        const response = await messageHandler.sendAndWait(ChannelName.threadManager, new Payload(Action.getThreadsAvailable), null, true, messageFilter);\\n        //dprint(ns, \\\"Getting available threads: \\\" + response[0].payload.info)\\n        return response[0].payload.info;\\n    }\\n    async function startHack(hack) {\\n        dprint(ns, \\\"=> \\\" + hack.hackType + \\\" to \\\" + hack.host + \\\" (RV: \\\" + Math.round(hack.relativeValue * 1000) + \\\")\\\");\\n        let executed = 0;\\n        currentHackId++;\\n        hack.id = currentHackId;\\n        for (let i = 0; i < 50; i++) {\\n            executed = ns.exec(HACKING_CONDUCTOR[hack.hackType], HACKING_SERVER, 1, JSON.stringify(hack), currentHackId);\\n            if (executed > 0) {\\n                hack.pid = executed;\\n                break;\\n            }\\n            await ns.sleep(100);\\n        }\\n        if (executed === 0) {\\n            dprint(ns, \\\"Unable to start hack, process not starting.\\\");\\n            return false;\\n        }\\n        // Awaiting hack to start before continuing, could probably be skipped when everything is more stable\\n        let messageFilter = (m) => m.payload.action === Action.hackReady;\\n        const response = await messageHandler.waitForAnswer(messageFilter, 15000);\\n        if (response.length === 0) {\\n            dprint(ns, \\\"Hack got stuck somewhere.\\\");\\n            return false;\\n        }\\n        if (response[0].payload.info === -1) {\\n            dprint(ns, \\\"Unable to start hack, lack of threads\\\");\\n            return false;\\n        }\\n        hack.startTime = Date.now();\\n        currentHack.push(hack);\\n        return true;\\n    }\\n    async function requestPause(message) {\\n        dprint(ns, \\\"Pause requested\\\");\\n        pauseRequested = true;\\n        for (const hack of currentHack) {\\n            await messageHandler.sendMessage(ChannelName.hackConductor, new Payload(Action.stop), hack.id);\\n        }\\n    }\\n    async function kill(message) {\\n        dprint(ns, \\\"Kill requested\\\");\\n        pauseRequested = true;\\n        killRequested = true;\\n        for (const hack of currentHack) {\\n            await messageHandler.sendMessage(ChannelName.hackConductor, new Payload(Action.kill), hack.id);\\n        }\\n    }\\n}\\n\",\"filename\":\"/Orchestrator/HackManager/manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.95,\"server\":\"home\",\"moduleSequenceNumber\":3120,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport { MessageHandler, Payload } from \\\"/Orchestrator/MessageManager/class\\\";\\nimport { Action, ChannelName } from \\\"/Orchestrator/MessageManager/enum\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"sleep\\\");\\n    const mySelf = ChannelName.hackScript;\\n    const target = ns.args[0];\\n    const originId = ns.args[1];\\n    const messageHandler = new MessageHandler(ns, mySelf);\\n    const results = await ns.grow(target);\\n    await messageHandler.sendMessage(ChannelName.hackConductor, new Payload(Action.growScriptDone, results), originId);\\n}\\n\",\"filename\":\"/Orchestrator/HackManager/script/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":3121,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport { MessageHandler, Payload } from \\\"/Orchestrator/MessageManager/class\\\";\\nimport { Action, ChannelName } from \\\"/Orchestrator/MessageManager/enum\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"sleep\\\");\\n    const mySelf = ChannelName.hackScript;\\n    const target = ns.args[0];\\n    const originId = ns.args[1];\\n    const messageHandler = new MessageHandler(ns, mySelf);\\n    const results = await ns.hack(target);\\n    await messageHandler.sendMessage(ChannelName.hackConductor, new Payload(Action.hackScriptDone, results), originId);\\n}\\n\",\"filename\":\"/Orchestrator/HackManager/script/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":3122,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport { MessageHandler, Payload } from \\\"/Orchestrator/MessageManager/class\\\";\\nimport { Action, ChannelName } from \\\"/Orchestrator/MessageManager/enum\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"sleep\\\");\\n    const mySelf = ChannelName.hackScript;\\n    const target = ns.args[0];\\n    const originId = ns.args[1];\\n    const messageHandler = new MessageHandler(ns, mySelf);\\n    const results = await ns.weaken(target);\\n    await messageHandler.sendMessage(ChannelName.hackConductor, new Payload(Action.weakenScriptDone, results), originId);\\n}\\n\",\"filename\":\"/Orchestrator/HackManager/script/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":3123,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport { MessageHandler, Payload } from \\\"/Orchestrator/MessageManager/class\\\";\\nimport { Action, ChannelName } from \\\"/Orchestrator/MessageManager/enum\\\";\\nimport { dprint } from \\\"/Orchestrator/Common/Dprint\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"sleep\\\");\\n    const mySelf = ChannelName.hackScript;\\n    const target = ns.args[0];\\n    const originId = ns.args[1];\\n    const myId = ns.args[2];\\n    const messageHandler = new MessageHandler(ns, mySelf, myId);\\n    let stopRequest = false;\\n    let cycle = 0;\\n    dprint(ns, \\\"Starting\\\");\\n    while (!stopRequest) {\\n        dprint(ns, \\\"New cycle: \\\" + cycle);\\n        const responses = await messageHandler.getMessagesInQueue();\\n        if (responses.length > 0) {\\n            for (const response of responses) {\\n                if (response.payload.action === Action.stop) {\\n                    stopRequest = true;\\n                }\\n            }\\n        }\\n        const results = await ns.weaken(target);\\n        dprint(ns, \\\"Weaken: \\\" + results);\\n        await messageHandler.sendMessage(ChannelName.hackConductor, new Payload(Action.weakenScriptDone, results), originId);\\n        cycle++;\\n    }\\n}\\n\",\"filename\":\"/Orchestrator/HackManager/script/xp.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":3124,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Action, ChannelName } from \\\"/Orchestrator/MessageManager/enum\\\";\\nexport const NULL_PORT_DATA = \\\"NULL PORT DATA\\\";\\nexport class Payload {\\n    constructor(action, info, extra) {\\n        this.action = action;\\n        this.info = info || null;\\n        this.extra = extra !== undefined ? extra : null;\\n    }\\n}\\nexport class Message {\\n    constructor(comPort, origin, destination, payload, originId = null, destinationId = null, sentTime = null, dispatchedTime = null) {\\n        this.origin = origin;\\n        this.destination = destination;\\n        this.payload = payload;\\n        this.originId = originId;\\n        this.destinationId = destinationId;\\n        this.comPort = comPort;\\n        this.sentTime = sentTime;\\n        this.dispatchedTime = dispatchedTime;\\n    }\\n    get string() {\\n        return JSON.stringify({\\n            origin: this.origin,\\n            destination: this.destination,\\n            payload: this.payload,\\n            originId: this.originId,\\n            destinationId: this.destinationId,\\n            comPort: this.comPort,\\n            sentTime: this.sentTime,\\n            dispatchedTime: this.dispatchedTime\\n        });\\n    }\\n    static fromJSON(json) {\\n        //console.log(\\\"Parsing JSON: \\\" + json)\\n        const { origin, destination, payload, originId, destinationId, comPort, sentTime, dispatchedTime } = JSON.parse(json);\\n        return new Message(comPort, origin, destination, payload, originId, destinationId, sentTime, dispatchedTime);\\n    }\\n}\\nexport class MessageHandler {\\n    constructor(ns, origin, originId = null) {\\n        this.origin = origin;\\n        this.ns = ns;\\n        this.originId = originId;\\n        this.messageQueue = [];\\n        this.messageChannel = Math.ceil(Math.random() * 20);\\n        //this.messageChannel = CommunicationChannels[Math.floor(Math.random() * CommunicationChannels.length)]\\n    }\\n    async sendMessage(destination, payload, destinationId = null) {\\n        let newMessage = new Message(this.messageChannel, this.origin, destination, payload, this.originId, destinationId);\\n        newMessage.sentTime = Date.now();\\n        //console.log(\\\"Sending message: \\\" + newMessage.string)\\n        let ntry = 10;\\n        for (let i = 0; i < ntry; i++) {\\n            const messageWritten = await this.ns.tryWritePort(this.messageChannel, newMessage.string);\\n            if (messageWritten)\\n                return;\\n            await this.ns.sleep(100);\\n        }\\n        this.ns.print(\\\"MESSAGE LOST: \\\" + newMessage.string);\\n    }\\n    async clearMyMessage() {\\n        await this.sendMessage(ChannelName.messageManager, new Payload(Action.clearMyMessage));\\n    }\\n    async checkMessage(filter) {\\n        const payload = filter ? new Payload(Action.messageRequest, filter.toString()) : new Payload(Action.messageRequest);\\n        await this.sendMessage(ChannelName.messageManager, payload);\\n        let numberTry = 0;\\n        while (numberTry < 100) {\\n            let response = this.ns.peek(this.messageChannel);\\n            if (response === NULL_PORT_DATA) {\\n                await this.ns.sleep(100);\\n                numberTry++;\\n                continue;\\n            }\\n            let parsedMessage = Message.fromJSON(response);\\n            if (parsedMessage.destination === this.origin && parsedMessage.destinationId === this.originId) {\\n                this.ns.readPort(this.messageChannel);\\n                if (parsedMessage.payload.action === Action.noMessage) {\\n                    break;\\n                }\\n                this.messageQueue.push(parsedMessage);\\n            }\\n            await this.ns.sleep(10);\\n        }\\n    }\\n    async popLastMessage() {\\n        await this.checkMessage();\\n        const response = this.messageQueue.splice(0, 1);\\n        if (response) {\\n            return response;\\n        }\\n        return [];\\n    }\\n    async getMessagesInQueue(filter) {\\n        await this.checkMessage(filter);\\n        let messagesToReturn = filter ? this.messageQueue.filter(filter) : this.messageQueue;\\n        this.messageQueue = filter ? this.messageQueue.filter(m => !filter(m)) : [];\\n        return messagesToReturn;\\n    }\\n    async waitForAnswer(filter, timeToWait = 10000) {\\n        const numberOfCycle = Math.floor(timeToWait / 100);\\n        for (let i = 0; i < numberOfCycle; i++) {\\n            //while(true) {\\n            let response = filter ? await this.getMessagesInQueue(filter) : await this.popLastMessage();\\n            if (response.length > 0) {\\n                return response;\\n            }\\n            await this.ns.sleep(100);\\n        }\\n        //this.ns.tprint(\\\"Expected message not received!\\\")\\n        return [];\\n    }\\n    async sendAndWait(destination, payload, destinationId = null, retry = false, filter) {\\n        let numberOfTry = 1;\\n        if (retry) {\\n            numberOfTry = 10;\\n        }\\n        for (let i = 0; i < numberOfTry; i++) {\\n            await this.sendMessage(destination, payload, destinationId);\\n            const response = await this.waitForAnswer(filter);\\n            if (response.length > 0) {\\n                return response;\\n            }\\n            await this.ns.sleep(100);\\n        }\\n        return [];\\n    }\\n}\\n\",\"filename\":\"/Orchestrator/MessageManager/class.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":3125,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// export enum Channel {\\n//     messageManager = 1, // Message Manager Port [DEPRECATED]\\n//     threadManager = 2, // Thread Manager Port\\n//     serverManager = 3, // Server Manager Port\\n//     hackManager = 4, // Hack Manager Port\\n//     targetManager = 5, // Target Manager Port\\n//     hackConductor = 6, // Hack Port\\n//     hackScript = 8, // Script Port\\n//     consoleLink = 9, // Console Port\\n//     bootScript = 10, // Boot Script\\n//     communication_1 = 16, // General communication\\n//     communication_2 = 17,\\n//     communication_3 = 18,\\n//     communication_4 = 19,\\n//     communication_5 = 20\\n// }\\nexport var ChannelName;\\n(function (ChannelName) {\\n    ChannelName[\\\"messageManager\\\"] = \\\"messageManager\\\";\\n    ChannelName[\\\"threadManager\\\"] = \\\"threadManager\\\";\\n    ChannelName[\\\"serverManager\\\"] = \\\"serverManager\\\";\\n    ChannelName[\\\"hackManager\\\"] = \\\"hackManager\\\";\\n    ChannelName[\\\"targetManager\\\"] = \\\"targetManager\\\";\\n    ChannelName[\\\"hackConductor\\\"] = \\\"hackConductor\\\";\\n    ChannelName[\\\"hackScript\\\"] = \\\"hackScript\\\";\\n    ChannelName[\\\"consoleLink\\\"] = \\\"consoleLink\\\";\\n    ChannelName[\\\"bootScript\\\"] = \\\"bootScript\\\";\\n    ChannelName[\\\"shareScript\\\"] = \\\"shareScript\\\";\\n})(ChannelName || (ChannelName = {}));\\nexport var Action;\\n(function (Action) {\\n    // Thread Manager Actions\\n    Action[\\\"threads\\\"] = \\\"threads\\\";\\n    Action[\\\"threadsAvailable\\\"] = \\\"threadsAvailable\\\";\\n    Action[\\\"getThreads\\\"] = \\\"getThreads\\\";\\n    Action[\\\"getThreadsAvailable\\\"] = \\\"getThreadsAvailable\\\";\\n    Action[\\\"freeThreads\\\"] = \\\"freeThreads\\\";\\n    Action[\\\"updateHost\\\"] = \\\"updateHost\\\";\\n    Action[\\\"consoleThreadsUse\\\"] = \\\"consoleThreadsUse\\\";\\n    Action[\\\"lockHost\\\"] = \\\"lockHost\\\";\\n    Action[\\\"hostLocked\\\"] = \\\"hostLocked\\\";\\n    Action[\\\"getTotalThreads\\\"] = \\\"getTotalThreads\\\";\\n    Action[\\\"totalThreads\\\"] = \\\"totalThreads\\\";\\n    Action[\\\"useShareSwitch\\\"] = \\\"useShareSwitch\\\";\\n    // Hack Manager Actions\\n    Action[\\\"hackDone\\\"] = \\\"hackDone\\\";\\n    Action[\\\"hackReady\\\"] = \\\"hackRead\\\";\\n    Action[\\\"hackScriptDone\\\"] = \\\"hackScriptDone\\\";\\n    Action[\\\"weakenScriptDone\\\"] = \\\"weakenScriptDone\\\";\\n    Action[\\\"growScriptDone\\\"] = \\\"growScriptDone\\\";\\n    Action[\\\"hackPaused\\\"] = \\\"hackPaused\\\";\\n    Action[\\\"hackResume\\\"] = \\\"hackResume\\\";\\n    Action[\\\"printHacks\\\"] = \\\"printHacks\\\";\\n    Action[\\\"printRunningHacks\\\"] = \\\"printRunningHacks\\\";\\n    Action[\\\"switchHackMode\\\"] = \\\"switchHackMode\\\";\\n    // Target Manager Actions\\n    Action[\\\"addHost\\\"] = \\\"addHost\\\";\\n    Action[\\\"getHostList\\\"] = \\\"getHostList\\\";\\n    // General Actions\\n    Action[\\\"stop\\\"] = \\\"stop\\\";\\n    Action[\\\"pause\\\"] = \\\"pause\\\";\\n    Action[\\\"kill\\\"] = \\\"kill\\\";\\n    Action[\\\"resume\\\"] = \\\"resume\\\";\\n    Action[\\\"messageRequest\\\"] = \\\"messageRequest\\\";\\n    Action[\\\"noMessage\\\"] = \\\"noMessage\\\";\\n    // Message Manager Actions\\n    Action[\\\"dumpQueue\\\"] = \\\"dumpQueue\\\";\\n    Action[\\\"clearMyMessage\\\"] = \\\"clearMyMessage\\\";\\n})(Action || (Action = {}));\\n\",\"filename\":\"/Orchestrator/MessageManager/enum.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":3126,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport { Message, NULL_PORT_DATA, Payload } from \\\"/Orchestrator/MessageManager/class\\\";\\nimport { Action, ChannelName } from \\\"/Orchestrator/MessageManager/enum\\\";\\nimport { dprint } from \\\"/Orchestrator/Common/Dprint\\\";\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    emptyPorts();\\n    let messageQueue = [];\\n    while (true) {\\n        await receiveMessage();\\n        await checkMessageRequest();\\n        await checkConsoleCall();\\n        await checkClearMessage();\\n        await ns.sleep(10);\\n    }\\n    async function checkConsoleCall() {\\n        const dumpQueue = extractMessage(m => m.payload.action === Action.dumpQueue);\\n        if (dumpQueue.length > 0) {\\n            for (const message of messageQueue) {\\n                ns.tprint(\\\"From: \\\" + message.origin + \\\":\\\" + message.originId + \\\" -> To:\\\" + message.destination + \\\":\\\" + message.destinationId + \\\" > Payload: \\\" + JSON.stringify(message.payload));\\n            }\\n        }\\n    }\\n    async function checkClearMessage() {\\n        const messages = extractMessage(m => m.payload.action === Action.clearMyMessage);\\n        for (const message of messages) {\\n            messageQueue = messageQueue.filter(m => m.destinationId !== message.originId && m.destination !== message.origin);\\n        }\\n    }\\n    function extractMessage(filter) {\\n        const extractedMessage = messageQueue.filter(filter);\\n        messageQueue = messageQueue.filter(m => !filter(m));\\n        return extractedMessage;\\n    }\\n    async function checkMessageRequest() {\\n        const requests = extractMessage(m => m.payload.action === Action.messageRequest);\\n        for (const request of requests) {\\n            const port = request.comPort;\\n            const requesterFilter = (m) => (m.destination === request.origin && m.destinationId === request.originId);\\n            let extraFilter = (m) => true;\\n            if (request.payload.info) {\\n                extraFilter = eval(request.payload.info);\\n            }\\n            const messageForRequester = extractMessage(requesterFilter);\\n            const messageToSend = messageForRequester.filter(extraFilter);\\n            const messageToKeep = messageForRequester.filter(m => !extraFilter(m));\\n            messageQueue.push(...messageToKeep);\\n            if (messageToSend.length > 0) {\\n                await dispatchMessage(messageToSend, port);\\n            }\\n            await dispatchMessage([new Message(request.comPort, ChannelName.messageManager, request.origin, new Payload(Action.noMessage), null, request.originId)], port);\\n        }\\n    }\\n    async function dispatchMessage(messageToSend, port) {\\n        for (const message of messageToSend) {\\n            message.dispatchedTime = Date.now();\\n            message.comPort = port;\\n            const writtenMessage = await ns.tryWritePort(message.comPort, message.string);\\n            if (!writtenMessage) {\\n                dprint(ns, \\\"Sending failed: \\\" + message.destination + \\\":\\\" + message.destinationId + \\\"(Port: \\\" + message.comPort + \\\"). Readded to queue.\\\");\\n                messageQueue.push(message);\\n            }\\n        }\\n    }\\n    async function receiveMessage() {\\n        for (let port = 1; port < 21; port++) {\\n            const response = ns.peek(port);\\n            if (response !== NULL_PORT_DATA) {\\n                let parsedResponse = Message.fromJSON(response);\\n                // If the message has been on top of the port queue for more than 1 second we push it at the back of the queue\\n                if (parsedResponse.dispatchedTime && (Date.now() - parsedResponse.dispatchedTime) > 1000) {\\n                    if ((Date.now() - parsedResponse.dispatchedTime) > 1000) {\\n                        ns.readPort(port);\\n                        await dispatchMessage([parsedResponse], parsedResponse.comPort);\\n                        dprint(ns, \\\"Stale to: \\\" + parsedResponse.destination + \\\":\\\" + parsedResponse.destinationId + \\\" Action: \\\" + parsedResponse.payload.action);\\n                    }\\n                    else if ((Date.now() - parsedResponse.dispatchedTime) > 60000) {\\n                        ns.readPort(port);\\n                        dprint(ns, \\\"Discarded to: \\\" + parsedResponse.destination + \\\":\\\" + parsedResponse.destinationId + \\\" Action: \\\" + parsedResponse.payload.action);\\n                    }\\n                    // If the message has never been dispatched we read it\\n                }\\n                else if (!parsedResponse.dispatchedTime) {\\n                    ns.readPort(port);\\n                    messageQueue.push(parsedResponse);\\n                }\\n            }\\n        }\\n    }\\n    function emptyPorts() {\\n        for (let i = 1; i < 21; i++) {\\n            while (true) {\\n                if (ns.readPort(i) === NULL_PORT_DATA) {\\n                    break;\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"filename\":\"/Orchestrator/MessageManager/manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":3127,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { HACKING_SCRIPTS, IMPORT_TO_COPY, KILL_MESSAGE, MAX_SERVER_RAM, MIN_SERVER_FOR_UPDATE, SERVER_INITIAL_RAM } from \\\"/Orchestrator/Config/Config\\\";\\nimport { Action, ChannelName } from \\\"/Orchestrator/MessageManager/enum\\\";\\nimport { MessageHandler, Payload } from \\\"/Orchestrator/MessageManager/class\\\";\\nimport { copyFile } from \\\"/Orchestrator/Common/GenericFunctions\\\";\\nimport { dprint } from \\\"/Orchestrator/Common/Dprint\\\";\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getPurchasedServerLimit');\\n    ns.disableLog('getPurchasedServers');\\n    ns.disableLog('getPurchasedServerCost');\\n    ns.disableLog('getServerMoneyAvailable');\\n    ns.disableLog('serverExists');\\n    ns.disableLog('purchaseServer');\\n    ns.disableLog('deleteServer');\\n    ns.disableLog('getServerMaxRam');\\n    ns.disableLog('killall');\\n    ns.disableLog('scp');\\n    const mySelf = ChannelName.serverManager;\\n    const messageHandler = new MessageHandler(ns, mySelf);\\n    let hackPaused = false;\\n    let everythingMaxed = false;\\n    let taggedForUpdate = [];\\n    while (true) {\\n        if (everythingMaxed) {\\n            dprint(ns, \\\"All server maxed out, quitting.\\\");\\n            break;\\n        }\\n        if (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\n            dprint(ns, \\\"Max server not hit\\\");\\n            while (ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(SERVER_INITIAL_RAM) && ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\n                const numberOfServer = ns.getPurchasedServers().length;\\n                const hostname = \\\"pserv-\\\" + numberOfServer;\\n                await buyServer(hostname, SERVER_INITIAL_RAM);\\n            }\\n            dprint(ns, \\\"Insufficient funds.\\\");\\n        }\\n        if (ns.getPurchasedServers().length == ns.getPurchasedServerLimit()) {\\n            // Try to upgrade the servers\\n            dprint(ns, \\\"Max server hit. Upgrading Server\\\");\\n            await upgradeServer();\\n        }\\n        // if (hackPaused) {\\n        //     dprint(ns, \\\"Resuming.\\\")\\n        //     await messageHandler.sendMessage(ChannelName.hackManager, new Payload(Action.hackResume))\\n        //     hackPaused = false\\n        // }\\n        for (let i = 0; i < 60; i++) {\\n            //if (await checkForKill()) return\\n            await ns.sleep(1000);\\n        }\\n    }\\n    async function checkForKill() {\\n        const killMessage = await messageHandler.getMessagesInQueue(KILL_MESSAGE);\\n        if (killMessage.length > 0) {\\n            dprint(ns, \\\"Kill request\\\");\\n            return true;\\n        }\\n        return false;\\n    }\\n    async function upgradeServer() {\\n        let serverArray = ns.getPurchasedServers();\\n        let smallestRamValue = ns.getServerMaxRam(serverArray[1]);\\n        let smallestServers = [];\\n        // Finding what are the smallest servers\\n        for (let j = 1; j < serverArray.length; j++) {\\n            let curServer = serverArray[j];\\n            if (ns.getServerMaxRam(curServer) < smallestRamValue) {\\n                smallestServers = [];\\n                smallestRamValue = ns.getServerMaxRam(curServer);\\n            }\\n            if (ns.getServerMaxRam(curServer) == smallestRamValue) {\\n                smallestServers.push(curServer);\\n            }\\n        }\\n        dprint(ns, \\\"Smallest servers have \\\" + smallestRamValue + \\\"gb. Count(\\\" + smallestServers.length + \\\")\\\");\\n        // Upgrading the server\\n        let priceCheck = ns.getPurchasedServerCost(smallestRamValue * 2);\\n        if (!Number.isFinite(priceCheck) || (smallestRamValue >= MAX_SERVER_RAM && MAX_SERVER_RAM !== -1)) {\\n            everythingMaxed = true;\\n            return;\\n        }\\n        if (ns.getServerMoneyAvailable(\\\"home\\\") >= Math.min(priceCheck * MIN_SERVER_FOR_UPDATE, priceCheck * smallestServers.length)) {\\n            for (let i = 0; i < smallestServers.length; i++) {\\n                dprint(ns, \\\"Trying to update: \\\" + serverArray[i]);\\n                if (ns.getServerMoneyAvailable(\\\"home\\\") > priceCheck) {\\n                    await buyServer(serverArray[i], smallestRamValue * 2);\\n                }\\n                else {\\n                    dprint(ns, \\\"Not enough money. Requiring \\\" + priceCheck);\\n                    return;\\n                }\\n            }\\n        }\\n        else {\\n            dprint(ns, \\\"Not enough money to upgrade the minimum amount of server. \\\");\\n            return;\\n        }\\n    }\\n    async function buyServer(hostname, ram) {\\n        // Note: No need to ask for pause if we go through the thread lock method\\n        // if (!hackPaused) {\\n        //     await messageHandler.sendMessage(ChannelName.hackManager, new Payload(Action.pause))\\n        //     dprint(ns, \\\"Pause requested awaiting answer\\\")\\n        //     await messageHandler.waitForAnswer(m => m.payload.action === Action.hackPaused)\\n        //     hackPaused = true\\n        // }\\n        const moneyAvailable = ns.getServerMoneyAvailable(\\\"home\\\");\\n        const cost = ns.getPurchasedServerCost(ram);\\n        if (ns.serverExists(hostname)) {\\n            // Note: this kind of structure may cause a long delay since some threads can take a while to free\\n            // it is therefore blocking. We could possibly implement a non blocking method\\n            if (ns.getServerUsedRam(hostname) > 0) {\\n                await messageHandler.sendMessage(ChannelName.threadManager, new Payload(Action.lockHost, hostname));\\n                ns.print(\\\"Waiting for server to empty.\\\");\\n                while (true) {\\n                    const response = await messageHandler.waitForAnswer((m) => true, 10 * 60 * 1000);\\n                    if (response.length > 0) {\\n                        break;\\n                    }\\n                    await ns.sleep(1000);\\n                }\\n            }\\n            if (ns.getServerUsedRam(hostname) > 0) {\\n                ns.print(\\\"Script are still running.\\\");\\n                return;\\n            }\\n            if (moneyAvailable > cost) {\\n                ns.deleteServer(hostname);\\n                dprint(ns, \\\"Deleted server \\\" + hostname);\\n            }\\n        }\\n        if (moneyAvailable > cost) {\\n            let newServer = ns.purchaseServer(hostname, ram);\\n            await copyFile(ns, Object.values(HACKING_SCRIPTS), newServer);\\n            await copyFile(ns, IMPORT_TO_COPY, newServer);\\n            dprint(ns, \\\"Bough new server \\\" + newServer + \\\" with \\\" + ram + \\\" gb of ram\\\");\\n            await messageHandler.sendMessage(ChannelName.threadManager, new Payload(Action.updateHost, hostname));\\n        }\\n    }\\n}\\n\",\"filename\":\"/Orchestrator/ServerManager/manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":11.8,\"server\":\"home\",\"moduleSequenceNumber\":3128,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport { ChannelName } from \\\"/Orchestrator/MessageManager/enum\\\";\\nimport { MessageHandler } from \\\"/Orchestrator/MessageManager/class\\\";\\nimport { formatMoney } from \\\"/Orchestrator/Common/GenericFunctions\\\";\\nimport { COMMIT_CRIME, PROGRAMS } from \\\"/Orchestrator/Config/Singularity\\\";\\nimport { dprint } from \\\"/Orchestrator/Common/Dprint\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"sleep\\\");\\n    ns.disableLog(\\\"scp\\\");\\n    ns.disableLog(\\\"scan\\\");\\n    ns.disableLog(\\\"getHackingLevel\\\");\\n    ns.disableLog(\\\"getServerRequiredHackingLevel\\\");\\n    ns.disableLog(\\\"getServerNumPortsRequired\\\");\\n    ns.disableLog(\\\"nuke\\\");\\n    const mySelf = ChannelName.targetManager;\\n    const messageHandler = new MessageHandler(ns, mySelf);\\n    const currentHost = ns.getHostname();\\n    const backdooredHost = [];\\n    const stuffBough = [];\\n    let buyStuffSwitch = true;\\n    checkAlreadyBought();\\n    let checkedHost = [];\\n    while (true) {\\n        dprint(ns, \\\"Scanning network\\\");\\n        checkedHost = [];\\n        await scanAll(currentHost);\\n        ns.connect(\\\"home\\\");\\n        dprint(ns, \\\"Finshing scan. Waiting for next cycle.\\\");\\n        buyStuffSwitch && await buyStuff();\\n        for (let i = 0; i < 4; i++) {\\n            ns.tprint(COMMIT_CRIME);\\n            if (COMMIT_CRIME) {\\n                ns.tprint(\\\"Criming!\\\");\\n                await commitCrime();\\n            }\\n            //if (await checkForKill(ns, messageHandler)) return\\n            await ns.sleep(250);\\n        }\\n        ns.tprint(\\\"Pausing crime for 10 seconds, now it is time to kill the script.\\\");\\n        await ns.sleep(10 * 1000);\\n    }\\n    function checkAlreadyBought() {\\n        if (ns.scan(\\\"home\\\").includes(\\\"darkweb\\\"))\\n            stuffBough.push(\\\"tor\\\");\\n        for (const program of PROGRAMS) {\\n            if (ns.fileExists(program.name, \\\"home\\\"))\\n                stuffBough.push(program.name);\\n        }\\n        if (stuffBough.length === PROGRAMS.length + 1)\\n            buyStuffSwitch = false;\\n    }\\n    async function buyStuff() {\\n        for (const program of PROGRAMS) {\\n            if ((stuffBough.includes(\\\"tor\\\") || program.name === \\\"tor\\\") && !stuffBough.includes(program.name)) {\\n                const moneyAvailable = ns.getServerMoneyAvailable(\\\"home\\\");\\n                if (program.price <= moneyAvailable) {\\n                    if (program.name === \\\"tor\\\") {\\n                        ns.purchaseTor();\\n                    }\\n                    else {\\n                        !ns.fileExists(program.name, \\\"home\\\") && ns.purchaseProgram(program.name);\\n                    }\\n                    dprint(ns, \\\"Bought: \\\" + program.name);\\n                    stuffBough.push(program.name);\\n                }\\n            }\\n        }\\n    }\\n    async function scanAll(base_host) {\\n        let hostArray = ns.scan(base_host);\\n        for (const host of hostArray) {\\n            if (!checkedHost.includes(host) && !host.includes(\\\"pserv-\\\")) {\\n                checkedHost.push(host);\\n                ns.connect(host);\\n                if (!backdooredHost.includes(host) && ns.hasRootAccess(host)) {\\n                    await ns.installBackdoor();\\n                    ns.print(\\\"Backdoored: \\\" + host);\\n                    backdooredHost.push(host);\\n                }\\n                await ns.sleep(100);\\n                await scanAll(host);\\n                ns.connect(base_host);\\n            }\\n        }\\n    }\\n    // From https://steamlists.com/bitburner-crime-script-code-odds-of-success-requirements/\\n    async function commitCrime() {\\n        const crimes = [\\n            \\\"heist\\\",\\n            \\\"assassination\\\",\\n            \\\"kidnap\\\",\\n            \\\"grand theft auto\\\",\\n            \\\"homicide\\\",\\n            \\\"larceny\\\",\\n            \\\"mug someone\\\",\\n            \\\"rob store\\\",\\n            \\\"shoplift\\\",\\n        ];\\n        if (ns.isBusy())\\n            return;\\n        // Calculate the risk value of all crimes\\n        const choices = crimes.map((crime) => {\\n            const crimeStats = ns.getCrimeStats(crime); // Let us look at the important bits\\n            const crimeChance = ns.getCrimeChance(crime); // We need to calculate if its worth it\\n            /** Using probabilty(odds) to calculate the \\\"risk\\\" to get the best reward\\n             * Risk Value = Money Earned * Odds of Success(P(A) / ~P(A)) / Time taken\\n             *\\n             * Larger risk values indicate a better choice\\n             */\\n            const crimeValue = (crimeStats.money * Math.log10(crimeChance / (1 - crimeChance + Number.EPSILON))) /\\n                crimeStats.time;\\n            return { crime: crime, relativeValue: crimeValue, stats: crimeStats };\\n        });\\n        choices.sort(choiceSorter);\\n        ns.commitCrime(choices[0].crime);\\n        ns.print(\\\"Crime: \\\" + choices[0].crime + \\\" (RV: \\\" + choices[0].relativeValue.toPrecision(3) + \\\"): \\\" + formatMoney(choices[0].stats.money));\\n    }\\n}\\nexport const choiceSorter = (a, b) => {\\n    if (a.relativeValue < b.relativeValue) {\\n        return 1;\\n    }\\n    if (a.relativeValue > b.relativeValue) {\\n        return -1;\\n    }\\n    return 0;\\n};\\n\",\"filename\":\"/Orchestrator/SingularityManager/manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":26.75,\"server\":\"home\",\"moduleSequenceNumber\":3129,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"commitCrime\",\"cost\":5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getCrimeStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getCrimeChance\",\"cost\":5},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport { Action, ChannelName } from \\\"/Orchestrator/MessageManager/enum\\\";\\nimport { HACKING_SCRIPTS, HACKING_SERVER, IMPORT_TO_COPY, MANAGING_SERVER, PORT_CRACKER, } from \\\"/Orchestrator/Config/Config\\\";\\nimport { MessageHandler, Payload } from \\\"/Orchestrator/MessageManager/class\\\";\\nimport { copyFile } from \\\"/Orchestrator/Common/GenericFunctions\\\";\\nimport { dprint } from \\\"/Orchestrator/Common/Dprint\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"sleep\\\");\\n    ns.disableLog(\\\"scp\\\");\\n    ns.disableLog(\\\"scan\\\");\\n    ns.disableLog(\\\"getHackingLevel\\\");\\n    ns.disableLog(\\\"getServerRequiredHackingLevel\\\");\\n    ns.disableLog(\\\"getServerNumPortsRequired\\\");\\n    ns.disableLog(\\\"nuke\\\");\\n    const mySelf = ChannelName.targetManager;\\n    const messageHandler = new MessageHandler(ns, mySelf);\\n    const currentHost = ns.getHostname();\\n    const hackedHost = [];\\n    let checkedHost = [];\\n    let portOpener = [];\\n    while (true) {\\n        dprint(ns, \\\"Scanning network\\\");\\n        portOpener = buildPortOpener();\\n        checkedHost = [];\\n        await scan_all(currentHost);\\n        dprint(ns, \\\"Finshing scan. Waiting for next cycle.\\\");\\n        for (let i = 0; i < 60; i++) {\\n            //if (await checkForKill(ns, messageHandler)) return\\n            await ns.sleep(1000);\\n        }\\n    }\\n    async function scan_all(base_host) {\\n        let hostArray = ns.scan(base_host);\\n        for (let i = 0; i < hostArray.length; i++) {\\n            const host = hostArray[i];\\n            if (!checkedHost.includes(host) && !host.includes(\\\"pserv-\\\")) {\\n                checkedHost.push(host);\\n                if (checkHost(host) && !hackedHost.includes(host)) {\\n                    dprint(ns, \\\"Found new host: \\\" + host);\\n                    // We ns.rm before since there seems to be a bug with cached import: https://github.com/danielyxie/bitburner/issues/2413\\n                    if (host !== \\\"home\\\" && host !== HACKING_SERVER && host !== MANAGING_SERVER && !host.includes(\\\"pserv-\\\")) {\\n                        await prepareServer(host);\\n                    }\\n                    hackedHost.push(host);\\n                    await broadcastNewHost(host);\\n                }\\n                await ns.sleep(100);\\n                await scan_all(host);\\n            }\\n        }\\n    }\\n    function checkHost(host) {\\n        if (ns.hasRootAccess(host)) {\\n            // Already root\\n            return true;\\n        }\\n        if (ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(host)) {\\n            const requiredPort = ns.getServerNumPortsRequired(host);\\n            if (requiredPort <= portOpener.length) {\\n                // We have enough port cracker\\n                let portOpen = 0;\\n                while (portOpen < requiredPort) {\\n                    portOpener[portOpen](host);\\n                    portOpen++;\\n                }\\n            }\\n            else {\\n                // Not enough port cracker\\n                return false;\\n            }\\n            // Can be hacked\\n            ns.nuke(host);\\n            return true;\\n        }\\n        else {\\n            // Not enough hacking level\\n            return false;\\n        }\\n    }\\n    async function broadcastNewHost(host) {\\n        dprint(ns, \\\"Broadcasting host: \\\" + host);\\n        const payload = new Payload(Action.addHost, host);\\n        dprint(ns, \\\"Broadcasting to Thread Manager\\\");\\n        await messageHandler.sendMessage(ChannelName.threadManager, payload);\\n        dprint(ns, \\\"Broadcasting to Hack Manager\\\");\\n        await messageHandler.sendMessage(ChannelName.hackManager, payload);\\n    }\\n    async function prepareServer(host) {\\n        await copyFile(ns, Object.values(HACKING_SCRIPTS), host);\\n        await copyFile(ns, IMPORT_TO_COPY, host);\\n    }\\n    function buildPortOpener() {\\n        const opener = [];\\n        for (let i = 0; i < PORT_CRACKER(ns).length; i++) {\\n            if (ns.fileExists(PORT_CRACKER(ns)[i].file)) {\\n                opener.push(PORT_CRACKER(ns)[i].function);\\n            }\\n        }\\n        return opener;\\n    }\\n}\\n\",\"filename\":\"/Orchestrator/TargetManager/manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.05,\"server\":\"home\",\"moduleSequenceNumber\":3130,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Payload } from \\\"/Orchestrator/MessageManager/class\\\";\\nimport { Action, ChannelName } from \\\"/Orchestrator/MessageManager/enum\\\";\\nimport { DEBUG } from \\\"/Orchestrator/Config/Debug\\\";\\nexport async function getThreads(ns, amount, messageHandler, extra) {\\n    const response = await messageHandler.sendAndWait(ChannelName.threadManager, new Payload(Action.getThreads, amount, extra), null, true, m => m.payload.action === Action.threads);\\n    if (response.length === 0) {\\n        ns.tprint(\\\"Did not receive any thread answers!\\\");\\n        return {};\\n    }\\n    DEBUG && ns.print(\\\"Got threads: \\\");\\n    DEBUG && ns.print(response[0].payload.info);\\n    return response[0].payload.info;\\n}\\nexport async function freeThreads(ns, allocatedThreads, messageHandler) {\\n    DEBUG && ns.print(\\\"Freeing threads\\\");\\n    await messageHandler.sendMessage(ChannelName.threadManager, new Payload(Action.freeThreads, allocatedThreads));\\n}\\n\",\"filename\":\"/Orchestrator/ThreadManager/common.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":3131,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport { MessageHandler, Payload, } from \\\"/Orchestrator/MessageManager/class\\\";\\nimport { HACKING_SCRIPTS, HACKING_SERVER, MANAGING_SERVER, SHARING_SCRIPT, THREAD_SERVER, TIMEOUT_THRESHOLD, USE_SHARE, } from \\\"/Orchestrator/Config/Config\\\";\\nimport { Action, ChannelName } from \\\"/Orchestrator/MessageManager/enum\\\";\\nimport { dprint } from \\\"/Orchestrator/Common/Dprint\\\";\\nimport { DEBUG } from \\\"/Orchestrator/Config/Debug\\\";\\nexport class Thread {\\n    constructor(host, inUse) {\\n        this.host = host;\\n        this.inUse = inUse;\\n        this.locked = false;\\n        this.expectedRelease = null;\\n    }\\n}\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    ns.disableLog('getScriptRam');\\n    ns.disableLog('getServerMaxRam');\\n    ns.disableLog('getServerUsedRam');\\n    ns.disableLog('exec');\\n    const mySelf = ChannelName.threadManager;\\n    let threads = [];\\n    let killrequest = false;\\n    let lockedHost = [];\\n    let useShare = USE_SHARE;\\n    const messageActions = {\\n        [Action.getThreads]: getThreads,\\n        [Action.getThreadsAvailable]: getAvailableThreads,\\n        [Action.addHost]: addHost,\\n        [Action.freeThreads]: freeThreads,\\n        [Action.updateHost]: updateHost,\\n        [Action.kill]: kill,\\n        [Action.consoleThreadsUse]: consoleThreadsUse,\\n        [Action.lockHost]: lockHost,\\n        [Action.getTotalThreads]: getTotalThreads,\\n        [Action.useShareSwitch]: useShareSwitch,\\n    };\\n    const messageHandler = new MessageHandler(ns, mySelf);\\n    const ramChunk = Math.max(...Object.values(HACKING_SCRIPTS).map(script => ns.getScriptRam(script)));\\n    const shareChunk = ns.getScriptRam(SHARING_SCRIPT);\\n    while (true) {\\n        if (killrequest)\\n            break;\\n        const lastMessage = await messageHandler.popLastMessage();\\n        lastMessage.length > 0 && await messageActions[lastMessage[0].payload.action]?.(lastMessage[0]);\\n        //cleanup()\\n        await ns.sleep(100);\\n    }\\n    dprint(ns, \\\"Exiting\\\");\\n    function cleanup() {\\n        let orphanThreads = 0;\\n        for (let i = 0; i < threads.length; i++) {\\n            const threadIndex = threads.findIndex(t => (t.inUse && (t.expectedRelease && t.expectedRelease < Date.now())));\\n            if (threadIndex === -1)\\n                return;\\n            threads[threadIndex].inUse = false;\\n            threads[threadIndex].expectedRelease = null;\\n            orphanThreads++;\\n        }\\n        DEBUG && ns.tprint(\\\"Cleaned up \\\" + orphanThreads + \\\" orphan threads.\\\");\\n    }\\n    async function useShareSwitch(message) {\\n        useShare = !useShare;\\n        const hosts = [...new Set(threads.map(thread => thread.host))];\\n        for (const host of hosts) {\\n            killAndRestartShare(host);\\n        }\\n    }\\n    function killAndRestartShare(host) {\\n        const nbOfThreadsInUse = threads.filter(t => (t.host === host && t.inUse)).length;\\n        const nbOfShareThreads = Math.floor((ns.getServerMaxRam(host) - (nbOfThreadsInUse * ramChunk)) / shareChunk);\\n        ns.kill(SHARING_SCRIPT, host);\\n        if (!lockedHost.includes(host) && nbOfShareThreads > 0 && useShare) {\\n            ns.exec(SHARING_SCRIPT, host, nbOfShareThreads);\\n        }\\n    }\\n    async function addHost(message) {\\n        const host = message.payload.info;\\n        const hosts = [...new Set(threads.map(thread => thread.host))];\\n        // If the host is the one from which the Hack emanate we skip it\\n        if (host === HACKING_SERVER || host === MANAGING_SERVER || host === THREAD_SERVER)\\n            return;\\n        if (hosts.includes(host))\\n            await updateHost(message);\\n        const hostThreads = Math.floor(((ns.getServerMaxRam(host) - ns.getServerUsedRam(host)) / ramChunk));\\n        dprint(ns, \\\"Got new host: \\\" + host + \\\" with \\\" + hostThreads + \\\" threads\\\");\\n        for (let j = 0; j < hostThreads; j++)\\n            threads.push(new Thread(host, false));\\n        useShare && killAndRestartShare(host);\\n    }\\n    async function getTotalThreads(message) {\\n        const payload = new Payload(Action.totalThreads, threads.filter(t => !t.locked).length);\\n        await messageHandler.sendMessage(message.origin, payload, message.originId);\\n    }\\n    async function getAvailableThreads(message) {\\n        //dprint(ns, \\\"Got thread request from: \\\" + message.origin + \\\" for available threads\\\")\\n        let payload = new Payload(Action.threadsAvailable, 0);\\n        if (threads.length) {\\n            let availableThreads = threads.filter(thread => (!thread.inUse && !thread.locked)).length;\\n            payload = new Payload(Action.threadsAvailable, availableThreads);\\n        }\\n        await messageHandler.sendMessage(message.origin, payload, message.originId);\\n    }\\n    async function getThreads(message) {\\n        let number = message.payload.info;\\n        const exact = message.payload.extra?.['exact'] || false;\\n        const expectedTime = message.payload.extra?.['time'] || null;\\n        if (threads.length === 0) {\\n            dprint(ns, \\\"Thread manager not ready.\\\");\\n            await messageHandler.sendMessage(message.origin, new Payload(Action.threads, {}), message.originId);\\n            return;\\n        }\\n        const unusedThreads = threads.filter(thread => (!thread.inUse && !thread.locked));\\n        dprint(ns, \\\"Got thread request from: \\\" + message.originId + \\\" for \\\" + number + \\\" threads (Exact: \\\" + exact + \\\")\\\");\\n        // -1 will return all available threads [Deprecated]\\n        if (number === -1) {\\n            number = unusedThreads.length;\\n        }\\n        if (unusedThreads.length < number && exact) {\\n            dprint(ns, \\\"Not enough threads\\\");\\n            await messageHandler.sendMessage(message.origin, new Payload(Action.threads, {}), message.originId);\\n            return;\\n        }\\n        const allocatedThreads = unusedThreads.slice(0, number);\\n        allocatedThreads.map(thread => {\\n            thread.inUse = true;\\n            if (expectedTime)\\n                thread.expectedRelease = Date.now() + expectedTime + TIMEOUT_THRESHOLD;\\n        });\\n        const uniqueHost = [...new Set(allocatedThreads.map(thread => thread.host))];\\n        const allocatedThreadsByHost = uniqueHost.reduce((acc, cur) => {\\n            acc[cur] = allocatedThreads.filter(t => t.host == cur).length;\\n            return acc;\\n        }, {});\\n        if (useShare) {\\n            for (const host of Object.keys(allocatedThreadsByHost)) {\\n                killAndRestartShare(host);\\n            }\\n        }\\n        dprint(ns, \\\"Allocated \\\" + allocatedThreads.length + \\\" threads to hack \\\" + message.originId);\\n        await messageHandler.sendMessage(message.origin, new Payload(Action.threads, allocatedThreadsByHost), message.originId);\\n    }\\n    async function freeThreads(message) {\\n        dprint(ns, \\\"Received thread freeing request from \\\" + message.origin + \\\"(Origin ID: \\\" + message.originId + \\\")\\\");\\n        const threadsInfo = message.payload.info;\\n        for (const host of Object.keys(threadsInfo)) {\\n            const usedThreadFilter = t => (t.inUse && t.host === host);\\n            const usedThreads = threads.filter(usedThreadFilter); // We filter the used threads for the host\\n            threads = threads.filter(t => !usedThreadFilter(t)); // We remove those thread from the current pool\\n            const threadsToRelease = usedThreads.splice(0, threadsInfo[host]); // We remove the thread that we want to release\\n            threads.push(...usedThreads); // We read the still used threads in the pool\\n            const releasedThreads = threadsToRelease.map(t => {\\n                const thread = new Thread(t.host, false);\\n                thread.locked = t.locked;\\n                return thread;\\n            });\\n            threads.push(...releasedThreads);\\n            // for (let i = 0; i < threadsInfo[host]; i++) {\\n            //     const threadIndex = threads.findIndex(t => (t.inUse && t.host === host))\\n            //     if (threadIndex>=0) {\\n            //         threads[threadIndex].inUse = false\\n            //         threads[threadIndex].expectedRelease = null\\n            //     }\\n            // }\\n            dprint(ns, \\\"Deallocated \\\" + threadsInfo[host] + \\\" threads of \\\" + host);\\n            useShare && killAndRestartShare(host);\\n            await checkLockedStatus(host);\\n            await ns.sleep(100); // Throttle\\n        }\\n    }\\n    async function checkLockedStatus(hostname) {\\n        const hostThreads = threads.filter(t => (t.host === hostname));\\n        if (lockedHost.includes(hostname) && !hostThreads.some(t => t.inUse)) {\\n            await messageHandler.sendMessage(ChannelName.serverManager, new Payload(Action.hostLocked, hostname));\\n        }\\n    }\\n    async function updateHost(message) {\\n        dprint(ns, \\\"Updating threads amount on \\\" + message.payload.info);\\n        const host = message.payload.info;\\n        lockedHost = lockedHost.filter(h => h !== message.payload.info);\\n        threads = threads.filter(t => t.host !== host);\\n        await addHost(message);\\n    }\\n    async function kill() {\\n        dprint(ns, \\\"Kill request. Kill all threads\\\");\\n        const usedThreads = threads.filter(t => t.inUse = true);\\n        const uniqueHost = [...new Set(usedThreads.map(thread => thread.host))];\\n        for (const host of uniqueHost) {\\n            ns.killall(host);\\n        }\\n        killrequest = true;\\n    }\\n    async function consoleThreadsUse(message) {\\n        for (const host of [...new Set(threads.map(thread => thread.host))]) {\\n            const hostUsedRam = ns.getServerUsedRam(host);\\n            const hostMaxRam = ns.getServerMaxRam(host);\\n            const hostThreads = threads.filter(t => t.host === host);\\n            const hostThreadsInUse = hostThreads.filter(t => t.inUse);\\n            const numberOfBar = hostThreads.length ? Math.round((hostThreadsInUse.length / hostThreads.length * 20)) : 20;\\n            const numberOfDash = 20 - numberOfBar;\\n            const padding = 20 - host.length;\\n            const barSymbol = lockedHost.includes(host) ? \\\"X\\\" : \\\"|\\\";\\n            const dashSymbol = lockedHost.includes(host) ? \\\"*\\\" : \\\"-\\\";\\n            ns.tprint(host + \\\" \\\".repeat(padding) + \\\": [\\\" + barSymbol.repeat(numberOfBar) + dashSymbol.repeat(numberOfDash) + \\\"] (\\\" + hostThreadsInUse.length + \\\"/\\\" + hostThreads.length + \\\")  \\\" + hostUsedRam + \\\" GiB/\\\" + hostMaxRam + \\\" GiB\\\");\\n        }\\n    }\\n    async function lockHost(message) {\\n        const host = message.payload.info;\\n        lockedHost.push(host);\\n        useShare && killAndRestartShare(host);\\n        for (const thread of threads)\\n            if (thread.host === host)\\n                thread.locked = true;\\n        await checkLockedStatus(host);\\n    }\\n}\\n\",\"filename\":\"/Orchestrator/ThreadManager/manager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.75,\"server\":\"home\",\"moduleSequenceNumber\":3132,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport { MessageHandler } from \\\"/Orchestrator/MessageManager/class\\\";\\nimport { Action, ChannelName } from \\\"/Orchestrator/MessageManager/enum\\\";\\nimport { dprint } from \\\"/Orchestrator/Common/Dprint\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"sleep\\\");\\n    const mySelf = ChannelName.shareScript;\\n    const myId = ns.args[0];\\n    const messageHandler = new MessageHandler(ns, mySelf, myId);\\n    let stopRequest = false;\\n    let cycle = 0;\\n    dprint(ns, \\\"Starting\\\");\\n    while (!stopRequest) {\\n        dprint(ns, \\\"New cycle: \\\" + cycle);\\n        const responses = await messageHandler.getMessagesInQueue();\\n        if (responses.length > 0) {\\n            for (const response of responses) {\\n                if (response.payload.action === Action.stop) {\\n                    stopRequest = true;\\n                }\\n            }\\n        }\\n        await ns.share();\\n        dprint(ns, \\\"Cycle \\\" + cycle + \\\" done.\\\");\\n        cycle++;\\n    }\\n    dprint(ns, \\\"Stop requested.\\\");\\n}\\n\",\"filename\":\"/Orchestrator/ThreadManager/script/share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"home\",\"moduleSequenceNumber\":3133,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { findMyFactionsWithAug } from \\\"utils/augs.js\\\";\\n\\n\\nconst NF = \\\"NeuroFlux Governor\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst flagdata = ns.flags([\\n\\t\\t[\\\"auto\\\", false],\\n\\t\\t[\\\"simulate\\\", false],\\n\\t\\t[\\\"nowork\\\", false],\\n\\t\\t[\\\"help\\\", false]\\n\\t])\\n\\tif (flagdata.help) {\\n\\t\\tns.tprint(\\\"--auto to automatically buy until you can't; --simulate to simulate but not actually spend resources; --nowork to not work for a faction when out of rep\\\");\\n\\t\\treturn\\n\\t}\\n\\t// Is the NF available to me right now?\\n\\tlet player = ns.getPlayer();\\n\\tns.tprint(\\\"Current money: \\\" + player.money);\\n\\t// my_factions_w_nf is a list of factions selling NF sorted descending by highest rep\\n\\tlet my_factions_w_nf = findMyFactionsWithAug(ns, NF, player);\\n\\tif (my_factions_w_nf.length == 0) {\\n\\t\\tns.tprint(\\\"You don't currently belong to any factions that sell the NeuroFlux Governor.\\\");\\n\\t\\treturn\\n\\t}\\n\\t/*\\n\\t\\tWhat this should do for v3:\\n\\t\\t- Money goes faster than rep\\n\\t\\t- While we have enough money, check to see if we have enough rep\\n\\t\\t- Farm for rep until we have enough to buy\\n\\t\\t- Buy until we can't\\n\\t\\t- If out of money, end script and complain\\n\\t*/\\n\\tlet closest_faction = getClosestNFFaction(ns, my_factions_w_nf);\\n\\tns.tprint(`Current NF rep req: ${ns.getAugmentationRepReq(NF)}`)\\n\\tns.tprint(`Closest faction is ${closest_faction} with rep ${ns.getFactionRep(closest_faction)}`);\\n\\tlet started_working = false;\\n\\tlet shouldBuy = flagdata.auto;\\n\\tlet didBuy = false;\\n\\tlet money = ns.getPlayer().money;\\n\\tlet price = ns.getAugmentationPrice(NF);\\n\\tlet bought_price;\\n\\t// While there are factions who sell NF and I don't want to stop buying:\\n\\twhile (money >= price) {\\n\\t\\t// While our rep is less than the requirement (and not simulating), start working for that faction\\n\\t\\twhile ((ns.getFactionRep(closest_faction) < ns.getAugmentationRepReq(NF)) && !flagdata.simulate && !flagdata.nowork) {\\n\\t\\t\\t// This intentionally stops working after a time and re-starts to update the rep\\n\\t\\t\\tstarted_working = ns.workForFaction(closest_faction, \\\"Hacking Contracts\\\");\\n\\t\\t\\tawait ns.sleep(30000);\\n\\t\\t}\\n\\t\\t// We have enough rep to buy now, stop working\\n\\t\\tif (started_working) {\\n\\t\\t\\tns.stopAction();\\n\\t\\t\\tstarted_working = false;\\n\\t\\t}\\n\\t\\t// Buy while we have enough money\\n\\t\\t// If 'auto' mode set, do not prompt\\n\\t\\tif (!flagdata.auto && !flagdata.simulate) {\\n\\t\\t\\tshouldBuy = await ns.prompt(`Buy from ${closest_faction} for ${ns.nFormat(price, '$0.00a')}`);\\n\\t\\t}\\n\\t\\t// If prompted yes, or 'auto' is set, proceed\\n\\t\\tif (shouldBuy || flagdata.simulate) {\\n\\t\\t\\t// If not simulating, do the purchase and re-evaluate our metrics\\n\\t\\t\\tif (!flagdata.simulate) {\\n\\t\\t\\t\\tbought_price = price;\\n\\t\\t\\t\\tdidBuy = ns.purchaseAugmentation(closest_faction, NF);\\n\\t\\t\\t\\tmoney = ns.getPlayer().money;\\n\\t\\t\\t\\tprice = ns.getAugmentationPrice(NF);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t// If simulating, raise the price\\n\\t\\t\\t\\tbought_price = price;\\n\\t\\t\\t\\tdidBuy = true;\\n\\t\\t\\t\\tmoney -= price;\\n\\t\\t\\t\\tprice = Math.pow(price, 1.14);\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (didBuy) ns.tprint(`Bought from ${closest_faction} for ${ns.nFormat(bought_price, '$0.00a')}`)\\n\\t\\t} else {\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\t}\\n\\tns.tprint(`You're out of money, need ${ns.nFormat(price, '$0.00a')}`);\\n}\\n\\n/** \\n * Determine the faction whose rep is closest to the next rep requirement. \\n * @param {NS} ns \\n * @param avail_factions Factions I belong to that sell NF \\n**/\\nfunction getClosestNFFaction(ns, avail_factions) {\\n\\tlet rep_sorted_fax = avail_factions.sort((a, b) => ns.getFactionRep(a) - ns.getFactionRep(b));\\n\\tlet sorted_fax = rep_sorted_fax.sort((a, b) => (ns.getAugmentationRepReq(NF) - ns.getFactionRep(a)) < (ns.getAugmentationRepReq(NF) - ns.getFactionRep(b)))\\n\\treturn sorted_fax[0]\\n}\\n\\n/** \\n * Find factions that sell a given augmentation, sorted by rep (descending)\\n * @param {NS} ns \\n * @param {string} aug An aug to search for\\n**/\\nfunction findFactionsWithAug(ns, aug, player) {\\n\\treturn player.factions.filter(\\n\\t\\tfaction => ns.getAugmentationsFromFaction(faction).includes(aug)\\n\\t).sort((repA, repB) => ns.getFactionRep(repA) - ns.getFactionRep(repB)).reverse();\\n}\",\"filename\":\"neuroflux.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/augs.js\",\"url\":\"blob:file:///7b4b3c99-860f-4317-af57-b6a75c8b34c9\",\"moduleSequenceNumber\":394},{\"filename\":\"neuroflux.js\",\"url\":\"blob:file:///c1d77ace-bad3-43e9-81cf-2d33d4f9c7bd\",\"moduleSequenceNumber\":365404}],\"dependents\":[],\"ramUsage\":22.1,\"server\":\"home\",\"moduleSequenceNumber\":3134,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getAugmentationRepReq\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getFactionRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getAugmentationPrice\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"workForFaction\",\"cost\":3},{\"type\":\"fn\",\"name\":\"stopAction\",\"cost\":1},{\"type\":\"fn\",\"name\":\"purchaseAugmentation\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getAugmentationsFromFaction\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatNumberShort, formatDuration, parseShortNumber, scanAllServers } from 'helpers.js'\\nexport async function main(ns) { try { [\\\"Speakers for the Dead\\\",\\\"The Dark Army\\\",\\\"The Syndicate\\\",\\\"Slum Snakes\\\",\\\"The Black Hand\\\"].forEach(g => ns.gang.createGang(g)); } catch(err) { ns.tprint(String(err)); throw(err); } }\",\"filename\":\"/Temp/gang-createGang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"helpers.js\",\"url\":\"blob:file:///5e64f43d-3f20-448d-9a73-b91afe9caabc\",\"moduleSequenceNumber\":331},{\"filename\":\"/Temp/gang-createGang.js\",\"url\":\"blob:file:///7c5d720a-45fb-4424-8be9-883e168e42c8\",\"moduleSequenceNumber\":264666}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":3135,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.createGang\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { findMyFactionsWithAug } from \\\"utils/augs.js\\\";\\nimport { donationAmountForRep, workUntilDonate } from \\\"utils/repNeededForFavor.js\\\";\\nimport { locateServer, createNetworkMap } from \\\"utils/networkmap.js\\\";\\nimport { maximizeScriptUse } from \\\"utils/script_tools.js\\\";\\n\\n/**\\n * End-Gameplan\\n * 1. Create network map\\n * 1.5. Buy programs from darkweb\\n * 4. Run gangs\\n * 6. If don't have Q-link yet, wait for Q-link (25t)\\n * 7. Buy all the exp+ augs\\n * 8. Buy all the faction rep+ augs for Daedalus\\n * 9. Once all augs bought, buy NF until hack level > 2500\\n * 10. If Hack > 2500, +30 augs, 100b+ money, wait for Daedalus invite\\n * 11. Grind faction until 150 Favor (462k rep)\\n * 12. Buy the Red Pill\\n * 13. Hunt down that World Daemon, buy NF until meet the required hack level\\n * \\n */\\n\\nconst TheRedPill = \\\"The Red Pill\\\";\\nconst FAVOR_TO_DONATE = 150;\\nconst WORLD = \\\"w0r1d_d43m0n\\\";\\nconst HOME = 'home';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.exec('gangs.js', HOME);\\n\\t// Once we have enough money ($5b for Formulas.exe)\\n\\twhile (ns.getPlayer().money < 7000000000) {\\n\\t\\tawait ns.sleep(10000);\\n\\t}\\n\\tns.exec('obtainPrograms.js', HOME);\\n\\t// Start hacking\\n\\tns.tprint(\\\"Checking for obtained programs...\\\");\\n\\twhile (!(ns.ls(HOME, '.exe').includes(\\\"Formulas.exe\\\"))) {\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n\\t// Build a new map to re-root everything\\n\\tns.tprint(\\\"Generating new network map...\\\");\\n\\tawait createNetworkMap(ns);\\n\\t// Avoid a race condition\\n\\tawait ns.sleep(500);\\n\\tmaximizeScriptUse(ns, \\\"growHackingXP.js\\\", HOME, 50);\\n\\twhile (ns.getPlayer().hacking <= 2500) {\\n\\t\\tns.disableLog(\\\"ALL\\\");\\n\\t\\tns.tprint(\\\"Waiting for hacking level to hit 2500...\\\");\\n\\t\\tawait ns.sleep(5000);\\n\\t}\\n\\tns.enableLog(\\\"ALL\\\");\\n\\t// Create network map\\n\\tawait createNetworkMap(ns);\\n\\t// Join Daedalus if it's currently waiting\\n\\tawait joinDaedalus(ns);\\n\\tawait grindForRedPill(ns);\\n\\t// hack the world daemon!\\n\\tawait hackThePlanet(ns);\\n}\\n\\n\\n/** \\n * Grind for The Red Pill. Typically this is Daedalus, but in BN2 it's the gang.\\n * @param {NS} ns \\n**/\\nasync function grindForRedPill(ns) {\\n\\tlet player = ns.getPlayer();\\n\\tif (ns.getOwnedAugmentations().includes(TheRedPill)) return\\n\\tlet red_pill_req = ns.getAugmentationRepReq(TheRedPill)\\n\\t// First, find the faction with the red pill\\n\\tlet factions_w_red_pill = findMyFactionsWithAug(ns, TheRedPill, player);\\n\\twhile (factions_w_red_pill.length == 0) {\\n\\t\\tns.tprint(\\\"You don't currently belong to any factions with \\\" + TheRedPill);\\n\\t\\tfactions_w_red_pill = findMyFactionsWithAug(ns, TheRedPill, player);\\n\\t\\tawait ns.sleep(30000);\\n\\t\\treturn\\n\\t}\\n\\twhile (!ns.getOwnedAugmentations().includes(TheRedPill)) {\\n\\t\\t// Is the red pill pending for install?\\n\\t\\tif (ns.getOwnedAugmentations(true).includes(TheRedPill)) {\\n\\t\\t\\tns.installAugmentations('endgameplan.js');\\n\\t\\t}\\n\\t\\tns.tprint(\\\"Hunt for the red pill!\\\");\\n\\t\\t//Do we have enough rep to buy it now?\\n\\t\\tif (ns.getFactionRep(factions_w_red_pill[0]) >= red_pill_req) {\\n\\t\\t\\tlet should_buy = await ns.prompt(`Buy ${TheRedPill} from ${factions_w_red_pill[0]}}?`);\\n\\t\\t\\tif (should_buy) {\\n\\t\\t\\t\\tlet did_buy = ns.purchaseAugmentation(factions_w_red_pill[0], TheRedPill);\\n\\t\\t\\t\\tif (did_buy) {\\n\\t\\t\\t\\t\\tns.tprint(`Purchased ${TheRedPill}!`)\\n\\t\\t\\t\\t\\tlet should_reset = await ns.prompt(\\\"Reset to install The Red Pill?\\\");\\n\\t\\t\\t\\t\\tif (should_reset) {\\n\\t\\t\\t\\t\\t\\tns.installAugmentations('endgameplan.js');\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tns.exit();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\treturn\\n\\t\\t\\t// Do we have enough favor to to donate rep?\\n\\t\\t} else if (ns.getFactionFavor(factions_w_red_pill[0]) >= FAVOR_TO_DONATE) {\\n\\t\\t\\tlet money_needed = donationAmountForRep(ns, factions_w_red_pill[0], red_pill_req);\\n\\t\\t\\t// ns.tprint(`Need to donate ${money_needed}`);\\n\\t\\t\\tlet should_donate = await ns.prompt(`Donate ${ns.nFormat(money_needed, '$0.00a')} to ${factions_w_red_pill[0]}?`);\\n\\t\\t\\tlet did_donate = false;\\n\\t\\t\\tif (should_donate) did_donate = ns.donateToFaction(factions_w_red_pill[0], money_needed);\\n\\t\\t\\tif (did_donate) {\\n\\t\\t\\t\\tns.tprint(`Donated ${ns.nFormat(money_needed, '$0.00a')} to ${factions_w_red_pill[0]}`);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Okay, we don't have enough rep, or favor to donate yet.\\n\\t\\t// The Red Pill costs 2.5m rep. That's not worth waiting for, \\n\\t\\t// so grind to 150 favor instead (which requires ~462k rep)\\n\\t\\tns.tprint(`Working for ${factions_w_red_pill[0]} until we can donate`)\\n\\t\\tawait workUntilDonate(ns, factions_w_red_pill[0]);\\n\\t\\tif (ns.getFactionFavorGain(factions_w_red_pill[0]) >= FAVOR_TO_DONATE) {\\n\\t\\t\\tns.tprint(\\\"Next reset will let you donate favor for \\\" + TheRedPill);\\n\\t\\t\\tlet should_reset = await ns.prompt(\\\"Reset to buy The Red Pill?\\\");\\n\\t\\t\\tif (should_reset) {\\n\\t\\t\\t\\tns.installAugmentations('endgameplan.js');\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tns.exit();\\n\\t\\t\\t}\\n\\t\\t\\treturn\\n\\t\\t}\\n\\t}\\n}\\n\\n/** \\n * Find the world daemon and hack it!.\\n * @param {NS} ns \\n**/\\nasync function hackThePlanet(ns) {\\n\\tlet daemon_path = await locateServer(ns, WORLD);\\n\\tns.tprint(`Path to ${WORLD}: ${daemon_path.join(\\\" -> \\\")}`);\\n\\tif (daemon_path.length < 5) return\\n\\tfor (const step of daemon_path) {\\n\\t\\t// ns.tprint(\\\"Connecting to: \\\" + step)\\n\\t\\tns.connect(step);\\n\\t}\\n\\tns.tprint(\\\"Checking to see if we have the required hacking level...\\\");\\n\\twhile (ns.getPlayer().hacking < ns.getServerRequiredHackingLevel(WORLD)) {\\n\\t\\t// Wait for our hacking level to increase more\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n\\tlet should_end_bitnode = await ns.prompt(`Backdoor the ${WORLD} and end the bitnode?`);\\n\\tif (should_end_bitnode) {\\n\\t\\tawait ns.installBackdoor();\\n\\t} else ns.connect('home');\\n}\\n\\nasync function joinDaedalus(ns) {\\n\\tconst DAEDALUS = \\\"Daedalus\\\";\\n\\tif (ns.getPlayer().factions.includes(DAEDALUS)) return\\n\\t// Check our faction invites\\n\\tlet invited_factions = ns.checkFactionInvitations();\\n\\twhile (!invited_factions.includes(DAEDALUS)) {\\n\\t\\t// Wait for Daedalus to show up\\n\\t\\tawait ns.sleep(30000);\\n\\t\\tinvited_factions = ns.checkFactionInvitations();\\n\\t}\\n\\tif (invited_factions.includes(DAEDALUS)) {\\n\\t\\tlet did_join = ns.joinFaction(DAEDALUS);\\n\\t\\tif (did_join) ns.tprint(\\\"Joined \\\" + DAEDALUS)\\n\\t}\\n}\",\"filename\":\"endgameplan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/script_tools.js\",\"url\":\"blob:file:///02ebeacd-2c96-4303-b757-f66762bbbc50\",\"moduleSequenceNumber\":2166},{\"filename\":\"/utils/script_tools.js\",\"url\":\"blob:file:///5b1e299f-714a-43f1-b369-13eac9c9edcc\",\"moduleSequenceNumber\":2166},{\"filename\":\"/utils/networkmap.js\",\"url\":\"blob:file:///208e9d4c-2d23-405c-bf32-54f70e85ddd5\",\"moduleSequenceNumber\":2164},{\"filename\":\"/utils/repNeededForFavor.js\",\"url\":\"blob:file:///8f9c5b56-525b-4214-a1d9-475ad1d4c5f2\",\"moduleSequenceNumber\":2086},{\"filename\":\"/utils/augs.js\",\"url\":\"blob:file:///3450bc70-d004-4dda-ba55-169525166bcf\",\"moduleSequenceNumber\":2152},{\"filename\":\"endgameplan.js\",\"url\":\"blob:file:///b808db8a-f8f6-455e-8703-d4af0c9545c4\",\"moduleSequenceNumber\":2168}],\"dependents\":[],\"ramUsage\":50.25,\"server\":\"home\",\"moduleSequenceNumber\":5958,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getAugmentationRepReq\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"installAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getFactionRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"purchaseAugmentation\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getFactionFavor\",\"cost\":1},{\"type\":\"fn\",\"name\":\"donateToFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getFactionFavorGain\",\"cost\":0.75},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"checkFactionInvitations\",\"cost\":3},{\"type\":\"fn\",\"name\":\"joinFaction\",\"cost\":3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"workForFaction\",\"cost\":3},{\"type\":\"fn\",\"name\":\"stopAction\",\"cost\":1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** \\n * Find my factions that sell a given augmentation, sorted by rep (descending)\\n * @param {NS} ns \\n * @param {string} aug An aug to search for\\n**/\\nexport function findMyFactionsWithAug(ns, aug, player) {\\n\\treturn player.factions.filter(\\n\\t\\tfaction => ns.getAugmentationsFromFaction(faction).includes(aug)\\n\\t).sort((repA, repB) => ns.getFactionRep(repA) - ns.getFactionRep(repB)).reverse();\\n}\",\"filename\":\"/utils/augs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":7.6,\"server\":\"home\",\"moduleSequenceNumber\":3137,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getFactionRep\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { workoutAllUntil, commitKarmaFocusedCrime, GANG_KARMA } from \\\"utils/crimes.js\\\";\\nimport { obtainPrograms } from \\\"obtainPrograms.js\\\";\\nimport { maximizeScriptUse } from \\\"utils/script_tools.js\\\";\\n\\n/**\\n * Early Gameplan w/ Gangs (32 GB RAM)\\n * 1. Buy programs from darkweb\\n * 2. Run findOptimal with 1 thread\\n * 3. Run easy-hack with 2 threads\\n * 4. Gym until 30 of each stat\\n * 5. Start mugging until >70% chance of homicide\\n * 6. Homicide until -54k karma\\n * 7. Start gang\\n * 8. Along the way, evaluate if we have enough money for the next RAM upgrade\\n */\\n\\nconst HOME = 'home';\\nconst MIN_STAT = 30;\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t// 2-3 Run hacking programs\\n\\t//TODO figure out optimal thread counts here\\n\\t// not enough RAM to do this script + findOptimal + easy-hack in 32 GB\\n\\t// ns.exec('easy-hack.script', HOME, 2);\\n\\t// 4. Hit the gym until minimum stats\\n\\tawait workoutAllUntil(ns, MIN_STAT);\\n\\t// 5-6 Start crimes until we can do homicides to get to the gang karma, also upgrade home\\n\\tawait crimeWhileUpgradingLoop(ns);\\n\\t// TODO figure out how to do more hacking based on increased RAM amounts\\n\\t// 7. Start a gang\\n\\tstartAGang(ns);\\n}\\n\\n/** \\n * Commit crimes, but if we have enough money, buy more home upgrades\\n * @param {NS} ns \\n**/\\nasync function crimeWhileUpgradingLoop(ns) {\\n\\tns.disableLog(\\\"ALL\\\"); // Disable the log\\n\\tns.tail(); // Open a window to view the status of the script\\n\\tlet timeout = 250; // In ms - too low of a time will result in a lockout/hang\\n\\twhile (Math.abs(ns.heart.break()) <= GANG_KARMA) {\\n\\t\\tawait ns.sleep(timeout); // Wait it out first\\n\\t\\tif (ns.isBusy()) continue;\\n\\t\\t// See if we can upgrade our home\\n\\t\\tupgradeHome(ns);\\n\\t\\t// If we have lots of money, see if we can buy darkweb programs\\n\\t\\tobtainPrograms(ns);\\n\\t\\t// Spin up hacking XP tools\\n\\t\\tgrowHackingXP(ns);\\n\\t\\t// Otherwise, commit crime!\\n\\t\\tcommitKarmaFocusedCrime(ns);\\n\\t}\\n}\\n\\n\\n/** \\n * Upgrade the home\\n * @param {NS} ns \\n**/\\nfunction upgradeHome(ns) {\\n\\t// Do I have enough money to buy a RAM or core upgrade?\\n\\tlet ram_cost = ns.getUpgradeHomeRamCost();\\n\\tlet core_cost = ns.getUpgradeHomeCoresCost();\\n\\tlet money = ns.getPlayer().money;\\n\\tlet did_upgrade = false;\\n\\tif (money > ram_cost) {\\n\\t\\tdid_upgrade = ns.upgradeHomeRam();\\n\\t\\tif (did_upgrade) ns.print(`Bought RAM upgrade for ${ns.nFormat(ram_cost, '0.00a')}`)\\n\\t}\\n\\tif (money > core_cost) {\\n\\t\\tdid_upgrade = ns.upgradeHomeCores();\\n\\t\\tif (did_upgrade) ns.print(`Bought Cores upgrade for ${ns.nFormat(core_cost, '0.00a')}`)\\n\\t}\\n}\\n\\n/** \\n * Spin up hacking scripts to grow hacking XP\\n * @param {NS} ns\\n**/\\nfunction growHackingXP(ns) {\\n\\tlet HACKSCRIPT;\\n\\tif (ns.getHackingLevel <= 300) {\\n\\t\\tHACKSCRIPT =  \\\"growHackingXP.js\\\";\\n\\t} else {\\n\\t\\t// TODO: Figure out which server to hack\\n\\t\\tHACKSCRIPT = \\\"basicHack.js\\\";\\n\\t}\\n\\tmaximizeScriptUse(ns,HACKSCRIPT, HOME);\\n}\\n\\n/** \\n * Check factions to see if I can join one and start a gang\\n * @param {NS} ns \\n**/\\nfunction startAGang(ns) {\\n\\tlet invitations = ns.checkFactionInvitations();\\n\\tconst gangList = [\\n\\t\\t\\\"Slum Snakes\\\",\\n\\t\\t\\\"Tetrads\\\",\\n\\t\\t\\\"Silhouette\\\",\\n\\t\\t\\\"Speakers for the Dead\\\",\\n\\t\\t\\\"The Dark Army\\\",\\n\\t\\t\\\"The Syndicate\\\",\\n\\t];\\n\\tlet ready_gang = invitations.find(gang => gangList.includes(gang));\\n\\tif (ready_gang) {\\n\\t\\tlet joined = ns.joinFaction(ready_gang);\\n\\t\\tif (joined) ns.print(`Joined ${ready_gang} faction`)\\n\\t}\\n\\tns.exec('gangs.js', HOME);\\n}\",\"filename\":\"earlygameplan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/crimes.js\",\"url\":\"blob:file:///2e77cbca-27f0-4abd-8dce-7ad4d5eec284\",\"moduleSequenceNumber\":520336},{\"filename\":\"earlygameplan.js\",\"url\":\"blob:file:///60e09fe1-7ddb-442b-ab14-02f369891b6d\",\"moduleSequenceNumber\":520438}],\"dependents\":[],\"ramUsage\":36.85,\"server\":\"home\",\"moduleSequenceNumber\":3138,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getUpgradeHomeRamCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"getUpgradeHomeCoresCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"upgradeHomeRam\",\"cost\":3},{\"type\":\"fn\",\"name\":\"upgradeHomeCores\",\"cost\":3},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"checkFactionInvitations\",\"cost\":3},{\"type\":\"fn\",\"name\":\"joinFaction\",\"cost\":3},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"gymWorkout\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stopAction\",\"cost\":1},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getCrimeChance\",\"cost\":5},{\"type\":\"fn\",\"name\":\"commitCrime\",\"cost\":5},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"let crimes = [\\n\\t\\\"heist\\\",\\n\\t\\\"assassination\\\",\\n\\t\\\"kidnap\\\",\\n\\t\\\"grand theft auto\\\",\\n\\t\\\"homicide\\\",\\n\\t\\\"larceny\\\",\\n\\t\\\"mug someone\\\",\\n\\t\\\"rob store\\\",\\n\\t\\\"shoplift\\\",\\n];\\n\\nexport const GANG_KARMA = 54000;\\n\\n/** \\n * Work out all stats until they hit a certain level\\n * @param {NS} ns \\n * @param {number} level The amount we all stats should be\\n**/\\nexport async function workoutAllUntil(ns, level) {\\n\\tconst STATS = [\\n\\t\\t\\\"strength\\\",\\n\\t\\t\\\"defense\\\",\\n\\t\\t\\\"dexterity\\\",\\n\\t\\t\\\"agility\\\",\\n\\t]\\n\\tlet me = ns.getPlayer();\\n\\tfor (let stat of STATS) {\\n\\t\\twhile (me[stat] < level) {\\n\\t\\t\\tif (!ns.isBusy()) {\\n\\t\\t\\t\\tns.toast(\\\"Training \\\" + stat);\\n\\t\\t\\t\\tns.gymWorkout('Powerhouse Gym', stat, false)\\n\\t\\t\\t}\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t\\tme = ns.getPlayer();\\n\\t\\t}\\n\\t\\tns.stopAction();\\n\\t}\\n}\\n\\n/** \\n * Commit a single crime to get us closer to Gang Karma levels\\n * @param {NS} ns \\n**/\\nexport function commitKarmaFocusedCrime(ns) {\\n\\tconst HOMICIDE = \\\"homicide\\\";\\n\\tconst MUG = \\\"mug someone\\\";\\n\\t// Calculate crime success chance of homicide\\n\\tlet homicide_chance = ns.getCrimeChance(HOMICIDE);\\n\\tif (homicide_chance <= 0.7) {\\n\\t\\tns.commitCrime(MUG);\\n\\t\\tns.print(`Homicide chance: ${ns.nFormat(homicide_chance, '0.00%')}, mugging people instead.`)\\n\\t} else {\\n\\t\\tns.commitCrime(HOMICIDE);\\n\\t\\tns.print(`Committing homicide at ${ns.nFormat(homicide_chance, '0.00%')}; Current karma: ${ns.heart.break()}`);\\n\\t}\\n}\\n\\n/** \\n * Commit crimes until we have enough negative karma to start a gang\\n * @param {NS} ns \\n**/\\nexport async function crimeUntilGang(ns) {\\n\\t/** \\n\\t * Fastest stat growth is mugging, so start there\\n\\t * Switch to homicide once it's >70% success chance\\n\\t**/\\n\\tns.disableLog(\\\"ALL\\\"); // Disable the log\\n\\tns.tail(); // Open a window to view the status of the script\\n\\tlet timeout = 250; // In ms - too low of a time will result in a lockout/hang\\n\\twhile (Math.abs(ns.heart.break()) <= GANG_KARMA) {\\n\\t\\tawait ns.sleep(timeout); // Wait it out first\\n\\t\\tif (ns.isBusy()) continue;\\n\\t\\tcommitKarmaFocusedCrime(ns);\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst flagdata = ns.flags([\\n\\t\\t[\\\"crimes\\\", []],\\n\\t\\t[\\\"help\\\", false],\\n\\t])\\n\\tif (flagdata.help) {\\n\\t\\tns.tprint(\\n\\t\\t\\t`Pass in --crimes to only do a specific crime.`\\n\\t\\t);\\n\\t\\treturn\\n\\t}\\n\\tif (flagdata.crimes.length > 0) {\\n\\t\\t// Only commit specific crimes\\n\\t\\tcrimes = flagdata.crimes;\\n\\t}\\n\\t// First, work out a bit to build up stats\\n\\tconst MIN_STAT = 30;\\n\\tawait workoutAllUntil(ns, MIN_STAT);\\n\\t// Disable the log\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\tns.tail(); // Open a window to view the status of the script\\n\\tlet timeout = 250; // In ms - too low of a time will result in a lockout/hang\\n\\n\\twhile (true) {\\n\\t\\tawait ns.sleep(timeout); // Wait it out first\\n\\t\\tif (ns.isBusy()) continue;\\n\\t\\t/** Calculate the risk value of all crimes */\\n\\t\\tlet choices = crimes.map((crime) => {\\n\\t\\t\\tlet crimeStats = ns.getCrimeStats(crime); // Let us look at the important bits\\n\\t\\t\\tlet crimeChance = ns.getCrimeChance(crime); // We need to calculate if its worth it\\n\\t\\t\\t/** Using probabilty(odds) to calculate the \\\"risk\\\" to get the best reward\\n\\t\\t\\t * Risk Value = Money Earned * Odds of Success(P(A) / ~P(A)) / Time taken\\n\\t\\t\\t *\\n\\t\\t\\t * Larger risk values indicate a better choice\\n\\t\\t\\t */\\n\\t\\t\\tlet crimeRiskValue =\\n\\t\\t\\t\\t(crimeStats.money * Math.log10(crimeChance / (1 - crimeChance + Number.EPSILON))) /\\n\\t\\t\\t\\tcrimeStats.time;\\n\\t\\t\\treturn [crime, crimeRiskValue];\\n\\t\\t});\\n\\n\\t\\tlet bestCrime = choices.reduce((prev, current) => {\\n\\t\\t\\treturn prev[1] > current[1] ? prev : current;\\n\\t\\t});\\n\\n\\t\\tns.commitCrime(bestCrime[0]);\\n\\t\\tns.print(\\n\\t\\t\\t`Crime: ${bestCrime[0]} Risk Value: ${bestCrime[1].toPrecision(3)} Cash to Earn: \\\\$${ns\\n\\t\\t\\t\\t.getCrimeStats(bestCrime[0])\\n\\t\\t\\t\\t.money.toPrecision(4)}; Current karma: ${ns.heart.break()}`\\n\\t\\t);\\n\\t}\\n}\",\"filename\":\"/utils/crimes.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":20.6,\"server\":\"home\",\"moduleSequenceNumber\":3139,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"gymWorkout\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stopAction\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getCrimeChance\",\"cost\":5},{\"type\":\"fn\",\"name\":\"commitCrime\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getCrimeStats\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Hyper Batcher (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/hyperBatcher.js\\n// Usage: run hyperBatcher.js [target] (source) (percentage) (affectStocks) (simulate)\\n// Parameter target: The server to take money from.\\n// Parameter source: The server to run the attack. (default: the server this runs on.)\\n// Parameter percentage: Percentage of maxMoney to steal. (Default: 0.2)\\n// Parameter affectStocks: \\\"H\\\",\\\"G\\\", or \\\"GH\\\", to let grows and/or hacks affect stocks. (Default: \\\"\\\")\\n// Parameter simulate: If true, don't run scripts; print the expected results instead. (Default: false)\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\\n\\nlet scriptStart;\\n\\n/** Calculate the amount of hack threads needed for a batch attack.\\n * @param {NS} ns\\n * @param {String} tgt          The hostname of the target server.\\n * @param {Number} moneyPct     The percent of the target's maximum money we want to hack.\\n * @param {Boolean} hasFormulas Whether or not the player has access to formulas.\\n * @return {Number[]}           The amount of threads, hack duration, security increase, actual money hacked.\\n */\\nfunction calcHack(ns, tgt, moneyPct, hasFormulas) {\\n    // Calculate the hack.\\n    let maxMoney = ns.getServerMaxMoney(tgt);\\n    while (moneyPct > 1) { moneyPct /= 100; }\\n    let threads;\\n    let timeToHack;\\n    let fractionStole;\\n\\n    if (!hasFormulas) {\\n        // Base on current amounts.\\n        threads = Math.max(1, Math.floor(ns.hackAnalyzeThreads(tgt, moneyPct)));\\n        timeToHack = ns.getHackTime(tgt);\\n        fractionStole = ns.hackAnalyze(tgt);\\n    } else {\\n        // Use formulas to be accurate.\\n        let srv = ns.getServer(tgt);\\n        srv.hackDifficulty = srv.minDifficulty;\\n        srv.moneyAvailable = srv.moneyMax;\\n        let p = ns.getPlayer();\\n\\n        threads = Math.floor(moneyPct / ns.formulas.hacking.hackPercent(srv, p));\\n        timeToHack = ns.formulas.hacking.hackTime(srv, p);\\n        fractionStole = ns.formulas.hacking.hackPercent(srv, p);\\n    }\\n    return [\\n        threads,\\n        timeToHack,\\n        ns.hackAnalyzeSecurity(threads),\\n        fractionStole * threads * maxMoney\\n    ];\\n}\\n\\n/** Calculate the amount of grow threads needed for a batch attack.\\n * @param {NS} ns\\n * @param {String} tgt          The hostname of the target server.\\n * @param {Number} money        The amount of money we've stolen.\\n * @param {Boolean} hasFormulas Whether or not the player has access to formulas.\\n * @return {Number[]}           The amount of threads, grow duration, security increase.\\n */\\nfunction calcGrow(ns, tgt, money, hasFormulas) {\\n    let max = ns.getServerMaxMoney(tgt);\\n    let regrow = max / (max - Math.max(money, 1));\\n    let threads;\\n    let timeToGrow;\\n\\n    if (!hasFormulas) {\\n        threads = ns.growthAnalyze(tgt, regrow);\\n        timeToGrow = ns.getGrowTime(tgt);\\n    } else {\\n        let srv = ns.getServer(tgt);\\n        srv.hackDifficulty = srv.minDifficulty;\\n        srv.moneyAvailable = srv.moneyMax - money;\\n        let p = ns.getPlayer();\\n        threads = Math.ceil(Math.log(regrow) / Math.log(ns.formulas.hacking.growPercent(srv, 1, p)));\\n        timeToGrow = ns.formulas.hacking.growTime(srv, p);\\n    }\\n\\n    return [\\n        threads,\\n        timeToGrow,\\n        ns.growthAnalyzeSecurity(threads)\\n    ];\\n}\\n\\n/** Calculate the amount of weaken threads needed for a batch attack.\\n * @param {NS} ns\\n * @param {String} tgt          The hostname of the target server.\\n * @param {Number} secIncrease  The amount of security we need to lower.\\n * @param {Boolean} hasFormulas Whether or not the player has access to formulas.\\n * @return {Number[]}           The amount of threads, weaken duration, security decrease.\\n */\\nfunction calcWeaken(ns, tgt, secIncrease, hasFormulas) {\\n    // Calculate the weaken we need to counter hack.\\n    let secEffect = 0;\\n    let threads = Math.ceil(secIncrease / ns.weakenAnalyze(1));\\n    if (!hasFormulas) {\\n        return [threads, ns.getWeakenTime(tgt), secEffect];\\n    }\\n    let srv = ns.getServer(tgt);\\n    srv.hackDifficulty = srv.minDifficulty;\\n    srv.moneyAvailable = srv.moneyMax;\\n    let p = ns.getPlayer();\\n\\n    return [threads, ns.formulas.hacking.weakenTime(srv, p), secEffect];\\n}\\n\\n/** Calculate the maximum amount of batches we can run based on server RAM\\n * @param  {String} runTimes The duration of all attacks (in ms); order: HWGW.\\n * @param  {String} delay    The delay between end times (in ms).\\n * @return {Number[]}        The start time of all attacks (in ms); order: HWGW.\\n */\\nfunction calcDelays(runTimes, delay) {\\n    return [\\n        runTimes[1] - delay - runTimes[0],\\n        0,\\n        runTimes[1] + delay - runTimes[2],\\n        delay * 2\\n    ];\\n}\\n\\n/** Calculates every batch we can feasibly start before the first hack lands.\\n * @param {NS} ns\\n * @param {Number} delay       the delay between landings.\\n * @param {Number[4]} runTimes the runtime of each script.\\n * @param {Number[4]} threads  the number of threads for each script.\\n * @param {String} src         the hostname of the server launching the attack.\\n */\\nfunction calcBatches(ns, delay, runTimes, threads, src) {\\n    // Calculate our delays.\\n    const delays = calcDelays(runTimes, delay);\\n    // We can run this many batches before the first hack lands.\\n    const firstHackLand = delays[0] + runTimes[0];\\n    // we can run this many batches before RAM runs out.\\n    let ramUse =\\n        ns.getScriptRam('/batch/hack.js', src) * threads[0] +\\n        ns.getScriptRam('/batch/grow.js', src) * threads[2] +\\n        ns.getScriptRam('/batch/weaken.js', src) * (threads[1] + threads[3]);\\n    // This will break if multiple batchers are running.\\n    let maxBatches = (ns.getServerMaxRam(src) - ns.getServerUsedRam(src)) / ramUse;\\n\\n    // Get the start times.\\n    let execs = Array();\\n    let i = 0;\\n    while (maxBatches > i && firstHackLand > delays[1] + delay * (4 * i)) {\\n        execs.push([delays[0] + delay * (4 * i), 'H']);\\n        execs.push([delays[1] + delay * (4 * i), 'Wh']);\\n        execs.push([delays[2] + delay * (4 * i), 'G']);\\n        execs.push([delays[3] + delay * (4 * i), 'Wg']);\\n        i++;\\n    }\\n    return execs.sort((a, b) => a[0] - b[0]);\\n}\\n\\n/** Run the batch hacks.\\n * @param {NS} ns\\n * @param {String} tgt          The server we're stealing money from.\\n * @param {String} src          The server running the hacks.\\n * @param {Number[4]} threads   The amount of threads of the script types.\\n * @param {Array} execs         Array of [Number,String]; indicating delay and type of script.\\n * @param {Number} profit       The expected money to get per hack.\\n * @param {String} affectStocks A string containing \\\"H\\\" to have hacks influence stocks, \\\"G\\\" to have grow influence stocks.\\n * @return {Promise<boolean>} True if we cancelled early, requiring recalculation before restarting.\\n**/\\nasync function startBatching(ns, tgt, src, threads, execs, firstLand, profit, affectStocks) {\\n    const currLvl = ns.getHackingLevel;\\n    const startLvl = currLvl();\\n    const now = ns.getTimeSinceLastAug;\\n    const batchStart = now();\\n\\n    ns.print(`INFO: Launching attack: ${src} -> ${tgt}.\\\\nFirst hack will land at T+${timeFormat(ns, now() + firstLand - scriptStart)}\\\\nTotal yield ${ns.nFormat(profit, \\\"$0.00a\\\")} over ${execs.length} scripts`);\\n\\n    let script = \\\"\\\"; let t; let slept = 0;\\n    for (let x of execs) {\\n        if (currLvl() != startLvl) {\\n            ns.print(`WARNING: [T+${timeFormat(ns, now() - scriptStart, false)}]Hack level increased, aborting hack.`);\\n            return true;\\n        }\\n        // Check if an abort has been called by hack.js\\n        if (ns.fileExists(`ABORT_${tgt}.txt`, src)) {\\n            ns.rm(`ABORT_${tgt}.txt`, src);\\n            if (batchStart - now() <= 0) {\\n                ns.print(`ERROR: [T+${timeFormat(ns, now() - scriptStart, false)}]ABORT received from hack.js.`);\\n                return true;\\n            }\\n        }\\n\\n        switch (x[1]) {\\n            case \\\"H\\\":\\n                script = \\\"/batch/hack.js\\\";\\n                t = threads[0];\\n                break;\\n            case \\\"G\\\":\\n                script = \\\"/batch/grow.js\\\";\\n                t = threads[2];\\n                break;\\n            case \\\"Wh\\\":\\n                script = \\\"/batch/weaken.js\\\";\\n                t = threads[1];\\n                break;\\n            case \\\"Wg\\\":\\n                script = \\\"/batch/weaken.js\\\";\\n                t = threads[3];\\n                break;\\n        }\\n\\n        if (x[0] - slept < 0) {\\n            ns.print(`ERROR: [T+${timeFormat(ns, now() - scriptStart, false)}]Trying to sleep a negative amount. We've fallen behind!`);\\n            return true;\\n        }\\n        await ns.sleep(x[0] - slept);\\n        slept = x[0];\\n\\n        // Ensure we're not bumping into RAM limitations\\n        if (ns.getServerMaxRam(src) - ns.getServerUsedRam(src) < ns.getScriptRam(script, src)) {\\n            ns.print(`ERROR: [T+${timeFormat(ns, now() - scriptStart, false)}]Aborting, out of RAM.`);\\n            return true;\\n        }\\n        ns.exec(script, src, t, tgt, profit, affectStocks.includes(x[1]), now());\\n    }\\n    return false;\\n}\\n\\n/** Calculate the threads needed to hack tgt for pct% of maxMoney.\\n * @param {NS} ns\\n * @param  {String} tgt Server hostname to attack.\\n * @param  {Number} pct Percentage of maxMoney we want to steal.\\n * @param  {Boolean} hasFormulas Whether or not the player has access to formulas.\\n * @return {Object[3]}  Threads required, Script runtimes, money hacked per batch.\\n */\\nfunction calcThreads(ns, tgt, pct, hasFormulas) {\\n    let threads = Array(4), runTimes = Array(4); let sec; let profit;\\n    [threads[0], runTimes[0], sec, profit] = calcHack(ns, tgt, pct, hasFormulas);\\n    [threads[1], runTimes[1]] = calcWeaken(ns, tgt, sec, hasFormulas);\\n    [threads[2], runTimes[2], sec] = calcGrow(ns, tgt, profit, hasFormulas);\\n    [threads[3], runTimes[3]] = calcWeaken(ns, tgt, sec, hasFormulas);\\n\\n    return [threads, runTimes, profit];\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    scriptStart = ns.getTimeSinceLastAug();\\n    ns.clearLog();\\n    ns.disableLog('ALL');\\n    //Parameter parsing.\\n    if (ns.args[0] == undefined) {\\n        ns.tprint(\\\"ERROR: Invalid target.\\\");\\n        ns.tprint(\\\"INFO: Usage: target(string), source(string, optional), percent(number, optional), affectStocks(string, optional), simulate(boolean, optional).\\\");\\n        ns.exit();\\n    }\\n\\n    const tgt = ns.args[0];\\n    const src = ns.args[1] ? ns.args[1] : ns.getHostname();\\n    const pct = ns.args[2] ? ns.args[2] : 0.2;\\n    const affectStocks = ns.args[3] ? ns.args[3] : \\\"\\\";\\n    const sim = ns.args[4];\\n\\n    // Constants.\\n    const delay = 100;\\n    const hasFormulas = ns.fileExists('Formulas.EXE', 'home');\\n    if (!hasFormulas) {\\n        if (\\n            ns.getServerMaxMoney(tgt) != ns.getServerMoneyAvailable(tgt) ||\\n            ns.getServerMinSecurityLevel(tgt) != ns.getServerSecurityLevel(tgt)\\n        ) {\\n            ns.tprint(\\\"ERROR: Targeting a non-prepped server without formulas.\\\");\\n            ns.exit();\\n        }\\n        ns.tprint(\\\"WARN: Formulas not found.\\\");\\n    }\\n\\n    // Calculate the threads needed, runTimes and actual money hacked.\\n    let threads, runTimes, profit;\\n    [threads, runTimes, profit] = calcThreads(ns, tgt, pct, hasFormulas);\\n\\n    // If we're only simulating, we just got enough info.\\n    if (sim) {\\n        let ram =\\n            ns.getScriptRam('/batch/hack.js') * threads[0] +\\n            ns.getScriptRam('/batch/grow.js') * threads[2] +\\n            ns.getScriptRam('/batch/weaken.js') * (threads[1] + threads[3]);\\n        let time = runTimes[3] + delay * 2;\\n        ns.tprint(`${src} -> ${tgt}, stealing \\\\$${ns.nFormat(profit, \\\"0.000a\\\")} in ${ns.tFormat(time)} using ${ns.nFormat(ram * 1e9, \\\"0.00b\\\")} RAM`);\\n        ns.tprint(`Threads: hack(${threads[0]}), weaken(${threads[1]}), grow(${threads[2]}), weaken(${threads[3]});`);\\n        ns.exit();\\n    }\\n\\n    if (ns.getServerMaxMoney(tgt) != ns.getServerMoneyAvailable(tgt) ||\\n        ns.getServerMinSecurityLevel(tgt) != ns.getServerSecurityLevel(tgt)) {\\n        ns.tprint(`ERROR: Server ${tgt} not prepared.`);\\n        ns.exit();\\n    }\\n\\n    // ensure the src server has the latest hacking scripts.\\n    if (src != 'home') {\\n        for (let file of ['/batch/hack.js', '/batch/grow.js', '/batch/weaken.js']) {\\n            ns.print(`uploading ${file}`);\\n            await ns.scp(file, 'home', src);\\n        }\\n    }\\n\\n    // Ensure there's no abort file lingering.\\n    if (ns.fileExists(`ABORT_${tgt}.txt`, src)) {\\n        ns.rm(`ABORT_${tgt}.txt`, src);\\n    }\\n\\n    let recalc = false;\\n    while (true) {\\n        if (recalc) {\\n            if (ns.getHostname() == src) {\\n                ns.tprint(`FAIL: [${src}]Recalc is telling us to killall, but we're hacking from the dispatcher.`);\\n            }\\n            ns.killall(src);\\n            [threads, runTimes, profit] = calcThreads(ns, tgt, pct);\\n            recalc = false;\\n        }\\n        let execs = calcBatches(ns, delay, runTimes, threads, src);\\n        let time = execs.filter(x => x[1] == \\\"H\\\")[0][0];\\n        recalc = await startBatching(ns, tgt, src, threads, execs, time + runTimes[0], profit, affectStocks);\\n        // If a batch fails, make sure we let it fully run out.\\n        await ns.sleep(runTimes[1] + delay * 2);\\n    }\\n}\\n\\n/**Returns information about a percent% batch hack against tgt (Used in gradeServers.js)\\n * @params {NS} ns\\n * @params {String} tgt Target server\\n * @params {number} percent decimal-represented money percentage\\n * @return {number[]} [RAM Usage, Time in ms, hacked money.]\\n */\\nexport function getBatchInfo(ns, tgt, percent) {\\n    const hasFormulas = ns.fileExists('Formulas.EXE', 'home');\\n    let profit = calcHack(ns, tgt, percent, hasFormulas)[3];\\n    percent = profit / ns.getServerMaxMoney(tgt);\\n    let threads = calcThreads(ns, tgt, percent, hasFormulas)[0];\\n    let time = calcWeaken(ns, tgt, calcGrow(ns, tgt, profit, hasFormulas)[2], hasFormulas)[1] + 200;\\n    return ([\\n        ns.getScriptRam('/batch/hack.js', \\\"home\\\") * threads[0] +\\n        ns.getScriptRam('/batch/grow.js', \\\"home\\\") * threads[2] +\\n        ns.getScriptRam('/batch/weaken.js', \\\"home\\\") * (threads[1] + threads[3]),\\n        time,\\n        profit\\n    ]);\\n}\\n\\n/**Format a given number in ms to a human-readable string, except shorter.\\n * @param {NS} ns\\n * @param {Number} time\\n * @param {Boolean} msAcc\\n * @return {String} a shortened ns.tFormat();\\n */\\nexport function timeFormat(ns, time, msAcc) {\\n    return ns.tFormat(time, msAcc)\\n        .replaceAll(\\\"days\\\", \\\"d\\\")\\n        .replaceAll(\\\"hours\\\", \\\"h\\\")\\n        .replaceAll(\\\"minutes\\\", \\\"m\\\")\\n        .replaceAll(\\\"seconds\\\", \\\"s\\\")\\n\\n        .replaceAll(\\\"day\\\", \\\"d\\\")\\n        .replaceAll(\\\"hour\\\", \\\"h\\\")\\n        .replaceAll(\\\"minute\\\", \\\"m\\\")\\n        .replaceAll(\\\"second\\\", \\\"s\\\")\\n\\n        .replaceAll(\\\",\\\", \\\"\\\")\\n        .replaceAll(\\\" \\\", \\\"\\\");\\n}\",\"filename\":\"/WIP/hyperbatcher.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/WIP/hyperbatcher.js\",\"url\":\"blob:file:///b67acb72-d03c-4c93-9282-fb85b9b34593\",\"moduleSequenceNumber\":361259}],\"dependents\":[],\"ramUsage\":14.5,\"server\":\"home\",\"moduleSequenceNumber\":3140,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getTimeSinceLastAug\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grader (c) 2022 Tyrope\\n// Usage: run serverGrader.js (percent) (topOnly)\\n// Parameter percent: The % of maxMoney the batch will be stealing. (default: 20)\\n// Parameter topOnly: If given a number, will limit the amount of servers to only the top n. (default: Infinity)\\n\\nimport { squishLines, makeTable } from 'WIP/tablemaker.js'\\nimport { getBatchInfo } from 'WIP/hyperbatcher.js'\\nimport { readNetworkMap } from \\\"utils/networkmap.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    // Fail if no Formulas.exe\\n    if (ns.ls('home', 'Formulas.exe').length == 0) {\\n        ns.tprint(\\\"You need Formulas.exe to use this script.\\\");\\n        ns.exit();\\n    }\\n    ns.disableLog('ALL');\\n    ns.tail();\\n\\n    const pct = ns.args[0] ? ns.args[0] : 20;\\n    const topOnly = ns.args[1] ? ns.args[1] + 1 : Infinity;\\n\\n    // Get all the servers.\\n    let servers = Object.keys(await readNetworkMap(ns));\\n\\n    // Only keep servers that...\\n    servers = servers.filter((s) => {\\n        return (\\n            // have money.\\n            ns.getServerMaxMoney(s) != 0 &&\\n            // are below or equal to our hacking level.\\n            ns.getServerRequiredHackingLevel(s) <= ns.getHackingLevel()\\n        )\\n    });\\n\\n    // Sort by score.\\n    servers.sort((a, b) => { return getServerScore(ns, b, pct) - getServerScore(ns, a, pct); });\\n\\n    let data = [[\\\"SERVER\\\", \\\"Max $\\\", \\\"%h\\\", \\\"$/s\\\", \\\"RAM\\\", \\\"batchtime\\\", \\\"Score\\\"]];\\n\\n    for (let server of servers) {\\n        if (data.length >= topOnly) {\\n            break;\\n        }\\n        data.push(getServerInfo(ns, server, pct));\\n    }\\n\\tawait ns.write('servergrades.json', JSON.stringify(data, null, 2), 'w');\\n    ns.print(makeTable(data, false));\\n    await ns.sleep(10);\\n    squishLines(ns.getScriptName() + \\\" \\\" + ns.args.join(\\\" \\\"));\\n}\\n\\n/** Calculate the score of 1 server.\\n * @param {NS} ns\\n * @param {String} server       Server to score.\\n * @param {Number} pct          Percentage of maxMoney to hack.\\n * @return {Number} The server's score.\\n**/\\nexport function findOptimalServer(ns) {\\n    // Fail if no Formulas.exe\\n    if (ns.ls('home', 'Formulas.exe').length == 0) {\\n        ns.tprint(\\\"You need Formulas.exe to use this script.\\\");\\n        ns.exit();\\n    }\\n}\\n\\n\\n/** Calculate the score of 1 server.\\n * @param {NS} ns\\n * @param {String} server       Server to score.\\n * @param {Number} pct          Percentage of maxMoney to hack.\\n * @return {Number} The server's score.\\n**/\\nexport function getServerScore(ns, server, pct) {\\n    let chanceToHack;\\n    const srv = ns.getServer(server);\\n    srv.hackDifficulty = srv.minDifficulty;\\n    srv.moneyAvailable = srv.moneyMax;\\n    chanceToHack = ns.formulas.hacking.hackChance(srv, ns.getPlayer());\\n    let batchInfo = getBatchInfo(ns, server, pct);\\n    let moneyPerSec = batchInfo[2] / batchInfo[1];\\n    return (moneyPerSec * chanceToHack) / (batchInfo[0] * 0.25);\\n}\\n\\n/** Get all the data of 1 server.\\n * @param {NS} ns\\n * @param {String} srv          Server to score.\\n * @param {Number} pct          Percentage of maxMoney to hack.\\n * @return {Object[]} The server's information.\\n**/\\nfunction getServerInfo(ns, srv, pct) {\\n    let batchInfo = getBatchInfo(ns, srv, pct);\\n    let chanceToHack = ns.formulas.hacking.hackChance(ns.getServer(srv), ns.getPlayer());\\n    return ([\\n        srv,\\n        ns.nFormat(ns.getServerMaxMoney(srv), \\\"0.00a\\\"), // \\\"Max $\\\"\\n        `${ns.nFormat(chanceToHack * 100, \\\"0.00\\\")}%`, // \\\"%h\\\"\\n        ns.nFormat(batchInfo[2] / batchInfo[1], \\\"0.00a\\\"), //\\\"$/s\\\"\\n        ns.nFormat(batchInfo[0] * 1e9, \\\"0.00b\\\"), //\\\"RAM/b\\\"\\n        timeFormat(ns, batchInfo[1], true), //\\\"tB\\\"\\n        ns.nFormat(getServerScore(ns, srv, pct), \\\"0.000\\\") //\\\"Score\\\"\\n    ]);\\n}\\n\\n/**Format a given number in ms to a human-readable string, except shorter.\\n * @param {NS} ns\\n * @param {Number} time\\n * @param {Boolean} msAcc\\n * @return {String} a shortened ns.tFormat();\\n */\\nexport function timeFormat(ns, time, msAcc) {\\n    return ns.tFormat(time, msAcc)\\n        .replaceAll(\\\"days\\\", \\\"d\\\")\\n        .replaceAll(\\\"hours\\\", \\\"h\\\")\\n        .replaceAll(\\\"minutes\\\", \\\"m\\\")\\n        .replaceAll(\\\"seconds\\\", \\\"s\\\")\\n\\n        .replaceAll(\\\"day\\\", \\\"d\\\")\\n        .replaceAll(\\\"hour\\\", \\\"h\\\")\\n        .replaceAll(\\\"minute\\\", \\\"m\\\")\\n        .replaceAll(\\\"second\\\", \\\"s\\\")\\n\\n        .replaceAll(\\\",\\\", \\\"\\\")\\n        .replaceAll(\\\" \\\", \\\"\\\");\\n}\",\"filename\":\"/WIP/gradeservers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/script_tools.js\",\"url\":\"blob:file:///c25e5603-38a5-4872-b8d9-c83df423dcdb\",\"moduleSequenceNumber\":360880},{\"filename\":\"/utils/networkmap.js\",\"url\":\"blob:file:///49d996e6-04be-4768-bfb8-567039a32457\",\"moduleSequenceNumber\":351023},{\"filename\":\"/WIP/hyperbatcher.js\",\"url\":\"blob:file:///f73a8bdb-89f0-47f0-a4e6-6f773bdaba21\",\"moduleSequenceNumber\":361259},{\"filename\":\"/WIP/tablemaker.js\",\"url\":\"blob:file:///cf48c8fa-3283-4c87-978e-abe40de088b0\",\"moduleSequenceNumber\":400},{\"filename\":\"/WIP/gradeservers.js\",\"url\":\"blob:file:///b41b1f4a-fffc-41a5-9b49-b8d790fbe521\",\"moduleSequenceNumber\":373299}],\"dependents\":[],\"ramUsage\":14.15,\"server\":\"home\",\"moduleSequenceNumber\":3141,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Table Maker (c) 2022 Tyrope\\n// Usage: import {squishLines, makeTable} from '/lib/tableMaker.js'\\n\\n/**\\n * Modifies one css property of the specified log\\n * @param logName name that appears in the tilebar of the log\\n * @param style property name of the style to change (hyphen-case)\\n * @param value value to change the property to\\n * @returns true if the log was found, false otherwise\\n * @link https://discord.com/channels/415207508303544321/895204896788328448/930188523888336956\\n * @author Discord cyn#1161\\n */\\nfunction modifyLogStyle(logName, style, value) {\\n    const doc = eval('document');\\n    const titleBar = doc.querySelector(`[title=\\\"${logName}\\\"]`)\\n    if (titleBar == null || titleBar == undefined) return false\\n\\n    const paragraphs = titleBar.parentNode.parentNode.parentNode\\n        .lastChild.firstChild.firstChild.childNodes\\n\\n    for (const p of paragraphs) {\\n        if (p.style.getPropertyValue(style) != value) {\\n            p.style.setProperty(style, value)\\n        }\\n    }\\n    return true\\n}\\n\\n/**Wrapper for modifyLogStyle\\n * @param {String} logName script name and arguments.\\n */\\nexport function squishLines(logName) {\\n    if (logName.includes(\\\" \\\") == false) {\\n        // There's no arguments, add a trailing space.\\n        logName += \\\" \\\";\\n    }\\n    modifyLogStyle(logName, 'line-height', '1');\\n}\\n\\n/** Because all self-respecting datasheets should be displayed in a pretty way.\\n * @param {Object[]} data          Information to put in a table.\\n * @param {Boolean} hasMiddleRows? When true, adds horizontal lines between ALL rows, not just below the header.\\n * @return {String}                The table, in a multiline string.\\n**/\\nexport function makeTable(data, hasMiddleRows) {\\n    // Thanks to @Daturo#2506 on the Bitburner Discord for showing me these ASCII characters.\\n    let border = [['╔', '╦', '╗'], ['╠', '╬', '╣'], ['╚', '╩', '╝'], ['═', '║']];\\n    // Find the widest text in each colomn\\n    let widths = Array();\\n    // Loop rows.\\n    for (let y = 0; y < data.length; y++) {\\n        // Loop columns.\\n        for (let x = 0; x < data[y].length; x++) {\\n            // Check if we're bigger (+2 for spaces between data and borders).\\n            if (widths[x] == undefined) {\\n                widths[x] = String(data[y][x]).length + 2;\\n            } else if (widths[x] < String(data[y][x]).length + 2) {\\n                widths[x] = String(data[y][x]).length + 2;\\n            }\\n        }\\n    }\\n    let table = \\\"\\\";\\n    // Top row.\\n    table += border[0][0]\\n    for (let w of widths) {\\n        table += \\\"\\\".padEnd(w, border[3][0]);\\n        table += border[0][1];\\n    }\\n    table = table.substr(0, table.length - 1) + border[0][2] + \\\"\\\\n\\\";\\n    // Draw the actual data bits.\\n    for (let y = 0; y < data.length; y++) {\\n        table += border[3][1];\\n        for (let x = 0; x < data[y].length; x++) {\\n            table += \\\" \\\" + String(data[y][x]).padEnd(widths[x] - 1) + border[3][1];\\n        }\\n        table += \\\"\\\\n\\\";\\n\\n        if (hasMiddleRows || y == 0) {\\n            // Insert a horizontal line.\\n            if (y != data.length - 1) {\\n                table += border[1][0];\\n                for (let x = 0; x < data[y].length; x++) {\\n                    table += \\\"\\\".padEnd(widths[x], border[3][0]);\\n                    if (x != data[y].length - 1) {\\n                        table += border[1][1];\\n                    } else {\\n                        table += border[1][2] + \\\"\\\\n\\\";\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    // Bottom row.\\n    table += border[2][0];\\n    for (let w of widths) {\\n        table += \\\"\\\".padEnd(w, border[3][0]);\\n        table += border[2][1];\\n    }\\n    table = table.substr(0, table.length - 1) + border[2][2];\\n\\n    return table;\\n}\",\"filename\":\"/WIP/tablemaker.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":3142,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Mid Gameplan w/ Gangs (1 TB RAM)\\n * 1. Buy programs from darkweb\\n * 2. Run findOptimal with 1 thread\\n * 3. Run easy-hack with 2 threads\\n * 4. Start gang\\n * 5. Buy all the +hacking exp augs\\n * 6. Buy all the NFs\\n * 7. If gangs are making enough money that saving up for Qlink (25t) isn't bananas, do that\\n */\\n\\nconst HOME = 'home';\\nconst MIN_STAT = 30;\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.exec('obtainPrograms.js', HOME);\\n\\t// 2-3 Run hacking programs\\n\\t//TODO figure out optimal thread counts here\\n\\tns.exec('findOptimal.js', HOME);\\n\\tns.exec('easy-hack.script', HOME, 2);\\n\\t// 4. Start a gang\\n\\tns.exec('gangs.js', HOME);\\n\\t// TODO midgame?\\n}\",\"filename\":\"/WIP/midgameplan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.9,\"server\":\"home\",\"moduleSequenceNumber\":3143,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const factionList = [\\n\\t/* basic factions */\\n\\t\\\"CyberSec\\\",\\n\\t\\\"Tian Di Hui\\\",\\n\\t\\\"Netburners\\\",\\n\\t\\\"NiteSec\\\",\\n\\t\\\"The Black Hand\\\",\\n\\t\\\"BitRunners\\\",\\n];\\n\\nexport const locationFactionList = [\\n\\t\\\"Sector-12\\\",\\n\\t\\\"Chongqing\\\",\\n\\t\\\"New Tokyo\\\",\\n\\t\\\"Ishima\\\",\\n\\t\\\"Aevum\\\",\\n\\t\\\"Volhaven\\\",\\n\\n];\\n\\nexport const gangList = [\\n\\t\\\"Slum Snakes\\\",\\n\\t\\\"Tetrads\\\",\\n\\t\\\"Silhouette\\\",\\n\\t\\\"Speakers for the Dead\\\",\\n\\t\\\"The Dark Army\\\",\\n\\t\\\"The Syndicate\\\",\\n];\\n\\nexport const endgameFactionList = [\\n\\t\\\"The Covenant\\\",\\n\\t\\\"Daedalus\\\",\\n\\t\\\"Illuminati\\\",\\n];\\n\\nexport const corpList = [\\n\\t\\\"ECorp\\\",\\n\\t\\\"MegaCorp\\\",\\n\\t\\\"KuaiGong International\\\",\\n\\t\\\"Four Sigma\\\",\\n\\t\\\"NWO\\\",\\n\\t\\\"Blade Industries\\\",\\n\\t\\\"OmniTek Incorporated\\\",\\n\\t\\\"Bachman & Associates\\\",\\n\\t\\\"Clarke Incorporated\\\",\\n\\t\\\"Fulcrum Secret Technologies\\\",\\n];\\n\\nexport const aug_bonus_types = {\\n\\thack: [\\\"hacking_mult\\\", \\\"hacking_exp_mult\\\", \\\"hacking_speed_mult\\\", \\\"hacking_chance_mult\\\", \\\"hacking_grow_mult\\\", \\\"hacking_money_mult\\\"],\\n\\tfaction: [\\\"faction_rep_mult\\\"],\\n\\tcompany: [\\\"company_rep_mult\\\", \\\"work_money_mult\\\"],\\n\\tcrime: [\\\"crime_success_mult\\\", \\\"crime_money_mult\\\"],\\n\\tcombat: [\\\"agility_exp_mult\\\", \\\"agility_mult\\\", \\\"defense_exp_mult\\\", \\\"defense_mult\\\", \\\"dexterity_exp_mult\\\", \\\"dexterity_mult\\\", \\\"strength_exp_mult\\\", \\\"strength_mult\\\"],\\n\\tcharisma: [\\\"charisma_exp_mult\\\", \\\"charisma_mult\\\"]\\n};\\n\\nconst AUGMAP = \\\"augmap.json.txt\\\";\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst flagdata = ns.flags([\\n\\t\\t[\\\"help\\\", false],\\n\\t\\t[\\\"ask\\\", false],\\n\\t\\t[\\\"auto\\\", false],\\n\\t])\\n\\tlet factions_to_consider = [];\\n\\tlet types_to_consider = [];\\n\\tif (flagdata.help) {\\n\\t\\tns.tprint(\\n\\t\\t\\t`--ask prompts to buy; --auto autobuys any augs. If neither are specified, no purchasing will happen.`\\n\\t\\t);\\n\\t\\treturn\\n\\t}\\n\\t// Build the aug map first\\n\\tlet aug_map = await buildAugMap(ns);\\n\\t// Look for preferred augs based on the exp+, faction+, then hack+ stats\\n\\tlet preferred = await listPreferredAugs(ns);\\n\\tns.tprint(`Augs to buy: ${preferred.join(\\\", \\\")}`);\\n\\t// Now check to see if we should buy\\n\\tif (preferred.length > 0) {\\n\\t\\tif (!flagdata.ask && !flagdata.auto) return\\n\\t\\tawait promptForAugs(ns, aug_map, preferred, flagdata.ask)\\n\\t}\\n}\\n\\n/**\\n * Return an Object of the aug map from JSON\\n * @param {NS} ns\\n * @returns Object of the aug map\\n */\\nexport async function readAugMap(ns) {\\n\\tif (!ns.ls('home', AUGMAP)) {\\n\\t\\tawait buildAugMap(ns);\\n\\t}\\n\\treturn JSON.parse(ns.read(AUGMAP));\\n}\\n\\n/**\\n * Build up a map of augmentations available everywhere for future slicing\\n * @param {NS} ns\\n * @returns Object of the aug map\\n */\\nexport async function buildAugMap(ns) {\\n\\tlet aug_map = {};\\n\\t/* Keys: augmentation name; \\n\\t * Values: an object aug_model \\n\\t * \\\"factions\\\": [list of strings], \\n\\t * \\\"repreq\\\": 0, \\n\\t * \\\"cost\\\": 0, \\n\\t * \\\"stats\\\": [list of strings],\\n\\t * \\\"prereqs\\\": [list of strings],\\n\\t * \\\"owned\\\": false,\\n\\t*/\\n\\tlet factions_to_consider = factionList.concat(locationFactionList, gangList, endgameFactionList, corpList);\\n\\t// ns.tprint(`Factions to consider: ${factions_to_consider}`);\\n\\tlet my_augs = ns.getOwnedAugmentations();\\n\\tfor (const faction of factions_to_consider) {\\n\\t\\tlet avail_augs = ns.getAugmentationsFromFaction(faction);\\n\\t\\tfor (const aug of avail_augs) {\\n\\t\\t\\t// ns.tprint(`Considering ${aug} from ${faction}`);\\n\\t\\t\\t// Get basic aug data\\n\\t\\t\\tif (!(aug in aug_map)) {\\n\\t\\t\\t\\taug_map[aug] = getAugData(ns, aug);\\n\\t\\t\\t\\taug_map[aug][\\\"factions\\\"] = [];\\n\\t\\t\\t}\\n\\t\\t\\t// Add to the list of factions already found for a given aug\\n\\t\\t\\tlet augs_factions = [];\\n\\t\\t\\t// are there already factions?\\n\\t\\t\\t// ns.tprint(`Existing factions: ${aug_map[aug][\\\"factions\\\"]}`);\\n\\t\\t\\tif (aug in aug_map && \\\"factions\\\" in aug_map[aug]) {\\n\\t\\t\\t\\taugs_factions = aug_map[aug][\\\"factions\\\"];\\n\\t\\t\\t\\t// ns.tprint(`Pre factions: ${augs_factions}`);\\n\\t\\t\\t}\\n\\t\\t\\taugs_factions.push(faction);\\n\\t\\t\\t// ns.tprint(`Mid factions: ${augs_factions}`);\\n\\t\\t\\taug_map[aug][\\\"factions\\\"] = augs_factions;\\n\\t\\t\\t// ns.tprint(`Post factions: ${augs_factions}`);\\n\\t\\t\\t// Check if I own any of them\\n\\t\\t\\taug_map[aug][\\\"owned\\\"] = my_augs.includes(aug);\\n\\t\\t}\\n\\t}\\n\\tawait ns.write(\\\"augmap.json\\\", JSON.stringify(aug_map, null, 2), 'w');\\n\\treturn aug_map;\\n}\\n\\n/**\\n * Get a list of names of priority augs\\n * @param {NS} ns\\n * @returns List of aug names (strings) to purchase\\n */\\nexport async function listPreferredAugs(ns) {\\n\\tlet aug_map = await readAugMap(ns);\\n\\t/* Preferred order:\\n\\t1. Hacking exp+ augs\\n\\t2. Faction rep+ augs\\n\\t3. Hacking augs \\n\\t */\\n\\tlet exp_augs = listExpAugs(aug_map);\\n\\t// ns.tprint(\\\"EXP Augs: \\\");\\n\\t// ns.tprint(exp_augs);\\n\\tif (exp_augs.length > 0) return exp_augs\\n\\tlet faction_augs = listFactionAugs(aug_map);\\n\\t// ns.tprint(\\\"Faction Augs: \\\");\\n\\t// ns.tprint(faction_augs);\\n\\tif (faction_augs.length > 0) return faction_augs\\n\\tlet hacking_augs = listHackingAugs(aug_map);\\n\\t// ns.tprint(\\\"Hacking Augs:\\\");\\n\\t// ns.tprint(hacking_augs);\\n\\tif (hacking_augs.length > 0) return hacking_augs\\n\\t// If nothing left to buy, return an empty list\\n\\treturn []\\n}\\n\\n/**\\n * Fetch all data about an aug\\n * @param {NS} ns\\n * @param {string} aug Name of an aug to fetch data about\\n * @returns An object of data about an aug\\n */\\nfunction getAugData(ns, aug) {\\n\\treturn {\\n\\t\\t\\\"stats\\\": ns.getAugmentationStats(aug),\\n\\t\\t\\\"repreq\\\": ns.getAugmentationRepReq(aug),\\n\\t\\t\\\"cost\\\": ns.getAugmentationPrice(aug),\\n\\t\\t\\\"prereqs\\\": ns.getAugmentationPrereq(aug),\\n\\t}\\n}\\n\\n/**\\n* Get a list of names of exp-enhancing augs\\n* @param {object} aug_map Map of augs as generated by readAugMap\\n* @param {boolean} owned True to include augs I own, false to exclude them\\n* @returns List of aug names to purchase\\n*/\\nfunction listExpAugs(aug_map, owned = false) {\\n\\tlet desired_augs = {};\\n\\t// Map the shorthand type arguments to actual aug stats we want, filtered to only include exp\\n\\tlet aug_stat_types = getStatsFromTypes([\\\"hack\\\"]).filter(stat => stat.includes(\\\"exp\\\"));\\n\\t// Now let's take a look at the rep requirements, and costs...\\n\\tfor (let [aug, model] of Object.entries(aug_map)) {\\n\\t\\t// Look for matching stats\\n\\t\\tif (aug_stat_types.some(item => Object.keys(model[\\\"stats\\\"]).includes(item))) {\\n\\t\\t\\t// Skip items we own unless specifically told to include them\\n\\t\\t\\tif (aug_map[aug][\\\"owned\\\"] && !owned) continue\\n\\t\\t\\tdesired_augs[aug] = model;\\n\\t\\t}\\n\\t}\\n\\treturn Object.keys(sortAugsByRepThenCost(desired_augs, aug_map))\\n}\\n\\n/**\\n* Get a list of names of faction-rep-gain augs\\n* @param {object} aug_map Map of augs as generated by readAugMap\\n* @param {boolean} owned True to include augs I own, false to exclude them\\n* @returns List of aug names to purchase\\n*/\\nfunction listFactionAugs(aug_map, owned = false) {\\n\\tlet desired_augs = {};\\n\\t// Map the shorthand type arguments to actual aug stats we want, filtered to only include exp\\n\\tlet aug_stat_types = getStatsFromTypes([\\\"faction\\\"]);\\n\\t// Now let's take a look at the rep requirements, and costs...\\n\\tfor (let [aug, model] of Object.entries(aug_map)) {\\n\\t\\t// Look for matching stats\\n\\t\\tif (aug_stat_types.some(item => Object.keys(model[\\\"stats\\\"]).includes(item))) {\\n\\t\\t\\t// Skip items we own unless specifically told to include them\\n\\t\\t\\tif (aug_map[aug][\\\"owned\\\"] && !owned) continue\\n\\t\\t\\tdesired_augs[aug] = model;\\n\\t\\t}\\n\\t}\\n\\treturn Object.keys(sortAugsByRepThenCost(desired_augs, aug_map))\\n}\\n\\n/**\\n* Get a list of names of hacking augs\\n* @param {object} aug_map Map of augs as generated by readAugMap\\n* @param {boolean} owned True to include augs I own, false to exclude them\\n* @returns List of aug names to purchase\\n*/\\nfunction listHackingAugs(aug_map, owned = false) {\\n\\tlet desired_augs = {};\\n\\t// Map the shorthand type arguments to actual aug stats we want, filtered to only include exp\\n\\tlet aug_stat_types = getStatsFromTypes([\\\"hack\\\"]);\\n\\t// Now let's take a look at the rep requirements, and costs...\\n\\tfor (let [aug, model] of Object.entries(aug_map)) {\\n\\t\\t// Look for matching stats\\n\\t\\tif (aug_stat_types.some(item => Object.keys(model[\\\"stats\\\"]).includes(item))) {\\n\\t\\t\\t// Skip items we own unless specifically told to include them\\n\\t\\t\\tif (aug_map[aug][\\\"owned\\\"] && !owned) continue\\n\\t\\t\\tdesired_augs[aug] = model;\\n\\t\\t}\\n\\t}\\n\\treturn Object.keys(sortAugsByRepThenCost(desired_augs, aug_map))\\n}\\n\\n/**\\n * Return a list of aug stats from the passed in types\\n * @param {array} types Shorthand types passed in to ns.flags\\n */\\nfunction getStatsFromTypes(types) {\\n\\tlet stat_list = [];\\n\\tfor (let type of types) {\\n\\t\\tstat_list.push(aug_bonus_types[type]);\\n\\t}\\n\\treturn stat_list.flat()\\n}\\n\\n/**\\n * Sort augs by rep req, then cost\\n * @param aug_list List of aug names to sort\\n * @param aug_map Map of augs from readAugMap()\\n * @returns Same list of aug names sorted by rep, then by cost\\n */\\nfunction sortAugsByRepThenCost(aug_list, aug_map) {\\n\\tlet aug_objects = {};\\n\\tfor (const aug in aug_list) {\\n\\t\\taug_objects[aug] = aug_map[aug]\\n\\t}\\n\\t// Sort by rep\\n\\tlet sorted_rep_augs = Object.fromEntries(Object.entries(aug_objects).sort(([, a], [, b]) => a[\\\"repreq\\\"] - b[\\\"repreq\\\"]).reverse());\\n\\treturn Object.fromEntries(\\n\\t\\tObject.entries(sorted_rep_augs).sort(\\n\\t\\t\\t([, a], [, b]) => a[\\\"cost\\\"] - b[\\\"cost\\\"]\\n\\t\\t).reverse()\\n\\t);\\n}\\n\\n/**\\n * Prompt to buy a list of augs\\n * @param aug_map Map of augs from readAugMap()\\n * @param {array} desired_augs List of strings to buy\\n * @param {boolean} should_prompt True if we should prompt to buy; false means we buy silently\\n * @returns Same list of aug names sorted by rep, then by cost\\n */\\nasync function promptForAugs(ns, aug_map, desired_augs, should_prompt) {\\n\\tfor (const aug of desired_augs) {\\n\\t\\t// ns.tprint(`Considering ${aug}`);\\n\\t\\t// Do I have a faction for whom satisifes the rep cost?\\n\\t\\tlet satisfy_rep = augRepAvailable(ns, aug_map[aug][\\\"repreq\\\"], aug_map[aug][\\\"factions\\\"]);\\n\\t\\t// ns.tprint(\\\"Rep: \\\" + satisfy_rep);\\n\\t\\t// Do I have the money?\\n\\t\\tlet rich_af = augCostAvailable(ns, aug_map[aug][\\\"cost\\\"]);\\n\\t\\t// ns.tprint(\\\"Cost: \\\" + rich_af);\\n\\t\\t// Do I satisfy pre-reqs?\\n\\t\\tlet needed_prereqs = augPreReqsAvailable(ns, aug_map[aug][\\\"prereqs\\\"]);\\n\\t\\t// ns.tprint(\\\"PreReqs: \\\" + needed_prereqs);\\n\\t\\tif (needed_prereqs.length > 0) {\\n\\t\\t\\t// Calculate our pre-reqs first\\n\\t\\t\\tawait promptForAugs(ns, aug_map, needed_prereqs, should_prompt);\\n\\t\\t}\\n\\t\\t// If all of those are true, let's do it\\n\\t\\tif (satisfy_rep && rich_af && (needed_prereqs.length == 0)) {\\n\\t\\t\\tawait purchaseAug(ns, aug, satisfy_rep, should_prompt);\\n\\t\\t}\\n\\t}\\n}\\n\\n/** \\n * Purchase an aug. Return true if succeeded, otherwise false.\\n * @param {NS} ns \\n * @param {string} aug Name of augmentation \\n * @param {string} faction Which faction to buy from\\n * @param {boolean} should_prompt True if we should prompt to buy; false means we buy silently\\n**/\\nasync function purchaseAug(ns, aug, faction, should_prompt = true) {\\n\\tlet should_buy = true;\\n\\tlet did_buy = false;\\n\\tif (should_prompt) {\\n\\t\\tshould_buy = await ns.prompt(`Buy ${aug}?`);\\n\\t}\\n\\tif (should_buy) {\\n\\t\\tawait ns.sleep(5);\\n\\t\\tdid_buy = ns.purchaseAugmentation(faction, aug);\\n\\t\\tif (did_buy) {\\n\\t\\t\\tns.tprint(`Purchased ${aug}!`);\\n\\t\\t}\\n\\t} else ns.exit();\\n}\\n\\n/** \\n * Return list of factions I have enough rep to buy from\\n * @param {NS} ns \\n * @param {string} aug Name of augmentation \\n * @param {number} repreq Amount of rep required \\n * @param {array} factions List of factions to check \\n**/\\nfunction augRepAvailable(ns, repreq, factions) {\\n\\t// Is this aug available to purchase right now?\\n\\tlet player = ns.getPlayer();\\n\\tlet myfactions = player.factions;\\n\\tlet common_factions = factions.filter(faction => myfactions.includes(faction));\\n\\treturn common_factions.find(faction => repreq <= ns.getFactionRep(faction))\\n}\\n\\n/** \\n * Return true if I have enough money to buy a faction\\n * @param {NS} ns \\n * @param {string} aug Name of augmentation \\n * @param {number} price Cost of aug\\n**/\\nfunction augCostAvailable(ns, price) {\\n\\t// Is this aug available to purchase right now?\\n\\tlet my_money = ns.getPlayer().money;\\n\\treturn (my_money >= price)\\n}\\n\\n/** \\n * Return a list of prereqs I do NOT satisfy; otherwise empty list\\n * @param {NS} ns \\n * @param {string} aug Name of augmentation \\n * @param {number} prereqs List of aug prereqs\\n**/\\nfunction augPreReqsAvailable(ns, prereqs) {\\n\\t// Do I meet all the pre-reqs?\\n\\tlet my_augs = ns.getOwnedAugmentations(true);\\n\\treturn prereqs.filter(item => !my_augs.includes(item))\\n}\",\"filename\":\"FastAugmentMe.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"FastAugmentMe.js\",\"url\":\"blob:file:///56141f7b-aea7-48ed-a4e2-ce02e018fe7d\",\"moduleSequenceNumber\":199332}],\"dependents\":[],\"ramUsage\":33.3,\"server\":\"home\",\"moduleSequenceNumber\":3144,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getOwnedAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getAugmentationsFromFaction\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getAugmentationStats\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getAugmentationRepReq\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getAugmentationPrice\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getAugmentationPrereq\",\"cost\":5},{\"type\":\"fn\",\"name\":\"purchaseAugmentation\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getFactionRep\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// hyperBatcher Hack script (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner\\n// Not intended for direct use; run hyperBatcher.js instead.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const expProfit = ns.args[1];\\n    let affectStocks = ns.args[2] ? ns.args[2] : false;\\n\\n    let profit = await ns.hack(ns.args[0], { stock: affectStocks });\\n\\n    // We hacked \\n    if (\\n        // We hacked something, but \\n        profit != 0 &&\\n        // a different amount than expected, abort.\\n        Math.abs((profit - expProfit) / ((profit + expProfit) / 2)) > 0.05\\n    ) {\\n        ns.write(`ABORT_${ns.args[0]}.txt`, \\\"\\\", 'w');\\n    }\\n}\",\"filename\":\"/batch/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/batch/hack.js\",\"url\":\"blob:file:///4d765ef7-e1d8-4b3d-8921-411569d4f669\",\"moduleSequenceNumber\":361641}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":3145,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Target Hack (c)2022 Tyrope\\n// usage: run targetHack.js [target]\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog('getServerSecurityLevel');\\n    ns.disableLog('getServerMaxMoney');\\n\\n    let srv = ns.getHostname();\\n\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(srv) > ns.getServerMinSecurityLevel(srv)) {\\n            await ns.weaken(srv);\\n        }\\n\\n        // Make sure the server has max money available.\\n        if (ns.getServerMoneyAvailable(srv) < ns.getServerMaxMoney(srv)) {\\n            await ns.grow(srv);\\n            continue;\\n        }\\n        await ns.hack(srv);\\n    }\\n}\",\"filename\":\"basicHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"basicHack.js\",\"url\":\"blob:file:///33070a67-cd51-4f38-9965-7d672682a22c\",\"moduleSequenceNumber\":205765}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"home\",\"moduleSequenceNumber\":3146,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Hack XP grow script (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/growXP.js\\n// usage: run growXP.js\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    // Infinite loop, go!\\n    while (true) {\\n        while (ns.getServerSecurityLevel('joesguns') > ns.getServerMinSecurityLevel('joesguns')) {\\n            await ns.weaken('joesguns');\\n        }\\n        await ns.grow('joesguns');\\n    }\\n}\",\"filename\":\"growHackingXP.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"growHackingXP.js\",\"url\":\"blob:file:///f1252026-7c10-48c3-bf78-29f22530c92d\",\"moduleSequenceNumber\":2544}],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"home\",\"moduleSequenceNumber\":3147,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { workoutAllUntil, commitKarmaFocusedCrime } from \\\"utils/crimes.js\\\";\\n\\n/**\\n * Starting game plan\\n * 1. Gym until 30 of each stat\\n * 2. Start mugging until we have enough money for the next RAM upgrade\\n * 3. Spin up the earlygameplan.js\\n */\\n\\nconst HOME = 'home';\\nconst MIN_STAT = 100;\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait workoutAllUntil(ns, MIN_STAT);\\n\\tawait crimeWhileUpgradingLoop(ns);\\n\\tns.spawn('earlygameplan.js');\\n}\\n\\n/** \\n * Commit crimes, but if we have enough money, buy more home upgrades\\n * @param {NS} ns \\n**/\\nasync function crimeWhileUpgradingLoop(ns) {\\n\\tns.disableLog(\\\"ALL\\\"); // Disable the log\\n\\tns.tail(); // Open a window to view the status of the script\\n\\tlet timeout = 250; // In ms - too low of a time will result in a lockout/hang\\n\\twhile (ns.getServerMaxRam(HOME) <= 32) {\\n\\t\\tawait ns.sleep(timeout); // Wait it out first\\n\\t\\tif (ns.isBusy()) continue;\\n\\t\\t// See if we can upgrade our home\\n\\t\\tupgradeHome(ns);\\n\\t\\t// Otherwise, commit crime!\\n\\t\\tcommitKarmaFocusedCrime(ns);\\n\\t}\\n\\tns.tprint(\\\"Bought enough RAM to move to Early Game\\\")\\n}\\n\\n\\n/** \\n * Upgrade the home\\n * @param {NS} ns \\n**/\\nfunction upgradeHome(ns) {\\n\\t// Do I have enough money to buy a RAM or core upgrade?\\n\\tlet ram_cost = ns.getUpgradeHomeRamCost();\\n\\tlet core_cost = ns.getUpgradeHomeCoresCost();\\n\\tlet money = ns.getPlayer().money;\\n\\tlet did_upgrade = false;\\n\\tif (money > ram_cost) {\\n\\t\\tdid_upgrade = ns.upgradeHomeRam();\\n\\t\\tif (did_upgrade) ns.print(`Bought RAM upgrade for ${ns.nFormat(ram_cost, '0.00a')}`)\\n\\t}\\n\\tif (money > core_cost) {\\n\\t\\tdid_upgrade = ns.upgradeHomeCores();\\n\\t\\tif (did_upgrade) ns.print(`Bought Cores upgrade for ${ns.nFormat(core_cost, '0.00a')}`)\\n\\t}\\n}\",\"filename\":\"startinggameplan.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utils/crimes.js\",\"url\":\"blob:file:///23b105f2-ceca-4b63-96fc-c2a84d91f776\",\"moduleSequenceNumber\":3139},{\"filename\":\"startinggameplan.js\",\"url\":\"blob:file:///3026ba07-cd1d-41a6-87ec-ea1ecc731c9c\",\"moduleSequenceNumber\":3442}],\"dependents\":[],\"ramUsage\":26.65,\"server\":\"home\",\"moduleSequenceNumber\":3442,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getUpgradeHomeRamCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"getUpgradeHomeCoresCost\",\"cost\":1.5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"upgradeHomeRam\",\"cost\":3},{\"type\":\"fn\",\"name\":\"upgradeHomeCores\",\"cost\":3},{\"type\":\"fn\",\"name\":\"gymWorkout\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stopAction\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getCrimeChance\",\"cost\":5},{\"type\":\"fn\",\"name\":\"commitCrime\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { maximizeScriptUse } from \\\"utils/script_tools.js\\\";\\n\\nconst HOME = 'home';\\nconst NETWORK_MAP = 'network_map.json';\\n\\n/** \\n * Create a network map in JSON format\\n * @param {NS} ns \\n**/\\nexport async function createNetworkMap(ns) {\\n\\tconst scanHost = (host, myParent, currentData = {}) => {\\n\\t\\tconst myConnections = ns.scan(host);\\n\\t\\tconst currentMoney = ns.getServerMoneyAvailable(host);\\n\\t\\tconst hackTime = ns.getHackTime(host);\\n\\n\\t\\tif (host == HOME) {\\n\\t\\t\\tmyParent = \\\"\\\";\\n\\t\\t}\\n\\n\\t\\tlet newData = {\\n\\t\\t\\t...currentData,\\n\\t\\t\\t[host]: {\\n\\t\\t\\t\\tparent: myParent,\\n\\t\\t\\t\\tconnections: myConnections,\\n\\t\\t\\t\\troot: ns.hasRootAccess(host),\\n\\t\\t\\t\\tcurrentMoney,\\n\\t\\t\\t\\tmaxMoney: ns.getServerMaxMoney(host),\\n\\t\\t\\t\\thackLevel: ns.getServerRequiredHackingLevel(host),\\n\\t\\t\\t\\thackTime,\\n\\t\\t\\t\\tports: ns.getServerNumPortsRequired(host),\\n\\t\\t\\t\\tmoneyPerSec: currentMoney / hackTime,\\n\\t\\t\\t\\tmaxRAM: ns.getServerMaxRam(host)\\n\\t\\t\\t}\\n\\t\\t};\\n\\n\\t\\t// Attempt to crack the server, record the result if we rooted it\\n\\t\\t// Obviously, skip home...\\n\\t\\tif (host != HOME && !newData[host][\\\"root\\\"]) {\\n\\t\\t\\tnewData[host][\\\"root\\\"] = crackServer(ns, host);\\n\\t\\t}\\n\\n\\t\\t// Recursively build the map of nodes\\n\\t\\tmyConnections\\n\\t\\t\\t.filter((node) => !newData[node]) // prevent infinite looping...\\n\\t\\t\\t.forEach((node) => {\\n\\t\\t\\t\\tnewData = scanHost(node, host, newData);\\n\\t\\t\\t});\\n\\n\\t\\treturn newData;\\n\\t};\\n\\n\\t// Recursively build the map\\n\\tconst data = scanHost(HOME, HOME);\\n\\t// Now make 'em all grow\\n\\tconst SERVERGROWER = \\\"serverGrower.js\\\";\\n\\tfor (const node of Object.keys(data)) {\\n\\t\\tawait ns.scp(SERVERGROWER, node);\\n\\t\\tmaximizeScriptUse(ns, SERVERGROWER, node);\\n\\t}\\n\\tawait ns.write(NETWORK_MAP, JSON.stringify(data, null, 2), 'w');\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst argData = ns.flags([\\n\\t\\t['daemon', false]\\n\\t]);\\n\\tif (argData.daemon) {\\n\\t\\twhile (true) {\\n\\t\\t\\tawait createNetworkMap(ns);\\n\\t\\t\\tawait ns.sleep(30000);\\n\\t\\t}\\n\\t} else {\\n\\t\\tawait createNetworkMap(ns);\\n\\t}\\n}\\n\\n/**\\n* Return an Object of the network map from JSON\\n* @param {NS} ns\\n*/\\nexport async function readNetworkMap(ns) {\\n\\tconst NETWORK_MAP = 'network_map.json.txt';\\n\\t// If we don't have a network map yet, make one\\n\\tif (!ns.ls('home', NETWORK_MAP)) {\\n\\t\\tawait createNetworkMap(ns);\\n\\t}\\n\\treturn JSON.parse(ns.read(NETWORK_MAP));\\n}\\n\\n/**\\n* Search for a path to specific server\\n* @param {NS} ns\\n* @param {string} server A server to generate a path for\\n* @returns Ordered list of servers from home to target server\\n*/\\nexport async function locateServer(ns, server) {\\n\\tlet network_map = await readNetworkMap(ns);\\n\\tlet premap_to_server = locateServerPrimitive(ns, server, network_map, []);\\n\\tpremap_to_server.push('home');\\n\\treturn premap_to_server.reverse();  // this will be a reverse-ordered list from home to target\\n}\\n\\n/**\\n* Crack a server\\n* @param {NS} ns\\n* @param {string} server A server to crack\\n* @param server_data Server data from BuildAugMap()\\n* @returns True if we nuked it\\n*/\\nexport function crackServer(ns, server) {\\n\\t// If we don't have root access, open ports and nuke it\\n\\tif (!ns.hasRootAccess(server)) {\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\")) {\\n\\t\\t\\tns.brutessh(server);\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\")) {\\n\\t\\t\\tns.ftpcrack(server);\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"RelaySMTP.exe\\\")) {\\n\\t\\t\\tns.relaysmtp(server);\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\")) {\\n\\t\\t\\tns.httpworm(server);\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\")) {\\n\\t\\t\\tns.sqlinject(server);\\n\\t\\t}\\n\\t\\tns.nuke(server);\\n\\t}\\n\\treturn ns.hasRootAccess(server)\\n}\\n\\n/**\\n* Search for a specific server by iterating through parents; generally don't call this publicly\\n* @param {string} server Server to look for\\n* @param {object} network_map Object of network map as generated by readNetworkMap()\\n* @param {array} connection_list An array of paths leading up to a server (in reverse order)\\n* @returns A reverse list of paths leading up a server\\n*/\\nfunction locateServerPrimitive(ns, server, network_map, connection_list) {\\n\\tif (!Object.keys(network_map).includes(server)) return []\\n\\tif (network_map[server].parent != '') {\\n\\t\\t// ns.tprint(`Current server: ${server}`)\\n\\t\\t// ns.tprint(`Parent: ${network_map[server].parent}`)\\n\\t\\tconnection_list.push(server);\\n\\t\\t// ns.tprint(`Current connection list: ${connection_list.join(\\\", \\\")}`)\\n\\t\\tlocateServerPrimitive(ns, network_map[server].parent, network_map, connection_list);\\n\\t}\\n\\treturn connection_list;\\n}\",\"filename\":\"/utils/networkmap.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/script_tools.js\",\"url\":\"blob:file:///2219e106-91c2-4d6e-b14d-8b96f5d97edb\",\"moduleSequenceNumber\":344860},{\"filename\":\"/utils/networkmap.js\",\"url\":\"blob:file:///597d931f-3086-41fc-b2b9-216c86ba82b5\",\"moduleSequenceNumber\":347517}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"home\",\"moduleSequenceNumber\":5571,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Server Grower (c) 2022 Tyrope\\n// https://github.com/tyrope/bitburner/blob/master/serverGrower.js\\n// Usage: run serverGrower.js [target]\\n// parameter target: The server to grow.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let tgt= ns.getHostname();\\n    if (ns.args[0]) tgt = ns.args[0]\\n    // Infinite loop, go!\\n    while (true) {\\n        // Make sure we're not fighting unneeded security.\\n        while (ns.getServerSecurityLevel(tgt) > ns.getServerMinSecurityLevel(tgt)) {\\n            await ns.weaken(tgt);\\n        }\\n        if (ns.getServerMoneyAvailable(tgt) < ns.getServerMaxMoney(tgt)) {\\n            await ns.grow(tgt);\\n        } else {\\n            break;\\n        }\\n    }\\n}\",\"filename\":\"serverGrower.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"serverGrower.js\",\"url\":\"blob:file:///f022ad71-83df-47e5-a2ff-b21b6f7f072c\",\"moduleSequenceNumber\":2191}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"home\",\"moduleSequenceNumber\":3150,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** Run a script on a host with the maximum possible threads\\n * @param {NS} ns \\n * @param {string} script Name of script to evaluate and run\\n * @param {string} host Name of server to execute on\\n * @param {number} threshold Maximum threshold of RAM to consume (default 100)\\n*/\\nexport function maximizeScriptUse(ns, script, host, threshold=100) {\\n\\tlet threads = maxThreads(ns, script, host, threshold);\\n\\t// ns.tprint(`${host} threads: ${threads}`);\\n\\tif (threads > 0) {\\n\\t\\t// Kill it first before recalculating usage\\n\\t\\tns.kill(script, host);\\n\\t\\tns.exec(script, host, threads);\\n\\t} else {\\n\\t\\tns.kill(script, 'home', host);\\n\\t\\tns.exec(script, 'home', 1, host);\\n\\t}\\n}\\n\\n/** Calculate maximum possible threads to run a script on a host\\n * @param {NS} ns \\n * @param {string} script Name of script to evaluate and run\\n * @param {string} host Name of server to execute on\\n * @param {number} threshold Maximum threshold of RAM to consume (default 100)\\n*/\\nexport function maxThreads(ns, script, host, threshold=100) {\\n\\tlet current_ram = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\n\\t// ns.tprint(`${host} current RAM: ${current_ram}`);\\n\\tlet script_cost = ns.getScriptRam(script);\\n\\t// ns.tprint(`${host} script cost: ${script_cost}`);\\n\\treturn Math.floor(current_ram * (threshold/100) / script_cost);\\n}\",\"filename\":\"/utils/script_tools.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":5667,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { maxThreads } from \\\"utils/script_tools.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t// Run a function with max memory usage\\n\\tlet script = ns.args[0];\\n\\tlet threads = maxThreads(ns, script, 'home');\\n\\tns.tprint(`Max threads for ${script}: ${threads}`);\\n}\",\"filename\":\"runMax.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/script_tools.js\",\"url\":\"blob:file:///6795dfab-b488-4165-864c-7ddb8cbf4c31\",\"moduleSequenceNumber\":2261},{\"filename\":\"runMax.js\",\"url\":\"blob:file:///74986538-feee-4d03-8ed0-7edf09800004\",\"moduleSequenceNumber\":4181}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"home\",\"moduleSequenceNumber\":3152,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"network_map.json.txt\",\"text\":\"{\\n  \\\"home\\\": {\\n    \\\"parent\\\": \\\"\\\",\\n    \\\"connections\\\": [\\n      \\\"n00dles\\\",\\n      \\\"foodnstuff\\\",\\n      \\\"sigma-cosmetics\\\",\\n      \\\"joesguns\\\",\\n      \\\"hong-fang-tea\\\",\\n      \\\"harakiri-sushi\\\",\\n      \\\"iron-gym\\\",\\n      \\\"darkweb\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 1821204568081046,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 1,\\n    \\\"hackTime\\\": 41.89887811491046,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 43466666651223.25,\\n    \\\"maxRAM\\\": 65536\\n  },\\n  \\\"n00dles\\\": {\\n    \\\"parent\\\": \\\"home\\\",\\n    \\\"connections\\\": [\\n      \\\"home\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 196875,\\n    \\\"maxMoney\\\": 196875,\\n    \\\"hackLevel\\\": 1,\\n    \\\"hackTime\\\": 41.89887811491046,\\n    \\\"ports\\\": 0,\\n    \\\"moneyPerSec\\\": 4698.813162969596,\\n    \\\"maxRAM\\\": 4\\n  },\\n  \\\"foodnstuff\\\": {\\n    \\\"parent\\\": \\\"home\\\",\\n    \\\"connections\\\": [\\n      \\\"home\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 5625000,\\n    \\\"maxMoney\\\": 5625000,\\n    \\\"hackLevel\\\": 1,\\n    \\\"hackTime\\\": 42.31578237476031,\\n    \\\"ports\\\": 0,\\n    \\\"moneyPerSec\\\": 132929.12677788726,\\n    \\\"maxRAM\\\": 16\\n  },\\n  \\\"sigma-cosmetics\\\": {\\n    \\\"parent\\\": \\\"home\\\",\\n    \\\"connections\\\": [\\n      \\\"home\\\",\\n      \\\"CSEC\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 6468750,\\n    \\\"maxMoney\\\": 6468750,\\n    \\\"hackLevel\\\": 5,\\n    \\\"hackTime\\\": 44.81720793385944,\\n    \\\"ports\\\": 0,\\n    \\\"moneyPerSec\\\": 144336.3006804548,\\n    \\\"maxRAM\\\": 16\\n  },\\n  \\\"CSEC\\\": {\\n    \\\"parent\\\": \\\"sigma-cosmetics\\\",\\n    \\\"connections\\\": [\\n      \\\"sigma-cosmetics\\\",\\n      \\\"neo-net\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 57,\\n    \\\"hackTime\\\": 41.690425984985524,\\n    \\\"ports\\\": 1,\\n    \\\"moneyPerSec\\\": 0,\\n    \\\"maxRAM\\\": 8\\n  },\\n  \\\"neo-net\\\": {\\n    \\\"parent\\\": \\\"CSEC\\\",\\n    \\\"connections\\\": [\\n      \\\"CSEC\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 3750000,\\n    \\\"maxMoney\\\": 14062500,\\n    \\\"hackLevel\\\": 50,\\n    \\\"hackTime\\\": 302.25558839114507,\\n    \\\"ports\\\": 1,\\n    \\\"moneyPerSec\\\": 12406.718499269477,\\n    \\\"maxRAM\\\": 32\\n  },\\n  \\\"joesguns\\\": {\\n    \\\"parent\\\": \\\"home\\\",\\n    \\\"connections\\\": [\\n      \\\"home\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 7031250,\\n    \\\"maxMoney\\\": 7031250,\\n    \\\"hackLevel\\\": 10,\\n    \\\"hackTime\\\": 52.11303248123192,\\n    \\\"ports\\\": 0,\\n    \\\"moneyPerSec\\\": 134923.06367955552,\\n    \\\"maxRAM\\\": 16\\n  },\\n  \\\"hong-fang-tea\\\": {\\n    \\\"parent\\\": \\\"home\\\",\\n    \\\"connections\\\": [\\n      \\\"home\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 8437500,\\n    \\\"maxMoney\\\": 8437500,\\n    \\\"hackLevel\\\": 30,\\n    \\\"hackTime\\\": 72.95824547372466,\\n    \\\"ports\\\": 0,\\n    \\\"moneyPerSec\\\": 115648.34029676193,\\n    \\\"maxRAM\\\": 16\\n  },\\n  \\\"harakiri-sushi\\\": {\\n    \\\"parent\\\": \\\"home\\\",\\n    \\\"connections\\\": [\\n      \\\"home\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 11250000,\\n    \\\"maxMoney\\\": 11250000,\\n    \\\"hackLevel\\\": 40,\\n    \\\"hackTime\\\": 83.38085196997105,\\n    \\\"ports\\\": 0,\\n    \\\"moneyPerSec\\\": 134923.06367955558,\\n    \\\"maxRAM\\\": 16\\n  },\\n  \\\"iron-gym\\\": {\\n    \\\"parent\\\": \\\"home\\\",\\n    \\\"connections\\\": [\\n      \\\"home\\\",\\n      \\\"zer0\\\",\\n      \\\"nectar-net\\\",\\n      \\\"max-hardware\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 15000000,\\n    \\\"maxMoney\\\": 56250000,\\n    \\\"hackLevel\\\": 100,\\n    \\\"hackTime\\\": 667.0468157597684,\\n    \\\"ports\\\": 1,\\n    \\\"moneyPerSec\\\": 22487.177279925927,\\n    \\\"maxRAM\\\": 32\\n  },\\n  \\\"zer0\\\": {\\n    \\\"parent\\\": \\\"iron-gym\\\",\\n    \\\"connections\\\": [\\n      \\\"iron-gym\\\",\\n      \\\"silver-helix\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 5625000,\\n    \\\"maxMoney\\\": 21093750,\\n    \\\"hackLevel\\\": 75,\\n    \\\"hackTime\\\": 432.5381695942249,\\n    \\\"ports\\\": 1,\\n    \\\"moneyPerSec\\\": 13004.632643812583,\\n    \\\"maxRAM\\\": 32\\n  },\\n  \\\"silver-helix\\\": {\\n    \\\"parent\\\": \\\"zer0\\\",\\n    \\\"connections\\\": [\\n      \\\"zer0\\\",\\n      \\\"the-hub\\\",\\n      \\\"comptek\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 33750000,\\n    \\\"maxMoney\\\": 126562500,\\n    \\\"hackLevel\\\": 150,\\n    \\\"hackTime\\\": 979.72501064716,\\n    \\\"ports\\\": 2,\\n    \\\"moneyPerSec\\\": 34448.44179052482,\\n    \\\"maxRAM\\\": 64\\n  },\\n  \\\"the-hub\\\": {\\n    \\\"parent\\\": \\\"silver-helix\\\",\\n    \\\"connections\\\": [\\n      \\\"silver-helix\\\",\\n      \\\"syscore\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 143505729.75,\\n    \\\"maxMoney\\\": 538146486.5625,\\n    \\\"hackLevel\\\": 311,\\n    \\\"hackTime\\\": 2958.9779842843477,\\n    \\\"ports\\\": 2,\\n    \\\"moneyPerSec\\\": 48498.410772970994,\\n    \\\"maxRAM\\\": 16\\n  },\\n  \\\"syscore\\\": {\\n    \\\"parent\\\": \\\"the-hub\\\",\\n    \\\"connections\\\": [\\n      \\\"the-hub\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 389990860.5,\\n    \\\"maxMoney\\\": 1462465726.875,\\n    \\\"hackLevel\\\": 629,\\n    \\\"hackTime\\\": 9088.721316856772,\\n    \\\"ports\\\": 4,\\n    \\\"moneyPerSec\\\": 42909.32100390044,\\n    \\\"maxRAM\\\": 0\\n  },\\n  \\\"comptek\\\": {\\n    \\\"parent\\\": \\\"silver-helix\\\",\\n    \\\"connections\\\": [\\n      \\\"silver-helix\\\",\\n      \\\"rothman-uni\\\",\\n      \\\"catalyst\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 181544040.75,\\n    \\\"maxMoney\\\": 680790152.8125,\\n    \\\"hackLevel\\\": 329,\\n    \\\"hackTime\\\": 4293.69697219366,\\n    \\\"ports\\\": 3,\\n    \\\"moneyPerSec\\\": 42281.521478039635,\\n    \\\"maxRAM\\\": 0\\n  },\\n  \\\"rothman-uni\\\": {\\n    \\\"parent\\\": \\\"comptek\\\",\\n    \\\"connections\\\": [\\n      \\\"comptek\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 143317905.75,\\n    \\\"maxMoney\\\": 537442146.5625,\\n    \\\"hackLevel\\\": 406,\\n    \\\"hackTime\\\": 3934.7424044629342,\\n    \\\"ports\\\": 3,\\n    \\\"moneyPerSec\\\": 36423.707327687676,\\n    \\\"maxRAM\\\": 64\\n  },\\n  \\\"catalyst\\\": {\\n    \\\"parent\\\": \\\"comptek\\\",\\n    \\\"connections\\\": [\\n      \\\"comptek\\\",\\n      \\\"alpha-ent\\\",\\n      \\\"millenium-fitness\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 231584302.5,\\n    \\\"maxMoney\\\": 868441134.375,\\n    \\\"hackLevel\\\": 445,\\n    \\\"hackTime\\\": 5792.884690613739,\\n    \\\"ports\\\": 3,\\n    \\\"moneyPerSec\\\": 39977.37135614629,\\n    \\\"maxRAM\\\": 64\\n  },\\n  \\\"alpha-ent\\\": {\\n    \\\"parent\\\": \\\"catalyst\\\",\\n    \\\"connections\\\": [\\n      \\\"catalyst\\\",\\n      \\\"galactic-cyber\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 534314597.25,\\n    \\\"maxMoney\\\": 2003679739.6875,\\n    \\\"hackLevel\\\": 543,\\n    \\\"hackTime\\\": 6267.11328619295,\\n    \\\"ports\\\": 4,\\n    \\\"moneyPerSec\\\": 85256.89146662566,\\n    \\\"maxRAM\\\": 128\\n  },\\n  \\\"galactic-cyber\\\": {\\n    \\\"parent\\\": \\\"alpha-ent\\\",\\n    \\\"connections\\\": [\\n      \\\"alpha-ent\\\",\\n      \\\"omnia\\\",\\n      \\\"unitalife\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 608550327.75,\\n    \\\"maxMoney\\\": 2282063729.0625,\\n    \\\"hackLevel\\\": 864,\\n    \\\"hackTime\\\": 11208.05412180351,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 54295.805599846346,\\n    \\\"maxRAM\\\": 0\\n  },\\n  \\\"omnia\\\": {\\n    \\\"parent\\\": \\\"galactic-cyber\\\",\\n    \\\"connections\\\": [\\n      \\\"galactic-cyber\\\",\\n      \\\"zeus-med\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 729714943.5,\\n    \\\"maxMoney\\\": 2736431038.125,\\n    \\\"hackLevel\\\": 929,\\n    \\\"hackTime\\\": 16889.416922907414,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 43205.45503914198,\\n    \\\"maxRAM\\\": 32\\n  },\\n  \\\"zeus-med\\\": {\\n    \\\"parent\\\": \\\"omnia\\\",\\n    \\\"connections\\\": [\\n      \\\"omnia\\\",\\n      \\\"infocomm\\\",\\n      \\\"nova-med\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 1102418220,\\n    \\\"maxMoney\\\": 4134068325,\\n    \\\"hackLevel\\\": 804,\\n    \\\"hackTime\\\": 12108.567323079198,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 91044.48037372401,\\n    \\\"maxRAM\\\": 0\\n  },\\n  \\\"infocomm\\\": {\\n    \\\"parent\\\": \\\"zeus-med\\\",\\n    \\\"connections\\\": [\\n      \\\"zeus-med\\\",\\n      \\\"run4theh111z\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 608313143.25,\\n    \\\"maxMoney\\\": 2281174287.1875,\\n    \\\"hackLevel\\\": 879,\\n    \\\"hackTime\\\": 14516.814780101886,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 41904.03697123775,\\n    \\\"maxRAM\\\": 0\\n  },\\n  \\\"run4theh111z\\\": {\\n    \\\"parent\\\": \\\"infocomm\\\",\\n    \\\"connections\\\": [\\n      \\\"infocomm\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 510,\\n    \\\"hackTime\\\": 41.690425984985524,\\n    \\\"ports\\\": 4,\\n    \\\"moneyPerSec\\\": 0,\\n    \\\"maxRAM\\\": 128\\n  },\\n  \\\"nova-med\\\": {\\n    \\\"parent\\\": \\\"zeus-med\\\",\\n    \\\"connections\\\": [\\n      \\\"zeus-med\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 848882115,\\n    \\\"maxMoney\\\": 3183307931.25,\\n    \\\"hackLevel\\\": 785,\\n    \\\"hackTime\\\": 12641.579419297237,\\n    \\\"ports\\\": 4,\\n    \\\"moneyPerSec\\\": 67150.00450847071,\\n    \\\"maxRAM\\\": 0\\n  },\\n  \\\"unitalife\\\": {\\n    \\\"parent\\\": \\\"galactic-cyber\\\",\\n    \\\"connections\\\": [\\n      \\\"galactic-cyber\\\",\\n      \\\"solaris\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 788496970.5,\\n    \\\"maxMoney\\\": 2956863639.375,\\n    \\\"hackLevel\\\": 794,\\n    \\\"hackTime\\\": 11958.481789533249,\\n    \\\"ports\\\": 4,\\n    \\\"moneyPerSec\\\": 65936.21032982113,\\n    \\\"maxRAM\\\": 32\\n  },\\n  \\\"solaris\\\": {\\n    \\\"parent\\\": \\\"unitalife\\\",\\n    \\\"connections\\\": [\\n      \\\"unitalife\\\",\\n      \\\"taiyang-digital\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 604622378.25,\\n    \\\"maxMoney\\\": 2267333918.4375,\\n    \\\"hackLevel\\\": 799,\\n    \\\"hackTime\\\": 12699.737563546292,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 47609.04508653204,\\n    \\\"maxRAM\\\": 16\\n  },\\n  \\\"taiyang-digital\\\": {\\n    \\\"parent\\\": \\\"solaris\\\",\\n    \\\"connections\\\": [\\n      \\\"solaris\\\",\\n      \\\"titan-labs\\\",\\n      \\\"microdyne\\\",\\n      \\\"applied-energetics\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 619957996.5,\\n    \\\"maxMoney\\\": 2324842486.875,\\n    \\\"hackLevel\\\": 854,\\n    \\\"hackTime\\\": 12680.97687185305,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 48888.82006212559,\\n    \\\"maxRAM\\\": 0\\n  },\\n  \\\"titan-labs\\\": {\\n    \\\"parent\\\": \\\"taiyang-digital\\\",\\n    \\\"connections\\\": [\\n      \\\"taiyang-digital\\\",\\n      \\\"fulcrumtech\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 564357929.25,\\n    \\\"maxMoney\\\": 2116342234.6875,\\n    \\\"hackLevel\\\": 809,\\n    \\\"hackTime\\\": 13195.43672850777,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 42769.17398502971,\\n    \\\"maxRAM\\\": 128\\n  },\\n  \\\"fulcrumtech\\\": {\\n    \\\"parent\\\": \\\"titan-labs\\\",\\n    \\\"connections\\\": [\\n      \\\"titan-labs\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 1276065303,\\n    \\\"maxMoney\\\": 4785244886.25,\\n    \\\"hackLevel\\\": 1196,\\n    \\\"hackTime\\\": 22479.4776911042,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 56765.7896920344,\\n    \\\"maxRAM\\\": 256\\n  },\\n  \\\"microdyne\\\": {\\n    \\\"parent\\\": \\\"taiyang-digital\\\",\\n    \\\"connections\\\": [\\n      \\\"taiyang-digital\\\",\\n      \\\"helios\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 432447090,\\n    \\\"maxMoney\\\": 1621676587.5,\\n    \\\"hackLevel\\\": 865,\\n    \\\"hackTime\\\": 12483.155800554292,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 34642.449145816,\\n    \\\"maxRAM\\\": 16\\n  },\\n  \\\"helios\\\": {\\n    \\\"parent\\\": \\\"microdyne\\\",\\n    \\\"connections\\\": [\\n      \\\"microdyne\\\",\\n      \\\"4sigma\\\",\\n      \\\".\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 448558791,\\n    \\\"maxMoney\\\": 1682095466.25,\\n    \\\"hackLevel\\\": 885,\\n    \\\"hackTime\\\": 17567.303249423276,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 25533.730740073945,\\n    \\\"maxRAM\\\": 32\\n  },\\n  \\\"4sigma\\\": {\\n    \\\"parent\\\": \\\"helios\\\",\\n    \\\"connections\\\": [\\n      \\\"helios\\\",\\n      \\\"nwo\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 16960917851.25,\\n    \\\"maxMoney\\\": 63603441942.1875,\\n    \\\"hackLevel\\\": 1017,\\n    \\\"hackTime\\\": 12125.451945603116,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 1398786.44749405,\\n    \\\"maxRAM\\\": 0\\n  },\\n  \\\"nwo\\\": {\\n    \\\"parent\\\": \\\"4sigma\\\",\\n    \\\"connections\\\": [\\n      \\\"4sigma\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 29160577390.5,\\n    \\\"maxMoney\\\": 109352165214.375,\\n    \\\"hackLevel\\\": 1232,\\n    \\\"hackTime\\\": 25466.17980866856,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 1145070.7412571511,\\n    \\\"maxRAM\\\": 0\\n  },\\n  \\\".\\\": {\\n    \\\"parent\\\": \\\"helios\\\",\\n    \\\"connections\\\": [\\n      \\\"helios\\\",\\n      \\\"b-and-a\\\",\\n      \\\"blade\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 511,\\n    \\\"hackTime\\\": 41.690425984985524,\\n    \\\"ports\\\": 4,\\n    \\\"moneyPerSec\\\": 0,\\n    \\\"maxRAM\\\": 16\\n  },\\n  \\\"b-and-a\\\": {\\n    \\\"parent\\\": \\\".\\\",\\n    \\\"connections\\\": [\\n      \\\".\\\",\\n      \\\"megacorp\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 13652169330,\\n    \\\"maxMoney\\\": 51195634987.5,\\n    \\\"hackLevel\\\": 921,\\n    \\\"hackTime\\\": 16168.381005497089,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 844374.5434597563,\\n    \\\"maxRAM\\\": 0\\n  },\\n  \\\"megacorp\\\": {\\n    \\\"parent\\\": \\\"b-and-a\\\",\\n    \\\"connections\\\": [\\n      \\\"b-and-a\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 31039408148.25,\\n    \\\"maxMoney\\\": 116397780555.9375,\\n    \\\"hackLevel\\\": 1115,\\n    \\\"hackTime\\\": 23051.678787748122,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 1346513.9972689245,\\n    \\\"maxRAM\\\": 0\\n  },\\n  \\\"blade\\\": {\\n    \\\"parent\\\": \\\".\\\",\\n    \\\"connections\\\": [\\n      \\\".\\\",\\n      \\\"The-Cave\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 26246453659.5,\\n    \\\"maxMoney\\\": 98424201223.125,\\n    \\\"hackLevel\\\": 941,\\n    \\\"hackTime\\\": 18087.80821784582,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 1451057.7148647942,\\n    \\\"maxRAM\\\": 512\\n  },\\n  \\\"The-Cave\\\": {\\n    \\\"parent\\\": \\\"blade\\\",\\n    \\\"connections\\\": [\\n      \\\"blade\\\",\\n      \\\"w0r1d_d43m0n\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 925,\\n    \\\"hackTime\\\": 41.690425984985524,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 0,\\n    \\\"maxRAM\\\": 0\\n  },\\n  \\\"w0r1d_d43m0n\\\": {\\n    \\\"parent\\\": \\\"The-Cave\\\",\\n    \\\"connections\\\": [\\n      \\\"The-Cave\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 9000,\\n    \\\"hackTime\\\": 41.690425984985524,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 0,\\n    \\\"maxRAM\\\": 0\\n  },\\n  \\\"applied-energetics\\\": {\\n    \\\"parent\\\": \\\"taiyang-digital\\\",\\n    \\\"connections\\\": [\\n      \\\"taiyang-digital\\\",\\n      \\\"stormtech\\\",\\n      \\\"vitalife\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 596649858,\\n    \\\"maxMoney\\\": 2237436967.5,\\n    \\\"hackLevel\\\": 803,\\n    \\\"hackTime\\\": 10921.849347416584,\\n    \\\"ports\\\": 4,\\n    \\\"moneyPerSec\\\": 54629.01373393595,\\n    \\\"maxRAM\\\": 0\\n  },\\n  \\\"stormtech\\\": {\\n    \\\"parent\\\": \\\"applied-energetics\\\",\\n    \\\"connections\\\": [\\n      \\\"applied-energetics\\\",\\n      \\\"kuai-gong\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 836909039.25,\\n    \\\"maxMoney\\\": 3138408897.1875,\\n    \\\"hackLevel\\\": 969,\\n    \\\"hackTime\\\": 15796.919309970868,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 52979.256450449226,\\n    \\\"maxRAM\\\": 0\\n  },\\n  \\\"kuai-gong\\\": {\\n    \\\"parent\\\": \\\"stormtech\\\",\\n    \\\"connections\\\": [\\n      \\\"stormtech\\\",\\n      \\\"powerhouse-fitness\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 19193655537.75,\\n    \\\"maxMoney\\\": 71976208266.5625,\\n    \\\"hackLevel\\\": 1163,\\n    \\\"hackTime\\\": 24042.24330915138,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 798330.4756941784,\\n    \\\"maxRAM\\\": 0\\n  },\\n  \\\"powerhouse-fitness\\\": {\\n    \\\"parent\\\": \\\"kuai-gong\\\",\\n    \\\"connections\\\": [\\n      \\\"kuai-gong\\\",\\n      \\\"fulcrumassets\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 675000000,\\n    \\\"maxMoney\\\": 2531250000,\\n    \\\"hackLevel\\\": 953,\\n    \\\"hackTime\\\": 11762.328335273893,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 57386.59734363572,\\n    \\\"maxRAM\\\": 32\\n  },\\n  \\\"fulcrumassets\\\": {\\n    \\\"parent\\\": \\\"powerhouse-fitness\\\",\\n    \\\"connections\\\": [\\n      \\\"powerhouse-fitness\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 750000,\\n    \\\"maxMoney\\\": 2812500,\\n    \\\"hackLevel\\\": 1484,\\n    \\\"hackTime\\\": 30666.64354603566,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 24.4565401777383,\\n    \\\"maxRAM\\\": 0\\n  },\\n  \\\"vitalife\\\": {\\n    \\\"parent\\\": \\\"applied-energetics\\\",\\n    \\\"connections\\\": [\\n      \\\"applied-energetics\\\",\\n      \\\"omnitek\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 566171970.75,\\n    \\\"maxMoney\\\": 2123144890.3125,\\n    \\\"hackLevel\\\": 860,\\n    \\\"hackTime\\\": 15817.347618703508,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 35794.368588101315,\\n    \\\"maxRAM\\\": 32\\n  },\\n  \\\"omnitek\\\": {\\n    \\\"parent\\\": \\\"vitalife\\\",\\n    \\\"connections\\\": [\\n      \\\"vitalife\\\",\\n      \\\"clarkinc\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 14026207422.75,\\n    \\\"maxMoney\\\": 52598277835.3125,\\n    \\\"hackLevel\\\": 1005,\\n    \\\"hackTime\\\": 18896.185577694687,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 742277.1842009599,\\n    \\\"maxRAM\\\": 128\\n  },\\n  \\\"clarkinc\\\": {\\n    \\\"parent\\\": \\\"omnitek\\\",\\n    \\\"connections\\\": [\\n      \\\"omnitek\\\",\\n      \\\"ecorp\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 16543865136.75,\\n    \\\"maxMoney\\\": 62039494262.8125,\\n    \\\"hackLevel\\\": 1142,\\n    \\\"hackTime\\\": 11944.307044698353,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 1385083.7118335152,\\n    \\\"maxRAM\\\": 0\\n  },\\n  \\\"ecorp\\\": {\\n    \\\"parent\\\": \\\"clarkinc\\\",\\n    \\\"connections\\\": [\\n      \\\"clarkinc\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 34286454465,\\n    \\\"maxMoney\\\": 128574204243.75,\\n    \\\"hackLevel\\\": 1228,\\n    \\\"hackTime\\\": 25383.632765218288,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 1350730.7950019168,\\n    \\\"maxRAM\\\": 0\\n  },\\n  \\\"millenium-fitness\\\": {\\n    \\\"parent\\\": \\\"catalyst\\\",\\n    \\\"connections\\\": [\\n      \\\"catalyst\\\",\\n      \\\"aerocorp\\\",\\n      \\\"snap-fitness\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 187500000,\\n    \\\"maxMoney\\\": 703125000,\\n    \\\"hackLevel\\\": 520,\\n    \\\"hackTime\\\": 5786.631126715992,\\n    \\\"ports\\\": 3,\\n    \\\"moneyPerSec\\\": 32402.272737645424,\\n    \\\"maxRAM\\\": 64\\n  },\\n  \\\"aerocorp\\\": {\\n    \\\"parent\\\": \\\"millenium-fitness\\\",\\n    \\\"connections\\\": [\\n      \\\"millenium-fitness\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 874571075.25,\\n    \\\"maxMoney\\\": 3279641532.1875,\\n    \\\"hackLevel\\\": 887,\\n    \\\"hackTime\\\": 15757.938761674906,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 55500.34737900213,\\n    \\\"maxRAM\\\": 0\\n  },\\n  \\\"snap-fitness\\\": {\\n    \\\"parent\\\": \\\"millenium-fitness\\\",\\n    \\\"connections\\\": [\\n      \\\"millenium-fitness\\\",\\n      \\\"deltaone\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 337500000,\\n    \\\"maxMoney\\\": 1265625000,\\n    \\\"hackLevel\\\": 689,\\n    \\\"hackTime\\\": 8084.607407008393,\\n    \\\"ports\\\": 4,\\n    \\\"moneyPerSec\\\": 41745.99742560506,\\n    \\\"maxRAM\\\": 0\\n  },\\n  \\\"deltaone\\\": {\\n    \\\"parent\\\": \\\"snap-fitness\\\",\\n    \\\"connections\\\": [\\n      \\\"snap-fitness\\\",\\n      \\\"defcomm\\\",\\n      \\\"icarus\\\",\\n      \\\"univ-energy\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 1067114436.75,\\n    \\\"maxMoney\\\": 4001679137.8125,\\n    \\\"hackLevel\\\": 851,\\n    \\\"hackTime\\\": 14233.111431274061,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 74974.08011611966,\\n    \\\"maxRAM\\\": 0\\n  },\\n  \\\"defcomm\\\": {\\n    \\\"parent\\\": \\\"deltaone\\\",\\n    \\\"connections\\\": [\\n      \\\"deltaone\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 693656186.25,\\n    \\\"maxMoney\\\": 2601210698.4375,\\n    \\\"hackLevel\\\": 982,\\n    \\\"hackTime\\\": 19488.189626681484,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 35593.66978348302,\\n    \\\"maxRAM\\\": 0\\n  },\\n  \\\"icarus\\\": {\\n    \\\"parent\\\": \\\"deltaone\\\",\\n    \\\"connections\\\": [\\n      \\\"deltaone\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 682113229.5,\\n    \\\"maxMoney\\\": 2557924610.625,\\n    \\\"hackLevel\\\": 907,\\n    \\\"hackTime\\\": 17246.70387359874,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 39550.353186279215,\\n    \\\"maxRAM\\\": 0\\n  },\\n  \\\"univ-energy\\\": {\\n    \\\"parent\\\": \\\"deltaone\\\",\\n    \\\"connections\\\": [\\n      \\\"deltaone\\\",\\n      \\\"zb-def\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 847953105,\\n    \\\"maxMoney\\\": 3179824143.75,\\n    \\\"hackLevel\\\": 805,\\n    \\\"hackTime\\\": 14640.635345277291,\\n    \\\"ports\\\": 4,\\n    \\\"moneyPerSec\\\": 57917.78054724441,\\n    \\\"maxRAM\\\": 64\\n  },\\n  \\\"zb-def\\\": {\\n    \\\"parent\\\": \\\"univ-energy\\\",\\n    \\\"connections\\\": [\\n      \\\"univ-energy\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 779079918,\\n    \\\"maxMoney\\\": 2921549692.5,\\n    \\\"hackLevel\\\": 791,\\n    \\\"hackTime\\\": 10759.256686075141,\\n    \\\"ports\\\": 4,\\n    \\\"moneyPerSec\\\": 72410.19902502204,\\n    \\\"maxRAM\\\": 0\\n  },\\n  \\\"nectar-net\\\": {\\n    \\\"parent\\\": \\\"iron-gym\\\",\\n    \\\"connections\\\": [\\n      \\\"iron-gym\\\",\\n      \\\"phantasy\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 7734375,\\n    \\\"maxMoney\\\": 7734375,\\n    \\\"hackLevel\\\": 20,\\n    \\\"hackTime\\\": 70.8737241744754,\\n    \\\"ports\\\": 0,\\n    \\\"moneyPerSec\\\": 109128.9485643464,\\n    \\\"maxRAM\\\": 16\\n  },\\n  \\\"phantasy\\\": {\\n    \\\"parent\\\": \\\"nectar-net\\\",\\n    \\\"connections\\\": [\\n      \\\"nectar-net\\\",\\n      \\\"netlink\\\",\\n      \\\"johnson-ortho\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 18000000,\\n    \\\"maxMoney\\\": 67500000,\\n    \\\"hackLevel\\\": 100,\\n    \\\"hackTime\\\": 458.5946858348408,\\n    \\\"ports\\\": 2,\\n    \\\"moneyPerSec\\\": 39250.34579768889,\\n    \\\"maxRAM\\\": 32\\n  },\\n  \\\"netlink\\\": {\\n    \\\"parent\\\": \\\"phantasy\\\",\\n    \\\"connections\\\": [\\n      \\\"phantasy\\\",\\n      \\\"summit-uni\\\",\\n      \\\"I.I.I.I\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 206250000,\\n    \\\"maxMoney\\\": 773437500,\\n    \\\"hackLevel\\\": 419,\\n    \\\"hackTime\\\": 5282.176972297666,\\n    \\\"ports\\\": 3,\\n    \\\"moneyPerSec\\\": 39046.40095961882,\\n    \\\"maxRAM\\\": 64\\n  },\\n  \\\"summit-uni\\\": {\\n    \\\"parent\\\": \\\"netlink\\\",\\n    \\\"connections\\\": [\\n      \\\"netlink\\\",\\n      \\\"lexo-corp\\\",\\n      \\\"rho-construction\\\",\\n      \\\"aevum-police\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 191944360.5,\\n    \\\"maxMoney\\\": 719791351.875,\\n    \\\"hackLevel\\\": 459,\\n    \\\"hackTime\\\": 5591.103028846408,\\n    \\\"ports\\\": 3,\\n    \\\"moneyPerSec\\\": 34330.320781014685,\\n    \\\"maxRAM\\\": 64\\n  },\\n  \\\"lexo-corp\\\": {\\n    \\\"parent\\\": \\\"summit-uni\\\",\\n    \\\"connections\\\": [\\n      \\\"summit-uni\\\",\\n      \\\"global-pharm\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 529295745.75,\\n    \\\"maxMoney\\\": 1984859046.5625,\\n    \\\"hackLevel\\\": 682,\\n    \\\"hackTime\\\": 8998.044640339427,\\n    \\\"ports\\\": 4,\\n    \\\"moneyPerSec\\\": 58823.41852107479,\\n    \\\"maxRAM\\\": 16\\n  },\\n  \\\"global-pharm\\\": {\\n    \\\"parent\\\": \\\"lexo-corp\\\",\\n    \\\"connections\\\": [\\n      \\\"lexo-corp\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 1292826772.5,\\n    \\\"maxMoney\\\": 4848100396.875,\\n    \\\"hackLevel\\\": 787,\\n    \\\"hackTime\\\": 13493.940178560266,\\n    \\\"ports\\\": 4,\\n    \\\"moneyPerSec\\\": 95807.95196899546,\\n    \\\"maxRAM\\\": 64\\n  },\\n  \\\"rho-construction\\\": {\\n    \\\"parent\\\": \\\"summit-uni\\\",\\n    \\\"connections\\\": [\\n      \\\"summit-uni\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 422477543.25,\\n    \\\"maxMoney\\\": 1584290787.1875,\\n    \\\"hackLevel\\\": 493,\\n    \\\"hackTime\\\": 6002.170629058367,\\n    \\\"ports\\\": 3,\\n    \\\"moneyPerSec\\\": 70387.45969743935,\\n    \\\"maxRAM\\\": 16\\n  },\\n  \\\"aevum-police\\\": {\\n    \\\"parent\\\": \\\"summit-uni\\\",\\n    \\\"connections\\\": [\\n      \\\"summit-uni\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 219473427.75,\\n    \\\"maxMoney\\\": 823025354.0625,\\n    \\\"hackLevel\\\": 446,\\n    \\\"hackTime\\\": 7107.3838219203335,\\n    \\\"ports\\\": 4,\\n    \\\"moneyPerSec\\\": 30879.636340042318,\\n    \\\"maxRAM\\\": 64\\n  },\\n  \\\"I.I.I.I\\\": {\\n    \\\"parent\\\": \\\"netlink\\\",\\n    \\\"connections\\\": [\\n      \\\"netlink\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 357,\\n    \\\"hackTime\\\": 41.690425984985524,\\n    \\\"ports\\\": 3,\\n    \\\"moneyPerSec\\\": 0,\\n    \\\"maxRAM\\\": 64\\n  },\\n  \\\"johnson-ortho\\\": {\\n    \\\"parent\\\": \\\"phantasy\\\",\\n    \\\"connections\\\": [\\n      \\\"phantasy\\\",\\n      \\\"zb-institute\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 54198679.5,\\n    \\\"maxMoney\\\": 203245048.125,\\n    \\\"hackLevel\\\": 251,\\n    \\\"hackTime\\\": 2553.121687320514,\\n    \\\"ports\\\": 2,\\n    \\\"moneyPerSec\\\": 21228.396503451113,\\n    \\\"maxRAM\\\": 0\\n  },\\n  \\\"zb-institute\\\": {\\n    \\\"parent\\\": \\\"johnson-ortho\\\",\\n    \\\"connections\\\": [\\n      \\\"johnson-ortho\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 637461297.75,\\n    \\\"maxMoney\\\": 2390479866.5625,\\n    \\\"hackLevel\\\": 726,\\n    \\\"hackTime\\\": 11543.245146722793,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 55223.75117633014,\\n    \\\"maxRAM\\\": 128\\n  },\\n  \\\"max-hardware\\\": {\\n    \\\"parent\\\": \\\"iron-gym\\\",\\n    \\\"connections\\\": [\\n      \\\"iron-gym\\\",\\n      \\\"omega-net\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 7500000,\\n    \\\"maxMoney\\\": 28125000,\\n    \\\"hackLevel\\\": 80,\\n    \\\"hackTime\\\": 291.83298189489864,\\n    \\\"ports\\\": 1,\\n    \\\"moneyPerSec\\\": 25699.631177058207,\\n    \\\"maxRAM\\\": 32\\n  },\\n  \\\"omega-net\\\": {\\n    \\\"parent\\\": \\\"max-hardware\\\",\\n    \\\"connections\\\": [\\n      \\\"max-hardware\\\",\\n      \\\"crush-fitness\\\",\\n      \\\"avmnite-02h\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 45461739,\\n    \\\"maxMoney\\\": 170481521.25,\\n    \\\"hackLevel\\\": 192,\\n    \\\"hackTime\\\": 1202.3518854069825,\\n    \\\"ports\\\": 2,\\n    \\\"moneyPerSec\\\": 37810.67718342016,\\n    \\\"maxRAM\\\": 32\\n  },\\n  \\\"crush-fitness\\\": {\\n    \\\"parent\\\": \\\"omega-net\\\",\\n    \\\"connections\\\": [\\n      \\\"omega-net\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 40730982,\\n    \\\"maxMoney\\\": 152741182.5,\\n    \\\"hackLevel\\\": 239,\\n    \\\"hackTime\\\": 2084.3128471193513,\\n    \\\"ports\\\": 2,\\n    \\\"moneyPerSec\\\": 19541.683512766678,\\n    \\\"maxRAM\\\": 0\\n  },\\n  \\\"avmnite-02h\\\": {\\n    \\\"parent\\\": \\\"omega-net\\\",\\n    \\\"connections\\\": [\\n      \\\"omega-net\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 215,\\n    \\\"hackTime\\\": 41.690425984985524,\\n    \\\"ports\\\": 2,\\n    \\\"moneyPerSec\\\": 0,\\n    \\\"maxRAM\\\": 32\\n  },\\n  \\\"darkweb\\\": {\\n    \\\"parent\\\": \\\"home\\\",\\n    \\\"connections\\\": [\\n      \\\"home\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 1,\\n    \\\"hackTime\\\": 41.89887811491046,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 0,\\n    \\\"maxRAM\\\": 1\\n  }\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/owned-source-files.txt\",\"text\":\"{\\\"1\\\":3,\\\"2\\\":1,\\\"4\\\":2}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/player-info.txt\",\"text\":\"{\\\"hacking\\\":11635,\\\"hp\\\":10,\\\"max_hp\\\":10,\\\"strength\\\":4,\\\"defense\\\":3,\\\"dexterity\\\":6,\\\"agility\\\":3,\\\"charisma\\\":2,\\\"intelligence\\\":0,\\\"hacking_chance_mult\\\":5.66589167813594,\\\"hacking_speed_mult\\\":5.186456156357245,\\\"hacking_money_mult\\\":32.93993227018842,\\\"hacking_grow_mult\\\":5.35520806399352,\\\"hacking_exp\\\":985902003.039474,\\\"strength_exp\\\":0,\\\"defense_exp\\\":0,\\\"dexterity_exp\\\":0,\\\"agility_exp\\\":0,\\\"charisma_exp\\\":0,\\\"hacking_mult\\\":25.14679061007132,\\\"strength_mult\\\":4.345430031446902,\\\"defense_mult\\\":3.7786348099538283,\\\"dexterity_mult\\\":6.083602044025663,\\\"agility_mult\\\":3.7786348099538283,\\\"charisma_mult\\\":2.677432665338712,\\\"hacking_exp_mult\\\":21.8779179354106,\\\"strength_exp_mult\\\":2.879364708932555,\\\"defense_exp_mult\\\":2.879364708932555,\\\"dexterity_exp_mult\\\":2.879364708932555,\\\"agility_exp_mult\\\":2.879364708932555,\\\"charisma_exp_mult\\\":2.879364708932555,\\\"company_rep_mult\\\":11.301854231921256,\\\"faction_rep_mult\\\":2.0774637149585526,\\\"numPeopleKilled\\\":0,\\\"money\\\":1825976925925454.2,\\\"city\\\":\\\"Sector-12\\\",\\\"location\\\":\\\"Travel Agency\\\",\\\"companyName\\\":\\\"\\\",\\\"crime_money_mult\\\":1.7707887998271905,\\\"crime_success_mult\\\":1.7707887998271905,\\\"isWorking\\\":false,\\\"workType\\\":\\\"\\\",\\\"currentWorkFactionName\\\":\\\"\\\",\\\"currentWorkFactionDescription\\\":\\\"\\\",\\\"workHackExpGainRate\\\":0,\\\"workStrExpGainRate\\\":0,\\\"workDefExpGainRate\\\":0,\\\"workDexExpGainRate\\\":0,\\\"workAgiExpGainRate\\\":0,\\\"workChaExpGainRate\\\":0,\\\"workRepGainRate\\\":0,\\\"workMoneyGainRate\\\":0,\\\"workMoneyLossRate\\\":0,\\\"workHackExpGained\\\":0,\\\"workStrExpGained\\\":0,\\\"workDefExpGained\\\":0,\\\"workDexExpGained\\\":0,\\\"workAgiExpGained\\\":0,\\\"workChaExpGained\\\":0,\\\"workRepGained\\\":0,\\\"workMoneyGained\\\":0,\\\"createProgramName\\\":\\\"\\\",\\\"createProgramReqLvl\\\":100,\\\"className\\\":\\\"\\\",\\\"crimeType\\\":\\\"\\\",\\\"work_money_mult\\\":3.204556505493722,\\\"hacknet_node_money_mult\\\":1.4280554837316053,\\\"hacknet_node_purchase_cost_mult\\\":0.6446435430662757,\\\"hacknet_node_ram_cost_mult\\\":0.6446435430662757,\\\"hacknet_node_core_cost_mult\\\":0.6446435430662757,\\\"hacknet_node_level_cost_mult\\\":0.6446435430662757,\\\"hasWseAccount\\\":false,\\\"hasTixApiAccess\\\":false,\\\"has4SData\\\":false,\\\"has4SDataTixApi\\\":false,\\\"bladeburner_max_stamina_mult\\\":1,\\\"bladeburner_stamina_gain_mult\\\":1,\\\"bladeburner_analysis_mult\\\":1,\\\"bladeburner_success_chance_mult\\\":1,\\\"bitNodeN\\\":4,\\\"totalPlaytime\\\":4295061000,\\\"playtimeSinceLastAug\\\":192000,\\\"playtimeSinceLastBitnode\\\":691519400,\\\"jobs\\\":{},\\\"factions\\\":[\\\"Slum Snakes\\\",\\\"Daedalus\\\"],\\\"tor\\\":true,\\\"hasCorporation\\\":false}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/player-gang-joined.txt\",\"text\":\"true\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-equipment-names.txt\",\"text\":\"[\\\"Baseball Bat\\\",\\\"Katana\\\",\\\"Glock 18C\\\",\\\"P90C\\\",\\\"Steyr AUG\\\",\\\"AK-47\\\",\\\"M15A10 Assault Rifle\\\",\\\"AWM Sniper Rifle\\\",\\\"Bulletproof Vest\\\",\\\"Full Body Armor\\\",\\\"Liquid Body Armor\\\",\\\"Graphene Plating Armor\\\",\\\"Ford Flex V20\\\",\\\"ATX1070 Superbike\\\",\\\"Mercedes-Benz S9001\\\",\\\"White Ferrari\\\",\\\"NUKE Rootkit\\\",\\\"Soulstealer Rootkit\\\",\\\"Demon Rootkit\\\",\\\"Hmap Node\\\",\\\"Jack the Ripper\\\",\\\"Bionic Arms\\\",\\\"Bionic Legs\\\",\\\"Bionic Spine\\\",\\\"BrachiBlades\\\",\\\"Nanofiber Weave\\\",\\\"Synthetic Heart\\\",\\\"Synfibril Muscle\\\",\\\"BitWire\\\",\\\"Neuralstimulator\\\",\\\"DataJack\\\",\\\"Graphene Bone Lacings\\\"]\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-getEquipmentType.txt\",\"text\":\"{\\\"Baseball Bat\\\":\\\"Weapon\\\",\\\"Katana\\\":\\\"Weapon\\\",\\\"Glock 18C\\\":\\\"Weapon\\\",\\\"P90C\\\":\\\"Weapon\\\",\\\"Steyr AUG\\\":\\\"Weapon\\\",\\\"AK-47\\\":\\\"Weapon\\\",\\\"M15A10 Assault Rifle\\\":\\\"Weapon\\\",\\\"AWM Sniper Rifle\\\":\\\"Weapon\\\",\\\"Bulletproof Vest\\\":\\\"Armor\\\",\\\"Full Body Armor\\\":\\\"Armor\\\",\\\"Liquid Body Armor\\\":\\\"Armor\\\",\\\"Graphene Plating Armor\\\":\\\"Armor\\\",\\\"Ford Flex V20\\\":\\\"Vehicle\\\",\\\"ATX1070 Superbike\\\":\\\"Vehicle\\\",\\\"Mercedes-Benz S9001\\\":\\\"Vehicle\\\",\\\"White Ferrari\\\":\\\"Vehicle\\\",\\\"NUKE Rootkit\\\":\\\"Rootkit\\\",\\\"Soulstealer Rootkit\\\":\\\"Rootkit\\\",\\\"Demon Rootkit\\\":\\\"Rootkit\\\",\\\"Hmap Node\\\":\\\"Rootkit\\\",\\\"Jack the Ripper\\\":\\\"Rootkit\\\",\\\"Bionic Arms\\\":\\\"Augmentation\\\",\\\"Bionic Legs\\\":\\\"Augmentation\\\",\\\"Bionic Spine\\\":\\\"Augmentation\\\",\\\"BrachiBlades\\\":\\\"Augmentation\\\",\\\"Nanofiber Weave\\\":\\\"Augmentation\\\",\\\"Synthetic Heart\\\":\\\"Augmentation\\\",\\\"Synfibril Muscle\\\":\\\"Augmentation\\\",\\\"BitWire\\\":\\\"Augmentation\\\",\\\"Neuralstimulator\\\":\\\"Augmentation\\\",\\\"DataJack\\\":\\\"Augmentation\\\",\\\"Graphene Bone Lacings\\\":\\\"Augmentation\\\"}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-getEquipmentCost.txt\",\"text\":\"{\\\"Baseball Bat\\\":9.003621085486577,\\\"Bulletproof Vest\\\":18.007242170973154,\\\"Ford Flex V20\\\":27.010863256459732,\\\"Full Body Armor\\\":45.018105427432886,\\\"NUKE Rootkit\\\":45.018105427432886,\\\"ATX1070 Superbike\\\":81.03258976937919,\\\"Katana\\\":108.04345302583893,\\\"Mercedes-Benz S9001\\\":162.06517953875837,\\\"Glock 18C\\\":225.09052713716443,\\\"Liquid Body Armor\\\":225.09052713716443,\\\"Soulstealer Rootkit\\\":225.09052713716443,\\\"White Ferrari\\\":270.1086325645973,\\\"Graphene Plating Armor\\\":360.1448434194631,\\\"Hmap Node\\\":360.1448434194631,\\\"P90C\\\":450.18105427432886,\\\"Steyr AUG\\\":540.2172651291946,\\\"Demon Rootkit\\\":675.2715814114932,\\\"Jack the Ripper\\\":675.2715814114932,\\\"AK-47\\\":900.3621085486577,\\\"M15A10 Assault Rifle\\\":1350.5431628229865,\\\"AWM Sniper Rifle\\\":2025.8147442344798,\\\"BitWire\\\":45018.105427432885,\\\"DataJack\\\":67527.15814114932,\\\"Bionic Arms\\\":90036.21085486577,\\\"Bionic Legs\\\":90036.21085486577,\\\"Neuralstimulator\\\":90036.21085486577,\\\"Nanofiber Weave\\\":108043.45302583893,\\\"Bionic Spine\\\":135054.31628229865,\\\"Synfibril Muscle\\\":135054.31628229865,\\\"BrachiBlades\\\":180072.42170973154,\\\"Synthetic Heart\\\":225090.52713716443,\\\"Graphene Bone Lacings\\\":450181.05427432887}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-getEquipmentStats.txt\",\"text\":\"{\\\"Baseball Bat\\\":{\\\"str\\\":1.04,\\\"def\\\":1.04},\\\"Katana\\\":{\\\"str\\\":1.08,\\\"def\\\":1.08,\\\"dex\\\":1.08},\\\"Glock 18C\\\":{\\\"str\\\":1.1,\\\"def\\\":1.1,\\\"dex\\\":1.1,\\\"agi\\\":1.1},\\\"P90C\\\":{\\\"str\\\":1.12,\\\"def\\\":1.1,\\\"agi\\\":1.1},\\\"Steyr AUG\\\":{\\\"str\\\":1.2,\\\"def\\\":1.15},\\\"AK-47\\\":{\\\"str\\\":1.25,\\\"def\\\":1.2},\\\"M15A10 Assault Rifle\\\":{\\\"str\\\":1.3,\\\"def\\\":1.25},\\\"AWM Sniper Rifle\\\":{\\\"str\\\":1.3,\\\"dex\\\":1.25,\\\"agi\\\":1.3},\\\"Bulletproof Vest\\\":{\\\"def\\\":1.04},\\\"Full Body Armor\\\":{\\\"def\\\":1.08},\\\"Liquid Body Armor\\\":{\\\"def\\\":1.15,\\\"agi\\\":1.15},\\\"Graphene Plating Armor\\\":{\\\"def\\\":1.2},\\\"Ford Flex V20\\\":{\\\"agi\\\":1.04,\\\"cha\\\":1.04},\\\"ATX1070 Superbike\\\":{\\\"agi\\\":1.08,\\\"cha\\\":1.08},\\\"Mercedes-Benz S9001\\\":{\\\"agi\\\":1.12,\\\"cha\\\":1.12},\\\"White Ferrari\\\":{\\\"agi\\\":1.16,\\\"cha\\\":1.16},\\\"NUKE Rootkit\\\":{\\\"hack\\\":1.05},\\\"Soulstealer Rootkit\\\":{\\\"hack\\\":1.1},\\\"Demon Rootkit\\\":{\\\"hack\\\":1.15},\\\"Hmap Node\\\":{\\\"hack\\\":1.12},\\\"Jack the Ripper\\\":{\\\"hack\\\":1.15},\\\"Bionic Arms\\\":{\\\"str\\\":1.3,\\\"dex\\\":1.3},\\\"Bionic Legs\\\":{\\\"agi\\\":1.6},\\\"Bionic Spine\\\":{\\\"str\\\":1.15,\\\"def\\\":1.15,\\\"dex\\\":1.15,\\\"agi\\\":1.15},\\\"BrachiBlades\\\":{\\\"str\\\":1.4,\\\"def\\\":1.4},\\\"Nanofiber Weave\\\":{\\\"str\\\":1.2,\\\"def\\\":1.2},\\\"Synthetic Heart\\\":{\\\"str\\\":1.5,\\\"agi\\\":1.5},\\\"Synfibril Muscle\\\":{\\\"str\\\":1.3,\\\"def\\\":1.3},\\\"BitWire\\\":{\\\"hack\\\":1.05},\\\"Neuralstimulator\\\":{\\\"hack\\\":1.15},\\\"DataJack\\\":{\\\"hack\\\":1.1},\\\"Graphene Bone Lacings\\\":{\\\"str\\\":1.7,\\\"def\\\":1.7}}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-task-names.txt\",\"text\":\"[\\\"Unassigned\\\",\\\"Mug People\\\",\\\"Deal Drugs\\\",\\\"Strongarm Civilians\\\",\\\"Run a Con\\\",\\\"Armed Robbery\\\",\\\"Traffick Illegal Arms\\\",\\\"Threaten & Blackmail\\\",\\\"Human Trafficking\\\",\\\"Terrorism\\\",\\\"Vigilante Justice\\\",\\\"Train Combat\\\",\\\"Train Hacking\\\",\\\"Train Charisma\\\",\\\"Territory Warfare\\\"]\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-getTaskStats.txt\",\"text\":\"{\\\"Unassigned\\\":{\\\"name\\\":\\\"Unassigned\\\",\\\"desc\\\":\\\"This gang member is currently idle\\\",\\\"isHacking\\\":true,\\\"isCombat\\\":true,\\\"baseRespect\\\":0,\\\"baseWanted\\\":0,\\\"baseMoney\\\":0,\\\"hackWeight\\\":100,\\\"strWeight\\\":0,\\\"defWeight\\\":0,\\\"dexWeight\\\":0,\\\"agiWeight\\\":0,\\\"chaWeight\\\":0,\\\"difficulty\\\":1,\\\"territory\\\":{\\\"money\\\":1,\\\"respect\\\":1,\\\"wanted\\\":1}},\\\"Mug People\\\":{\\\"name\\\":\\\"Mug People\\\",\\\"desc\\\":\\\"Assign this gang member to mug random people on the streets<br><br>Earns money - Slightly increases respect - Very slightly increases wanted level\\\",\\\"isHacking\\\":false,\\\"isCombat\\\":true,\\\"baseRespect\\\":0.00005,\\\"baseWanted\\\":0.00005,\\\"baseMoney\\\":3.6,\\\"hackWeight\\\":0,\\\"strWeight\\\":25,\\\"defWeight\\\":25,\\\"dexWeight\\\":25,\\\"agiWeight\\\":10,\\\"chaWeight\\\":15,\\\"difficulty\\\":1,\\\"territory\\\":{\\\"money\\\":1,\\\"respect\\\":1,\\\"wanted\\\":1}},\\\"Deal Drugs\\\":{\\\"name\\\":\\\"Deal Drugs\\\",\\\"desc\\\":\\\"Assign this gang member to sell drugs<br><br>Earns money - Slightly increases respect - Slightly increases wanted level - Scales slightly with territory\\\",\\\"isHacking\\\":false,\\\"isCombat\\\":true,\\\"baseRespect\\\":0.00006,\\\"baseWanted\\\":0.002,\\\"baseMoney\\\":15,\\\"hackWeight\\\":0,\\\"strWeight\\\":0,\\\"defWeight\\\":0,\\\"dexWeight\\\":20,\\\"agiWeight\\\":20,\\\"chaWeight\\\":60,\\\"difficulty\\\":3.5,\\\"territory\\\":{\\\"money\\\":1.2,\\\"respect\\\":1,\\\"wanted\\\":1.15}},\\\"Strongarm Civilians\\\":{\\\"name\\\":\\\"Strongarm Civilians\\\",\\\"desc\\\":\\\"Assign this gang member to extort civilians in your territory<br><br>Earns money - Slightly increases respect - Increases wanted - Scales heavily with territory\\\",\\\"isHacking\\\":false,\\\"isCombat\\\":true,\\\"baseRespect\\\":0.00004,\\\"baseWanted\\\":0.02,\\\"baseMoney\\\":7.5,\\\"hackWeight\\\":10,\\\"strWeight\\\":25,\\\"defWeight\\\":25,\\\"dexWeight\\\":20,\\\"agiWeight\\\":10,\\\"chaWeight\\\":10,\\\"difficulty\\\":5,\\\"territory\\\":{\\\"money\\\":1.6,\\\"respect\\\":1.1,\\\"wanted\\\":1.5}},\\\"Run a Con\\\":{\\\"name\\\":\\\"Run a Con\\\",\\\"desc\\\":\\\"Assign this gang member to run cons<br><br>Earns money - Increases respect - Increases wanted level\\\",\\\"isHacking\\\":false,\\\"isCombat\\\":true,\\\"baseRespect\\\":0.00012,\\\"baseWanted\\\":0.05,\\\"baseMoney\\\":45,\\\"hackWeight\\\":0,\\\"strWeight\\\":5,\\\"defWeight\\\":5,\\\"dexWeight\\\":25,\\\"agiWeight\\\":25,\\\"chaWeight\\\":40,\\\"difficulty\\\":14,\\\"territory\\\":{\\\"money\\\":1,\\\"respect\\\":1,\\\"wanted\\\":1}},\\\"Armed Robbery\\\":{\\\"name\\\":\\\"Armed Robbery\\\",\\\"desc\\\":\\\"Assign this gang member to commit armed robbery on stores, banks and armored cars<br><br>Earns money - Increases respect - Increases wanted level\\\",\\\"isHacking\\\":false,\\\"isCombat\\\":true,\\\"baseRespect\\\":0.00014,\\\"baseWanted\\\":0.1,\\\"baseMoney\\\":114,\\\"hackWeight\\\":20,\\\"strWeight\\\":15,\\\"defWeight\\\":15,\\\"dexWeight\\\":20,\\\"agiWeight\\\":10,\\\"chaWeight\\\":20,\\\"difficulty\\\":20,\\\"territory\\\":{\\\"money\\\":1,\\\"respect\\\":1,\\\"wanted\\\":1}},\\\"Traffick Illegal Arms\\\":{\\\"name\\\":\\\"Traffick Illegal Arms\\\",\\\"desc\\\":\\\"Assign this gang member to traffick illegal arms<br><br>Earns money - Increases respect - Increases wanted level - Scales heavily with territory\\\",\\\"isHacking\\\":false,\\\"isCombat\\\":true,\\\"baseRespect\\\":0.0002,\\\"baseWanted\\\":0.24,\\\"baseMoney\\\":174,\\\"hackWeight\\\":15,\\\"strWeight\\\":20,\\\"defWeight\\\":20,\\\"dexWeight\\\":20,\\\"agiWeight\\\":0,\\\"chaWeight\\\":25,\\\"difficulty\\\":32,\\\"territory\\\":{\\\"money\\\":1.4,\\\"respect\\\":1.3,\\\"wanted\\\":1.25}},\\\"Threaten & Blackmail\\\":{\\\"name\\\":\\\"Threaten & Blackmail\\\",\\\"desc\\\":\\\"Assign this gang member to threaten and black mail high-profile targets<br><br>Earns money - Slightly increases respect - Slightly increases wanted level\\\",\\\"isHacking\\\":false,\\\"isCombat\\\":true,\\\"baseRespect\\\":0.0002,\\\"baseWanted\\\":0.125,\\\"baseMoney\\\":72,\\\"hackWeight\\\":25,\\\"strWeight\\\":25,\\\"defWeight\\\":0,\\\"dexWeight\\\":25,\\\"agiWeight\\\":0,\\\"chaWeight\\\":25,\\\"difficulty\\\":28,\\\"territory\\\":{\\\"money\\\":1,\\\"respect\\\":1,\\\"wanted\\\":1}},\\\"Human Trafficking\\\":{\\\"name\\\":\\\"Human Trafficking\\\",\\\"desc\\\":\\\"Assign this gang member to engage in human trafficking operations<br><br>Earns money - Increases respect - Increases wanted level - Scales heavily with territory\\\",\\\"isHacking\\\":false,\\\"isCombat\\\":true,\\\"baseRespect\\\":0.004,\\\"baseWanted\\\":1.25,\\\"baseMoney\\\":360,\\\"hackWeight\\\":30,\\\"strWeight\\\":5,\\\"defWeight\\\":5,\\\"dexWeight\\\":30,\\\"agiWeight\\\":0,\\\"chaWeight\\\":30,\\\"difficulty\\\":36,\\\"territory\\\":{\\\"money\\\":1.5,\\\"respect\\\":1.5,\\\"wanted\\\":1.6}},\\\"Terrorism\\\":{\\\"name\\\":\\\"Terrorism\\\",\\\"desc\\\":\\\"Assign this gang member to commit acts of terrorism<br><br>Greatly increases respect - Greatly increases wanted level - Scales heavily with territory\\\",\\\"isHacking\\\":false,\\\"isCombat\\\":true,\\\"baseRespect\\\":0.01,\\\"baseWanted\\\":6,\\\"baseMoney\\\":0,\\\"hackWeight\\\":20,\\\"strWeight\\\":20,\\\"defWeight\\\":20,\\\"dexWeight\\\":20,\\\"agiWeight\\\":0,\\\"chaWeight\\\":20,\\\"difficulty\\\":36,\\\"territory\\\":{\\\"money\\\":1,\\\"respect\\\":2,\\\"wanted\\\":2}},\\\"Vigilante Justice\\\":{\\\"name\\\":\\\"Vigilante Justice\\\",\\\"desc\\\":\\\"Assign this gang member to be a vigilante and protect the city from criminals<br><br>Decreases wanted level\\\",\\\"isHacking\\\":true,\\\"isCombat\\\":true,\\\"baseRespect\\\":0,\\\"baseWanted\\\":-0.001,\\\"baseMoney\\\":0,\\\"hackWeight\\\":20,\\\"strWeight\\\":20,\\\"defWeight\\\":20,\\\"dexWeight\\\":20,\\\"agiWeight\\\":20,\\\"chaWeight\\\":0,\\\"difficulty\\\":1,\\\"territory\\\":{\\\"money\\\":1,\\\"respect\\\":1,\\\"wanted\\\":0.9}},\\\"Train Combat\\\":{\\\"name\\\":\\\"Train Combat\\\",\\\"desc\\\":\\\"Assign this gang member to increase their combat stats (str, def, dex, agi)\\\",\\\"isHacking\\\":true,\\\"isCombat\\\":true,\\\"baseRespect\\\":0,\\\"baseWanted\\\":0,\\\"baseMoney\\\":0,\\\"hackWeight\\\":0,\\\"strWeight\\\":25,\\\"defWeight\\\":25,\\\"dexWeight\\\":25,\\\"agiWeight\\\":25,\\\"chaWeight\\\":0,\\\"difficulty\\\":100,\\\"territory\\\":{\\\"money\\\":1,\\\"respect\\\":1,\\\"wanted\\\":1}},\\\"Train Hacking\\\":{\\\"name\\\":\\\"Train Hacking\\\",\\\"desc\\\":\\\"Assign this gang member to train their hacking skills\\\",\\\"isHacking\\\":true,\\\"isCombat\\\":true,\\\"baseRespect\\\":0,\\\"baseWanted\\\":0,\\\"baseMoney\\\":0,\\\"hackWeight\\\":100,\\\"strWeight\\\":0,\\\"defWeight\\\":0,\\\"dexWeight\\\":0,\\\"agiWeight\\\":0,\\\"chaWeight\\\":0,\\\"difficulty\\\":45,\\\"territory\\\":{\\\"money\\\":1,\\\"respect\\\":1,\\\"wanted\\\":1}},\\\"Train Charisma\\\":{\\\"name\\\":\\\"Train Charisma\\\",\\\"desc\\\":\\\"Assign this gang member to train their charisma\\\",\\\"isHacking\\\":true,\\\"isCombat\\\":true,\\\"baseRespect\\\":0,\\\"baseWanted\\\":0,\\\"baseMoney\\\":0,\\\"hackWeight\\\":0,\\\"strWeight\\\":0,\\\"defWeight\\\":0,\\\"dexWeight\\\":0,\\\"agiWeight\\\":0,\\\"chaWeight\\\":100,\\\"difficulty\\\":8,\\\"territory\\\":{\\\"money\\\":1,\\\"respect\\\":1,\\\"wanted\\\":1}},\\\"Territory Warfare\\\":{\\\"name\\\":\\\"Territory Warfare\\\",\\\"desc\\\":\\\"Assign this gang member to engage in territorial warfare with other gangs. Members assigned to this task will help increase your gang's territory and will defend your territory from being taken.\\\",\\\"isHacking\\\":true,\\\"isCombat\\\":true,\\\"baseRespect\\\":0,\\\"baseWanted\\\":0,\\\"baseMoney\\\":0,\\\"hackWeight\\\":15,\\\"strWeight\\\":20,\\\"defWeight\\\":20,\\\"dexWeight\\\":20,\\\"agiWeight\\\":20,\\\"chaWeight\\\":5,\\\"difficulty\\\":5,\\\"territory\\\":{\\\"money\\\":1,\\\"respect\\\":1,\\\"wanted\\\":1}}}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-member-names.txt\",\"text\":\"[\\\"Instagram\\\",\\\"Netflix\\\",\\\"Facebook\\\",\\\"Imgur\\\",\\\"Apple\\\",\\\"Microsoft\\\",\\\"GitHub\\\",\\\"DropBox\\\",\\\"Oomnitza\\\",\\\"Google\\\",\\\"WhatsApp\\\",\\\"Salesforce\\\"]\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-getMemberInformation.txt\",\"text\":\"{\\\"Instagram\\\":{\\\"name\\\":\\\"Instagram\\\",\\\"task\\\":\\\"Traffick Illegal Arms\\\",\\\"earnedRespect\\\":85579445131.32413,\\\"hack\\\":4599,\\\"str\\\":10617472,\\\"def\\\":3235270,\\\"dex\\\":152230,\\\"agi\\\":669760,\\\"cha\\\":2741,\\\"hack_exp\\\":98248.52077433771,\\\"str_exp\\\":59528871.20591896,\\\"def_exp\\\":22024411.49208008,\\\"dex_exp\\\":3219669.3197123306,\\\"agi_exp\\\":2680995.2470404673,\\\"cha_exp\\\":97876.34409825596,\\\"hack_mult\\\":2.2723515045000005,\\\"str_mult\\\":29.206517322318344,\\\"def_mult\\\":15.515548794797638,\\\"dex_mult\\\":2.2200750000000005,\\\"agi_mult\\\":7.285657510010882,\\\"cha_mult\\\":1.4592614400000004,\\\"hack_asc_mult\\\":12.046296057500268,\\\"str_asc_mult\\\":974.9708748330721,\\\"def_asc_mult\\\":611.4072346546116,\\\"dex_asc_mult\\\":245.3153440537613,\\\"agi_asc_mult\\\":335.92195454019605,\\\"cha_asc_mult\\\":11.187824254584644,\\\"hack_asc_points\\\":290226.497409893,\\\"str_asc_points\\\":1901136413.5455322,\\\"def_asc_points\\\":747637613.1759986,\\\"dex_asc_points\\\":120359236.05643056,\\\"agi_asc_points\\\":225687119.08421108,\\\"cha_asc_points\\\":250334.82310294485,\\\"upgrades\\\":[\\\"Baseball Bat\\\",\\\"Bulletproof Vest\\\",\\\"Ford Flex V20\\\",\\\"Full Body Armor\\\",\\\"NUKE Rootkit\\\",\\\"ATX1070 Superbike\\\",\\\"Katana\\\",\\\"Mercedes-Benz S9001\\\",\\\"Glock 18C\\\",\\\"Liquid Body Armor\\\",\\\"Soulstealer Rootkit\\\",\\\"White Ferrari\\\",\\\"Graphene Plating Armor\\\",\\\"Hmap Node\\\",\\\"P90C\\\",\\\"Steyr AUG\\\",\\\"Demon Rootkit\\\",\\\"Jack the Ripper\\\",\\\"AK-47\\\",\\\"M15A10 Assault Rifle\\\",\\\"AWM Sniper Rifle\\\"],\\\"augmentations\\\":[\\\"Bionic Arms\\\",\\\"Bionic Legs\\\",\\\"Nanofiber Weave\\\",\\\"Bionic Spine\\\",\\\"Synfibril Muscle\\\",\\\"BrachiBlades\\\",\\\"Synthetic Heart\\\",\\\"Graphene Bone Lacings\\\",\\\"BitWire\\\",\\\"DataJack\\\",\\\"Neuralstimulator\\\"],\\\"respectGain\\\":24543.033564887046,\\\"wantedLevelGain\\\":0.0000019302157090275932,\\\"moneyGain\\\":15382565769.010843},\\\"Netflix\\\":{\\\"name\\\":\\\"Netflix\\\",\\\"task\\\":\\\"Traffick Illegal Arms\\\",\\\"earnedRespect\\\":275961433.84075177,\\\"hack\\\":4368,\\\"str\\\":9727656,\\\"def\\\":2973577,\\\"dex\\\":146116,\\\"agi\\\":630121,\\\"cha\\\":2589,\\\"hack_exp\\\":79576.8299346757,\\\"str_exp\\\":53929286.421853095,\\\"def_exp\\\":19993209.888393298,\\\"dex_exp\\\":3002623.985073441,\\\"agi_exp\\\":2538527.76720572,\\\"cha_exp\\\":97966.83978230039,\\\"hack_mult\\\":2.2723515045000005,\\\"str_mult\\\":29.206517322318344,\\\"def_mult\\\":15.515548794797638,\\\"dex_mult\\\":2.2200750000000005,\\\"agi_mult\\\":7.285657510010882,\\\"cha_mult\\\":1.4592614400000004,\\\"hack_asc_mult\\\":11.916793668700185,\\\"str_asc_mult\\\":900.8996229163498,\\\"def_asc_mult\\\":567.1003552600034,\\\"dex_asc_mult\\\":237.35865867089825,\\\"agi_asc_mult\\\":318.0711380058005,\\\"cha_asc_mult\\\":10.567988477233692,\\\"hack_asc_points\\\":284019.9426847456,\\\"str_asc_points\\\":1623240261.1416426,\\\"def_asc_points\\\":643205625.8720441,\\\"dex_asc_points\\\":112678265.69209595,\\\"agi_asc_points\\\":202338497.66460997,\\\"cha_asc_points\\\":223364.7609098882,\\\"upgrades\\\":[\\\"Baseball Bat\\\",\\\"Bulletproof Vest\\\",\\\"Ford Flex V20\\\",\\\"Full Body Armor\\\",\\\"NUKE Rootkit\\\",\\\"ATX1070 Superbike\\\",\\\"Katana\\\",\\\"Mercedes-Benz S9001\\\",\\\"Glock 18C\\\",\\\"Liquid Body Armor\\\",\\\"Soulstealer Rootkit\\\",\\\"White Ferrari\\\",\\\"Graphene Plating Armor\\\",\\\"Hmap Node\\\",\\\"P90C\\\",\\\"Steyr AUG\\\",\\\"Demon Rootkit\\\",\\\"Jack the Ripper\\\",\\\"AK-47\\\",\\\"M15A10 Assault Rifle\\\",\\\"AWM Sniper Rifle\\\"],\\\"augmentations\\\":[\\\"Bionic Arms\\\",\\\"Bionic Legs\\\",\\\"Nanofiber Weave\\\",\\\"Bionic Spine\\\",\\\"Synfibril Muscle\\\",\\\"BrachiBlades\\\",\\\"Synthetic Heart\\\",\\\"Graphene Bone Lacings\\\",\\\"BitWire\\\",\\\"DataJack\\\",\\\"Neuralstimulator\\\"],\\\"respectGain\\\":22514.621994975776,\\\"wantedLevelGain\\\":0.0000020681237987517204,\\\"moneyGain\\\":14111252292.130987},\\\"Facebook\\\":{\\\"name\\\":\\\"Facebook\\\",\\\"task\\\":\\\"Traffick Illegal Arms\\\",\\\"earnedRespect\\\":74943971414.2007,\\\"hack\\\":7121,\\\"str\\\":9233975,\\\"def\\\":2863927,\\\"dex\\\":160565,\\\"agi\\\":629764,\\\"cha\\\":4046,\\\"hack_exp\\\":142168.45648276762,\\\"str_exp\\\":52349436.3121536,\\\"def_exp\\\":19702409.65694916,\\\"dex_exp\\\":3377439.4034371753,\\\"agi_exp\\\":2537240.49401448,\\\"cha_exp\\\":135987.83888598884,\\\"hack_mult\\\":2.2723515045000005,\\\"str_mult\\\":29.206517322318344,\\\"def_mult\\\":15.515548794797638,\\\"dex_mult\\\":2.2200750000000005,\\\"agi_mult\\\":7.285657510010882,\\\"cha_mult\\\":1.4592614400000004,\\\"hack_asc_mult\\\":17.431339457648804,\\\"str_asc_mult\\\":857.3852432330903,\\\"def_asc_mult\\\":546.9474545878011,\\\"dex_asc_mult\\\":257.33627494047585,\\\"agi_asc_mult\\\":317.90984591589296,\\\"cha_asc_mult\\\":15.54418543350877,\\\"hack_asc_points\\\":607703.1905755681,\\\"str_asc_points\\\":1470218910.6277306,\\\"def_asc_points\\\":598303036.1601495,\\\"dex_asc_points\\\":132443916.80048035,\\\"agi_asc_points\\\":202133340.2605336,\\\"cha_asc_points\\\":483243.4015826125,\\\"upgrades\\\":[\\\"Baseball Bat\\\",\\\"Bulletproof Vest\\\",\\\"Ford Flex V20\\\",\\\"Full Body Armor\\\",\\\"NUKE Rootkit\\\",\\\"ATX1070 Superbike\\\",\\\"Katana\\\",\\\"Mercedes-Benz S9001\\\",\\\"Glock 18C\\\",\\\"Liquid Body Armor\\\",\\\"Soulstealer Rootkit\\\",\\\"White Ferrari\\\",\\\"Graphene Plating Armor\\\",\\\"Hmap Node\\\",\\\"P90C\\\",\\\"Steyr AUG\\\",\\\"Demon Rootkit\\\",\\\"Jack the Ripper\\\",\\\"AK-47\\\",\\\"M15A10 Assault Rifle\\\",\\\"AWM Sniper Rifle\\\"],\\\"augmentations\\\":[\\\"Bionic Arms\\\",\\\"Bionic Legs\\\",\\\"Nanofiber Weave\\\",\\\"Bionic Spine\\\",\\\"Synfibril Muscle\\\",\\\"BrachiBlades\\\",\\\"Synthetic Heart\\\",\\\"Graphene Bone Lacings\\\",\\\"BitWire\\\",\\\"DataJack\\\",\\\"Neuralstimulator\\\"],\\\"respectGain\\\":21489.90114466186,\\\"wantedLevelGain\\\":0.0000021466469457084425,\\\"moneyGain\\\":13469005202.650593},\\\"Imgur\\\":{\\\"name\\\":\\\"Imgur\\\",\\\"task\\\":\\\"Traffick Illegal Arms\\\",\\\"earnedRespect\\\":250891274.5076991,\\\"hack\\\":9253,\\\"str\\\":8732542,\\\"def\\\":2775885,\\\"dex\\\":164550,\\\"agi\\\":587283,\\\"cha\\\":5809,\\\"hack_exp\\\":149849.15442983317,\\\"str_exp\\\":48832106.42757304,\\\"def_exp\\\":18775702.25499676,\\\"dex_exp\\\":3340345.3206200246,\\\"agi_exp\\\":2383609.884994464,\\\"cha_exp\\\":194462.1192881966,\\\"hack_mult\\\":2.2723515045000005,\\\"str_mult\\\":29.206517322318344,\\\"def_mult\\\":15.515548794797638,\\\"dex_mult\\\":2.2200750000000005,\\\"agi_mult\\\":7.285657510010882,\\\"cha_mult\\\":1.4592614400000004,\\\"hack_asc_mult\\\":22.44021854395719,\\\"str_asc_mult\\\":815.7502015265928,\\\"def_asc_mult\\\":532.5661801432954,\\\"dex_asc_mult\\\":264.0556688887448,\\\"agi_asc_mult\\\":298.6603173998782,\\\"cha_asc_mult\\\":20.97723515898694,\\\"hack_asc_points\\\":1007126.8166011203,\\\"str_asc_points\\\":1330896782.581354,\\\"def_asc_points\\\":567253472.4648418,\\\"dex_asc_points\\\":139450792.5445648,\\\"agi_asc_points\\\":178395970.37879193,\\\"cha_asc_points\\\":880088.7898308755,\\\"upgrades\\\":[\\\"Baseball Bat\\\",\\\"Bulletproof Vest\\\",\\\"Ford Flex V20\\\",\\\"Full Body Armor\\\",\\\"NUKE Rootkit\\\",\\\"ATX1070 Superbike\\\",\\\"Katana\\\",\\\"Mercedes-Benz S9001\\\",\\\"Glock 18C\\\",\\\"Liquid Body Armor\\\",\\\"Soulstealer Rootkit\\\",\\\"White Ferrari\\\",\\\"Graphene Plating Armor\\\",\\\"Hmap Node\\\",\\\"P90C\\\",\\\"Steyr AUG\\\",\\\"Demon Rootkit\\\",\\\"Jack the Ripper\\\",\\\"AK-47\\\",\\\"M15A10 Assault Rifle\\\",\\\"AWM Sniper Rifle\\\"],\\\"augmentations\\\":[\\\"Bionic Arms\\\",\\\"Bionic Legs\\\",\\\"Nanofiber Weave\\\",\\\"Bionic Spine\\\",\\\"Synfibril Muscle\\\",\\\"BrachiBlades\\\",\\\"Synthetic Heart\\\",\\\"Graphene Bone Lacings\\\",\\\"BitWire\\\",\\\"DataJack\\\",\\\"Neuralstimulator\\\"],\\\"respectGain\\\":20470.976137590427,\\\"wantedLevelGain\\\":0.000002231707138591974,\\\"moneyGain\\\":12830390676.567762},\\\"Apple\\\":{\\\"name\\\":\\\"Apple\\\",\\\"task\\\":\\\"Traffick Illegal Arms\\\",\\\"earnedRespect\\\":90565690082.4565,\\\"hack\\\":8329,\\\"str\\\":11165550,\\\"def\\\":3421791,\\\"dex\\\":180976,\\\"agi\\\":747350,\\\"cha\\\":4857,\\\"hack_exp\\\":162416.66467993605,\\\"str_exp\\\":62349801.76883971,\\\"def_exp\\\":23181124.8792864,\\\"dex_exp\\\":3760333.5634442987,\\\"agi_exp\\\":2956929.7223716993,\\\"cha_exp\\\":158837.0782721669,\\\"hack_mult\\\":2.2723515045000005,\\\"str_mult\\\":29.206517322318344,\\\"def_mult\\\":15.515548794797638,\\\"dex_mult\\\":2.2200750000000005,\\\"agi_mult\\\":7.285657510010882,\\\"cha_mult\\\":1.4592614400000004,\\\"hack_asc_mult\\\":19.91686656506435,\\\"str_asc_mult\\\":1021.2413524634562,\\\"def_asc_mult\\\":643.5653689099861,\\\"dex_asc_mult\\\":286.5457365620803,\\\"agi_asc_mult\\\":370.5931897780453,\\\"cha_asc_mult\\\":18.15673911768249,\\\"hack_asc_points\\\":793363.1475411564,\\\"str_asc_points\\\":2085867799.9627786,\\\"def_asc_points\\\":828352768.1204929,\\\"dex_asc_points\\\":164216918.2838103,\\\"agi_asc_points\\\":274678624.6197326,\\\"cha_asc_points\\\":659334.3507751633,\\\"upgrades\\\":[\\\"Baseball Bat\\\",\\\"Bulletproof Vest\\\",\\\"Ford Flex V20\\\",\\\"Full Body Armor\\\",\\\"NUKE Rootkit\\\",\\\"ATX1070 Superbike\\\",\\\"Katana\\\",\\\"Mercedes-Benz S9001\\\",\\\"Glock 18C\\\",\\\"Liquid Body Armor\\\",\\\"Soulstealer Rootkit\\\",\\\"White Ferrari\\\",\\\"Graphene Plating Armor\\\",\\\"Hmap Node\\\",\\\"P90C\\\",\\\"Steyr AUG\\\",\\\"Demon Rootkit\\\",\\\"Jack the Ripper\\\",\\\"AK-47\\\",\\\"M15A10 Assault Rifle\\\",\\\"AWM Sniper Rifle\\\"],\\\"augmentations\\\":[\\\"Bionic Arms\\\",\\\"Bionic Legs\\\",\\\"Nanofiber Weave\\\",\\\"Bionic Spine\\\",\\\"Synfibril Muscle\\\",\\\"BrachiBlades\\\",\\\"Synthetic Heart\\\",\\\"Graphene Bone Lacings\\\",\\\"BitWire\\\",\\\"DataJack\\\",\\\"Neuralstimulator\\\"],\\\"respectGain\\\":25889.696756961366,\\\"wantedLevelGain\\\":0.0000018494686375308733,\\\"moneyGain\\\":16226591256.884106},\\\"Microsoft\\\":{\\\"name\\\":\\\"Microsoft\\\",\\\"task\\\":\\\"Traffick Illegal Arms\\\",\\\"earnedRespect\\\":229670744.18782407,\\\"hack\\\":4430,\\\"str\\\":7014177,\\\"def\\\":2220449,\\\"dex\\\":153512,\\\"agi\\\":559959,\\\"cha\\\":2911,\\\"hack_exp\\\":80506.83357596546,\\\"str_exp\\\":42085899.44640697,\\\"def_exp\\\":17375579.72773407,\\\"dex_exp\\\":3207411.1273163464,\\\"agi_exp\\\":2394378.7963685347,\\\"cha_exp\\\":113656.59159856733,\\\"hack_mult\\\":2.2723515045000005,\\\"str_mult\\\":29.206517322318344,\\\"def_mult\\\":15.515548794797638,\\\"dex_mult\\\":2.2200750000000005,\\\"agi_mult\\\":7.285657510010882,\\\"cha_mult\\\":1.4592614400000004,\\\"hack_asc_mult\\\":12.058196956765814,\\\"str_asc_mult\\\":663.8460234334614,\\\"def_asc_mult\\\":429.1714199367156,\\\"dex_asc_mult\\\":247.4880993344741,\\\"agi_asc_mult\\\":284.6126199220155,\\\"cha_asc_mult\\\":11.555563585620012,\\\"hack_asc_points\\\":290800.22769631265,\\\"str_asc_points\\\":881383085.6568395,\\\"def_asc_points\\\":368376215.3809934,\\\"dex_asc_points\\\":122500718.62438104,\\\"agi_asc_points\\\":162008686.83774728,\\\"cha_asc_points\\\":267062.09956261446,\\\"upgrades\\\":[\\\"Baseball Bat\\\",\\\"Bulletproof Vest\\\",\\\"Ford Flex V20\\\",\\\"Full Body Armor\\\",\\\"ATX1070 Superbike\\\",\\\"Katana\\\",\\\"Mercedes-Benz S9001\\\",\\\"Glock 18C\\\",\\\"Liquid Body Armor\\\",\\\"White Ferrari\\\",\\\"Graphene Plating Armor\\\",\\\"P90C\\\",\\\"NUKE Rootkit\\\",\\\"Soulstealer Rootkit\\\",\\\"Hmap Node\\\",\\\"Steyr AUG\\\",\\\"Demon Rootkit\\\",\\\"Jack the Ripper\\\",\\\"AK-47\\\",\\\"M15A10 Assault Rifle\\\",\\\"AWM Sniper Rifle\\\"],\\\"augmentations\\\":[\\\"Bionic Arms\\\",\\\"Bionic Legs\\\",\\\"Nanofiber Weave\\\",\\\"Bionic Spine\\\",\\\"Synfibril Muscle\\\",\\\"BrachiBlades\\\",\\\"Synthetic Heart\\\",\\\"Graphene Bone Lacings\\\",\\\"BitWire\\\",\\\"DataJack\\\",\\\"Neuralstimulator\\\"],\\\"respectGain\\\":16456.0069998759,\\\"wantedLevelGain\\\":0.0000026575894633038262,\\\"moneyGain\\\":10313995853.274357},\\\"GitHub\\\":{\\\"name\\\":\\\"GitHub\\\",\\\"task\\\":\\\"Traffick Illegal Arms\\\",\\\"earnedRespect\\\":96551041926.14279,\\\"hack\\\":4981,\\\"str\\\":11968435,\\\"def\\\":3612617,\\\"dex\\\":174737,\\\"agi\\\":776439,\\\"cha\\\":3200,\\\"hack_exp\\\":105064.60648378075,\\\"str_exp\\\":66469648.02861112,\\\"def_exp\\\":24360958.11884819,\\\"dex_exp\\\":3643624.802101039,\\\"agi_exp\\\":3059911.970313935,\\\"cha_exp\\\":111525.41951015597,\\\"hack_mult\\\":2.2723515045000005,\\\"str_mult\\\":29.206517322318344,\\\"def_mult\\\":15.515548794797638,\\\"dex_mult\\\":2.2200750000000005,\\\"agi_mult\\\":7.285657510010882,\\\"cha_mult\\\":1.4592614400000004,\\\"hack_asc_mult\\\":12.883885727933931,\\\"str_asc_mult\\\":1088.7212360702977,\\\"def_asc_mult\\\":676.3204581485384,\\\"dex_asc_mult\\\":277.65227075164705,\\\"agi_asc_mult\\\":383.49999627624595,\\\"cha_asc_mult\\\":12.748521749854266,\\\"hack_asc_points\\\":331989.02290091926,\\\"str_asc_points\\\":2370627859.7408733,\\\"def_asc_points\\\":914818724.2204975,\\\"dex_asc_points\\\":154181566.90709186,\\\"agi_asc_points\\\":294144494.28776133,\\\"cha_asc_points\\\":325049.6136130145,\\\"upgrades\\\":[\\\"Baseball Bat\\\",\\\"Bulletproof Vest\\\",\\\"Ford Flex V20\\\",\\\"Full Body Armor\\\",\\\"NUKE Rootkit\\\",\\\"ATX1070 Superbike\\\",\\\"Katana\\\",\\\"Mercedes-Benz S9001\\\",\\\"Glock 18C\\\",\\\"Liquid Body Armor\\\",\\\"Soulstealer Rootkit\\\",\\\"White Ferrari\\\",\\\"Graphene Plating Armor\\\",\\\"Hmap Node\\\",\\\"P90C\\\",\\\"Steyr AUG\\\",\\\"Demon Rootkit\\\",\\\"Jack the Ripper\\\",\\\"AK-47\\\",\\\"M15A10 Assault Rifle\\\",\\\"AWM Sniper Rifle\\\"],\\\"augmentations\\\":[\\\"Bionic Arms\\\",\\\"Bionic Legs\\\",\\\"Nanofiber Weave\\\",\\\"Bionic Spine\\\",\\\"Synfibril Muscle\\\",\\\"BrachiBlades\\\",\\\"Synthetic Heart\\\",\\\"Graphene Bone Lacings\\\",\\\"BitWire\\\",\\\"DataJack\\\",\\\"Neuralstimulator\\\"],\\\"respectGain\\\":27611.3967692432,\\\"wantedLevelGain\\\":0.0000017566205453284183,\\\"moneyGain\\\":17305672278.3229},\\\"DropBox\\\":{\\\"name\\\":\\\"DropBox\\\",\\\"task\\\":\\\"Traffick Illegal Arms\\\",\\\"earnedRespect\\\":338171205.10815984,\\\"hack\\\":3047,\\\"str\\\":11944788,\\\"def\\\":3607507,\\\"dex\\\":165084,\\\"agi\\\":764649,\\\"cha\\\":2281,\\\"hack_exp\\\":58978.323052919055,\\\"str_exp\\\":65150383.44198664,\\\"def_exp\\\":23854821.058478948,\\\"dex_exp\\\":3349684.4132566554,\\\"agi_exp\\\":3018217.5697173215,\\\"cha_exp\\\":88093.11248484175,\\\"hack_mult\\\":2.2723515045000005,\\\"str_mult\\\":29.206517322318344,\\\"def_mult\\\":15.515548794797638,\\\"dex_mult\\\":2.2200750000000005,\\\"agi_mult\\\":7.285657510010882,\\\"cha_mult\\\":1.4592614400000004,\\\"hack_asc_mult\\\":8.833687824535085,\\\"str_asc_mult\\\":1088.4252623450275,\\\"def_asc_mult\\\":676.6843778896126,\\\"dex_asc_mult\\\":264.82817542423885,\\\"agi_asc_mult\\\":378.2744203026007,\\\"cha_asc_mult\\\":9.50325181799714,\\\"hack_asc_points\\\":156068.0811626788,\\\"str_asc_points\\\":2369339103.421684,\\\"def_asc_points\\\":915803494.5597042,\\\"dex_asc_points\\\":140267924.99706283,\\\"agi_asc_points\\\":286183074.1105372,\\\"cha_asc_points\\\":180623.59023253195,\\\"upgrades\\\":[\\\"Baseball Bat\\\",\\\"Bulletproof Vest\\\",\\\"Ford Flex V20\\\",\\\"Full Body Armor\\\",\\\"NUKE Rootkit\\\",\\\"ATX1070 Superbike\\\",\\\"Katana\\\",\\\"Mercedes-Benz S9001\\\",\\\"Glock 18C\\\",\\\"Liquid Body Armor\\\",\\\"Soulstealer Rootkit\\\",\\\"White Ferrari\\\",\\\"Graphene Plating Armor\\\",\\\"Hmap Node\\\",\\\"P90C\\\",\\\"Steyr AUG\\\",\\\"Demon Rootkit\\\",\\\"Jack the Ripper\\\",\\\"AK-47\\\",\\\"M15A10 Assault Rifle\\\",\\\"AWM Sniper Rifle\\\"],\\\"augmentations\\\":[\\\"Bionic Arms\\\",\\\"Bionic Legs\\\",\\\"Nanofiber Weave\\\",\\\"Bionic Spine\\\",\\\"Synfibril Muscle\\\",\\\"BrachiBlades\\\",\\\"Synthetic Heart\\\",\\\"Graphene Bone Lacings\\\",\\\"BitWire\\\",\\\"DataJack\\\",\\\"Neuralstimulator\\\"],\\\"respectGain\\\":27539.56203271383,\\\"wantedLevelGain\\\":0.000001760285174467858,\\\"moneyGain\\\":17260649626.109417},\\\"Oomnitza\\\":{\\\"name\\\":\\\"Oomnitza\\\",\\\"task\\\":\\\"Traffick Illegal Arms\\\",\\\"earnedRespect\\\":99179038811.31955,\\\"hack\\\":1757,\\\"str\\\":12461394,\\\"def\\\":3619712,\\\"dex\\\":145626,\\\"agi\\\":752443,\\\"cha\\\":1321,\\\"hack_exp\\\":44213.239434838186,\\\"str_exp\\\":68989205.8048214,\\\"def_exp\\\":24404734.290708426,\\\"dex_exp\\\":3093727.0386872506,\\\"agi_exp\\\":2974986.403270076,\\\"cha_exp\\\":53311.465798656085,\\\"hack_mult\\\":2.2723515045000005,\\\"str_mult\\\":29.206517322318344,\\\"def_mult\\\":15.515548794797638,\\\"dex_mult\\\":2.2200750000000005,\\\"agi_mult\\\":7.285657510010882,\\\"cha_mult\\\":1.4592614400000004,\\\"hack_asc_mult\\\":5.4217908732963584,\\\"str_asc_mult\\\":1129.9896365782251,\\\"def_asc_mult\\\":677.5357929668113,\\\"dex_asc_mult\\\":235.74884463459318,\\\"agi_asc_mult\\\":372.85624084764146,\\\"cha_asc_mult\\\":6.094058056323872,\\\"hack_asc_points\\\":58791.63254751937,\\\"str_asc_points\\\":2553753157.5483785,\\\"def_asc_points\\\":918109501.5023315,\\\"dex_asc_points\\\":111155035.49309109,\\\"agi_asc_points\\\":278043552.6780689,\\\"cha_asc_points\\\":74275.08718769178,\\\"upgrades\\\":[\\\"Baseball Bat\\\",\\\"Bulletproof Vest\\\",\\\"Ford Flex V20\\\",\\\"Full Body Armor\\\",\\\"NUKE Rootkit\\\",\\\"ATX1070 Superbike\\\",\\\"Katana\\\",\\\"Mercedes-Benz S9001\\\",\\\"Glock 18C\\\",\\\"Liquid Body Armor\\\",\\\"Soulstealer Rootkit\\\",\\\"White Ferrari\\\",\\\"Graphene Plating Armor\\\",\\\"Hmap Node\\\",\\\"P90C\\\",\\\"Steyr AUG\\\",\\\"Demon Rootkit\\\",\\\"Jack the Ripper\\\",\\\"AK-47\\\",\\\"M15A10 Assault Rifle\\\",\\\"AWM Sniper Rifle\\\"],\\\"augmentations\\\":[\\\"Bionic Arms\\\",\\\"Bionic Legs\\\",\\\"Nanofiber Weave\\\",\\\"Bionic Spine\\\",\\\"Synfibril Muscle\\\",\\\"BrachiBlades\\\",\\\"Synthetic Heart\\\",\\\"Graphene Bone Lacings\\\",\\\"BitWire\\\",\\\"DataJack\\\",\\\"Neuralstimulator\\\"],\\\"respectGain\\\":28427.9844438532,\\\"wantedLevelGain\\\":0.0000017161366041848986,\\\"moneyGain\\\":17817471230.36254},\\\"Google\\\":{\\\"name\\\":\\\"Google\\\",\\\"task\\\":\\\"Traffick Illegal Arms\\\",\\\"earnedRespect\\\":339279302.3055734,\\\"hack\\\":1620,\\\"str\\\":12098921,\\\"def\\\":3533093,\\\"dex\\\":144710,\\\"agi\\\":745652,\\\"cha\\\":1299,\\\"hack_exp\\\":35147.913319309315,\\\"str_exp\\\":65924734.65035738,\\\"def_exp\\\":23404310.841397434,\\\"dex_exp\\\":2976357.513706855,\\\"agi_exp\\\":2950906.3014268316,\\\"cha_exp\\\":55142.3266501929,\\\"hack_mult\\\":2.2723515045000005,\\\"str_mult\\\":29.206517322318344,\\\"def_mult\\\":15.515548794797638,\\\"dex_mult\\\":2.2200750000000005,\\\"agi_mult\\\":7.285657510010882,\\\"cha_mult\\\":1.4592614400000004,\\\"hack_asc_mult\\\":5.2644035617629745,\\\"str_asc_mult\\\":1101.3618464845345,\\\"def_asc_mult\\\":663.9048552416983,\\\"dex_asc_mult\\\":235.3127138323077,\\\"agi_asc_mult\\\":369.8382720116737,\\\"cha_asc_mult\\\":5.948608253309197,\\\"hack_asc_points\\\":55427.889722205386,\\\"str_asc_points\\\":2425995833.783646,\\\"def_asc_points\\\":881539313.6270009,\\\"dex_asc_points\\\":110744146.58225109,\\\"agi_asc_points\\\":273560694.8891615,\\\"cha_asc_points\\\":70771.88030267658,\\\"upgrades\\\":[\\\"Baseball Bat\\\",\\\"Bulletproof Vest\\\",\\\"Ford Flex V20\\\",\\\"Full Body Armor\\\",\\\"NUKE Rootkit\\\",\\\"ATX1070 Superbike\\\",\\\"Katana\\\",\\\"Mercedes-Benz S9001\\\",\\\"Glock 18C\\\",\\\"Liquid Body Armor\\\",\\\"Soulstealer Rootkit\\\",\\\"White Ferrari\\\",\\\"Graphene Plating Armor\\\",\\\"Hmap Node\\\",\\\"P90C\\\",\\\"Steyr AUG\\\",\\\"Demon Rootkit\\\",\\\"Jack the Ripper\\\",\\\"AK-47\\\",\\\"M15A10 Assault Rifle\\\",\\\"AWM Sniper Rifle\\\"],\\\"augmentations\\\":[\\\"Bionic Arms\\\",\\\"Bionic Legs\\\",\\\"Nanofiber Weave\\\",\\\"Bionic Spine\\\",\\\"Synfibril Muscle\\\",\\\"BrachiBlades\\\",\\\"Synthetic Heart\\\",\\\"Graphene Bone Lacings\\\",\\\"BitWire\\\",\\\"DataJack\\\",\\\"Neuralstimulator\\\"],\\\"respectGain\\\":27639.490077568964,\\\"wantedLevelGain\\\":0.0000017551920370543261,\\\"moneyGain\\\":17323279849.69277},\\\"WhatsApp\\\":{\\\"name\\\":\\\"WhatsApp\\\",\\\"task\\\":\\\"Traffick Illegal Arms\\\",\\\"earnedRespect\\\":106831520186.08252,\\\"hack\\\":676,\\\"str\\\":13396752,\\\"def\\\":3908234,\\\"dex\\\":153281,\\\"agi\\\":843774,\\\"cha\\\":495,\\\"hack_exp\\\":20483.312639765983,\\\"str_exp\\\":73750443.09705842,\\\"def_exp\\\":26179231.94614636,\\\"dex_exp\\\":3239244.2041276256,\\\"agi_exp\\\":3296954.6900583445,\\\"cha_exp\\\":24063.351237368017,\\\"hack_mult\\\":2.2723515045000005,\\\"str_mult\\\":29.206517322318344,\\\"def_mult\\\":15.515548794797638,\\\"dex_mult\\\":2.2200750000000005,\\\"agi_mult\\\":7.285657510010882,\\\"cha_mult\\\":1.4592614400000004,\\\"hack_asc_mult\\\":2.511832178432388,\\\"str_asc_mult\\\":1207.9750074018777,\\\"def_asc_mult\\\":726.8002373886712,\\\"dex_asc_mult\\\":246.8375745703859,\\\"agi_asc_mult\\\":413.2086555518134,\\\"cha_asc_mult\\\":2.7506926938393925,\\\"hack_asc_points\\\":12618.601785216792,\\\"str_asc_points\\\":2918407237.015134,\\\"def_asc_points\\\":1056477170.1364577,\\\"dex_asc_points\\\":121857576.43958163,\\\"agi_asc_points\\\":341482786.0458744,\\\"cha_asc_points\\\":15132.620591882831,\\\"upgrades\\\":[\\\"Baseball Bat\\\",\\\"Bulletproof Vest\\\",\\\"Ford Flex V20\\\",\\\"Full Body Armor\\\",\\\"NUKE Rootkit\\\",\\\"ATX1070 Superbike\\\",\\\"Katana\\\",\\\"Mercedes-Benz S9001\\\",\\\"Glock 18C\\\",\\\"Liquid Body Armor\\\",\\\"Soulstealer Rootkit\\\",\\\"White Ferrari\\\",\\\"Graphene Plating Armor\\\",\\\"Hmap Node\\\",\\\"P90C\\\",\\\"Steyr AUG\\\",\\\"Demon Rootkit\\\",\\\"Jack the Ripper\\\",\\\"AK-47\\\",\\\"M15A10 Assault Rifle\\\",\\\"AWM Sniper Rifle\\\"],\\\"augmentations\\\":[\\\"Bionic Arms\\\",\\\"Bionic Legs\\\",\\\"Nanofiber Weave\\\",\\\"Bionic Spine\\\",\\\"Synfibril Muscle\\\",\\\"BrachiBlades\\\",\\\"Synthetic Heart\\\",\\\"Graphene Bone Lacings\\\",\\\"BitWire\\\",\\\"DataJack\\\",\\\"Neuralstimulator\\\"],\\\"respectGain\\\":30582.00049812367,\\\"wantedLevelGain\\\":0.0000016187363443817533,\\\"moneyGain\\\":19167507721.886497},\\\"Salesforce\\\":{\\\"name\\\":\\\"Salesforce\\\",\\\"task\\\":\\\"Traffick Illegal Arms\\\",\\\"earnedRespect\\\":385958643.6241249,\\\"hack\\\":190,\\\"str\\\":13796083,\\\"def\\\":4038846,\\\"dex\\\":111488,\\\"agi\\\":901061,\\\"cha\\\":136,\\\"hack_exp\\\":6598.3785260505365,\\\"str_exp\\\":74401408.17373253,\\\"def_exp\\\":26450622.129454475,\\\"dex_exp\\\":2356332.2899155905,\\\"agi_exp\\\":3496426.177734166,\\\"cha_exp\\\":9150.877946087143,\\\"hack_mult\\\":2.2723515045000005,\\\"str_mult\\\":29.206517322318344,\\\"def_mult\\\":15.515548794797638,\\\"dex_mult\\\":2.2200750000000005,\\\"agi_mult\\\":7.285657510010882,\\\"cha_mult\\\":1.4592614400000004,\\\"hack_asc_mult\\\":1,\\\"str_asc_mult\\\":1243.0617422782384,\\\"def_asc_mult\\\":750.3752033178628,\\\"dex_asc_mult\\\":186.31722372432097,\\\"agi_asc_mult\\\":438.3236577850743,\\\"cha_asc_mult\\\":1,\\\"hack_asc_points\\\":0,\\\"str_asc_points\\\":3090404990.23162,\\\"def_asc_points\\\":1126125891.508648,\\\"dex_asc_points\\\":69428215.71267736,\\\"agi_asc_points\\\":384255257.9481739,\\\"cha_asc_points\\\":0,\\\"upgrades\\\":[\\\"Baseball Bat\\\",\\\"Bulletproof Vest\\\",\\\"Ford Flex V20\\\",\\\"Full Body Armor\\\",\\\"NUKE Rootkit\\\",\\\"ATX1070 Superbike\\\",\\\"Katana\\\",\\\"Mercedes-Benz S9001\\\",\\\"Glock 18C\\\",\\\"Liquid Body Armor\\\",\\\"Soulstealer Rootkit\\\",\\\"White Ferrari\\\",\\\"Graphene Plating Armor\\\",\\\"Hmap Node\\\",\\\"P90C\\\",\\\"Steyr AUG\\\",\\\"Demon Rootkit\\\",\\\"Jack the Ripper\\\",\\\"AK-47\\\",\\\"M15A10 Assault Rifle\\\",\\\"AWM Sniper Rifle\\\"],\\\"augmentations\\\":[\\\"Bionic Arms\\\",\\\"Bionic Legs\\\",\\\"Nanofiber Weave\\\",\\\"Bionic Spine\\\",\\\"Synfibril Muscle\\\",\\\"BrachiBlades\\\",\\\"Synthetic Heart\\\",\\\"Graphene Bone Lacings\\\",\\\"BitWire\\\",\\\"DataJack\\\",\\\"Neuralstimulator\\\"],\\\"respectGain\\\":31435.65441857648,\\\"wantedLevelGain\\\":0.000001583473753325449,\\\"moneyGain\\\":19702538062.75093}}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-faction-rep.txt\",\"text\":\"1867171168.016925\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-set-member-tasks.txt\",\"text\":\"true\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-other-gang-info.txt\",\"text\":\"{\\\"Slum Snakes\\\":{\\\"power\\\":221674.56535079825,\\\"territory\\\":0.9999999999999968},\\\"Tetrads\\\":{\\\"power\\\":10709.668202994477,\\\"territory\\\":0},\\\"The Syndicate\\\":{\\\"power\\\":10528.841407480957,\\\"territory\\\":0},\\\"The Dark Army\\\":{\\\"power\\\":10361.234570503359,\\\"territory\\\":0},\\\"Speakers for the Dead\\\":{\\\"power\\\":9720.774932598773,\\\"territory\\\":0},\\\"NiteSec\\\":{\\\"power\\\":10453.919833433576,\\\"territory\\\":0},\\\"The Black Hand\\\":{\\\"power\\\":9416.154386737266,\\\"territory\\\":0}}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-recruit-member.txt\",\"text\":\"true\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-getAscensionResult.txt\",\"text\":\"{\\\"Instagram\\\":{\\\"respect\\\":85578831608.69203,\\\"hack\\\":1.1553218339507663,\\\"str\\\":1.015466410682529,\\\"def\\\":1.0145586550516308,\\\"dex\\\":1.01323847044565,\\\"agi\\\":1.0058698742962802,\\\"cha\\\":1.1775047152963558},\\\"Netflix\\\":{\\\"respect\\\":275398618.55290294,\\\"hack\\\":1.129755153071205,\\\"str\\\":1.0164012149562722,\\\"def\\\":1.0153541587795234,\\\"dex\\\":1.0131860065574632,\\\"agi\\\":1.0061981585690543,\\\"cha\\\":1.197339344697921},\\\"Facebook\\\":{\\\"respect\\\":74943434213.83585,\\\"hack\\\":1.109993012997099,\\\"str\\\":1.0175691722999871,\\\"def\\\":1.016260621400619,\\\"dex\\\":1.0126240989466564,\\\"agi\\\":1.0062012922781445,\\\"cha\\\":1.130928411426456},\\\"Imgur\\\":{\\\"respect\\\":250379546.24985674,\\\"hack\\\":1.071274803747,\\\"str\\\":1.0180979382980309,\\\"def\\\":1.016341735781391,\\\"dex\\\":1.011861059064824,\\\"agi\\\":1.0065995045288314,\\\"cha\\\":1.10434171092079},\\\"Apple\\\":{\\\"respect\\\":90565042896.03632,\\\"hack\\\":1.0969373519230918,\\\"str\\\":1.0147697725085203,\\\"def\\\":1.0138351576320483,\\\"dex\\\":1.0113433861949623,\\\"agi\\\":1.005320945493756,\\\"cha\\\":1.113148276582016},\\\"Microsoft\\\":{\\\"respect\\\":229259378.82729924,\\\"hack\\\":1.1283163905584574,\\\"str\\\":1.023495740583031,\\\"def\\\":1.0232218048055857,\\\"dex\\\":1.012958750979194,\\\"agi\\\":1.0073005456369617,\\\"cha\\\":1.1922172216973141},\\\"GitHub\\\":{\\\"respect\\\":96550351700.55049,\\\"hack\\\":1.1459356924628827,\\\"str\\\":1.0138605977345487,\\\"def\\\":1.013169483557889,\\\"dex\\\":1.0117045239870146,\\\"agi\\\":1.005142384430462,\\\"cha\\\":1.1574169857864771},\\\"DropBox\\\":{\\\"respect\\\":337482776.5666461,\\\"hack\\\":1.1709277333217063,\\\"str\\\":1.0135934695821587,\\\"def\\\":1.0128825999389122,\\\"dex\\\":1.0118251464744679,\\\"agi\\\":1.0052132146964385,\\\"cha\\\":1.2172210832695949},\\\"Oomnitza\\\":{\\\"respect\\\":99178328172.57904,\\\"hack\\\":1.3169419188180838,\\\"str\\\":1.0133577370391649,\\\"def\\\":1.013146014922403,\\\"dex\\\":1.0137701427914576,\\\"agi\\\":1.0052887458874356,\\\"cha\\\":1.3051556229219208},\\\"Google\\\":{\\\"respect\\\":338588375.7928452,\\\"hack\\\":1.2709720704339154,\\\"str\\\":1.0134348615170772,\\\"def\\\":1.013128959938126,\\\"dex\\\":1.0132981472807985,\\\"agi\\\":1.005331774158861,\\\"cha\\\":1.3282102714531616},\\\"WhatsApp\\\":{\\\"respect\\\":106830755701.14467,\\\"hack\\\":1.5945315779628797,\\\"str\\\":1.0125007109982864,\\\"def\\\":1.0122603711199296,\\\"dex\\\":1.0131557495680021,\\\"agi\\\":1.004773650952871,\\\"cha\\\":1.5881345159406806},\\\"Salesforce\\\":{\\\"respect\\\":385172820.53505915,\\\"hack\\\":1.6719632614156439,\\\"str\\\":1.0119115950628363,\\\"def\\\":1.0116239011730643,\\\"dex\\\":1.016762620886923,\\\"agi\\\":1.0044996321662685,\\\"cha\\\":2.017469623820408}}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-augs.txt\",\"text\":\"[\\\"Unstable Circadian Modulator\\\",\\\"HemoRecirculator\\\",\\\"Augmented Targeting I\\\",\\\"Augmented Targeting II\\\",\\\"Augmented Targeting III\\\",\\\"Synthetic Heart\\\",\\\"Synfibril Muscle\\\",\\\"Combat Rib I\\\",\\\"Combat Rib II\\\",\\\"Combat Rib III\\\",\\\"Nanofiber Weave\\\",\\\"NEMEAN Subdermal Weave\\\",\\\"Wired Reflexes\\\",\\\"Graphene Bone Lacings\\\",\\\"Bionic Spine\\\",\\\"Graphene Bionic Spine Upgrade\\\",\\\"Bionic Legs\\\",\\\"Graphene Bionic Legs Upgrade\\\",\\\"Speech Processor Implant\\\",\\\"TITN-41 Gene-Modification Injection\\\",\\\"Enhanced Social Interaction Implant\\\",\\\"BitWire\\\",\\\"Artificial Bio-neural Network Implant\\\",\\\"Artificial Synaptic Potentiation\\\",\\\"Enhanced Myelin Sheathing\\\",\\\"Synaptic Enhancement Implant\\\",\\\"Neural-Retention Enhancement\\\",\\\"DataJack\\\",\\\"Embedded Netburner Module\\\",\\\"Embedded Netburner Module Core Implant\\\",\\\"Embedded Netburner Module Core V2 Upgrade\\\",\\\"Embedded Netburner Module Core V3 Upgrade\\\",\\\"Embedded Netburner Module Analyze Engine\\\",\\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\\"Neuralstimulator\\\",\\\"Neural Accelerator\\\",\\\"Cranial Signal Processors - Gen I\\\",\\\"Cranial Signal Processors - Gen II\\\",\\\"Cranial Signal Processors - Gen III\\\",\\\"Cranial Signal Processors - Gen IV\\\",\\\"Cranial Signal Processors - Gen V\\\",\\\"Neuronal Densification\\\",\\\"Nuoptimal Nootropic Injector Implant\\\",\\\"Speech Enhancement\\\",\\\"FocusWire\\\",\\\"PC Direct-Neural Interface\\\",\\\"PC Direct-Neural Interface Optimization Submodule\\\",\\\"PC Direct-Neural Interface NeuroNet Injector\\\",\\\"ADR-V1 Pheromone Gene\\\",\\\"ADR-V2 Pheromone Gene\\\",\\\"The Shadow's Simulacrum\\\",\\\"Hacknet Node CPU Architecture Neural-Upload\\\",\\\"Hacknet Node Cache Architecture Neural-Upload\\\",\\\"Hacknet Node NIC Architecture Neural-Upload\\\",\\\"Hacknet Node Kernel Direct-Neural Interface\\\",\\\"Hacknet Node Core Direct-Neural Interface\\\",\\\"Neurotrainer I\\\",\\\"Neurotrainer II\\\",\\\"Neurotrainer III\\\",\\\"HyperSight Corneal Implant\\\",\\\"LuminCloaking-V1 Skin Implant\\\",\\\"LuminCloaking-V2 Skin Implant\\\",\\\"SmartSonar Implant\\\",\\\"Power Recirculation Core\\\",\\\"QLink\\\",\\\"SPTN-97 Gene Modification\\\",\\\"ECorp HVMind Implant\\\",\\\"CordiARC Fusion Reactor\\\",\\\"SmartJaw\\\",\\\"Neotra\\\",\\\"Xanipher\\\",\\\"Hydroflame Left Arm\\\",\\\"nextSENS Gene Modification\\\",\\\"OmniTek InfoLoad\\\",\\\"Photosynthetic Cells\\\",\\\"BitRunners Neurolink\\\",\\\"The Black Hand\\\",\\\"CRTX42-AA Gene Modification\\\",\\\"Neuregen Gene Modification\\\",\\\"CashRoot Starter Kit\\\",\\\"NutriGen Implant\\\",\\\"PCMatrix\\\",\\\"INFRARET Enhancement\\\",\\\"DermaForce Particle Barrier\\\",\\\"Graphene BrachiBlades Upgrade\\\",\\\"Graphene Bionic Arms Upgrade\\\",\\\"BrachiBlades\\\",\\\"Bionic Arms\\\",\\\"Social Negotiation Assistant (S.N.A)\\\",\\\"Neuroreceptor Management Implant\\\"]\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/player-augs-purchased.txt\",\"text\":\"[\\\"Neuregen Gene Modification\\\",\\\"CRTX42-AA Gene Modification\\\",\\\"Power Recirculation Core\\\",\\\"Neurotrainer III\\\",\\\"Neurotrainer II\\\",\\\"Neurotrainer I\\\",\\\"Cranial Signal Processors - Gen I\\\",\\\"Synaptic Enhancement Implant\\\",\\\"BitWire\\\",\\\"NeuroFlux Governor\\\",\\\"The Black Hand\\\",\\\"BitRunners Neurolink\\\",\\\"OmniTek InfoLoad\\\",\\\"nextSENS Gene Modification\\\",\\\"Xanipher\\\",\\\"ECorp HVMind Implant\\\",\\\"SPTN-97 Gene Modification\\\",\\\"HyperSight Corneal Implant\\\",\\\"PC Direct-Neural Interface\\\",\\\"PC Direct-Neural Interface Optimization Submodule\\\",\\\"FocusWire\\\",\\\"Neuronal Densification\\\",\\\"Cranial Signal Processors - Gen II\\\",\\\"Cranial Signal Processors - Gen III\\\",\\\"Artificial Synaptic Potentiation\\\",\\\"Social Negotiation Assistant (S.N.A)\\\",\\\"ADR-V1 Pheromone Gene\\\",\\\"QLink\\\",\\\"PC Direct-Neural Interface NeuroNet Injector\\\",\\\"Cranial Signal Processors - Gen IV\\\",\\\"Neural Accelerator\\\",\\\"Neuralstimulator\\\",\\\"Embedded Netburner Module\\\",\\\"Embedded Netburner Module Analyze Engine\\\",\\\"Embedded Netburner Module Core Implant\\\",\\\"Embedded Netburner Module Core V2 Upgrade\\\",\\\"DataJack\\\",\\\"Neural-Retention Enhancement\\\",\\\"Enhanced Myelin Sheathing\\\",\\\"Artificial Bio-neural Network Implant\\\",\\\"Embedded Netburner Module Core V3 Upgrade\\\",\\\"Unstable Circadian Modulator\\\",\\\"The Red Pill\\\"]\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/aug-repreqs.txt\",\"text\":\"{\\\"Unstable Circadian Modulator\\\":362500,\\\"HemoRecirculator\\\":10000,\\\"Augmented Targeting I\\\":5000,\\\"Augmented Targeting II\\\":8750,\\\"Augmented Targeting III\\\":27500,\\\"Synthetic Heart\\\":750000,\\\"Synfibril Muscle\\\":437500,\\\"Combat Rib I\\\":7500,\\\"Combat Rib II\\\":18750,\\\"Combat Rib III\\\":35000,\\\"Nanofiber Weave\\\":37500,\\\"NEMEAN Subdermal Weave\\\":875000,\\\"Wired Reflexes\\\":1250,\\\"Graphene Bone Lacings\\\":1125000,\\\"Bionic Spine\\\":45000,\\\"Graphene Bionic Spine Upgrade\\\":1625000,\\\"Bionic Legs\\\":150000,\\\"Graphene Bionic Legs Upgrade\\\":750000,\\\"Speech Processor Implant\\\":7500,\\\"TITN-41 Gene-Modification Injection\\\":25000,\\\"Enhanced Social Interaction Implant\\\":375000,\\\"BitWire\\\":3750,\\\"Artificial Bio-neural Network Implant\\\":275000,\\\"Artificial Synaptic Potentiation\\\":6250,\\\"Enhanced Myelin Sheathing\\\":100000,\\\"Synaptic Enhancement Implant\\\":2000,\\\"Neural-Retention Enhancement\\\":20000,\\\"DataJack\\\":112500,\\\"Embedded Netburner Module\\\":15000,\\\"Embedded Netburner Module Core Implant\\\":175000,\\\"Embedded Netburner Module Core V2 Upgrade\\\":1000000,\\\"Embedded Netburner Module Core V3 Upgrade\\\":1750000,\\\"Embedded Netburner Module Analyze Engine\\\":625000,\\\"Embedded Netburner Module Direct Memory Access Upgrade\\\":1000000,\\\"Neuralstimulator\\\":50000,\\\"Neural Accelerator\\\":200000,\\\"Cranial Signal Processors - Gen I\\\":10000,\\\"Cranial Signal Processors - Gen II\\\":18750,\\\"Cranial Signal Processors - Gen III\\\":50000,\\\"Cranial Signal Processors - Gen IV\\\":125000,\\\"Cranial Signal Processors - Gen V\\\":250000,\\\"Neuronal Densification\\\":187500,\\\"Nuoptimal Nootropic Injector Implant\\\":5000,\\\"Speech Enhancement\\\":2500,\\\"FocusWire\\\":75000,\\\"PC Direct-Neural Interface\\\":375000,\\\"PC Direct-Neural Interface Optimization Submodule\\\":500000,\\\"PC Direct-Neural Interface NeuroNet Injector\\\":1500000,\\\"ADR-V1 Pheromone Gene\\\":3750,\\\"ADR-V2 Pheromone Gene\\\":62500,\\\"The Shadow's Simulacrum\\\":37500,\\\"Hacknet Node CPU Architecture Neural-Upload\\\":3750,\\\"Hacknet Node Cache Architecture Neural-Upload\\\":2500,\\\"Hacknet Node NIC Architecture Neural-Upload\\\":1875,\\\"Hacknet Node Kernel Direct-Neural Interface\\\":7500,\\\"Hacknet Node Core Direct-Neural Interface\\\":12500,\\\"Neurotrainer I\\\":1000,\\\"Neurotrainer II\\\":10000,\\\"Neurotrainer III\\\":25000,\\\"HyperSight Corneal Implant\\\":150000,\\\"LuminCloaking-V1 Skin Implant\\\":1500,\\\"LuminCloaking-V2 Skin Implant\\\":5000,\\\"SmartSonar Implant\\\":22500,\\\"Power Recirculation Core\\\":25000,\\\"QLink\\\":1875000,\\\"SPTN-97 Gene Modification\\\":1250000,\\\"ECorp HVMind Implant\\\":1500000,\\\"CordiARC Fusion Reactor\\\":1125000,\\\"SmartJaw\\\":375000,\\\"Neotra\\\":562500,\\\"Xanipher\\\":875000,\\\"Hydroflame Left Arm\\\":1250000,\\\"nextSENS Gene Modification\\\":437500,\\\"OmniTek InfoLoad\\\":625000,\\\"Photosynthetic Cells\\\":562500,\\\"BitRunners Neurolink\\\":875000,\\\"The Black Hand\\\":100000,\\\"CRTX42-AA Gene Modification\\\":45000,\\\"Neuregen Gene Modification\\\":37500,\\\"CashRoot Starter Kit\\\":12500,\\\"NutriGen Implant\\\":6250,\\\"PCMatrix\\\":100000,\\\"INFRARET Enhancement\\\":7500,\\\"DermaForce Particle Barrier\\\":15000,\\\"Graphene BrachiBlades Upgrade\\\":225000,\\\"Graphene Bionic Arms Upgrade\\\":500000,\\\"BrachiBlades\\\":12500,\\\"Bionic Arms\\\":62500,\\\"Social Negotiation Assistant (S.N.A)\\\":6250,\\\"Neuroreceptor Management Implant\\\":75000}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-ascend-member.txt\",\"text\":\"{\\\"respect\\\":1645062.414753603,\\\"hack\\\":1,\\\"str\\\":7.974335330420825,\\\"def\\\":7.606915485469831,\\\"dex\\\":8.60854206457007,\\\"agi\\\":7.248181448606005,\\\"cha\\\":1}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/Temp/gang-upgrade-members.txt\",\"text\":\"true\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/resources/manifest.txt\",\"text\":\"./lib/Helpers.js\\n./Orchestrator/Backdoorer.js\\n./Orchestrator/Boot.js\\n./Orchestrator/Common/Dprint.js\\n./Orchestrator/Common/GenericFunctions.js\\n./Orchestrator/Config/Config.js\\n./Orchestrator/Config/Debug.js\\n./Orchestrator/Config/Singularity.js\\n./Orchestrator/Console.js\\n./Orchestrator/HackManager/algorithm/Common/CalculateThreadsRatio.js\\n./Orchestrator/HackManager/algorithm/Common/helpers.js\\n./Orchestrator/HackManager/algorithm/GrowWeakenAlgorithm.js\\n./Orchestrator/HackManager/algorithm/MoneyHackAlgorithm.js\\n./Orchestrator/HackManager/algorithm/XpHackAlgorithm.js\\n./Orchestrator/HackManager/conductor/GrowWeakenConductor.js\\n./Orchestrator/HackManager/conductor/MoneyHackConductor.js\\n./Orchestrator/HackManager/conductor/XpHackConductor.js\\n./Orchestrator/HackManager/enum.js\\n./Orchestrator/HackManager/hack.js\\n./Orchestrator/HackManager/manager.js\\n./Orchestrator/HackManager/script/grow.js\\n./Orchestrator/HackManager/script/hack.js\\n./Orchestrator/HackManager/script/weaken.js\\n./Orchestrator/HackManager/script/xp.js\\n./Orchestrator/MessageManager/class.js\\n./Orchestrator/MessageManager/enum.js\\n./Orchestrator/MessageManager/manager.js\\n./Orchestrator/ServerManager/manager.js\\n./Orchestrator/SingularityManager/manager.js\\n./Orchestrator/TargetManager/manager.js\\n./Orchestrator/ThreadManager/common.js\\n./Orchestrator/ThreadManager/manager.js\\n./Orchestrator/ThreadManager/script/share.js\\n./Orchestrator/utils/initRepo.js\\n./Orchestrator/utils/pullFiles.js\\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"augmap.json.txt\",\"text\":\"{\\n  \\\"BitWire\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_mult\\\": 1.05\\n    },\\n    \\\"repreq\\\": 3750,\\n    \\\"cost\\\": 10000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"CyberSec\\\",\\n      \\\"NiteSec\\\",\\n      \\\"Slum Snakes\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"Synaptic Enhancement Implant\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_speed_mult\\\": 1.03\\n    },\\n    \\\"repreq\\\": 2000,\\n    \\\"cost\\\": 7500000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"CyberSec\\\",\\n      \\\"Aevum\\\",\\n      \\\"Slum Snakes\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"Cranial Signal Processors - Gen I\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_mult\\\": 1.05,\\n      \\\"hacking_speed_mult\\\": 1.01\\n    },\\n    \\\"repreq\\\": 10000,\\n    \\\"cost\\\": 70000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"CyberSec\\\",\\n      \\\"Slum Snakes\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"Cranial Signal Processors - Gen II\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_mult\\\": 1.07,\\n      \\\"hacking_chance_mult\\\": 1.05,\\n      \\\"hacking_speed_mult\\\": 1.02\\n    },\\n    \\\"repreq\\\": 18750,\\n    \\\"cost\\\": 125000000,\\n    \\\"prereqs\\\": [\\n      \\\"Cranial Signal Processors - Gen I\\\"\\n    ],\\n    \\\"factions\\\": [\\n      \\\"CyberSec\\\",\\n      \\\"NiteSec\\\",\\n      \\\"Slum Snakes\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"NeuroFlux Governor\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_mult\\\": 1.01,\\n      \\\"strength_mult\\\": 1.01,\\n      \\\"defense_mult\\\": 1.01,\\n      \\\"dexterity_mult\\\": 1.01,\\n      \\\"agility_mult\\\": 1.01,\\n      \\\"charisma_mult\\\": 1.01,\\n      \\\"hacking_exp_mult\\\": 1.01,\\n      \\\"strength_exp_mult\\\": 1.01,\\n      \\\"defense_exp_mult\\\": 1.01,\\n      \\\"dexterity_exp_mult\\\": 1.01,\\n      \\\"agility_exp_mult\\\": 1.01,\\n      \\\"charisma_exp_mult\\\": 1.01,\\n      \\\"hacking_chance_mult\\\": 1.01,\\n      \\\"hacking_speed_mult\\\": 1.01,\\n      \\\"hacking_money_mult\\\": 1.01,\\n      \\\"hacking_grow_mult\\\": 1.01,\\n      \\\"company_rep_mult\\\": 1.01,\\n      \\\"faction_rep_mult\\\": 1.01,\\n      \\\"crime_money_mult\\\": 1.01,\\n      \\\"crime_success_mult\\\": 1.01,\\n      \\\"work_money_mult\\\": 1.01,\\n      \\\"hacknet_node_money_mult\\\": 1.01,\\n      \\\"hacknet_node_purchase_cost_mult\\\": 0.99,\\n      \\\"hacknet_node_ram_cost_mult\\\": 0.99,\\n      \\\"hacknet_node_core_cost_mult\\\": 0.99,\\n      \\\"hacknet_node_level_cost_mult\\\": 0.99\\n    },\\n    \\\"repreq\\\": 2113.1161490475806,\\n    \\\"cost\\\": 3169674.2235713713,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"CyberSec\\\",\\n      \\\"Tian Di Hui\\\",\\n      \\\"Netburners\\\",\\n      \\\"NiteSec\\\",\\n      \\\"The Black Hand\\\",\\n      \\\"BitRunners\\\",\\n      \\\"Sector-12\\\",\\n      \\\"Chongqing\\\",\\n      \\\"New Tokyo\\\",\\n      \\\"Ishima\\\",\\n      \\\"Aevum\\\",\\n      \\\"Volhaven\\\",\\n      \\\"Tetrads\\\",\\n      \\\"Silhouette\\\",\\n      \\\"Speakers for the Dead\\\",\\n      \\\"The Dark Army\\\",\\n      \\\"The Syndicate\\\",\\n      \\\"The Covenant\\\",\\n      \\\"Daedalus\\\",\\n      \\\"Illuminati\\\",\\n      \\\"ECorp\\\",\\n      \\\"MegaCorp\\\",\\n      \\\"KuaiGong International\\\",\\n      \\\"Four Sigma\\\",\\n      \\\"NWO\\\",\\n      \\\"Blade Industries\\\",\\n      \\\"OmniTek Incorporated\\\",\\n      \\\"Bachman & Associates\\\",\\n      \\\"Clarke Incorporated\\\",\\n      \\\"Fulcrum Secret Technologies\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"Neurotrainer I\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_exp_mult\\\": 1.1,\\n      \\\"strength_exp_mult\\\": 1.1,\\n      \\\"defense_exp_mult\\\": 1.1,\\n      \\\"dexterity_exp_mult\\\": 1.1,\\n      \\\"agility_exp_mult\\\": 1.1,\\n      \\\"charisma_exp_mult\\\": 1.1\\n    },\\n    \\\"repreq\\\": 1000,\\n    \\\"cost\\\": 4000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"CyberSec\\\",\\n      \\\"Aevum\\\",\\n      \\\"Slum Snakes\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"Nanofiber Weave\\\": {\\n    \\\"stats\\\": {\\n      \\\"strength_mult\\\": 1.2,\\n      \\\"defense_mult\\\": 1.2\\n    },\\n    \\\"repreq\\\": 37500,\\n    \\\"cost\\\": 125000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Tian Di Hui\\\",\\n      \\\"Slum Snakes\\\",\\n      \\\"Speakers for the Dead\\\",\\n      \\\"The Dark Army\\\",\\n      \\\"The Syndicate\\\",\\n      \\\"Blade Industries\\\",\\n      \\\"OmniTek Incorporated\\\",\\n      \\\"Fulcrum Secret Technologies\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Wired Reflexes\\\": {\\n    \\\"stats\\\": {\\n      \\\"dexterity_mult\\\": 1.05,\\n      \\\"agility_mult\\\": 1.05\\n    },\\n    \\\"repreq\\\": 1250,\\n    \\\"cost\\\": 2500000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Tian Di Hui\\\",\\n      \\\"Sector-12\\\",\\n      \\\"Ishima\\\",\\n      \\\"Aevum\\\",\\n      \\\"Volhaven\\\",\\n      \\\"Slum Snakes\\\",\\n      \\\"Speakers for the Dead\\\",\\n      \\\"The Dark Army\\\",\\n      \\\"The Syndicate\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Speech Processor Implant\\\": {\\n    \\\"stats\\\": {\\n      \\\"charisma_mult\\\": 1.2\\n    },\\n    \\\"repreq\\\": 7500,\\n    \\\"cost\\\": 50000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Tian Di Hui\\\",\\n      \\\"Sector-12\\\",\\n      \\\"Chongqing\\\",\\n      \\\"New Tokyo\\\",\\n      \\\"Ishima\\\",\\n      \\\"Aevum\\\",\\n      \\\"Volhaven\\\",\\n      \\\"Slum Snakes\\\",\\n      \\\"Silhouette\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Nuoptimal Nootropic Injector Implant\\\": {\\n    \\\"stats\\\": {\\n      \\\"company_rep_mult\\\": 1.2\\n    },\\n    \\\"repreq\\\": 5000,\\n    \\\"cost\\\": 20000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Tian Di Hui\\\",\\n      \\\"Chongqing\\\",\\n      \\\"New Tokyo\\\",\\n      \\\"Volhaven\\\",\\n      \\\"Slum Snakes\\\",\\n      \\\"Four Sigma\\\",\\n      \\\"Bachman & Associates\\\",\\n      \\\"Clarke Incorporated\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Speech Enhancement\\\": {\\n    \\\"stats\\\": {\\n      \\\"charisma_mult\\\": 1.1,\\n      \\\"company_rep_mult\\\": 1.1\\n    },\\n    \\\"repreq\\\": 2500,\\n    \\\"cost\\\": 12500000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Tian Di Hui\\\",\\n      \\\"Slum Snakes\\\",\\n      \\\"Speakers for the Dead\\\",\\n      \\\"KuaiGong International\\\",\\n      \\\"Four Sigma\\\",\\n      \\\"Bachman & Associates\\\",\\n      \\\"Clarke Incorporated\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"ADR-V1 Pheromone Gene\\\": {\\n    \\\"stats\\\": {\\n      \\\"company_rep_mult\\\": 1.1,\\n      \\\"faction_rep_mult\\\": 1.1\\n    },\\n    \\\"repreq\\\": 3750,\\n    \\\"cost\\\": 17500000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Tian Di Hui\\\",\\n      \\\"Slum Snakes\\\",\\n      \\\"The Syndicate\\\",\\n      \\\"MegaCorp\\\",\\n      \\\"Four Sigma\\\",\\n      \\\"NWO\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"Social Negotiation Assistant (S.N.A)\\\": {\\n    \\\"stats\\\": {\\n      \\\"company_rep_mult\\\": 1.15,\\n      \\\"faction_rep_mult\\\": 1.15,\\n      \\\"work_money_mult\\\": 1.1\\n    },\\n    \\\"repreq\\\": 6250,\\n    \\\"cost\\\": 30000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Tian Di Hui\\\",\\n      \\\"Slum Snakes\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"Neuroreceptor Management Implant\\\": {\\n    \\\"stats\\\": {},\\n    \\\"repreq\\\": 75000,\\n    \\\"cost\\\": 550000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Tian Di Hui\\\",\\n      \\\"Slum Snakes\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Hacknet Node CPU Architecture Neural-Upload\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacknet_node_money_mult\\\": 1.15,\\n      \\\"hacknet_node_purchase_cost_mult\\\": 0.85\\n    },\\n    \\\"repreq\\\": 3750,\\n    \\\"cost\\\": 11000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Netburners\\\",\\n      \\\"Slum Snakes\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Hacknet Node Cache Architecture Neural-Upload\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacknet_node_money_mult\\\": 1.1,\\n      \\\"hacknet_node_level_cost_mult\\\": 0.85\\n    },\\n    \\\"repreq\\\": 2500,\\n    \\\"cost\\\": 5500000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Netburners\\\",\\n      \\\"Slum Snakes\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Hacknet Node NIC Architecture Neural-Upload\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacknet_node_money_mult\\\": 1.1,\\n      \\\"hacknet_node_purchase_cost_mult\\\": 0.9\\n    },\\n    \\\"repreq\\\": 1875,\\n    \\\"cost\\\": 4500000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Netburners\\\",\\n      \\\"Slum Snakes\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Hacknet Node Kernel Direct-Neural Interface\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacknet_node_money_mult\\\": 1.25\\n    },\\n    \\\"repreq\\\": 7500,\\n    \\\"cost\\\": 40000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Netburners\\\",\\n      \\\"Slum Snakes\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Hacknet Node Core Direct-Neural Interface\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacknet_node_money_mult\\\": 1.45\\n    },\\n    \\\"repreq\\\": 12500,\\n    \\\"cost\\\": 60000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Netburners\\\",\\n      \\\"Slum Snakes\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Artificial Synaptic Potentiation\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_exp_mult\\\": 1.05,\\n      \\\"hacking_chance_mult\\\": 1.05,\\n      \\\"hacking_speed_mult\\\": 1.02\\n    },\\n    \\\"repreq\\\": 6250,\\n    \\\"cost\\\": 80000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"NiteSec\\\",\\n      \\\"The Black Hand\\\",\\n      \\\"Slum Snakes\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"Neural-Retention Enhancement\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_exp_mult\\\": 1.25\\n    },\\n    \\\"repreq\\\": 20000,\\n    \\\"cost\\\": 250000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"NiteSec\\\",\\n      \\\"Slum Snakes\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"DataJack\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_money_mult\\\": 1.25\\n    },\\n    \\\"repreq\\\": 112500,\\n    \\\"cost\\\": 450000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"NiteSec\\\",\\n      \\\"The Black Hand\\\",\\n      \\\"BitRunners\\\",\\n      \\\"Chongqing\\\",\\n      \\\"New Tokyo\\\",\\n      \\\"Slum Snakes\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"Embedded Netburner Module\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_mult\\\": 1.08\\n    },\\n    \\\"repreq\\\": 15000,\\n    \\\"cost\\\": 250000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"NiteSec\\\",\\n      \\\"The Black Hand\\\",\\n      \\\"BitRunners\\\",\\n      \\\"Slum Snakes\\\",\\n      \\\"ECorp\\\",\\n      \\\"MegaCorp\\\",\\n      \\\"NWO\\\",\\n      \\\"Blade Industries\\\",\\n      \\\"Fulcrum Secret Technologies\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"Cranial Signal Processors - Gen III\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_mult\\\": 1.09,\\n      \\\"hacking_speed_mult\\\": 1.02,\\n      \\\"hacking_money_mult\\\": 1.15\\n    },\\n    \\\"repreq\\\": 50000,\\n    \\\"cost\\\": 550000000,\\n    \\\"prereqs\\\": [\\n      \\\"Cranial Signal Processors - Gen II\\\"\\n    ],\\n    \\\"factions\\\": [\\n      \\\"NiteSec\\\",\\n      \\\"The Black Hand\\\",\\n      \\\"BitRunners\\\",\\n      \\\"Slum Snakes\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"Neurotrainer II\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_exp_mult\\\": 1.15,\\n      \\\"strength_exp_mult\\\": 1.15,\\n      \\\"defense_exp_mult\\\": 1.15,\\n      \\\"dexterity_exp_mult\\\": 1.15,\\n      \\\"agility_exp_mult\\\": 1.15,\\n      \\\"charisma_exp_mult\\\": 1.15\\n    },\\n    \\\"repreq\\\": 10000,\\n    \\\"cost\\\": 45000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"NiteSec\\\",\\n      \\\"BitRunners\\\",\\n      \\\"Slum Snakes\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"CRTX42-AA Gene Modification\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_mult\\\": 1.08,\\n      \\\"hacking_exp_mult\\\": 1.15\\n    },\\n    \\\"repreq\\\": 45000,\\n    \\\"cost\\\": 225000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"NiteSec\\\",\\n      \\\"Slum Snakes\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"Enhanced Myelin Sheathing\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_mult\\\": 1.08,\\n      \\\"hacking_exp_mult\\\": 1.1,\\n      \\\"hacking_speed_mult\\\": 1.03\\n    },\\n    \\\"repreq\\\": 100000,\\n    \\\"cost\\\": 1375000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"The Black Hand\\\",\\n      \\\"BitRunners\\\",\\n      \\\"Slum Snakes\\\",\\n      \\\"Fulcrum Secret Technologies\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"Embedded Netburner Module Core Implant\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_mult\\\": 1.07,\\n      \\\"hacking_exp_mult\\\": 1.07,\\n      \\\"hacking_chance_mult\\\": 1.03,\\n      \\\"hacking_speed_mult\\\": 1.03,\\n      \\\"hacking_money_mult\\\": 1.1\\n    },\\n    \\\"repreq\\\": 175000,\\n    \\\"cost\\\": 2500000000,\\n    \\\"prereqs\\\": [\\n      \\\"Embedded Netburner Module\\\"\\n    ],\\n    \\\"factions\\\": [\\n      \\\"The Black Hand\\\",\\n      \\\"BitRunners\\\",\\n      \\\"Slum Snakes\\\",\\n      \\\"ECorp\\\",\\n      \\\"MegaCorp\\\",\\n      \\\"NWO\\\",\\n      \\\"Blade Industries\\\",\\n      \\\"Fulcrum Secret Technologies\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"Neuralstimulator\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_exp_mult\\\": 1.12,\\n      \\\"hacking_chance_mult\\\": 1.1,\\n      \\\"hacking_speed_mult\\\": 1.02\\n    },\\n    \\\"repreq\\\": 50000,\\n    \\\"cost\\\": 3000000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"The Black Hand\\\",\\n      \\\"Sector-12\\\",\\n      \\\"Chongqing\\\",\\n      \\\"New Tokyo\\\",\\n      \\\"Ishima\\\",\\n      \\\"Aevum\\\",\\n      \\\"Volhaven\\\",\\n      \\\"Slum Snakes\\\",\\n      \\\"Four Sigma\\\",\\n      \\\"Bachman & Associates\\\",\\n      \\\"Clarke Incorporated\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"Cranial Signal Processors - Gen IV\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_speed_mult\\\": 1.02,\\n      \\\"hacking_money_mult\\\": 1.2,\\n      \\\"hacking_grow_mult\\\": 1.25\\n    },\\n    \\\"repreq\\\": 125000,\\n    \\\"cost\\\": 1100000000,\\n    \\\"prereqs\\\": [\\n      \\\"Cranial Signal Processors - Gen III\\\"\\n    ],\\n    \\\"factions\\\": [\\n      \\\"The Black Hand\\\",\\n      \\\"BitRunners\\\",\\n      \\\"Slum Snakes\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"The Black Hand\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_mult\\\": 1.1,\\n      \\\"strength_mult\\\": 1.15,\\n      \\\"dexterity_mult\\\": 1.15,\\n      \\\"hacking_speed_mult\\\": 1.02,\\n      \\\"hacking_money_mult\\\": 1.1\\n    },\\n    \\\"repreq\\\": 100000,\\n    \\\"cost\\\": 550000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"The Black Hand\\\",\\n      \\\"Slum Snakes\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"Artificial Bio-neural Network Implant\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_mult\\\": 1.12,\\n      \\\"hacking_speed_mult\\\": 1.03,\\n      \\\"hacking_money_mult\\\": 1.15\\n    },\\n    \\\"repreq\\\": 275000,\\n    \\\"cost\\\": 3000000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"BitRunners\\\",\\n      \\\"Slum Snakes\\\",\\n      \\\"Fulcrum Secret Technologies\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"Embedded Netburner Module Core V2 Upgrade\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_mult\\\": 1.08,\\n      \\\"hacking_exp_mult\\\": 1.15,\\n      \\\"hacking_chance_mult\\\": 1.05,\\n      \\\"hacking_speed_mult\\\": 1.05,\\n      \\\"hacking_money_mult\\\": 1.3\\n    },\\n    \\\"repreq\\\": 1000000,\\n    \\\"cost\\\": 4500000000,\\n    \\\"prereqs\\\": [\\n      \\\"Embedded Netburner Module Core Implant\\\"\\n    ],\\n    \\\"factions\\\": [\\n      \\\"BitRunners\\\",\\n      \\\"Slum Snakes\\\",\\n      \\\"ECorp\\\",\\n      \\\"MegaCorp\\\",\\n      \\\"KuaiGong International\\\",\\n      \\\"NWO\\\",\\n      \\\"Blade Industries\\\",\\n      \\\"OmniTek Incorporated\\\",\\n      \\\"Fulcrum Secret Technologies\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"Neural Accelerator\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_mult\\\": 1.1,\\n      \\\"hacking_exp_mult\\\": 1.15,\\n      \\\"hacking_money_mult\\\": 1.2\\n    },\\n    \\\"repreq\\\": 200000,\\n    \\\"cost\\\": 1750000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"BitRunners\\\",\\n      \\\"Slum Snakes\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"Cranial Signal Processors - Gen V\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_mult\\\": 1.3,\\n      \\\"hacking_money_mult\\\": 1.25,\\n      \\\"hacking_grow_mult\\\": 1.75\\n    },\\n    \\\"repreq\\\": 250000,\\n    \\\"cost\\\": 2250000000,\\n    \\\"prereqs\\\": [\\n      \\\"Cranial Signal Processors - Gen IV\\\"\\n    ],\\n    \\\"factions\\\": [\\n      \\\"BitRunners\\\",\\n      \\\"Slum Snakes\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"BitRunners Neurolink\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_mult\\\": 1.15,\\n      \\\"hacking_exp_mult\\\": 1.2,\\n      \\\"hacking_chance_mult\\\": 1.1,\\n      \\\"hacking_speed_mult\\\": 1.05\\n    },\\n    \\\"repreq\\\": 875000,\\n    \\\"cost\\\": 4375000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"BitRunners\\\",\\n      \\\"Slum Snakes\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"Augmented Targeting I\\\": {\\n    \\\"stats\\\": {\\n      \\\"dexterity_mult\\\": 1.1\\n    },\\n    \\\"repreq\\\": 5000,\\n    \\\"cost\\\": 15000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Sector-12\\\",\\n      \\\"Ishima\\\",\\n      \\\"Slum Snakes\\\",\\n      \\\"The Dark Army\\\",\\n      \\\"The Syndicate\\\",\\n      \\\"KuaiGong International\\\",\\n      \\\"Blade Industries\\\",\\n      \\\"OmniTek Incorporated\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Augmented Targeting II\\\": {\\n    \\\"stats\\\": {\\n      \\\"dexterity_mult\\\": 1.2\\n    },\\n    \\\"repreq\\\": 8750,\\n    \\\"cost\\\": 42500000,\\n    \\\"prereqs\\\": [\\n      \\\"Augmented Targeting I\\\"\\n    ],\\n    \\\"factions\\\": [\\n      \\\"Sector-12\\\",\\n      \\\"Slum Snakes\\\",\\n      \\\"The Dark Army\\\",\\n      \\\"The Syndicate\\\",\\n      \\\"KuaiGong International\\\",\\n      \\\"Blade Industries\\\",\\n      \\\"OmniTek Incorporated\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"CashRoot Starter Kit\\\": {\\n    \\\"stats\\\": {},\\n    \\\"repreq\\\": 12500,\\n    \\\"cost\\\": 125000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Sector-12\\\",\\n      \\\"Slum Snakes\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Neuregen Gene Modification\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_exp_mult\\\": 1.4\\n    },\\n    \\\"repreq\\\": 37500,\\n    \\\"cost\\\": 375000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Chongqing\\\",\\n      \\\"Slum Snakes\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"NutriGen Implant\\\": {\\n    \\\"stats\\\": {\\n      \\\"strength_exp_mult\\\": 1.2,\\n      \\\"defense_exp_mult\\\": 1.2,\\n      \\\"dexterity_exp_mult\\\": 1.2,\\n      \\\"agility_exp_mult\\\": 1.2\\n    },\\n    \\\"repreq\\\": 6250,\\n    \\\"cost\\\": 2500000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"New Tokyo\\\",\\n      \\\"Slum Snakes\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Combat Rib I\\\": {\\n    \\\"stats\\\": {\\n      \\\"strength_mult\\\": 1.1,\\n      \\\"defense_mult\\\": 1.1\\n    },\\n    \\\"repreq\\\": 7500,\\n    \\\"cost\\\": 23750000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Ishima\\\",\\n      \\\"Volhaven\\\",\\n      \\\"Slum Snakes\\\",\\n      \\\"The Dark Army\\\",\\n      \\\"The Syndicate\\\",\\n      \\\"KuaiGong International\\\",\\n      \\\"Blade Industries\\\",\\n      \\\"OmniTek Incorporated\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"INFRARET Enhancement\\\": {\\n    \\\"stats\\\": {\\n      \\\"dexterity_mult\\\": 1.1,\\n      \\\"crime_money_mult\\\": 1.1,\\n      \\\"crime_success_mult\\\": 1.25\\n    },\\n    \\\"repreq\\\": 7500,\\n    \\\"cost\\\": 30000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Ishima\\\",\\n      \\\"Slum Snakes\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"PCMatrix\\\": {\\n    \\\"stats\\\": {\\n      \\\"charisma_mult\\\": 1.0777,\\n      \\\"charisma_exp_mult\\\": 1.0777,\\n      \\\"company_rep_mult\\\": 1.0777,\\n      \\\"faction_rep_mult\\\": 1.0777,\\n      \\\"crime_money_mult\\\": 1.0777,\\n      \\\"crime_success_mult\\\": 1.0777,\\n      \\\"work_money_mult\\\": 1.777\\n    },\\n    \\\"repreq\\\": 100000,\\n    \\\"cost\\\": 2000000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Aevum\\\",\\n      \\\"Slum Snakes\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Combat Rib II\\\": {\\n    \\\"stats\\\": {\\n      \\\"strength_mult\\\": 1.14,\\n      \\\"defense_mult\\\": 1.14\\n    },\\n    \\\"repreq\\\": 18750,\\n    \\\"cost\\\": 65000000,\\n    \\\"prereqs\\\": [\\n      \\\"Combat Rib I\\\"\\n    ],\\n    \\\"factions\\\": [\\n      \\\"Volhaven\\\",\\n      \\\"Slum Snakes\\\",\\n      \\\"The Dark Army\\\",\\n      \\\"The Syndicate\\\",\\n      \\\"KuaiGong International\\\",\\n      \\\"Blade Industries\\\",\\n      \\\"OmniTek Incorporated\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"DermaForce Particle Barrier\\\": {\\n    \\\"stats\\\": {\\n      \\\"defense_mult\\\": 1.4\\n    },\\n    \\\"repreq\\\": 15000,\\n    \\\"cost\\\": 50000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Volhaven\\\",\\n      \\\"Slum Snakes\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Unstable Circadian Modulator\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_mult\\\": 1.15,\\n      \\\"hacking_exp_mult\\\": 2\\n    },\\n    \\\"repreq\\\": 362500,\\n    \\\"cost\\\": 5000000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"Speakers for the Dead\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"HemoRecirculator\\\": {\\n    \\\"stats\\\": {\\n      \\\"strength_mult\\\": 1.08,\\n      \\\"defense_mult\\\": 1.08,\\n      \\\"dexterity_mult\\\": 1.08,\\n      \\\"agility_mult\\\": 1.08\\n    },\\n    \\\"repreq\\\": 10000,\\n    \\\"cost\\\": 45000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"Tetrads\\\",\\n      \\\"The Dark Army\\\",\\n      \\\"The Syndicate\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Augmented Targeting III\\\": {\\n    \\\"stats\\\": {\\n      \\\"dexterity_mult\\\": 1.3\\n    },\\n    \\\"repreq\\\": 27500,\\n    \\\"cost\\\": 115000000,\\n    \\\"prereqs\\\": [\\n      \\\"Augmented Targeting II\\\"\\n    ],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"The Dark Army\\\",\\n      \\\"The Syndicate\\\",\\n      \\\"The Covenant\\\",\\n      \\\"KuaiGong International\\\",\\n      \\\"Blade Industries\\\",\\n      \\\"OmniTek Incorporated\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Synthetic Heart\\\": {\\n    \\\"stats\\\": {\\n      \\\"strength_mult\\\": 1.5,\\n      \\\"agility_mult\\\": 1.5\\n    },\\n    \\\"repreq\\\": 750000,\\n    \\\"cost\\\": 2875000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"Speakers for the Dead\\\",\\n      \\\"The Covenant\\\",\\n      \\\"Daedalus\\\",\\n      \\\"Illuminati\\\",\\n      \\\"KuaiGong International\\\",\\n      \\\"NWO\\\",\\n      \\\"Fulcrum Secret Technologies\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Synfibril Muscle\\\": {\\n    \\\"stats\\\": {\\n      \\\"strength_mult\\\": 1.3,\\n      \\\"defense_mult\\\": 1.3\\n    },\\n    \\\"repreq\\\": 437500,\\n    \\\"cost\\\": 1125000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"Speakers for the Dead\\\",\\n      \\\"The Covenant\\\",\\n      \\\"Daedalus\\\",\\n      \\\"Illuminati\\\",\\n      \\\"KuaiGong International\\\",\\n      \\\"NWO\\\",\\n      \\\"Blade Industries\\\",\\n      \\\"Fulcrum Secret Technologies\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Combat Rib III\\\": {\\n    \\\"stats\\\": {\\n      \\\"strength_mult\\\": 1.18,\\n      \\\"defense_mult\\\": 1.18\\n    },\\n    \\\"repreq\\\": 35000,\\n    \\\"cost\\\": 120000000,\\n    \\\"prereqs\\\": [\\n      \\\"Combat Rib II\\\"\\n    ],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"The Dark Army\\\",\\n      \\\"The Syndicate\\\",\\n      \\\"The Covenant\\\",\\n      \\\"KuaiGong International\\\",\\n      \\\"Blade Industries\\\",\\n      \\\"OmniTek Incorporated\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"NEMEAN Subdermal Weave\\\": {\\n    \\\"stats\\\": {\\n      \\\"defense_mult\\\": 2.2\\n    },\\n    \\\"repreq\\\": 875000,\\n    \\\"cost\\\": 3250000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"The Syndicate\\\",\\n      \\\"The Covenant\\\",\\n      \\\"Daedalus\\\",\\n      \\\"Illuminati\\\",\\n      \\\"Fulcrum Secret Technologies\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Graphene Bone Lacings\\\": {\\n    \\\"stats\\\": {\\n      \\\"strength_mult\\\": 1.7,\\n      \\\"defense_mult\\\": 1.7\\n    },\\n    \\\"repreq\\\": 1125000,\\n    \\\"cost\\\": 4250000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"The Covenant\\\",\\n      \\\"Fulcrum Secret Technologies\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Bionic Spine\\\": {\\n    \\\"stats\\\": {\\n      \\\"strength_mult\\\": 1.15,\\n      \\\"defense_mult\\\": 1.15,\\n      \\\"dexterity_mult\\\": 1.15,\\n      \\\"agility_mult\\\": 1.15\\n    },\\n    \\\"repreq\\\": 45000,\\n    \\\"cost\\\": 125000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"Speakers for the Dead\\\",\\n      \\\"The Syndicate\\\",\\n      \\\"KuaiGong International\\\",\\n      \\\"Blade Industries\\\",\\n      \\\"OmniTek Incorporated\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Graphene Bionic Spine Upgrade\\\": {\\n    \\\"stats\\\": {\\n      \\\"strength_mult\\\": 1.6,\\n      \\\"defense_mult\\\": 1.6,\\n      \\\"dexterity_mult\\\": 1.6,\\n      \\\"agility_mult\\\": 1.6\\n    },\\n    \\\"repreq\\\": 1625000,\\n    \\\"cost\\\": 6000000000,\\n    \\\"prereqs\\\": [\\n      \\\"Bionic Spine\\\"\\n    ],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"ECorp\\\",\\n      \\\"Fulcrum Secret Technologies\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Bionic Legs\\\": {\\n    \\\"stats\\\": {\\n      \\\"agility_mult\\\": 1.6\\n    },\\n    \\\"repreq\\\": 150000,\\n    \\\"cost\\\": 375000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"Speakers for the Dead\\\",\\n      \\\"The Syndicate\\\",\\n      \\\"KuaiGong International\\\",\\n      \\\"Blade Industries\\\",\\n      \\\"OmniTek Incorporated\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Graphene Bionic Legs Upgrade\\\": {\\n    \\\"stats\\\": {\\n      \\\"agility_mult\\\": 2.5\\n    },\\n    \\\"repreq\\\": 750000,\\n    \\\"cost\\\": 4500000000,\\n    \\\"prereqs\\\": [\\n      \\\"Bionic Legs\\\"\\n    ],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"ECorp\\\",\\n      \\\"MegaCorp\\\",\\n      \\\"Fulcrum Secret Technologies\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"TITN-41 Gene-Modification Injection\\\": {\\n    \\\"stats\\\": {\\n      \\\"charisma_mult\\\": 1.15,\\n      \\\"charisma_exp_mult\\\": 1.15\\n    },\\n    \\\"repreq\\\": 25000,\\n    \\\"cost\\\": 190000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"Silhouette\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Enhanced Social Interaction Implant\\\": {\\n    \\\"stats\\\": {\\n      \\\"charisma_mult\\\": 1.6,\\n      \\\"charisma_exp_mult\\\": 1.6\\n    },\\n    \\\"repreq\\\": 375000,\\n    \\\"cost\\\": 1375000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"Four Sigma\\\",\\n      \\\"NWO\\\",\\n      \\\"OmniTek Incorporated\\\",\\n      \\\"Bachman & Associates\\\",\\n      \\\"Clarke Incorporated\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Embedded Netburner Module Core V3 Upgrade\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_mult\\\": 1.1,\\n      \\\"hacking_exp_mult\\\": 1.25,\\n      \\\"hacking_chance_mult\\\": 1.1,\\n      \\\"hacking_speed_mult\\\": 1.05,\\n      \\\"hacking_money_mult\\\": 1.4\\n    },\\n    \\\"repreq\\\": 1750000,\\n    \\\"cost\\\": 7500000000,\\n    \\\"prereqs\\\": [\\n      \\\"Embedded Netburner Module Core V2 Upgrade\\\"\\n    ],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"The Covenant\\\",\\n      \\\"Daedalus\\\",\\n      \\\"Illuminati\\\",\\n      \\\"ECorp\\\",\\n      \\\"MegaCorp\\\",\\n      \\\"NWO\\\",\\n      \\\"Fulcrum Secret Technologies\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Embedded Netburner Module Analyze Engine\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_speed_mult\\\": 1.1\\n    },\\n    \\\"repreq\\\": 625000,\\n    \\\"cost\\\": 6000000000,\\n    \\\"prereqs\\\": [\\n      \\\"Embedded Netburner Module\\\"\\n    ],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"The Covenant\\\",\\n      \\\"Daedalus\\\",\\n      \\\"Illuminati\\\",\\n      \\\"ECorp\\\",\\n      \\\"MegaCorp\\\",\\n      \\\"NWO\\\",\\n      \\\"Fulcrum Secret Technologies\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"Embedded Netburner Module Direct Memory Access Upgrade\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_chance_mult\\\": 1.2,\\n      \\\"hacking_money_mult\\\": 1.4\\n    },\\n    \\\"repreq\\\": 1000000,\\n    \\\"cost\\\": 7000000000,\\n    \\\"prereqs\\\": [\\n      \\\"Embedded Netburner Module\\\"\\n    ],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"The Covenant\\\",\\n      \\\"Daedalus\\\",\\n      \\\"Illuminati\\\",\\n      \\\"ECorp\\\",\\n      \\\"MegaCorp\\\",\\n      \\\"NWO\\\",\\n      \\\"Fulcrum Secret Technologies\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Neuronal Densification\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_mult\\\": 1.15,\\n      \\\"hacking_exp_mult\\\": 1.1,\\n      \\\"hacking_speed_mult\\\": 1.03\\n    },\\n    \\\"repreq\\\": 187500,\\n    \\\"cost\\\": 1375000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"Clarke Incorporated\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"FocusWire\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_exp_mult\\\": 1.05,\\n      \\\"strength_exp_mult\\\": 1.05,\\n      \\\"defense_exp_mult\\\": 1.05,\\n      \\\"dexterity_exp_mult\\\": 1.05,\\n      \\\"agility_exp_mult\\\": 1.05,\\n      \\\"charisma_exp_mult\\\": 1.05,\\n      \\\"company_rep_mult\\\": 1.1,\\n      \\\"work_money_mult\\\": 1.2\\n    },\\n    \\\"repreq\\\": 75000,\\n    \\\"cost\\\": 900000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"KuaiGong International\\\",\\n      \\\"Four Sigma\\\",\\n      \\\"Bachman & Associates\\\",\\n      \\\"Clarke Incorporated\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"PC Direct-Neural Interface\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_mult\\\": 1.08,\\n      \\\"company_rep_mult\\\": 1.3\\n    },\\n    \\\"repreq\\\": 375000,\\n    \\\"cost\\\": 3750000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"ECorp\\\",\\n      \\\"Four Sigma\\\",\\n      \\\"Blade Industries\\\",\\n      \\\"OmniTek Incorporated\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"PC Direct-Neural Interface Optimization Submodule\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_mult\\\": 1.1,\\n      \\\"company_rep_mult\\\": 1.75\\n    },\\n    \\\"repreq\\\": 500000,\\n    \\\"cost\\\": 4500000000,\\n    \\\"prereqs\\\": [\\n      \\\"PC Direct-Neural Interface\\\"\\n    ],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"ECorp\\\",\\n      \\\"Blade Industries\\\",\\n      \\\"Fulcrum Secret Technologies\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"PC Direct-Neural Interface NeuroNet Injector\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_mult\\\": 1.1,\\n      \\\"hacking_speed_mult\\\": 1.05,\\n      \\\"company_rep_mult\\\": 2\\n    },\\n    \\\"repreq\\\": 1500000,\\n    \\\"cost\\\": 7500000000,\\n    \\\"prereqs\\\": [\\n      \\\"PC Direct-Neural Interface\\\"\\n    ],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"Fulcrum Secret Technologies\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"ADR-V2 Pheromone Gene\\\": {\\n    \\\"stats\\\": {\\n      \\\"company_rep_mult\\\": 1.2,\\n      \\\"faction_rep_mult\\\": 1.2\\n    },\\n    \\\"repreq\\\": 62500,\\n    \\\"cost\\\": 550000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"Silhouette\\\",\\n      \\\"Four Sigma\\\",\\n      \\\"Bachman & Associates\\\",\\n      \\\"Clarke Incorporated\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"The Shadow's Simulacrum\\\": {\\n    \\\"stats\\\": {\\n      \\\"company_rep_mult\\\": 1.15,\\n      \\\"faction_rep_mult\\\": 1.15\\n    },\\n    \\\"repreq\\\": 37500,\\n    \\\"cost\\\": 400000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"Speakers for the Dead\\\",\\n      \\\"The Dark Army\\\",\\n      \\\"The Syndicate\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Neurotrainer III\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_exp_mult\\\": 1.2,\\n      \\\"strength_exp_mult\\\": 1.2,\\n      \\\"defense_exp_mult\\\": 1.2,\\n      \\\"dexterity_exp_mult\\\": 1.2,\\n      \\\"agility_exp_mult\\\": 1.2,\\n      \\\"charisma_exp_mult\\\": 1.2\\n    },\\n    \\\"repreq\\\": 25000,\\n    \\\"cost\\\": 130000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"Four Sigma\\\",\\n      \\\"NWO\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"HyperSight Corneal Implant\\\": {\\n    \\\"stats\\\": {\\n      \\\"dexterity_mult\\\": 1.4,\\n      \\\"hacking_speed_mult\\\": 1.03,\\n      \\\"hacking_money_mult\\\": 1.1\\n    },\\n    \\\"repreq\\\": 150000,\\n    \\\"cost\\\": 2750000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"KuaiGong International\\\",\\n      \\\"Blade Industries\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"LuminCloaking-V1 Skin Implant\\\": {\\n    \\\"stats\\\": {\\n      \\\"agility_mult\\\": 1.05,\\n      \\\"crime_money_mult\\\": 1.1\\n    },\\n    \\\"repreq\\\": 1500,\\n    \\\"cost\\\": 5000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"Tetrads\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"LuminCloaking-V2 Skin Implant\\\": {\\n    \\\"stats\\\": {\\n      \\\"defense_mult\\\": 1.1,\\n      \\\"agility_mult\\\": 1.1,\\n      \\\"crime_money_mult\\\": 1.25\\n    },\\n    \\\"repreq\\\": 5000,\\n    \\\"cost\\\": 30000000,\\n    \\\"prereqs\\\": [\\n      \\\"LuminCloaking-V1 Skin Implant\\\"\\n    ],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"Tetrads\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"SmartSonar Implant\\\": {\\n    \\\"stats\\\": {\\n      \\\"dexterity_mult\\\": 1.1,\\n      \\\"dexterity_exp_mult\\\": 1.15,\\n      \\\"crime_money_mult\\\": 1.25\\n    },\\n    \\\"repreq\\\": 22500,\\n    \\\"cost\\\": 75000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Power Recirculation Core\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_mult\\\": 1.05,\\n      \\\"strength_mult\\\": 1.05,\\n      \\\"defense_mult\\\": 1.05,\\n      \\\"dexterity_mult\\\": 1.05,\\n      \\\"agility_mult\\\": 1.05,\\n      \\\"charisma_mult\\\": 1.05,\\n      \\\"hacking_exp_mult\\\": 1.1,\\n      \\\"strength_exp_mult\\\": 1.1,\\n      \\\"defense_exp_mult\\\": 1.1,\\n      \\\"dexterity_exp_mult\\\": 1.1,\\n      \\\"agility_exp_mult\\\": 1.1,\\n      \\\"charisma_exp_mult\\\": 1.1\\n    },\\n    \\\"repreq\\\": 25000,\\n    \\\"cost\\\": 180000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"Tetrads\\\",\\n      \\\"The Dark Army\\\",\\n      \\\"The Syndicate\\\",\\n      \\\"NWO\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"QLink\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_mult\\\": 1.75,\\n      \\\"hacking_chance_mult\\\": 2.5,\\n      \\\"hacking_speed_mult\\\": 2,\\n      \\\"hacking_money_mult\\\": 4\\n    },\\n    \\\"repreq\\\": 1875000,\\n    \\\"cost\\\": 25000000000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"Illuminati\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"SPTN-97 Gene Modification\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_mult\\\": 1.15,\\n      \\\"strength_mult\\\": 1.75,\\n      \\\"defense_mult\\\": 1.75,\\n      \\\"dexterity_mult\\\": 1.75,\\n      \\\"agility_mult\\\": 1.75\\n    },\\n    \\\"repreq\\\": 1250000,\\n    \\\"cost\\\": 4875000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"The Covenant\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"ECorp HVMind Implant\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_grow_mult\\\": 3\\n    },\\n    \\\"repreq\\\": 1500000,\\n    \\\"cost\\\": 5500000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"ECorp\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"CordiARC Fusion Reactor\\\": {\\n    \\\"stats\\\": {\\n      \\\"strength_mult\\\": 1.35,\\n      \\\"defense_mult\\\": 1.35,\\n      \\\"dexterity_mult\\\": 1.35,\\n      \\\"agility_mult\\\": 1.35,\\n      \\\"strength_exp_mult\\\": 1.35,\\n      \\\"defense_exp_mult\\\": 1.35,\\n      \\\"dexterity_exp_mult\\\": 1.35,\\n      \\\"agility_exp_mult\\\": 1.35\\n    },\\n    \\\"repreq\\\": 1125000,\\n    \\\"cost\\\": 5000000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"MegaCorp\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"SmartJaw\\\": {\\n    \\\"stats\\\": {\\n      \\\"charisma_mult\\\": 1.5,\\n      \\\"charisma_exp_mult\\\": 1.5,\\n      \\\"company_rep_mult\\\": 1.25,\\n      \\\"faction_rep_mult\\\": 1.25\\n    },\\n    \\\"repreq\\\": 375000,\\n    \\\"cost\\\": 2750000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"Bachman & Associates\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Neotra\\\": {\\n    \\\"stats\\\": {\\n      \\\"strength_mult\\\": 1.55,\\n      \\\"defense_mult\\\": 1.55\\n    },\\n    \\\"repreq\\\": 562500,\\n    \\\"cost\\\": 2875000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"Blade Industries\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Xanipher\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_mult\\\": 1.2,\\n      \\\"strength_mult\\\": 1.2,\\n      \\\"defense_mult\\\": 1.2,\\n      \\\"dexterity_mult\\\": 1.2,\\n      \\\"agility_mult\\\": 1.2,\\n      \\\"charisma_mult\\\": 1.2,\\n      \\\"hacking_exp_mult\\\": 1.15,\\n      \\\"strength_exp_mult\\\": 1.15,\\n      \\\"defense_exp_mult\\\": 1.15,\\n      \\\"dexterity_exp_mult\\\": 1.15,\\n      \\\"agility_exp_mult\\\": 1.15,\\n      \\\"charisma_exp_mult\\\": 1.15\\n    },\\n    \\\"repreq\\\": 875000,\\n    \\\"cost\\\": 4250000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"NWO\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"Hydroflame Left Arm\\\": {\\n    \\\"stats\\\": {\\n      \\\"strength_mult\\\": 2.7\\n    },\\n    \\\"repreq\\\": 1250000,\\n    \\\"cost\\\": 2500000000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"NWO\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"nextSENS Gene Modification\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_mult\\\": 1.2,\\n      \\\"strength_mult\\\": 1.2,\\n      \\\"defense_mult\\\": 1.2,\\n      \\\"dexterity_mult\\\": 1.2,\\n      \\\"agility_mult\\\": 1.2,\\n      \\\"charisma_mult\\\": 1.2\\n    },\\n    \\\"repreq\\\": 437500,\\n    \\\"cost\\\": 1925000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"Clarke Incorporated\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"OmniTek InfoLoad\\\": {\\n    \\\"stats\\\": {\\n      \\\"hacking_mult\\\": 1.2,\\n      \\\"hacking_exp_mult\\\": 1.25\\n    },\\n    \\\"repreq\\\": 625000,\\n    \\\"cost\\\": 2875000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"OmniTek Incorporated\\\"\\n    ],\\n    \\\"owned\\\": true\\n  },\\n  \\\"Photosynthetic Cells\\\": {\\n    \\\"stats\\\": {\\n      \\\"strength_mult\\\": 1.4,\\n      \\\"defense_mult\\\": 1.4,\\n      \\\"agility_mult\\\": 1.4\\n    },\\n    \\\"repreq\\\": 562500,\\n    \\\"cost\\\": 2750000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"KuaiGong International\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Graphene BrachiBlades Upgrade\\\": {\\n    \\\"stats\\\": {\\n      \\\"strength_mult\\\": 1.4,\\n      \\\"defense_mult\\\": 1.4,\\n      \\\"crime_money_mult\\\": 1.3,\\n      \\\"crime_success_mult\\\": 1.1\\n    },\\n    \\\"repreq\\\": 225000,\\n    \\\"cost\\\": 2500000000,\\n    \\\"prereqs\\\": [\\n      \\\"BrachiBlades\\\"\\n    ],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"Speakers for the Dead\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Graphene Bionic Arms Upgrade\\\": {\\n    \\\"stats\\\": {\\n      \\\"strength_mult\\\": 1.85,\\n      \\\"dexterity_mult\\\": 1.85\\n    },\\n    \\\"repreq\\\": 500000,\\n    \\\"cost\\\": 3750000000,\\n    \\\"prereqs\\\": [\\n      \\\"Bionic Arms\\\"\\n    ],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"The Dark Army\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"BrachiBlades\\\": {\\n    \\\"stats\\\": {\\n      \\\"strength_mult\\\": 1.15,\\n      \\\"defense_mult\\\": 1.15,\\n      \\\"crime_money_mult\\\": 1.15,\\n      \\\"crime_success_mult\\\": 1.1\\n    },\\n    \\\"repreq\\\": 12500,\\n    \\\"cost\\\": 90000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"The Syndicate\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"Bionic Arms\\\": {\\n    \\\"stats\\\": {\\n      \\\"strength_mult\\\": 1.3,\\n      \\\"dexterity_mult\\\": 1.3\\n    },\\n    \\\"repreq\\\": 62500,\\n    \\\"cost\\\": 275000000,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Slum Snakes\\\",\\n      \\\"Tetrads\\\"\\n    ],\\n    \\\"owned\\\": false\\n  },\\n  \\\"The Red Pill\\\": {\\n    \\\"stats\\\": {},\\n    \\\"repreq\\\": 2500000,\\n    \\\"cost\\\": 0,\\n    \\\"prereqs\\\": [],\\n    \\\"factions\\\": [\\n      \\\"Daedalus\\\"\\n    ],\\n    \\\"owned\\\": false\\n  }\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"servergrades.json.txt\",\"text\":\"[\\n  [\\n    \\\"SERVER\\\",\\n    \\\"Max $\\\",\\n    \\\"%h\\\",\\n    \\\"$/s\\\",\\n    \\\"RAM\\\",\\n    \\\"batchtime\\\",\\n    \\\"Score\\\"\\n  ],\\n  [\\n    \\\"clarkinc\\\",\\n    \\\"66.90b\\\",\\n    \\\"100.00%\\\",\\n    \\\"885.64k\\\",\\n    \\\"83.35GB\\\",\\n    \\\"14.735s\\\",\\n    \\\"42502.457\\\"\\n  ],\\n  [\\n    \\\"ecorp\\\",\\n    \\\"174.44b\\\",\\n    \\\"100.00%\\\",\\n    \\\"972.23k\\\",\\n    \\\"119.90GB\\\",\\n    \\\"35.804s\\\",\\n    \\\"32434.562\\\"\\n  ],\\n  [\\n    \\\"megacorp\\\",\\n    \\\"158.78b\\\",\\n    \\\"9.38%\\\",\\n    \\\"804.78k\\\",\\n    \\\"118.15GB\\\",\\n    \\\"38.954s\\\",\\n    \\\"27245.999\\\"\\n  ],\\n  [\\n    \\\"b-and-a\\\",\\n    \\\"65.55b\\\",\\n    \\\"100.00%\\\",\\n    \\\"487.85k\\\",\\n    \\\"106.05GB\\\",\\n    \\\"25.162s\\\",\\n    \\\"18400.719\\\"\\n  ],\\n  [\\n    \\\"kuai-gong\\\",\\n    \\\"83.74b\\\",\\n    \\\"30.10%\\\",\\n    \\\"508.20k\\\",\\n    \\\"112.95GB\\\",\\n    \\\"31.735s\\\",\\n    \\\"17997.315\\\"\\n  ],\\n  [\\n    \\\"4sigma\\\",\\n    \\\"60.78b\\\",\\n    \\\"100.00%\\\",\\n    \\\"464.37k\\\",\\n    \\\"106.05GB\\\",\\n    \\\"26.143s\\\",\\n    \\\"17515.022\\\"\\n  ],\\n  [\\n    \\\"blade\\\",\\n    \\\"86.28b\\\",\\n    \\\"100.00%\\\",\\n    \\\"516.18k\\\",\\n    \\\"121.70GB\\\",\\n    \\\"32.775s\\\",\\n    \\\"16965.654\\\"\\n  ],\\n  [\\n    \\\"nwo\\\",\\n    \\\"90.28b\\\",\\n    \\\"9.67%\\\",\\n    \\\"462.41k\\\",\\n    \\\"151.40GB\\\",\\n    \\\"38.594s\\\",\\n    \\\"12216.896\\\"\\n  ],\\n  [\\n    \\\"omnitek\\\",\\n    \\\"41.76b\\\",\\n    \\\"100.00%\\\",\\n    \\\"257.88k\\\",\\n    \\\"114.70GB\\\",\\n    \\\"30.915s\\\",\\n    \\\"8993.145\\\"\\n  ],\\n  [\\n    \\\"rho-construction\\\",\\n    \\\"1.46b\\\",\\n    \\\"100.00%\\\",\\n    \\\"44.93k\\\",\\n    \\\"85.15GB\\\",\\n    \\\"6.348s\\\",\\n    \\\"2110.548\\\"\\n  ],\\n  [\\n    \\\"zb-def\\\",\\n    \\\"3.05b\\\",\\n    \\\"100.00%\\\",\\n    \\\"40.95k\\\",\\n    \\\"90.40GB\\\",\\n    \\\"14.266s\\\",\\n    \\\"1811.886\\\"\\n  ],\\n  [\\n    \\\"zb-institute\\\",\\n    \\\"2.87b\\\",\\n    \\\"100.00%\\\",\\n    \\\"36.95k\\\",\\n    \\\"100.80GB\\\",\\n    \\\"15.498s\\\",\\n    \\\"1466.356\\\"\\n  ],\\n  [\\n    \\\"alpha-ent\\\",\\n    \\\"1.87b\\\",\\n    \\\"100.00%\\\",\\n    \\\"39.82k\\\",\\n    \\\"111.35GB\\\",\\n    \\\"9.347s\\\",\\n    \\\"1430.359\\\"\\n  ],\\n  [\\n    \\\"global-pharm\\\",\\n    \\\"4.23b\\\",\\n    \\\"100.00%\\\",\\n    \\\"40.73k\\\",\\n    \\\"116.50GB\\\",\\n    \\\"20.652s\\\",\\n    \\\"1398.571\\\"\\n  ],\\n  [\\n    \\\"unitalife\\\",\\n    \\\"2.96b\\\",\\n    \\\"100.00%\\\",\\n    \\\"33.66k\\\",\\n    \\\"97.35GB\\\",\\n    \\\"17.210s\\\",\\n    \\\"1383.234\\\"\\n  ],\\n  [\\n    \\\"nova-med\\\",\\n    \\\"3.25b\\\",\\n    \\\"100.00%\\\",\\n    \\\"34.36k\\\",\\n    \\\"107.80GB\\\",\\n    \\\"18.128s\\\",\\n    \\\"1275.009\\\"\\n  ],\\n  [\\n    \\\"galactic-cyber\\\",\\n    \\\"2.15b\\\",\\n    \\\"100.00%\\\",\\n    \\\"26.00k\\\",\\n    \\\"86.85GB\\\",\\n    \\\"15.560s\\\",\\n    \\\"1197.626\\\"\\n  ],\\n  [\\n    \\\"the-hub\\\",\\n    \\\"510.26m\\\",\\n    \\\"100.00%\\\",\\n    \\\"25.80k\\\",\\n    \\\"86.90GB\\\",\\n    \\\"3.938s\\\",\\n    \\\"1187.742\\\"\\n  ],\\n  [\\n    \\\"deltaone\\\",\\n    \\\"3.71b\\\",\\n    \\\"100.00%\\\",\\n    \\\"34.04k\\\",\\n    \\\"120.05GB\\\",\\n    \\\"20.445s\\\",\\n    \\\"1134.282\\\"\\n  ],\\n  [\\n    \\\"zeus-med\\\",\\n    \\\"3.69b\\\",\\n    \\\"78.20%\\\",\\n    \\\"32.99k\\\",\\n    \\\"121.75GB\\\",\\n    \\\"21.652s\\\",\\n    \\\"1083.857\\\"\\n  ],\\n  [\\n    \\\"fulcrumtech\\\",\\n    \\\"4.76b\\\",\\n    \\\"100.00%\\\",\\n    \\\"31.61k\\\",\\n    \\\"118.20GB\\\",\\n    \\\"29.544s\\\",\\n    \\\"1069.610\\\"\\n  ],\\n  [\\n    \\\"lexo-corp\\\",\\n    \\\"2.24b\\\",\\n    \\\"100.00%\\\",\\n    \\\"30.61k\\\",\\n    \\\"118.30GB\\\",\\n    \\\"14.534s\\\",\\n    \\\"1034.852\\\"\\n  ],\\n  [\\n    \\\"univ-energy\\\",\\n    \\\"3.23b\\\",\\n    \\\"100.00%\\\",\\n    \\\"27.25k\\\",\\n    \\\"114.75GB\\\",\\n    \\\"22.577s\\\",\\n    \\\"949.993\\\"\\n  ],\\n  [\\n    \\\"powerhouse-fitness\\\",\\n    \\\"2.53b\\\",\\n    \\\"100.00%\\\",\\n    \\\"27.37k\\\",\\n    \\\"116.55GB\\\",\\n    \\\"18.487s\\\",\\n    \\\"939.302\\\"\\n  ],\\n  [\\n    \\\"applied-energetics\\\",\\n    \\\"2.51b\\\",\\n    \\\"100.00%\\\",\\n    \\\"25.65k\\\",\\n    \\\"109.55GB\\\",\\n    \\\"18.879s\\\",\\n    \\\"936.465\\\"\\n  ],\\n  [\\n    \\\"stormtech\\\",\\n    \\\"3.32b\\\",\\n    \\\"100.00%\\\",\\n    \\\"24.83k\\\",\\n    \\\"109.50GB\\\",\\n    \\\"26.026s\\\",\\n    \\\"907.059\\\"\\n  ],\\n  [\\n    \\\"icarus\\\",\\n    \\\"2.79b\\\",\\n    \\\"66.89%\\\",\\n    \\\"22.76k\\\",\\n    \\\"102.55GB\\\",\\n    \\\"23.550s\\\",\\n    \\\"887.677\\\"\\n  ],\\n  [\\n    \\\"solaris\\\",\\n    \\\"2.15b\\\",\\n    \\\"100.00%\\\",\\n    \\\"24.18k\\\",\\n    \\\"109.55GB\\\",\\n    \\\"17.265s\\\",\\n    \\\"882.942\\\"\\n  ],\\n  [\\n    \\\"taiyang-digital\\\",\\n    \\\"2.34b\\\",\\n    \\\"100.00%\\\",\\n    \\\"21.18k\\\",\\n    \\\"106.05GB\\\",\\n    \\\"21.039s\\\",\\n    \\\"798.993\\\"\\n  ],\\n  [\\n    \\\"syscore\\\",\\n    \\\"1.40b\\\",\\n    \\\"100.00%\\\",\\n    \\\"20.42k\\\",\\n    \\\"104.35GB\\\",\\n    \\\"12.879s\\\",\\n    \\\"782.709\\\"\\n  ],\\n  [\\n    \\\"titan-labs\\\",\\n    \\\"2.36b\\\",\\n    \\\"100.00%\\\",\\n    \\\"24.58k\\\",\\n    \\\"128.80GB\\\",\\n    \\\"18.530s\\\",\\n    \\\"763.281\\\"\\n  ],\\n  [\\n    \\\"aerocorp\\\",\\n    \\\"3.30b\\\",\\n    \\\"66.91%\\\",\\n    \\\"27.11k\\\",\\n    \\\"149.75GB\\\",\\n    \\\"23.392s\\\",\\n    \\\"724.026\\\"\\n  ],\\n  [\\n    \\\"omega-net\\\",\\n    \\\"185.19m\\\",\\n    \\\"100.00%\\\",\\n    \\\"15.15k\\\",\\n    \\\"85.20GB\\\",\\n    \\\"2.326s\\\",\\n    \\\"711.372\\\"\\n  ],\\n  [\\n    \\\"microdyne\\\",\\n    \\\"1.87b\\\",\\n    \\\"100.00%\\\",\\n    \\\"19.23k\\\",\\n    \\\"111.30GB\\\",\\n    \\\"18.770s\\\",\\n    \\\"690.976\\\"\\n  ],\\n  [\\n    \\\"infocomm\\\",\\n    \\\"2.49b\\\",\\n    \\\"100.00%\\\",\\n    \\\"24.08k\\\",\\n    \\\"149.80GB\\\",\\n    \\\"19.861s\\\",\\n    \\\"643.067\\\"\\n  ],\\n  [\\n    \\\"snap-fitness\\\",\\n    \\\"1.27b\\\",\\n    \\\"100.00%\\\",\\n    \\\"18.84k\\\",\\n    \\\"118.35GB\\\",\\n    \\\"12.852s\\\",\\n    \\\"636.759\\\"\\n  ],\\n  [\\n    \\\"phantasy\\\",\\n    \\\"67.50m\\\",\\n    \\\"100.00%\\\",\\n    \\\"13.18k\\\",\\n    \\\"85.20GB\\\",\\n    \\\"1.018s\\\",\\n    \\\"618.817\\\"\\n  ],\\n  [\\n    \\\"rothman-uni\\\",\\n    \\\"507.67m\\\",\\n    \\\"100.00%\\\",\\n    \\\"16.70k\\\",\\n    \\\"111.40GB\\\",\\n    \\\"5.806s\\\",\\n    \\\"599.677\\\"\\n  ],\\n  [\\n    \\\"netlink\\\",\\n    \\\"773.44m\\\",\\n    \\\"100.00%\\\",\\n    \\\"16.78k\\\",\\n    \\\"113.10GB\\\",\\n    \\\"8.627s\\\",\\n    \\\"593.319\\\"\\n  ],\\n  [\\n    \\\"vitalife\\\",\\n    \\\"2.13b\\\",\\n    \\\"100.00%\\\",\\n    \\\"17.94k\\\",\\n    \\\"121.75GB\\\",\\n    \\\"23.082s\\\",\\n    \\\"589.523\\\"\\n  ],\\n  [\\n    \\\"omnia\\\",\\n    \\\"2.75b\\\",\\n    \\\"100.00%\\\",\\n    \\\"20.89k\\\",\\n    \\\"144.50GB\\\",\\n    \\\"25.132s\\\",\\n    \\\"578.167\\\"\\n  ],\\n  [\\n    \\\"catalyst\\\",\\n    \\\"1.08b\\\",\\n    \\\"100.00%\\\",\\n    \\\"22.60k\\\",\\n    \\\"170.85GB\\\",\\n    \\\"9.140s\\\",\\n    \\\"529.012\\\"\\n  ],\\n  [\\n    \\\"silver-helix\\\",\\n    \\\"126.56m\\\",\\n    \\\"100.00%\\\",\\n    \\\"13.89k\\\",\\n    \\\"106.20GB\\\",\\n    \\\"1.745s\\\",\\n    \\\"523.096\\\"\\n  ],\\n  [\\n    \\\"comptek\\\",\\n    \\\"628.49m\\\",\\n    \\\"100.00%\\\",\\n    \\\"16.43k\\\",\\n    \\\"127.10GB\\\",\\n    \\\"7.525s\\\",\\n    \\\"516.977\\\"\\n  ],\\n  [\\n    \\\"johnson-ortho\\\",\\n    \\\"223.27m\\\",\\n    \\\"100.00%\\\",\\n    \\\"11.51k\\\",\\n    \\\"90.40GB\\\",\\n    \\\"3.830s\\\",\\n    \\\"509.201\\\"\\n  ],\\n  [\\n    \\\"helios\\\",\\n    \\\"1.92b\\\",\\n    \\\"100.00%\\\",\\n    \\\"15.29k\\\",\\n    \\\"128.75GB\\\",\\n    \\\"23.886s\\\",\\n    \\\"475.142\\\"\\n  ],\\n  [\\n    \\\"defcomm\\\",\\n    \\\"2.40b\\\",\\n    \\\"80.98%\\\",\\n    \\\"18.65k\\\",\\n    \\\"160.25GB\\\",\\n    \\\"24.915s\\\",\\n    \\\"465.478\\\"\\n  ],\\n  [\\n    \\\"millenium-fitness\\\",\\n    \\\"703.13m\\\",\\n    \\\"100.00%\\\",\\n    \\\"17.00k\\\",\\n    \\\"148.10GB\\\",\\n    \\\"8.267s\\\",\\n    \\\"459.275\\\"\\n  ],\\n  [\\n    \\\"summit-uni\\\",\\n    \\\"662.03m\\\",\\n    \\\"100.00%\\\",\\n    \\\"13.11k\\\",\\n    \\\"118.35GB\\\",\\n    \\\"9.619s\\\",\\n    \\\"443.204\\\"\\n  ],\\n  [\\n    \\\"max-hardware\\\",\\n    \\\"28.13m\\\",\\n    \\\"100.00%\\\",\\n    \\\"6.98k\\\",\\n    \\\"88.75GB\\\",\\n    \\\"0.745s\\\",\\n    \\\"314.527\\\"\\n  ],\\n  [\\n    \\\"crush-fitness\\\",\\n    \\\"148.71m\\\",\\n    \\\"100.00%\\\",\\n    \\\"8.55k\\\",\\n    \\\"132.45GB\\\",\\n    \\\"3.193s\\\",\\n    \\\"258.203\\\"\\n  ],\\n  [\\n    \\\"iron-gym\\\",\\n    \\\"56.25m\\\",\\n    \\\"100.00%\\\",\\n    \\\"8.38k\\\",\\n    \\\"132.50GB\\\",\\n    \\\"1.290s\\\",\\n    \\\"253.103\\\"\\n  ],\\n  [\\n    \\\"zer0\\\",\\n    \\\"21.09m\\\",\\n    \\\"100.00%\\\",\\n    \\\"4.48k\\\",\\n    \\\"78.20GB\\\",\\n    \\\"0.927s\\\",\\n    \\\"229.379\\\"\\n  ],\\n  [\\n    \\\"aevum-police\\\",\\n    \\\"637.50m\\\",\\n    \\\"100.00%\\\",\\n    \\\"11.46k\\\",\\n    \\\"202.30GB\\\",\\n    \\\"10.850s\\\",\\n    \\\"226.566\\\"\\n  ],\\n  [\\n    \\\"harakiri-sushi\\\",\\n    \\\"11.25m\\\",\\n    \\\"100.00%\\\",\\n    \\\"3.71k\\\",\\n    \\\"73.00GB\\\",\\n    \\\"0.563s\\\",\\n    \\\"203.027\\\"\\n  ],\\n  [\\n    \\\"neo-net\\\",\\n    \\\"14.06m\\\",\\n    \\\"100.00%\\\",\\n    \\\"3.73k\\\",\\n    \\\"111.45GB\\\",\\n    \\\"0.745s\\\",\\n    \\\"133.769\\\"\\n  ],\\n  [\\n    \\\"nectar-net\\\",\\n    \\\"7.73m\\\",\\n    \\\"100.00%\\\",\\n    \\\"2.77k\\\",\\n    \\\"101.00GB\\\",\\n    \\\"0.509s\\\",\\n    \\\"109.540\\\"\\n  ],\\n  [\\n    \\\"hong-fang-tea\\\",\\n    \\\"8.44m\\\",\\n    \\\"100.00%\\\",\\n    \\\"3.03k\\\",\\n    \\\"123.75GB\\\",\\n    \\\"0.518s\\\",\\n    \\\"97.791\\\"\\n  ],\\n  [\\n    \\\"joesguns\\\",\\n    \\\"7.03m\\\",\\n    \\\"100.00%\\\",\\n    \\\"3.06k\\\",\\n    \\\"125.50GB\\\",\\n    \\\"0.427s\\\",\\n    \\\"97.628\\\"\\n  ],\\n  [\\n    \\\"sigma-cosmetics\\\",\\n    \\\"6.47m\\\",\\n    \\\"100.00%\\\",\\n    \\\"3.11k\\\",\\n    \\\"234.00GB\\\",\\n    \\\"0.395s\\\",\\n    \\\"53.167\\\"\\n  ],\\n  [\\n    \\\"foodnstuff\\\",\\n    \\\"5.63m\\\",\\n    \\\"100.00%\\\",\\n    \\\"2.78k\\\",\\n    \\\"447.50GB\\\",\\n    \\\"0.384s\\\",\\n    \\\"24.870\\\"\\n  ],\\n  [\\n    \\\"n00dles\\\",\\n    \\\"196.88k\\\",\\n    \\\"100.00%\\\",\\n    \\\"99.86\\\",\\n    \\\"22.25GB\\\",\\n    \\\"0.382s\\\",\\n    \\\"17.952\\\"\\n  ],\\n  [\\n    \\\"fulcrumassets\\\",\\n    \\\"2.81m\\\",\\n    \\\"9.69%\\\",\\n    \\\"14.93\\\",\\n    \\\"8.62TB\\\",\\n    \\\"37.394s\\\",\\n    \\\"0.007\\\"\\n  ]\\n]\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"28.7.2.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":198,\"hackDifficulty\":198,\"minDifficulty\":66,\"moneyAvailable\":25287031647,\"moneyMax\":1264351582350,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1298,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"3.5.0.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":198,\"hackDifficulty\":198,\"minDifficulty\":66,\"moneyAvailable\":22050042887,\"moneyMax\":1102502144350,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1188,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"25.4.6.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":176,\"hackDifficulty\":176,\"minDifficulty\":59,\"moneyAvailable\":9026517092,\"moneyMax\":451325854600,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":954,\"serverGrowth\":75}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"25.2.2.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":180,\"hackDifficulty\":180,\"minDifficulty\":60,\"moneyAvailable\":17262499246.5,\"moneyMax\":863124962325,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1115,\"serverGrowth\":73}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"8.7.5.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\",\"ecorp\",\"megacorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":198,\"hackDifficulty\":198,\"minDifficulty\":66,\"moneyAvailable\":19682322103,\"moneyMax\":984116105150,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1271,\"serverGrowth\":72}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"10.6.6.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":130,\"hackDifficulty\":130,\"minDifficulty\":43,\"moneyAvailable\":11623642316.5,\"moneyMax\":581182115825,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1048,\"serverGrowth\":63}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"84.8.7.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\",\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":180,\"hackDifficulty\":180,\"minDifficulty\":60,\"moneyAvailable\":6543050008.5,\"moneyMax\":327152500425,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1096,\"serverGrowth\":95}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"27.4.4.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":144,\"hackDifficulty\":144,\"minDifficulty\":48,\"moneyAvailable\":7983054539,\"moneyMax\":399152726950,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1002,\"serverGrowth\":87}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"70.1.1.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":196,\"hackDifficulty\":196,\"minDifficulty\":65,\"moneyAvailable\":12345915329,\"moneyMax\":617295766450,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1121,\"serverGrowth\":98}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"37.4.9.8\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":186,\"hackDifficulty\":186,\"minDifficulty\":62,\"moneyAvailable\":826979101,\"moneyMax\":41348955050,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1169,\"serverGrowth\":99}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"4.0.5.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":198,\"hackDifficulty\":198,\"minDifficulty\":66,\"moneyAvailable\":500000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1432,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"61.5.8.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":156,\"hackDifficulty\":156,\"minDifficulty\":52,\"moneyAvailable\":537860249,\"moneyMax\":26893012450,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1017,\"serverGrowth\":82}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"85.2.8.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":180,\"hackDifficulty\":180,\"minDifficulty\":60,\"moneyAvailable\":420736349,\"moneyMax\":21036817450,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":971,\"serverGrowth\":56}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"81.0.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"univ-energy\",\"microdyne\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":142,\"hackDifficulty\":142,\"minDifficulty\":47,\"moneyAvailable\":378909527,\"moneyMax\":18945476350,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":909,\"serverGrowth\":36}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"25.0.3.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\",\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":188,\"hackDifficulty\":188,\"minDifficulty\":63,\"moneyAvailable\":312449855,\"moneyMax\":15622492750,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":837,\"serverGrowth\":71}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"94.9.8.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\",\"4sigma\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":166,\"hackDifficulty\":166,\"minDifficulty\":55,\"moneyAvailable\":368134814.5,\"moneyMax\":18406740725,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":817,\"serverGrowth\":69}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"39.0.6.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":176,\"hackDifficulty\":176,\"minDifficulty\":59,\"moneyAvailable\":499308026,\"moneyMax\":24965401300,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":903,\"serverGrowth\":89}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"29.4.9.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"infocomm\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":164,\"hackDifficulty\":164,\"minDifficulty\":55,\"moneyAvailable\":550708766,\"moneyMax\":27535438300,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":890,\"serverGrowth\":84}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"13.1.5.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":148,\"hackDifficulty\":148,\"minDifficulty\":49,\"moneyAvailable\":377344345.5,\"moneyMax\":18867217275,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":844,\"serverGrowth\":61}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"42.2.7.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":136,\"hackDifficulty\":136,\"minDifficulty\":45,\"moneyAvailable\":283598709,\"moneyMax\":14179935450,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":820,\"serverGrowth\":71}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"89.4.2.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":148,\"hackDifficulty\":148,\"minDifficulty\":49,\"moneyAvailable\":414871284.5,\"moneyMax\":20743564225,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":948,\"serverGrowth\":72}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"97.0.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"millenium-fitness\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":116,\"hackDifficulty\":116,\"minDifficulty\":39,\"moneyAvailable\":423442844.5,\"moneyMax\":21172142225,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":857,\"serverGrowth\":77}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"52.7.8.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":168,\"hackDifficulty\":168,\"minDifficulty\":56,\"moneyAvailable\":506609495.5,\"moneyMax\":25330474775,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":868,\"serverGrowth\":60}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"80.0.0.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"global-pharm\",\"icarus\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":182,\"hackDifficulty\":182,\"minDifficulty\":61,\"moneyAvailable\":451642015.5,\"moneyMax\":22582100775,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":893,\"serverGrowth\":61}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"27.6.8.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\",\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":116,\"hackDifficulty\":116,\"minDifficulty\":39,\"moneyAvailable\":473823019.5,\"moneyMax\":23691150975,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":816,\"serverGrowth\":66}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"6.4.2.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\",\"stormtech\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":152,\"hackDifficulty\":152,\"minDifficulty\":51,\"moneyAvailable\":443575368,\"moneyMax\":22178768400,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":775,\"serverGrowth\":74}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"65.1.8.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":152,\"hackDifficulty\":152,\"minDifficulty\":51,\"moneyAvailable\":359242845,\"moneyMax\":17962142250,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":834,\"serverGrowth\":74}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"42.3.2.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"global-pharm\",\"defcomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":170,\"hackDifficulty\":170,\"minDifficulty\":57,\"moneyAvailable\":755004790.5,\"moneyMax\":37750239525,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":846,\"serverGrowth\":55}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"23.0.7.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rho-construction\",\"omnia\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":158,\"hackDifficulty\":158,\"minDifficulty\":53,\"moneyAvailable\":846045951,\"moneyMax\":42302297550,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":821,\"serverGrowth\":81}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"28.5.9.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"univ-energy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":148,\"hackDifficulty\":148,\"minDifficulty\":49,\"moneyAvailable\":565895325,\"moneyMax\":28294766250,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":789,\"serverGrowth\":77}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"30.1.1.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":152,\"hackDifficulty\":152,\"minDifficulty\":51,\"moneyAvailable\":698648760,\"moneyMax\":34932438000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":831,\"serverGrowth\":76}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"96.4.5.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"galactic-cyber\",\"univ-energy\",\"solaris\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":148,\"hackDifficulty\":148,\"minDifficulty\":49,\"moneyAvailable\":512019827,\"moneyMax\":25600991350,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":801,\"serverGrowth\":75}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"35.6.6.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"syscore\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":120,\"hackDifficulty\":120,\"minDifficulty\":40,\"moneyAvailable\":381920471.5,\"moneyMax\":19096023575,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":685,\"serverGrowth\":63}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"16.7.7.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-institute\",\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":108,\"hackDifficulty\":108,\"minDifficulty\":36,\"moneyAvailable\":279854529,\"moneyMax\":13992726450,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":500,\"serverGrowth\":46}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"56.0.2.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":136,\"hackDifficulty\":136,\"minDifficulty\":45,\"moneyAvailable\":322782937,\"moneyMax\":16139146850,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":578,\"serverGrowth\":55}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"28.2.1.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"I.I.I.I\",\"aerocorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":154,\"hackDifficulty\":154,\"minDifficulty\":51,\"moneyAvailable\":174664646.5,\"moneyMax\":8733232325,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":450,\"serverGrowth\":42}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"42.7.1.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":98,\"hackDifficulty\":98,\"minDifficulty\":33,\"moneyAvailable\":113205493.5,\"moneyMax\":5660274675,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":384,\"serverGrowth\":36}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"4.4.3.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"crush-fitness\",\"rho-construction\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":156,\"hackDifficulty\":156,\"minDifficulty\":52,\"moneyAvailable\":475055942,\"moneyMax\":23752797100,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":770,\"serverGrowth\":80}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"89.5.5.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":116,\"hackDifficulty\":116,\"minDifficulty\":39,\"moneyAvailable\":121238555.5,\"moneyMax\":6061927775,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":473,\"serverGrowth\":48}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"96.9.5.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\",\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":158,\"hackDifficulty\":158,\"minDifficulty\":53,\"moneyAvailable\":293447851,\"moneyMax\":14672392550,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":613,\"serverGrowth\":64}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"61.8.7.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"comptek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":134,\"hackDifficulty\":134,\"minDifficulty\":45,\"moneyAvailable\":239517432,\"moneyMax\":11975871600,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":414,\"serverGrowth\":38}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"35.6.7.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":91773336,\"moneyMax\":4588666800,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":298,\"serverGrowth\":50}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"94.7.8.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":118,\"hackDifficulty\":118,\"minDifficulty\":39,\"moneyAvailable\":123647104.5,\"moneyMax\":6182355225,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":389,\"serverGrowth\":48}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"92.9.3.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":146,\"hackDifficulty\":146,\"minDifficulty\":49,\"moneyAvailable\":137500000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":414,\"serverGrowth\":54}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"43.5.0.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\",\"rothman-uni\",\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":114,\"hackDifficulty\":114,\"minDifficulty\":38,\"moneyAvailable\":41288194.5,\"moneyMax\":2064409725,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":293,\"serverGrowth\":43}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"91.4.7.9\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":2,\"hackDifficulty\":2,\"minDifficulty\":1,\"moneyAvailable\":35000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"29.0.1.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":1000000,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"68.6.2.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":1150000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"27.4.8.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":1250000,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"28.6.8.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"iron-gym\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":3750000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"28.2.3.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"n00dles\",\"neo-net\",\"silver-helix\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":40,\"minDifficulty\":13,\"moneyAvailable\":1375000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"93.9.7.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nectar-net\",\"the-hub\",\"comptek\",\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":2500000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"65.6.1.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nectar-net\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":22500000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"92.2.8.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":1500000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"16.3.5.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":2000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"21.0.7.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nectar-net\",\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":40,\"minDifficulty\":13,\"moneyAvailable\":12000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"4.1.6.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"iron-gym\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":5000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"1.0.9.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zer0\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":34263164,\"moneyMax\":1713158200,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":184,\"serverGrowth\":32}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"49.2.3.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\",\"zb-institute\",\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":23309720,\"moneyMax\":1165486000,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":244,\"serverGrowth\":30}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"28.2.4.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\",\"zer0\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":10000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"9.5.3.8\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-institute\",\"galactic-cyber\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":125000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":512,\"serverGrowth\":33}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"26.6.8.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":114,\"hackDifficulty\":114,\"minDifficulty\":38,\"moneyAvailable\":450000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1047,\"serverGrowth\":55}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"1.7.0.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":33,\"moneyAvailable\":225000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":753,\"serverGrowth\":55}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"74.5.5.5\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\",\"fulcrumtech\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":538,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"81.0.6.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"netlink\",\"alpha-ent\",\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":357,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"8.7.6.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":202,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"89.3.4.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\",\"b-and-a\",\"blade\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":511,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"45.4.7.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"foodnstuff\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":51,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"67.0.0.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"91.9.3.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":4500,\"serverGrowth\":0}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"CyberSec\",\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{\"map\":\"run map.js\"}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":false}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":false}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":false}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":false}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":false}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":false}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":false}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":true,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":1,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":true,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":true,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-1,\"y\":0,\"opened\":false}}","VersionSave":"10","AllGangsSave":"{\"Slum Snakes\":{\"power\":1017351.7392455328,\"territory\":0.9999999999999968},\"Tetrads\":{\"power\":10807.418202994519,\"territory\":0},\"The Syndicate\":{\"power\":10621.491407480997,\"territory\":0},\"The Dark Army\":{\"power\":10449.634570503396,\"territory\":0},\"Speakers for the Dead\":{\"power\":9817.674932598815,\"territory\":0},\"NiteSec\":{\"power\":10555.06983343362,\"territory\":0},\"The Black Hand\":{\"power\":9499.454386737301,\"territory\":0}}","LastExportBonus":"1644442852320","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}","SaveTimestamp":"1644446861378"}}